---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1004672304334401604": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2572122181750573608": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "2658413227894878119": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "2874511916965227423": {
        "error_kind": "string",
        "string": "HashMap length should shrink to 1 after key collisions during iter_keys_mut."
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "4115449374354845873": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "4792885743450309393": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7001869529102964896": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "8503083277066543196": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "11671323210994517436": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _11",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ]]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32850 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 12 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32838), size_address: Relative(2), offset_address: Relative(3) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(4) }, Mov { destination: Direct(32773), source: Relative(3) }, Call { location: 23 }, Mov { destination: Relative(1), source: Relative(2) }, Call { location: 34 }, Call { location: 38 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32850 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 33 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 26 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 6 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 4 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 3 }, Return, Call { location: 20431 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 0 }, Const { destination: Relative(8), bit_size: Field, value: 0 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(11), source: Relative(10) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Store { destination_pointer: Relative(11), source: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 129 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(13) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, Const { destination: Relative(13), bit_size: Field, value: 18446744073709551616 }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(13) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, Store { destination_pointer: Relative(16), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(15) }, Store { destination_pointer: Relative(18), source: Relative(3) }, Store { destination_pointer: Relative(19), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 181 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(14), location: 20402 }, Jump { location: 184 }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Load { destination: Relative(21), source_pointer: Relative(15) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 193 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(23), size: Relative(24) }, output: HeapArray { pointer: Relative(25), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(17), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(20) }, Const { destination: Relative(14), bit_size: Integer(U1), value: 1 }, Store { destination_pointer: Relative(19), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Cast { destination: Relative(17), source: Relative(15), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(17), bit_size: Field }, Cast { destination: Relative(15), source: Relative(16), bit_size: Integer(U32) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 8 }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 219 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 20291 }, Jump { location: 222 }, Load { destination: Relative(15), source_pointer: Relative(10) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Load { destination: Relative(18), source_pointer: Relative(15) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 230 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, JumpIf { condition: Relative(18), location: 235 }, Call { location: 20440 }, Load { destination: Relative(16), source_pointer: Relative(15) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 241 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, Load { destination: Relative(21), source_pointer: Relative(15) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 255 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(9) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 263 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(24) }, Store { destination_pointer: Relative(25), source: Relative(8) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(8) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(8) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(13) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(30), source: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(8) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(8) }, Store { destination_pointer: Relative(24), source: Relative(28) }, Store { destination_pointer: Relative(25), source: Relative(21) }, Store { destination_pointer: Relative(26), source: Relative(3) }, Store { destination_pointer: Relative(27), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 303 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(18), location: 20262 }, Jump { location: 306 }, Load { destination: Relative(18), source_pointer: Relative(24) }, Load { destination: Relative(19), source_pointer: Relative(25) }, Load { destination: Relative(21), source_pointer: Relative(26) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 315 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(28), size: Relative(29) }, output: HeapArray { pointer: Relative(30), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(24), source: Relative(18) }, Store { destination_pointer: Relative(25), source: Relative(22) }, Store { destination_pointer: Relative(26), source: Relative(21) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, Load { destination: Relative(18), source_pointer: Relative(19) }, Cast { destination: Relative(21), source: Relative(18), bit_size: Integer(U32) }, Cast { destination: Relative(19), source: Relative(21), bit_size: Field }, Cast { destination: Relative(18), source: Relative(19), bit_size: Integer(U32) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 339 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(21), location: 20197 }, Jump { location: 342 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(20) }, JumpIf { condition: Relative(15), location: 346 }, Call { location: 20443 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 73 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 32 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(26), bit_size: Integer(U8), value: 118 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 97 }, Const { destination: Relative(28), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(30), bit_size: Integer(U8), value: 125 }, Const { destination: Relative(31), bit_size: Integer(U8), value: 98 }, Const { destination: Relative(32), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(33), bit_size: Integer(U8), value: 111 }, Const { destination: Relative(34), bit_size: Integer(U8), value: 102 }, Const { destination: Relative(35), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(36), bit_size: Integer(U8), value: 109 }, Const { destination: Relative(37), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(38), bit_size: Integer(U8), value: 121 }, Const { destination: Relative(39), bit_size: Integer(U8), value: 46 }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 49 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(41) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(41) }, Store { destination_pointer: Relative(42), source: Relative(15) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(18) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(19) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(21) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(22) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(23) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(25) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(26) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(27) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(28) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(29) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(30) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(31) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(29) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(22) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(32) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(22) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(25) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(32) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(22) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(30) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(34) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(33) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(21) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(22) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(35) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(19) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(27) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(36) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(37) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(38) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(39) }, Const { destination: Relative(15), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(6), rhs: Relative(16) }, JumpIf { condition: Relative(41), location: 495 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 52 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, Mov { destination: Relative(44), source: Relative(43) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U64), value: 1004672304334401604 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 48 }, Mov { destination: Direct(32771), source: Relative(45) }, Mov { destination: Direct(32772), source: Relative(44) }, Mov { destination: Direct(32773), source: Relative(46) }, Call { location: 23 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 48 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(44), source: Relative(15) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(16) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(43), size: Relative(42) } }, Load { destination: Relative(6), source_pointer: Relative(10) }, Load { destination: Relative(16), source_pointer: Relative(6) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(16) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 502 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(16) }, Load { destination: Relative(6), source_pointer: Relative(9) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 510 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(13) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(4) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, Store { destination_pointer: Relative(42), source: Relative(46) }, Store { destination_pointer: Relative(43), source: Relative(6) }, Store { destination_pointer: Relative(44), source: Relative(3) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 550 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 20168 }, Jump { location: 553 }, Load { destination: Relative(6), source_pointer: Relative(42) }, Load { destination: Relative(16), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(16) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 562 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(46) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(48), size: Relative(49) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(42), source: Relative(6) }, Store { destination_pointer: Relative(43), source: Relative(46) }, Store { destination_pointer: Relative(44), source: Relative(41) }, Store { destination_pointer: Relative(45), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(16) }, Cast { destination: Relative(41), source: Relative(6), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(41), bit_size: Field }, Cast { destination: Relative(6), source: Relative(16), bit_size: Integer(U32) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 586 }, BinaryIntOp { destination: Relative(41), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(41), location: 20081 }, Jump { location: 589 }, Load { destination: Relative(6), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(6) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(11) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 597 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 602 }, Call { location: 20446 }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Load { destination: Relative(11), source_pointer: Relative(6) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(11) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 611 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 619 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Relative(8) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(8) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(8) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(13) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Mov { destination: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(49), source: Relative(4) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(8) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(8) }, Store { destination_pointer: Relative(43), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(11) }, Store { destination_pointer: Relative(45), source: Relative(3) }, Store { destination_pointer: Relative(46), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 659 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 20052 }, Jump { location: 662 }, Load { destination: Relative(11), source_pointer: Relative(43) }, Load { destination: Relative(16), source_pointer: Relative(44) }, Load { destination: Relative(41), source_pointer: Relative(45) }, Load { destination: Relative(42), source_pointer: Relative(16) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(42) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 671 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(42) }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(42), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(48), size: Relative(49) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(43), source: Relative(11) }, Store { destination_pointer: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(45), source: Relative(41) }, Store { destination_pointer: Relative(46), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(16) }, Cast { destination: Relative(41), source: Relative(11), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(41), bit_size: Field }, Cast { destination: Relative(11), source: Relative(16), bit_size: Integer(U32) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 695 }, BinaryIntOp { destination: Relative(41), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(41), location: 19992 }, Jump { location: 698 }, Load { destination: Relative(6), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 702 }, Call { location: 20449 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, Load { destination: Relative(6), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, Load { destination: Relative(10), source_pointer: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(41), source: Relative(16) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(7) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Mov { destination: Relative(41), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(12) }, Load { destination: Relative(42), source_pointer: Relative(11) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 787 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(42) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 795 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(13) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 24 }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 813 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(42), location: 19743 }, Jump { location: 816 }, Load { destination: Relative(11), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(41) }, Load { destination: Relative(41), source_pointer: Relative(11) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 824 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(41) }, Const { destination: Relative(41), bit_size: Integer(U8), value: 72 }, Const { destination: Relative(43), bit_size: Integer(U8), value: 77 }, Const { destination: Relative(45), bit_size: Integer(U8), value: 112 }, Const { destination: Relative(46), bit_size: Integer(U8), value: 49 }, Const { destination: Relative(47), bit_size: Integer(U8), value: 44 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(41) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(27) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(19) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(35) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(43) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(27) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(28) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(20) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(32) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(35) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(36) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(29) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(19) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(31) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(20) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(46) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(47) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(32) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(33) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(25) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(28) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(20) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(30) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(39) }, Const { destination: Relative(41), bit_size: Field, value: 1 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, JumpIf { condition: Relative(43), location: 931 }, Const { destination: Relative(49), bit_size: Integer(U32), value: 39 }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 39 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(50) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 4792885743450309393 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 36 }, Mov { destination: Direct(32771), source: Relative(52) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(53) }, Call { location: 23 }, Const { destination: Relative(52), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(52) }, Store { destination_pointer: Relative(51), source: Relative(41) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(16) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(50), size: Relative(49) } }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, Load { destination: Relative(48), source_pointer: Relative(11) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 943 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(48) }, Load { destination: Relative(48), source_pointer: Relative(9) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 951 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(8) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(8) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(8) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(6) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(55) }, Store { destination_pointer: Relative(52), source: Relative(48) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 991 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(42), location: 19714 }, Jump { location: 994 }, Load { destination: Relative(42), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(53) }, Load { destination: Relative(50), source_pointer: Relative(48) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(50) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 1003 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(56), size: Relative(57) }, output: HeapArray { pointer: Relative(58), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(42) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Store { destination_pointer: Relative(53), source: Relative(49) }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Load { destination: Relative(42), source_pointer: Relative(48) }, Cast { destination: Relative(49), source: Relative(42), bit_size: Integer(U32) }, Cast { destination: Relative(48), source: Relative(49), bit_size: Field }, Cast { destination: Relative(42), source: Relative(48), bit_size: Integer(U32) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1027 }, BinaryIntOp { destination: Relative(49), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(49), location: 19649 }, Jump { location: 1030 }, Load { destination: Relative(6), source_pointer: Relative(16) }, Load { destination: Relative(11), source_pointer: Relative(43) }, JumpIf { condition: Relative(6), location: 1034 }, Call { location: 20443 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(6), location: 1058 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 52 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, Mov { destination: Relative(43), source: Relative(42) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U64), value: 1004672304334401604 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 48 }, Mov { destination: Direct(32771), source: Relative(48) }, Mov { destination: Direct(32772), source: Relative(43) }, Mov { destination: Direct(32773), source: Relative(49) }, Call { location: 23 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 48 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(48) }, Store { destination_pointer: Relative(43), source: Relative(15) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(11) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(42), size: Relative(16) } }, Const { destination: Relative(6), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, Load { destination: Relative(10), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, Load { destination: Relative(11), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(40) }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(7) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(40) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(12) }, Load { destination: Relative(48), source_pointer: Relative(40) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1146 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(48) }, Load { destination: Relative(40), source_pointer: Relative(9) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1154 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(40) }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(55) }, IndirectConst { destination_pointer: Relative(54), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Mov { destination: Relative(56), source: Relative(55) }, Store { destination_pointer: Relative(56), source: Relative(10) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, Store { destination_pointer: Relative(50), source: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(40) }, Store { destination_pointer: Relative(52), source: Relative(3) }, Store { destination_pointer: Relative(53), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1194 }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(40), location: 19620 }, Jump { location: 1197 }, Load { destination: Relative(40), source_pointer: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(52) }, Load { destination: Relative(54), source_pointer: Relative(48) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 1206 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(54) }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(54), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(56), size: Relative(57) }, output: HeapArray { pointer: Relative(58), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(50), source: Relative(40) }, Store { destination_pointer: Relative(51), source: Relative(54) }, Store { destination_pointer: Relative(52), source: Relative(49) }, Store { destination_pointer: Relative(53), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Load { destination: Relative(40), source_pointer: Relative(48) }, Cast { destination: Relative(49), source: Relative(40), bit_size: Integer(U32) }, Cast { destination: Relative(48), source: Relative(49), bit_size: Field }, Cast { destination: Relative(40), source: Relative(48), bit_size: Integer(U32) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1230 }, BinaryIntOp { destination: Relative(49), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(49), location: 19509 }, Jump { location: 1233 }, Load { destination: Relative(11), source_pointer: Relative(42) }, Load { destination: Relative(40), source_pointer: Relative(43) }, Load { destination: Relative(48), source_pointer: Relative(11) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1241 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(40), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(40) }, JumpIf { condition: Relative(50), location: 1248 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, JumpIf { condition: Relative(40), location: 1251 }, Call { location: 20455 }, Load { destination: Relative(40), source_pointer: Relative(11) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1257 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(40) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(11) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1265 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(55) }, IndirectConst { destination_pointer: Relative(54), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Mov { destination: Relative(56), source: Relative(55) }, Store { destination_pointer: Relative(56), source: Relative(10) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, Store { destination_pointer: Relative(50), source: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(11) }, Store { destination_pointer: Relative(52), source: Relative(3) }, Store { destination_pointer: Relative(53), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1305 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 19480 }, Jump { location: 1308 }, Load { destination: Relative(11), source_pointer: Relative(50) }, Load { destination: Relative(40), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(40) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(49) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1317 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(49) }, Mov { destination: Relative(49), source: Direct(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(55) }, IndirectConst { destination_pointer: Relative(49), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(55), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(50), source: Relative(11) }, Store { destination_pointer: Relative(51), source: Relative(49) }, Store { destination_pointer: Relative(52), source: Relative(48) }, Store { destination_pointer: Relative(53), source: Relative(14) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(40) }, Cast { destination: Relative(48), source: Relative(11), bit_size: Integer(U32) }, Cast { destination: Relative(40), source: Relative(48), bit_size: Field }, Cast { destination: Relative(11), source: Relative(40), bit_size: Integer(U32) }, Mov { destination: Relative(40), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1341 }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 19369 }, Jump { location: 1344 }, Load { destination: Relative(11), source_pointer: Relative(42) }, Load { destination: Relative(40), source_pointer: Relative(43) }, Load { destination: Relative(42), source_pointer: Relative(11) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1352 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, JumpIf { condition: Relative(42), location: 1357 }, Call { location: 20458 }, Mov { destination: Relative(40), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, Load { destination: Relative(48), source_pointer: Relative(11) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1369 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(48) }, Load { destination: Relative(48), source_pointer: Relative(9) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 1377 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(8) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(8) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(8) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(10) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(55) }, Store { destination_pointer: Relative(52), source: Relative(48) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1417 }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(43), location: 19340 }, Jump { location: 1420 }, Load { destination: Relative(43), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(53) }, Load { destination: Relative(50), source_pointer: Relative(48) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(50) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 1429 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(56), size: Relative(57) }, output: HeapArray { pointer: Relative(58), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(43) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Store { destination_pointer: Relative(53), source: Relative(49) }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Load { destination: Relative(43), source_pointer: Relative(48) }, Cast { destination: Relative(49), source: Relative(43), bit_size: Integer(U32) }, Cast { destination: Relative(48), source: Relative(49), bit_size: Field }, Cast { destination: Relative(43), source: Relative(48), bit_size: Integer(U32) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1453 }, BinaryIntOp { destination: Relative(49), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(49), location: 19275 }, Jump { location: 1456 }, Load { destination: Relative(10), source_pointer: Relative(40) }, Load { destination: Relative(11), source_pointer: Relative(42) }, JumpIf { condition: Relative(10), location: 1460 }, Call { location: 20443 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 69 }, Const { destination: Relative(40), bit_size: Integer(U8), value: 120 }, Const { destination: Relative(42), bit_size: Integer(U8), value: 99 }, Const { destination: Relative(43), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(48), bit_size: Integer(U8), value: 95 }, Mov { destination: Relative(49), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(49), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(10) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(40) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(45) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(20) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(42) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(22) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(20) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(23) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(24) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(25) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(18) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(20) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(43) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(48) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(26) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(27) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(28) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(29) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(20) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(30) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(47) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(24) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(31) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(29) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(22) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(24) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(32) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(33) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(22) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(24) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(25) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(32) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(33) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(22) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(30) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(39) }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(11), rhs: Relative(16) }, JumpIf { condition: Relative(10), location: 1566 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 40 }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, Mov { destination: Relative(45), source: Relative(43) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U64), value: 7001869529102964896 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 36 }, Mov { destination: Direct(32771), source: Relative(50) }, Mov { destination: Direct(32772), source: Relative(45) }, Mov { destination: Direct(32773), source: Relative(51) }, Call { location: 23 }, Const { destination: Relative(50), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(50) }, Store { destination_pointer: Relative(45), source: Relative(15) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(16) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(11) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(43), size: Relative(40) } }, Load { destination: Relative(10), source_pointer: Relative(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1572 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(16) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(10) }, Mov { destination: Relative(40), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(12) }, Load { destination: Relative(43), source_pointer: Relative(10) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1655 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(43) }, Load { destination: Relative(10), source_pointer: Relative(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(10) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1663 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(10) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 1671 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1688 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(11), location: 19018 }, Jump { location: 1691 }, Load { destination: Relative(10), source_pointer: Relative(16) }, Load { destination: Relative(11), source_pointer: Relative(40) }, Load { destination: Relative(43), source_pointer: Relative(10) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1699 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(43) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Direct(32835) }, JumpIf { condition: Relative(10), location: 1704 }, Call { location: 20461 }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 1710 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(49), source: Relative(43) }, Store { destination_pointer: Relative(49), source: Relative(8) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(8) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(8) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(13) }, Const { destination: Relative(43), bit_size: Integer(U8), value: 78 }, Const { destination: Relative(49), bit_size: Integer(U8), value: 105 }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(43) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(33) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(34) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(33) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(29) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(49) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(19) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(38) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(25) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(38) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(48) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(38) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(39) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 1804 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(11), location: 18800 }, Jump { location: 1807 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(11) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(10) }, Store { destination_pointer: Relative(40), source: Relative(12) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(11) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(40) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(40) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Mov { destination: Relative(40), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(12) }, Load { destination: Relative(45), source_pointer: Relative(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2034 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(45) }, Load { destination: Relative(45), source_pointer: Relative(9) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 2042 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(52) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(13) }, Load { destination: Relative(52), source_pointer: Relative(9) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 2063 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(52) }, Load { destination: Relative(52), source_pointer: Relative(45) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 2071 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 2075 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(50), location: 18297 }, Jump { location: 2078 }, Load { destination: Relative(1), source_pointer: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(45), source_pointer: Relative(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2086 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(45) }, Load { destination: Relative(45), source_pointer: Relative(40) }, Load { destination: Relative(51), source_pointer: Relative(16) }, Load { destination: Relative(52), source_pointer: Relative(45) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 2096 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(7) }, Load { destination: Relative(54), source_pointer: Relative(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 2107 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(54) }, Load { destination: Relative(54), source_pointer: Relative(45) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 2115 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(51) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(13) }, JumpIf { condition: Relative(54), location: 2133 }, Jump { location: 2148 }, Store { destination_pointer: Relative(52), source: Relative(14) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 2140 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(51) }, Mov { destination: Relative(50), source: Relative(12) }, Jump { location: 2144 }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 18073 }, Jump { location: 2147 }, Jump { location: 2148 }, Load { destination: Relative(45), source_pointer: Relative(52) }, JumpIf { condition: Relative(45), location: 2151 }, Call { location: 20464 }, Load { destination: Relative(45), source_pointer: Relative(40) }, Load { destination: Relative(50), source_pointer: Relative(45) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 2158 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(50) }, Load { destination: Relative(45), source_pointer: Relative(9) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 2166 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(4) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(45), source: Relative(55) }, Store { destination_pointer: Relative(52), source: Relative(2) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2193 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 18044 }, Jump { location: 2196 }, Load { destination: Relative(2), source_pointer: Relative(45) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(50) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 2205 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(55) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(57), size: Relative(58) }, output: HeapArray { pointer: Relative(59), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(45), source: Relative(2) }, Store { destination_pointer: Relative(52), source: Relative(55) }, Store { destination_pointer: Relative(53), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(45) }, Cast { destination: Relative(50), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(45), source: Relative(50), bit_size: Field }, Cast { destination: Relative(2), source: Relative(45), bit_size: Integer(U32) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2229 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(50), location: 17957 }, Jump { location: 2232 }, Load { destination: Relative(1), source_pointer: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(40) }, Load { destination: Relative(10), source_pointer: Relative(16) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(16) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2245 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(16) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2253 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(10) }, Store { destination_pointer: Relative(50), source: Relative(8) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(8) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(8) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(13) }, JumpIf { condition: Relative(16), location: 2271 }, Jump { location: 2286 }, Store { destination_pointer: Relative(11), source: Relative(14) }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(16) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2278 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(10), source: Relative(12) }, Jump { location: 2282 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(17) }, JumpIf { condition: Relative(16), location: 17733 }, Jump { location: 2285 }, Jump { location: 2286 }, Load { destination: Relative(4), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 2290 }, Call { location: 20467 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(11), source: Relative(10) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(4) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(12) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(16) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2371 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2379 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Field, value: 5 }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Mov { destination: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(55), source: Relative(52) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(53) }, Store { destination_pointer: Relative(45), source: Relative(2) }, Store { destination_pointer: Relative(50), source: Relative(3) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2407 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 17704 }, Jump { location: 2410 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(45) }, Load { destination: Relative(40), source_pointer: Relative(50) }, Load { destination: Relative(53), source_pointer: Relative(16) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 2419 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(55) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(55), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(45), source: Relative(53) }, Store { destination_pointer: Relative(50), source: Relative(40) }, Store { destination_pointer: Relative(51), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(16), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(16), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Const { destination: Relative(16), bit_size: Field, value: 11 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2444 }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(40), location: 17593 }, Jump { location: 2447 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(40), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(40) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2455 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(40), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(4) }, JumpIf { condition: Relative(50), location: 2462 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(40), rhs: Relative(44) }, JumpIf { condition: Relative(4), location: 2465 }, Call { location: 20455 }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(4) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2471 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2479 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(15) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(50), source: Relative(55) }, Store { destination_pointer: Relative(51), source: Relative(2) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2519 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 17564 }, Jump { location: 2522 }, Load { destination: Relative(2), source_pointer: Relative(50) }, Load { destination: Relative(4), source_pointer: Relative(51) }, Load { destination: Relative(40), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(4) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(45) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 2531 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(56), size: Relative(57) }, output: HeapArray { pointer: Relative(58), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(50), source: Relative(2) }, Store { destination_pointer: Relative(51), source: Relative(45) }, Store { destination_pointer: Relative(53), source: Relative(40) }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(40), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(40), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Const { destination: Relative(40), bit_size: Field, value: 13 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2556 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(45), location: 17453 }, Jump { location: 2559 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(45), source_pointer: Relative(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2567 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(45), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(4) }, JumpIf { condition: Relative(51), location: 2574 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, JumpIf { condition: Relative(4), location: 2577 }, Call { location: 20455 }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(4) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2583 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2591 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(51) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(56), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Mov { destination: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(58), source: Relative(16) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(8) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(53), source: Relative(2) }, Store { destination_pointer: Relative(54), source: Relative(3) }, Store { destination_pointer: Relative(55), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2631 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 17424 }, Jump { location: 2634 }, Load { destination: Relative(2), source_pointer: Relative(51) }, Load { destination: Relative(4), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(54) }, Load { destination: Relative(50), source_pointer: Relative(4) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(50) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 2643 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(57), size: Relative(58) }, output: HeapArray { pointer: Relative(59), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(2) }, Store { destination_pointer: Relative(53), source: Relative(50) }, Store { destination_pointer: Relative(54), source: Relative(45) }, Store { destination_pointer: Relative(55), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(45), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(45), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2667 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(45), location: 17313 }, Jump { location: 2670 }, Const { destination: Relative(2), bit_size: Field, value: 55 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2673 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(4), location: 17261 }, Jump { location: 2676 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2684 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 2689 }, Call { location: 20470 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(10) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2698 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(10) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2706 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(51) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(56), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Mov { destination: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(58), source: Relative(15) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(8) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(53), source: Relative(10) }, Store { destination_pointer: Relative(54), source: Relative(3) }, Store { destination_pointer: Relative(55), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2746 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(10), location: 17232 }, Jump { location: 2749 }, Load { destination: Relative(10), source_pointer: Relative(51) }, Load { destination: Relative(11), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(54) }, Load { destination: Relative(50), source_pointer: Relative(11) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(50) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 2758 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(57), size: Relative(58) }, output: HeapArray { pointer: Relative(59), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(10) }, Store { destination_pointer: Relative(53), source: Relative(50) }, Store { destination_pointer: Relative(54), source: Relative(45) }, Store { destination_pointer: Relative(55), source: Relative(14) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Load { destination: Relative(10), source_pointer: Relative(11) }, Cast { destination: Relative(45), source: Relative(10), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(45), bit_size: Field }, Cast { destination: Relative(10), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2782 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(45), location: 17172 }, Jump { location: 2785 }, Load { destination: Relative(2), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(4), location: 2789 }, Call { location: 20473 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(4) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(11) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2870 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2878 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(15) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(50), source: Relative(55) }, Store { destination_pointer: Relative(51), source: Relative(2) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2918 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 17143 }, Jump { location: 2921 }, Load { destination: Relative(2), source_pointer: Relative(50) }, Load { destination: Relative(11), source_pointer: Relative(51) }, Load { destination: Relative(45), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(11) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 2930 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(55) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(57), size: Relative(58) }, output: HeapArray { pointer: Relative(59), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(50), source: Relative(2) }, Store { destination_pointer: Relative(51), source: Relative(55) }, Store { destination_pointer: Relative(53), source: Relative(45) }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(45), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(45), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Const { destination: Relative(45), bit_size: Field, value: 3 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 2955 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(50), location: 17032 }, Jump { location: 2958 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 2966 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(11) }, JumpIf { condition: Relative(53), location: 2973 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(44) }, JumpIf { condition: Relative(11), location: 2976 }, Call { location: 20455 }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(11) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 2982 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 2990 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(13) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Mov { destination: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(59), source: Relative(52) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, Store { destination_pointer: Relative(53), source: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(2) }, Store { destination_pointer: Relative(55), source: Relative(3) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3030 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 17003 }, Jump { location: 3033 }, Load { destination: Relative(2), source_pointer: Relative(53) }, Load { destination: Relative(11), source_pointer: Relative(54) }, Load { destination: Relative(50), source_pointer: Relative(55) }, Load { destination: Relative(51), source_pointer: Relative(11) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(51) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 3042 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(58), size: Relative(59) }, output: HeapArray { pointer: Relative(60), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(53), source: Relative(2) }, Store { destination_pointer: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(50), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(50), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Const { destination: Relative(50), bit_size: Field, value: 7 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3067 }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 16892 }, Jump { location: 3070 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 3078 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(11) }, JumpIf { condition: Relative(54), location: 3085 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, JumpIf { condition: Relative(11), location: 3088 }, Call { location: 20455 }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(11) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 3094 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 3102 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(13) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(58), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Mov { destination: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(60), source: Relative(16) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(55), source: Relative(2) }, Store { destination_pointer: Relative(56), source: Relative(3) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3142 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 16863 }, Jump { location: 3145 }, Load { destination: Relative(2), source_pointer: Relative(54) }, Load { destination: Relative(11), source_pointer: Relative(55) }, Load { destination: Relative(51), source_pointer: Relative(56) }, Load { destination: Relative(53), source_pointer: Relative(11) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(53) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 3154 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(59), size: Relative(60) }, output: HeapArray { pointer: Relative(61), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(54), source: Relative(2) }, Store { destination_pointer: Relative(55), source: Relative(53) }, Store { destination_pointer: Relative(56), source: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(14) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(51), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(51), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3178 }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 16752 }, Jump { location: 3181 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 3189 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Mov { destination: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(8) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(12) }, Load { destination: Relative(55), source_pointer: Relative(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 3224 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(55) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3228 }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(53), location: 16714 }, Jump { location: 3231 }, Load { destination: Relative(2), source_pointer: Relative(54) }, Load { destination: Relative(53), source_pointer: Relative(51) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 3239 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(51) }, Const { destination: Relative(51), bit_size: Integer(U8), value: 65 }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 80 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(51) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(33) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(29) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(22) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(33) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(34) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(26) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(27) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(28) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(49) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(23) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(28) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(22) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(19) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(19) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(35) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(33) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(29) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(28) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(23) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(35) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(27) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(26) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(31) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(25) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(19) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(28) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(34) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(48) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(28) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(30) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(22) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(49) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(19) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(47) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(31) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(29) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(22) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(32) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(33) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(22) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(24) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(25) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(37) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(38) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(19) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(48) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(28) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(20) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(30) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(39) }, Load { destination: Relative(56), source_pointer: Relative(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 3411 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(11) }, JumpIf { condition: Relative(56), location: 3437 }, Const { destination: Relative(58), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(59), source: Direct(1) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(60) }, Mov { destination: Relative(60), source: Relative(59) }, IndirectConst { destination_pointer: Relative(60), bit_size: Integer(U64), value: 8503083277066543196 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(61) }, Mov { destination: Direct(32772), source: Relative(60) }, Mov { destination: Direct(32773), source: Relative(62) }, Call { location: 23 }, Const { destination: Relative(61), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(61) }, Store { destination_pointer: Relative(60), source: Relative(15) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(11) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(53) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(59), size: Relative(58) } }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(11) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 3443 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(53) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3454 }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(53), location: 16680 }, Jump { location: 3457 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 3464 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(56) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(53) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(53) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(54) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(12) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(5) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3493 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(2), location: 3496 }, Jump { location: 3682 }, Load { destination: Relative(2), source_pointer: Relative(53) }, Load { destination: Relative(11), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(56), location: 3681 }, Jump { location: 3501 }, Load { destination: Relative(56), source_pointer: Relative(11) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 3507 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(56) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, JumpIf { condition: Relative(56), location: 3512 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(11) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20479 }, Mov { destination: Relative(58), source: Direct(32774) }, Mov { destination: Relative(61), source: Direct(32775) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Load { destination: Relative(60), source_pointer: Relative(61) }, Load { destination: Relative(2), source_pointer: Relative(58) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 3528 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(2) }, Store { destination_pointer: Relative(53), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(58) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(59), rhs: Relative(2) }, JumpIf { condition: Relative(56), location: 3536 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(60), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(56), location: 3679 }, Jump { location: 3540 }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(59) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(60), rhs: Direct(32837) }, Mov { destination: Relative(11), source: Relative(59) }, Jump { location: 3546 }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(60) }, JumpIf { condition: Relative(58), location: 3633 }, Jump { location: 3549 }, Load { destination: Relative(11), source_pointer: Relative(56) }, Load { destination: Relative(56), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, JumpIf { condition: Relative(58), location: 3554 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(11) }, Load { destination: Relative(58), source_pointer: Relative(62) }, JumpIf { condition: Relative(57), location: 3559 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(60) }, Load { destination: Relative(57), source_pointer: Relative(62) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(11) }, Store { destination_pointer: Relative(63), source: Relative(57) }, Mov { destination: Direct(32771), source: Relative(61) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(60) }, Store { destination_pointer: Relative(62), source: Relative(58) }, Store { destination_pointer: Relative(9), source: Relative(56) }, Load { destination: Relative(56), source_pointer: Relative(53) }, Load { destination: Relative(57), source_pointer: Relative(54) }, Load { destination: Relative(58), source_pointer: Relative(57) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(58) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 3585 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(62), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(58) }, JumpIf { condition: Relative(62), location: 3591 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(56) }, Mov { destination: Direct(32772), source: Relative(57) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(63), source: Direct(32774) }, Mov { destination: Relative(64), source: Direct(32775) }, Store { destination_pointer: Relative(64), source: Relative(58) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(60) }, Store { destination_pointer: Relative(53), source: Relative(62) }, Store { destination_pointer: Relative(54), source: Relative(63) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, JumpIf { condition: Relative(56), location: 3606 }, Jump { location: 3631 }, Load { destination: Relative(56), source_pointer: Relative(63) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 3612 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, JumpIf { condition: Relative(58), location: 3618 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(62), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(62) }, Mov { destination: Direct(32772), source: Relative(63) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(58), source: Direct(32774) }, Mov { destination: Relative(60), source: Direct(32775) }, Store { destination_pointer: Relative(60), source: Relative(59) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(56) }, Store { destination_pointer: Relative(53), source: Relative(11) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Jump { location: 3631 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 3493 }, Load { destination: Relative(58), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, JumpIf { condition: Relative(61), location: 3637 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(11) }, Load { destination: Relative(61), source_pointer: Relative(63) }, JumpIf { condition: Relative(57), location: 3642 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(60) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryFieldOp { destination: Relative(63), op: LessThan, lhs: Relative(61), rhs: Relative(62) }, JumpIf { condition: Relative(63), location: 3648 }, Jump { location: 3676 }, Load { destination: Relative(62), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(63), op: LessThan, bit_size: U32, lhs: Relative(62), rhs: Direct(32837) }, JumpIf { condition: Relative(63), location: 3652 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(64), source: Direct(32773) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(62) }, Store { destination_pointer: Relative(66), source: Relative(61) }, Mov { destination: Direct(32771), source: Relative(64) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(11) }, Store { destination_pointer: Relative(65), source: Relative(63) }, Store { destination_pointer: Relative(9), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(3) }, BinaryIntOp { destination: Relative(61), op: LessThanEquals, bit_size: U32, lhs: Relative(62), rhs: Relative(58) }, JumpIf { condition: Relative(61), location: 3674 }, Call { location: 20515 }, Store { destination_pointer: Relative(56), source: Relative(58) }, Jump { location: 3676 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(58) }, Jump { location: 3546 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 3493 }, Jump { location: 3682 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Load { destination: Relative(53), source_pointer: Relative(9) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 3691 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(12) }, Load { destination: Relative(57), source_pointer: Relative(9) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 3726 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(57) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3730 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 16642 }, Jump { location: 3733 }, Load { destination: Relative(9), source_pointer: Relative(56) }, Load { destination: Relative(54), source_pointer: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(9) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(53) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 3741 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Mov { destination: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(58), source: Relative(51) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(36) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(34) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(26) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(27) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(49) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(23) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(36) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(35) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(23) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(35) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(27) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(26) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(31) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(25) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(34) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(48) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(30) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(49) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(36) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(47) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(31) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(32) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(25) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(26) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(27) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(48) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(30) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(39) }, Load { destination: Relative(57), source_pointer: Relative(9) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 3916 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(11) }, JumpIf { condition: Relative(57), location: 3942 }, Const { destination: Relative(59), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(60), source: Direct(1) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(61) }, Mov { destination: Relative(61), source: Relative(60) }, IndirectConst { destination_pointer: Relative(61), bit_size: Integer(U64), value: 11671323210994517436 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(62) }, Mov { destination: Direct(32772), source: Relative(61) }, Mov { destination: Direct(32773), source: Relative(63) }, Call { location: 23 }, Const { destination: Relative(62), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(62) }, Store { destination_pointer: Relative(61), source: Relative(15) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Store { destination_pointer: Relative(61), source: Relative(11) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Store { destination_pointer: Relative(61), source: Relative(54) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(60), size: Relative(59) } }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(59), source: Relative(57) }, Store { destination_pointer: Relative(59), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(12) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(54) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 3962 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 16608 }, Jump { location: 3965 }, Load { destination: Relative(9), source_pointer: Relative(57) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(11) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 3972 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(9) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(58), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(58) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(56) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(57) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(12) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(5) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(3) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(9) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4001 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(9), location: 4004 }, Jump { location: 4190 }, Load { destination: Relative(9), source_pointer: Relative(56) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, JumpIf { condition: Relative(58), location: 4189 }, Jump { location: 4009 }, Load { destination: Relative(58), source_pointer: Relative(54) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 4015 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(9) }, JumpIf { condition: Relative(58), location: 4020 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(58), op: Sub, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(54) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20479 }, Mov { destination: Relative(60), source: Direct(32774) }, Mov { destination: Relative(63), source: Direct(32775) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Load { destination: Relative(62), source_pointer: Relative(63) }, Load { destination: Relative(9), source_pointer: Relative(60) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(9) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 4036 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(9) }, Store { destination_pointer: Relative(56), source: Relative(58) }, Store { destination_pointer: Relative(57), source: Relative(60) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(61), rhs: Relative(9) }, JumpIf { condition: Relative(58), location: 4044 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(62), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(58), location: 4187 }, Jump { location: 4048 }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(61) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(62), rhs: Direct(32837) }, Mov { destination: Relative(54), source: Relative(61) }, Jump { location: 4054 }, BinaryIntOp { destination: Relative(60), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(62) }, JumpIf { condition: Relative(60), location: 4141 }, Jump { location: 4057 }, Load { destination: Relative(54), source_pointer: Relative(58) }, Load { destination: Relative(58), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(60), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, JumpIf { condition: Relative(60), location: 4062 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(54) }, Load { destination: Relative(60), source_pointer: Relative(64) }, JumpIf { condition: Relative(59), location: 4067 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(62) }, Load { destination: Relative(59), source_pointer: Relative(64) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(63), source: Direct(32773) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(54) }, Store { destination_pointer: Relative(65), source: Relative(59) }, Mov { destination: Direct(32771), source: Relative(63) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(62) }, Store { destination_pointer: Relative(64), source: Relative(60) }, Store { destination_pointer: Relative(11), source: Relative(58) }, Load { destination: Relative(58), source_pointer: Relative(56) }, Load { destination: Relative(59), source_pointer: Relative(57) }, Load { destination: Relative(60), source_pointer: Relative(59) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(64), op: Equals, bit_size: U32, lhs: Relative(63), rhs: Relative(60) }, Not { destination: Relative(64), source: Relative(64), bit_size: U1 }, JumpIf { condition: Relative(64), location: 4093 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(64), op: LessThanEquals, bit_size: U32, lhs: Relative(54), rhs: Relative(60) }, JumpIf { condition: Relative(64), location: 4099 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(58) }, Mov { destination: Direct(32772), source: Relative(59) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(65), source: Direct(32774) }, Mov { destination: Relative(66), source: Direct(32775) }, Store { destination_pointer: Relative(66), source: Relative(60) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, Store { destination_pointer: Relative(66), source: Relative(62) }, Store { destination_pointer: Relative(56), source: Relative(64) }, Store { destination_pointer: Relative(57), source: Relative(65) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(54) }, JumpIf { condition: Relative(58), location: 4114 }, Jump { location: 4139 }, Load { destination: Relative(58), source_pointer: Relative(65) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 4120 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(65), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(60), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(54) }, JumpIf { condition: Relative(60), location: 4126 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(64) }, Mov { destination: Direct(32772), source: Relative(65) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(60), source: Direct(32774) }, Mov { destination: Relative(62), source: Direct(32775) }, Store { destination_pointer: Relative(62), source: Relative(61) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(62), rhs: Direct(2) }, Store { destination_pointer: Relative(62), source: Relative(58) }, Store { destination_pointer: Relative(56), source: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(60) }, Jump { location: 4139 }, Mov { destination: Relative(1), source: Relative(9) }, Jump { location: 4001 }, Load { destination: Relative(60), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(63), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, JumpIf { condition: Relative(63), location: 4145 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(54) }, Load { destination: Relative(63), source_pointer: Relative(65) }, JumpIf { condition: Relative(59), location: 4150 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(62) }, Load { destination: Relative(64), source_pointer: Relative(66) }, BinaryFieldOp { destination: Relative(65), op: LessThan, lhs: Relative(63), rhs: Relative(64) }, JumpIf { condition: Relative(65), location: 4156 }, Jump { location: 4184 }, Load { destination: Relative(64), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(65), op: LessThan, bit_size: U32, lhs: Relative(64), rhs: Direct(32837) }, JumpIf { condition: Relative(65), location: 4160 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Relative(64) }, Load { destination: Relative(65), source_pointer: Relative(67) }, Mov { destination: Direct(32771), source: Relative(60) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(66), source: Direct(32773) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(67), rhs: Relative(64) }, Store { destination_pointer: Relative(68), source: Relative(63) }, Mov { destination: Direct(32771), source: Relative(66) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(60), source: Direct(32773) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(54) }, Store { destination_pointer: Relative(67), source: Relative(65) }, Store { destination_pointer: Relative(11), source: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(3) }, BinaryIntOp { destination: Relative(63), op: LessThanEquals, bit_size: U32, lhs: Relative(64), rhs: Relative(60) }, JumpIf { condition: Relative(63), location: 4182 }, Call { location: 20515 }, Store { destination_pointer: Relative(58), source: Relative(60) }, Jump { location: 4184 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Relative(54), source: Relative(60) }, Jump { location: 4054 }, Mov { destination: Relative(1), source: Relative(9) }, Jump { location: 4001 }, Jump { location: 4190 }, Load { destination: Relative(9), source_pointer: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(56), source: Relative(54) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Load { destination: Relative(56), source_pointer: Relative(11) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 4242 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(56) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4246 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 16557 }, Jump { location: 4249 }, Load { destination: Relative(11), source_pointer: Relative(54) }, Load { destination: Relative(54), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(11) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(10) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 4257 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(58), source: Relative(51) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(36) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(34) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(26) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(27) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(49) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(23) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(36) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(35) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(23) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(35) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(27) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(26) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(31) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(25) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(34) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(48) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(30) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(49) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(36) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(47) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(31) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(29) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(32) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(33) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(24) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(25) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(22) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(21) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(49) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(19) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(48) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(28) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(20) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(18) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(30) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(39) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 4434 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(4) }, JumpIf { condition: Relative(31), location: 4460 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(48) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(57) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(58) }, Call { location: 23 }, Const { destination: Relative(57), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(15) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(4) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(48), size: Relative(39) } }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(54) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4486 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 16509 }, Jump { location: 4489 }, Load { destination: Relative(4), source_pointer: Relative(31) }, Load { destination: Relative(11), source_pointer: Relative(4) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 4496 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(4) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(48) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(36) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(36) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(39) }, Mov { destination: Relative(39), source: Relative(36) }, Store { destination_pointer: Relative(39), source: Relative(12) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(5) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(3) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(4) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4525 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(4), location: 4528 }, Jump { location: 4762 }, Load { destination: Relative(4), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(12) }, JumpIf { condition: Relative(48), location: 4761 }, Jump { location: 4533 }, Load { destination: Relative(48), source_pointer: Relative(31) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 4539 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(4) }, JumpIf { condition: Relative(48), location: 4544 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Mov { destination: Direct(32772), source: Relative(31) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20479 }, Mov { destination: Relative(54), source: Direct(32774) }, Mov { destination: Relative(58), source: Direct(32775) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Load { destination: Relative(57), source_pointer: Relative(58) }, Load { destination: Relative(4), source_pointer: Relative(54) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(4) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 4560 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(4) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(54) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(56), rhs: Relative(4) }, JumpIf { condition: Relative(48), location: 4568 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(48), location: 4759 }, Jump { location: 4572 }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(56) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(5) }, Mov { destination: Relative(31), source: Relative(56) }, Jump { location: 4579 }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 4689 }, Jump { location: 4582 }, Load { destination: Relative(31), source_pointer: Relative(48) }, Load { destination: Relative(48), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32837) }, JumpIf { condition: Relative(58), location: 4587 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(60) }, Load { destination: Relative(61), source_pointer: Relative(63) }, JumpIf { condition: Relative(51), location: 4597 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(54) }, Load { destination: Relative(51), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(64), source: Direct(32773) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(58) }, Store { destination_pointer: Relative(66), source: Relative(51) }, Mov { destination: Direct(32771), source: Relative(64) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(60) }, Store { destination_pointer: Relative(58), source: Relative(63) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(62) }, Store { destination_pointer: Relative(58), source: Relative(61) }, Store { destination_pointer: Relative(11), source: Relative(48) }, Load { destination: Relative(48), source_pointer: Relative(36) }, Load { destination: Relative(51), source_pointer: Relative(39) }, Load { destination: Relative(54), source_pointer: Relative(51) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 4641 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(54) }, JumpIf { condition: Relative(59), location: 4647 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(48) }, Mov { destination: Direct(32772), source: Relative(51) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(60), source: Direct(32774) }, Mov { destination: Relative(61), source: Direct(32775) }, Store { destination_pointer: Relative(61), source: Relative(54) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Store { destination_pointer: Relative(61), source: Relative(57) }, Store { destination_pointer: Relative(36), source: Relative(59) }, Store { destination_pointer: Relative(39), source: Relative(60) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 4662 }, Jump { location: 4687 }, Load { destination: Relative(48), source_pointer: Relative(60) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 4668 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(31) }, JumpIf { condition: Relative(54), location: 4674 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(59) }, Mov { destination: Direct(32772), source: Relative(60) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(54), source: Direct(32774) }, Mov { destination: Relative(57), source: Direct(32775) }, Store { destination_pointer: Relative(57), source: Relative(56) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(48) }, Store { destination_pointer: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(39), source: Relative(54) }, Jump { location: 4687 }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 4525 }, Load { destination: Relative(58), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32837) }, JumpIf { condition: Relative(59), location: 4693 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Load { destination: Relative(60), source_pointer: Relative(62) }, JumpIf { condition: Relative(51), location: 4699 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(54) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryFieldOp { destination: Relative(62), op: LessThan, lhs: Relative(60), rhs: Relative(61) }, JumpIf { condition: Relative(62), location: 4705 }, Jump { location: 4756 }, Load { destination: Relative(61), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(62), op: LessThan, bit_size: U32, lhs: Relative(61), rhs: Direct(32837) }, JumpIf { condition: Relative(62), location: 4709 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(62), op: Mul, bit_size: U32, lhs: Relative(61), rhs: Relative(5) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(3) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Relative(64) }, Load { destination: Relative(65), source_pointer: Relative(67) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(69), op: Add, bit_size: U32, lhs: Relative(68), rhs: Relative(66) }, Load { destination: Relative(67), source_pointer: Relative(69) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(68), source: Direct(32773) }, BinaryIntOp { destination: Relative(69), op: Add, bit_size: U32, lhs: Relative(68), rhs: Direct(2) }, BinaryIntOp { destination: Relative(70), op: Add, bit_size: U32, lhs: Relative(69), rhs: Relative(62) }, Store { destination_pointer: Relative(70), source: Relative(60) }, Mov { destination: Direct(32771), source: Relative(68) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(64) }, Store { destination_pointer: Relative(62), source: Relative(67) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(60), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(59) }, Store { destination_pointer: Relative(64), source: Relative(63) }, Mov { destination: Direct(32771), source: Relative(60) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(66) }, Store { destination_pointer: Relative(62), source: Relative(65) }, Store { destination_pointer: Relative(11), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: LessThanEquals, bit_size: U32, lhs: Relative(61), rhs: Relative(58) }, JumpIf { condition: Relative(59), location: 4754 }, Call { location: 20515 }, Store { destination_pointer: Relative(48), source: Relative(58) }, Jump { location: 4756 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Mov { destination: Relative(31), source: Relative(58) }, Jump { location: 4579 }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 4525 }, Jump { location: 4762 }, Load { destination: Relative(4), source_pointer: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(15) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(52) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4779 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 16496 }, Jump { location: 4782 }, Load { destination: Relative(2), source_pointer: Relative(31) }, JumpIf { condition: Relative(2), location: 4785 }, Call { location: 20599 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(11) }, Store { destination_pointer: Relative(31), source: Relative(45) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(50) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(40) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4801 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(31), location: 16483 }, Jump { location: 4804 }, Load { destination: Relative(2), source_pointer: Relative(11) }, JumpIf { condition: Relative(2), location: 4807 }, Call { location: 20602 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(11), source: Relative(9) }, Store { destination_pointer: Relative(11), source: Relative(15) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(45) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(52) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(50) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(16) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(40) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4829 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 16460 }, Jump { location: 4832 }, Load { destination: Relative(2), source_pointer: Relative(9) }, JumpIf { condition: Relative(2), location: 4835 }, Call { location: 20605 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 4916 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(11) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(36) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(13) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(54), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(15) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(36), source: Relative(54) }, Store { destination_pointer: Relative(39), source: Relative(11) }, Store { destination_pointer: Relative(48), source: Relative(3) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 4967 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 16431 }, Jump { location: 4970 }, Load { destination: Relative(11), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(54), source_pointer: Relative(48) }, Load { destination: Relative(56), source_pointer: Relative(31) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 4979 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(56) }, Mov { destination: Relative(56), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(56), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(58), size: Relative(59) }, output: HeapArray { pointer: Relative(60), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(36), source: Relative(11) }, Store { destination_pointer: Relative(39), source: Relative(56) }, Store { destination_pointer: Relative(48), source: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(31) }, Cast { destination: Relative(36), source: Relative(11), bit_size: Integer(U32) }, Cast { destination: Relative(31), source: Relative(36), bit_size: Field }, Cast { destination: Relative(11), source: Relative(31), bit_size: Integer(U32) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5003 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 16320 }, Jump { location: 5006 }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(31), source_pointer: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5014 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 5021 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(44) }, JumpIf { condition: Relative(31), location: 5024 }, Call { location: 20455 }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5030 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5038 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Mov { destination: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(59), source: Relative(52) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, Store { destination_pointer: Relative(48), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(11) }, Store { destination_pointer: Relative(54), source: Relative(3) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5078 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 16291 }, Jump { location: 5081 }, Load { destination: Relative(11), source_pointer: Relative(48) }, Load { destination: Relative(31), source_pointer: Relative(51) }, Load { destination: Relative(36), source_pointer: Relative(54) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(39) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 5090 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(58), size: Relative(59) }, output: HeapArray { pointer: Relative(60), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(48), source: Relative(11) }, Store { destination_pointer: Relative(51), source: Relative(39) }, Store { destination_pointer: Relative(54), source: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(31) }, Cast { destination: Relative(36), source: Relative(11), bit_size: Integer(U32) }, Cast { destination: Relative(31), source: Relative(36), bit_size: Field }, Cast { destination: Relative(11), source: Relative(31), bit_size: Integer(U32) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5114 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 16180 }, Jump { location: 5117 }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(31), source_pointer: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5125 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 5132 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(44) }, JumpIf { condition: Relative(31), location: 5135 }, Call { location: 20455 }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5141 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5149 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Mov { destination: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(59), source: Relative(16) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, Store { destination_pointer: Relative(48), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(11) }, Store { destination_pointer: Relative(54), source: Relative(3) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5189 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 16151 }, Jump { location: 5192 }, Load { destination: Relative(11), source_pointer: Relative(48) }, Load { destination: Relative(31), source_pointer: Relative(51) }, Load { destination: Relative(36), source_pointer: Relative(54) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(39) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 5201 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(58), size: Relative(59) }, output: HeapArray { pointer: Relative(60), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(48), source: Relative(11) }, Store { destination_pointer: Relative(51), source: Relative(39) }, Store { destination_pointer: Relative(54), source: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(31) }, Cast { destination: Relative(36), source: Relative(11), bit_size: Integer(U32) }, Cast { destination: Relative(31), source: Relative(36), bit_size: Field }, Cast { destination: Relative(11), source: Relative(31), bit_size: Integer(U32) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5225 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 16040 }, Jump { location: 5228 }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 5236 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(31), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(39) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(12) }, Load { destination: Relative(40), source_pointer: Relative(11) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 5287 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(40) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5291 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 15989 }, Jump { location: 5294 }, Load { destination: Relative(11), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 5302 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(16) }, JumpIf { condition: Relative(31), location: 5328 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(48) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(56) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(15) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(16) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(36) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(48), size: Relative(40) } }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(12) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(36) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5412 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5429 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(39), location: 15725 }, Jump { location: 5432 }, Load { destination: Relative(16), source_pointer: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(16) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 5439 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Store { destination_pointer: Relative(9), source: Relative(31) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5446 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(11), location: 15666 }, Jump { location: 5449 }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 5457 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(31), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(39) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(12) }, Load { destination: Relative(40), source_pointer: Relative(11) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 5492 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(40) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5496 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 15628 }, Jump { location: 5499 }, Load { destination: Relative(11), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 5507 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(16) }, JumpIf { condition: Relative(31), location: 5533 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(48) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 8503083277066543196 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(56) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(15) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(16) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(36) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(48), size: Relative(40) } }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(16) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 5539 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(36) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5550 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(31), location: 15594 }, Jump { location: 5553 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(11) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 5560 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(39) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(31) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(12) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(3) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5589 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(2), location: 5592 }, Jump { location: 5778 }, Load { destination: Relative(2), source_pointer: Relative(31) }, Load { destination: Relative(16), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(39), location: 5777 }, Jump { location: 5597 }, Load { destination: Relative(39), source_pointer: Relative(16) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(39) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5603 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, JumpIf { condition: Relative(39), location: 5608 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(39), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(16) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20479 }, Mov { destination: Relative(48), source: Direct(32774) }, Mov { destination: Relative(56), source: Direct(32775) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Load { destination: Relative(54), source_pointer: Relative(56) }, Load { destination: Relative(2), source_pointer: Relative(48) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 5624 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, Store { destination_pointer: Relative(36), source: Relative(48) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(2) }, JumpIf { condition: Relative(39), location: 5632 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(39), location: 5775 }, Jump { location: 5636 }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(51) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, Mov { destination: Relative(16), source: Relative(51) }, Jump { location: 5642 }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(54) }, JumpIf { condition: Relative(48), location: 5729 }, Jump { location: 5645 }, Load { destination: Relative(16), source_pointer: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, JumpIf { condition: Relative(48), location: 5650 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(16) }, Load { destination: Relative(48), source_pointer: Relative(57) }, JumpIf { condition: Relative(40), location: 5655 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(40), source_pointer: Relative(57) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(16) }, Store { destination_pointer: Relative(58), source: Relative(40) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(48) }, Store { destination_pointer: Relative(11), source: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Load { destination: Relative(40), source_pointer: Relative(36) }, Load { destination: Relative(48), source_pointer: Relative(40) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 5681 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(48) }, JumpIf { condition: Relative(57), location: 5687 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(39) }, Mov { destination: Direct(32772), source: Relative(40) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(58), source: Direct(32774) }, Mov { destination: Relative(59), source: Direct(32775) }, Store { destination_pointer: Relative(59), source: Relative(48) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(54) }, Store { destination_pointer: Relative(31), source: Relative(57) }, Store { destination_pointer: Relative(36), source: Relative(58) }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(16) }, JumpIf { condition: Relative(39), location: 5702 }, Jump { location: 5727 }, Load { destination: Relative(39), source_pointer: Relative(58) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(39) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 5708 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Sub, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(16) }, JumpIf { condition: Relative(48), location: 5714 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(57) }, Mov { destination: Direct(32772), source: Relative(58) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(48), source: Direct(32774) }, Mov { destination: Relative(54), source: Direct(32775) }, Store { destination_pointer: Relative(54), source: Relative(51) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(39) }, Store { destination_pointer: Relative(31), source: Relative(16) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Jump { location: 5727 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 5589 }, Load { destination: Relative(48), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, JumpIf { condition: Relative(56), location: 5733 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(16) }, Load { destination: Relative(56), source_pointer: Relative(58) }, JumpIf { condition: Relative(40), location: 5738 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryFieldOp { destination: Relative(58), op: LessThan, lhs: Relative(56), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 5744 }, Jump { location: 5772 }, Load { destination: Relative(57), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Direct(32837) }, JumpIf { condition: Relative(58), location: 5748 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(59), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(56) }, Mov { destination: Direct(32771), source: Relative(59) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(16) }, Store { destination_pointer: Relative(60), source: Relative(58) }, Store { destination_pointer: Relative(11), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(57), rhs: Relative(48) }, JumpIf { condition: Relative(56), location: 5770 }, Call { location: 20515 }, Store { destination_pointer: Relative(39), source: Relative(48) }, Jump { location: 5772 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Mov { destination: Relative(16), source: Relative(48) }, Jump { location: 5642 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 5589 }, Jump { location: 5778 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 5787 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(31), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(39) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(12) }, Load { destination: Relative(40), source_pointer: Relative(11) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 5822 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(40) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5826 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 15556 }, Jump { location: 5829 }, Load { destination: Relative(11), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 5837 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(16) }, JumpIf { condition: Relative(31), location: 5863 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(48) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 11671323210994517436 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(56) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(15) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(16) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(36) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(48), size: Relative(40) } }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(31) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(8) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(12) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(36) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5883 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 15522 }, Jump { location: 5886 }, Load { destination: Relative(11), source_pointer: Relative(31) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(16) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 5893 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(40) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(36) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(36) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(39) }, Mov { destination: Relative(39), source: Relative(36) }, Store { destination_pointer: Relative(39), source: Relative(12) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(5) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(3) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(11) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 5922 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(11), location: 5925 }, Jump { location: 6111 }, Load { destination: Relative(11), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(40), location: 6110 }, Jump { location: 5930 }, Load { destination: Relative(40), source_pointer: Relative(31) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 5936 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(40) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, JumpIf { condition: Relative(40), location: 5941 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(40), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(11) }, Mov { destination: Direct(32772), source: Relative(31) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20479 }, Mov { destination: Relative(51), source: Direct(32774) }, Mov { destination: Relative(57), source: Direct(32775) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Load { destination: Relative(56), source_pointer: Relative(57) }, Load { destination: Relative(11), source_pointer: Relative(51) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 5957 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(11) }, Store { destination_pointer: Relative(36), source: Relative(40) }, Store { destination_pointer: Relative(39), source: Relative(51) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(40), op: LessThanEquals, bit_size: U32, lhs: Relative(54), rhs: Relative(11) }, JumpIf { condition: Relative(40), location: 5965 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(56), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(40), location: 6108 }, Jump { location: 5969 }, Mov { destination: Relative(40), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(54) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, Mov { destination: Relative(31), source: Relative(54) }, Jump { location: 5975 }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(56) }, JumpIf { condition: Relative(51), location: 6062 }, Jump { location: 5978 }, Load { destination: Relative(31), source_pointer: Relative(40) }, Load { destination: Relative(40), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32837) }, JumpIf { condition: Relative(51), location: 5983 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(31) }, Load { destination: Relative(51), source_pointer: Relative(58) }, JumpIf { condition: Relative(48), location: 5988 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(58) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(31) }, Store { destination_pointer: Relative(59), source: Relative(48) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(56) }, Store { destination_pointer: Relative(58), source: Relative(51) }, Store { destination_pointer: Relative(16), source: Relative(40) }, Load { destination: Relative(40), source_pointer: Relative(36) }, Load { destination: Relative(48), source_pointer: Relative(39) }, Load { destination: Relative(51), source_pointer: Relative(48) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(51) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 6014 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(51) }, JumpIf { condition: Relative(58), location: 6020 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(40) }, Mov { destination: Direct(32772), source: Relative(48) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(59), source: Direct(32774) }, Mov { destination: Relative(60), source: Direct(32775) }, Store { destination_pointer: Relative(60), source: Relative(51) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(56) }, Store { destination_pointer: Relative(36), source: Relative(58) }, Store { destination_pointer: Relative(39), source: Relative(59) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(31) }, JumpIf { condition: Relative(40), location: 6035 }, Jump { location: 6060 }, Load { destination: Relative(40), source_pointer: Relative(59) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(40) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 6041 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Sub, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(31) }, JumpIf { condition: Relative(51), location: 6047 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(58) }, Mov { destination: Direct(32772), source: Relative(59) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(51), source: Direct(32774) }, Mov { destination: Relative(56), source: Direct(32775) }, Store { destination_pointer: Relative(56), source: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(40) }, Store { destination_pointer: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(39), source: Relative(51) }, Jump { location: 6060 }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 5922 }, Load { destination: Relative(51), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32837) }, JumpIf { condition: Relative(57), location: 6066 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(31) }, Load { destination: Relative(57), source_pointer: Relative(59) }, JumpIf { condition: Relative(48), location: 6071 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(56) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: LessThan, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(59), location: 6077 }, Jump { location: 6105 }, Load { destination: Relative(58), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(58), rhs: Direct(32837) }, JumpIf { condition: Relative(59), location: 6081 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(60), source: Direct(32773) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(58) }, Store { destination_pointer: Relative(62), source: Relative(57) }, Mov { destination: Direct(32771), source: Relative(60) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(31) }, Store { destination_pointer: Relative(61), source: Relative(59) }, Store { destination_pointer: Relative(16), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(58), rhs: Relative(51) }, JumpIf { condition: Relative(57), location: 6103 }, Call { location: 20515 }, Store { destination_pointer: Relative(40), source: Relative(51) }, Jump { location: 6105 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Mov { destination: Relative(31), source: Relative(51) }, Jump { location: 5975 }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 5922 }, Jump { location: 6111 }, Load { destination: Relative(11), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(16) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 6118 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Const { destination: Relative(16), bit_size: Field, value: 6 }, Const { destination: Relative(36), bit_size: Field, value: 15 }, Const { destination: Relative(39), bit_size: Field, value: 33 }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(16) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(36) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(14) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6139 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(31), location: 15509 }, Jump { location: 6142 }, Load { destination: Relative(31), source_pointer: Relative(39) }, Const { destination: Relative(39), bit_size: Integer(U8), value: 71 }, Const { destination: Relative(40), bit_size: Integer(U8), value: 58 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(39) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(33) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(22) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(24) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(49) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(18) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(42) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(33) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(21) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(21) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(20) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(42) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(22) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(24) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(49) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(22) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(20) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(21) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(27) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(22) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(49) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(33) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(18) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(24) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(33) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(34) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(24) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(37) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(20) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(38) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(19) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(40) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(24) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(25) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(37) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(20) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(38) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(19) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(30) }, JumpIf { condition: Relative(31), location: 6255 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 44 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 44 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(42) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 4115449374354845873 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 39 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(56) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 39 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(41) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 3 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(56) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Trap { revert_data: HeapVector { pointer: Relative(42), size: Relative(39) } }, Const { destination: Relative(2), bit_size: Field, value: 35 }, Const { destination: Relative(31), bit_size: Field, value: 65 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(36) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(31) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(14) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6273 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(31), location: 15496 }, Jump { location: 6276 }, Load { destination: Relative(11), source_pointer: Relative(2) }, JumpIf { condition: Relative(11), location: 6279 }, Call { location: 20602 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 6287 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(31), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(39) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(12) }, Load { destination: Relative(42), source_pointer: Relative(2) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 6338 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(42) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6342 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 15445 }, Jump { location: 6345 }, Load { destination: Relative(2), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 6353 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(11) }, JumpIf { condition: Relative(31), location: 6379 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, Mov { destination: Relative(51), source: Relative(48) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(51) }, Mov { destination: Direct(32773), source: Relative(56) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(15) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(11) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(36) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(48), size: Relative(42) } }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(13) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6472 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(39), location: 15180 }, Jump { location: 6475 }, Load { destination: Relative(11), source_pointer: Relative(31) }, Load { destination: Relative(31), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(2) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 6483 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(4), source: Relative(11) }, Store { destination_pointer: Relative(9), source: Relative(31) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, Load { destination: Relative(9), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(9) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 6536 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(9) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6540 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(9), location: 15129 }, Jump { location: 6543 }, Load { destination: Relative(9), source_pointer: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 6551 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(31) }, JumpIf { condition: Relative(2), location: 6577 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, Mov { destination: Relative(42), source: Relative(39) }, IndirectConst { destination_pointer: Relative(42), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(48) }, Mov { destination: Direct(32772), source: Relative(42) }, Mov { destination: Direct(32773), source: Relative(51) }, Call { location: 23 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, Store { destination_pointer: Relative(42), source: Relative(15) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(31) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(4) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(39), size: Relative(36) } }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6603 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(4), location: 15081 }, Jump { location: 6606 }, Load { destination: Relative(2), source_pointer: Relative(31) }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(4) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 6613 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(36) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(11) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(11) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(31) }, Mov { destination: Relative(31), source: Relative(11) }, Store { destination_pointer: Relative(31), source: Relative(12) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(5) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6642 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(2), location: 6645 }, Jump { location: 6879 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(36), location: 6878 }, Jump { location: 6650 }, Load { destination: Relative(36), source_pointer: Relative(9) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 6656 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, JumpIf { condition: Relative(36), location: 6661 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(9) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20479 }, Mov { destination: Relative(42), source: Direct(32774) }, Mov { destination: Relative(54), source: Direct(32775) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Load { destination: Relative(51), source_pointer: Relative(54) }, Load { destination: Relative(2), source_pointer: Relative(42) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(2) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 6677 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(2) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Store { destination_pointer: Relative(31), source: Relative(42) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(36), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, JumpIf { condition: Relative(36), location: 6685 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(36), location: 6876 }, Jump { location: 6689 }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, Mov { destination: Relative(9), source: Relative(48) }, Jump { location: 6696 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(51) }, JumpIf { condition: Relative(54), location: 6806 }, Jump { location: 6699 }, Load { destination: Relative(9), source_pointer: Relative(36) }, Load { destination: Relative(36), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 6704 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, JumpIf { condition: Relative(39), location: 6714 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(42) }, Load { destination: Relative(39), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Load { destination: Relative(60), source_pointer: Relative(62) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(54) }, Store { destination_pointer: Relative(63), source: Relative(39) }, Mov { destination: Direct(32771), source: Relative(61) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(60) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(59) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(4), source: Relative(36) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(39) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 6758 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(42) }, JumpIf { condition: Relative(56), location: 6764 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(36) }, Mov { destination: Direct(32772), source: Relative(39) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(57), source: Direct(32774) }, Mov { destination: Relative(58), source: Direct(32775) }, Store { destination_pointer: Relative(58), source: Relative(42) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(51) }, Store { destination_pointer: Relative(11), source: Relative(56) }, Store { destination_pointer: Relative(31), source: Relative(57) }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(9) }, JumpIf { condition: Relative(36), location: 6779 }, Jump { location: 6804 }, Load { destination: Relative(36), source_pointer: Relative(57) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 6785 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(9) }, JumpIf { condition: Relative(42), location: 6791 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(56) }, Mov { destination: Direct(32772), source: Relative(57) }, Const { destination: Direct(32773), bit_size: Integer(U32), value: 2 }, Call { location: 20540 }, Mov { destination: Relative(42), source: Direct(32774) }, Mov { destination: Relative(51), source: Direct(32775) }, Store { destination_pointer: Relative(51), source: Relative(48) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(9) }, Store { destination_pointer: Relative(31), source: Relative(42) }, Jump { location: 6804 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6642 }, Load { destination: Relative(54), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, JumpIf { condition: Relative(56), location: 6810 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, JumpIf { condition: Relative(39), location: 6816 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(42) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: LessThan, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(59), location: 6822 }, Jump { location: 6873 }, Load { destination: Relative(58), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(58), rhs: Direct(32837) }, JumpIf { condition: Relative(59), location: 6826 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Relative(5) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Load { destination: Relative(60), source_pointer: Relative(62) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(61) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(63) }, Load { destination: Relative(64), source_pointer: Relative(66) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(65), source: Direct(32773) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Direct(2) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Relative(59) }, Store { destination_pointer: Relative(67), source: Relative(57) }, Mov { destination: Direct(32771), source: Relative(65) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(61) }, Store { destination_pointer: Relative(59), source: Relative(64) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(56) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(63) }, Store { destination_pointer: Relative(59), source: Relative(62) }, Store { destination_pointer: Relative(4), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 6871 }, Call { location: 20515 }, Store { destination_pointer: Relative(36), source: Relative(54) }, Jump { location: 6873 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, Mov { destination: Relative(9), source: Relative(54) }, Jump { location: 6696 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6642 }, Jump { location: 6879 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Const { destination: Relative(4), bit_size: Field, value: 12 }, Const { destination: Relative(9), bit_size: Field, value: 30 }, Const { destination: Relative(11), bit_size: Field, value: 70 }, Const { destination: Relative(31), bit_size: Field, value: 66 }, Const { destination: Relative(36), bit_size: Field, value: 130 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(4) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(9) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(9) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(11) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(31) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(36) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 6907 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(31), location: 15058 }, Jump { location: 6910 }, Load { destination: Relative(2), source_pointer: Relative(11) }, JumpIf { condition: Relative(2), location: 6913 }, Call { location: 20605 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(11) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(12) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 6994 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(13) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(56), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Mov { destination: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(58), source: Relative(41) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(8) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(8) }, Store { destination_pointer: Relative(42), source: Relative(56) }, Store { destination_pointer: Relative(48), source: Relative(36) }, Store { destination_pointer: Relative(51), source: Relative(3) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7045 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 15029 }, Jump { location: 7048 }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(39), source_pointer: Relative(48) }, Load { destination: Relative(56), source_pointer: Relative(51) }, Load { destination: Relative(57), source_pointer: Relative(39) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 7057 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(57) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(59), size: Relative(60) }, output: HeapArray { pointer: Relative(61), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(48), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(39) }, Cast { destination: Relative(42), source: Relative(36), bit_size: Integer(U32) }, Cast { destination: Relative(39), source: Relative(42), bit_size: Field }, Cast { destination: Relative(36), source: Relative(39), bit_size: Integer(U32) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(7) }, Const { destination: Relative(42), bit_size: Field, value: 10 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7082 }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 14918 }, Jump { location: 7085 }, Load { destination: Relative(36), source_pointer: Relative(11) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(36) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7093 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(39) }, JumpIf { condition: Relative(51), location: 7100 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(44) }, JumpIf { condition: Relative(39), location: 7103 }, Call { location: 20455 }, Load { destination: Relative(39), source_pointer: Relative(36) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7109 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7117 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(58), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Mov { destination: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(60), source: Relative(15) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(58) }, Store { destination_pointer: Relative(54), source: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(3) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7157 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 14889 }, Jump { location: 7160 }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(54) }, Load { destination: Relative(42), source_pointer: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(39) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(48) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 7169 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(59), size: Relative(60) }, output: HeapArray { pointer: Relative(61), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(54), source: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(14) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(39) }, Cast { destination: Relative(42), source: Relative(36), bit_size: Integer(U32) }, Cast { destination: Relative(39), source: Relative(42), bit_size: Field }, Cast { destination: Relative(36), source: Relative(39), bit_size: Integer(U32) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(7) }, Const { destination: Relative(42), bit_size: Field, value: 20 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7194 }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 14778 }, Jump { location: 7197 }, Load { destination: Relative(36), source_pointer: Relative(11) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Load { destination: Relative(42), source_pointer: Relative(36) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7205 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(39) }, JumpIf { condition: Relative(51), location: 7212 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(44) }, JumpIf { condition: Relative(39), location: 7215 }, Call { location: 20455 }, Load { destination: Relative(39), source_pointer: Relative(36) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7221 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7229 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(58), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Mov { destination: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(60), source: Relative(45) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(58) }, Store { destination_pointer: Relative(54), source: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(3) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7269 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 14749 }, Jump { location: 7272 }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(54) }, Load { destination: Relative(42), source_pointer: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(39) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(48) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 7281 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(59), size: Relative(60) }, output: HeapArray { pointer: Relative(61), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(54), source: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(14) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(39) }, Cast { destination: Relative(42), source: Relative(36), bit_size: Integer(U32) }, Cast { destination: Relative(39), source: Relative(42), bit_size: Field }, Cast { destination: Relative(36), source: Relative(39), bit_size: Integer(U32) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7305 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(42), location: 14638 }, Jump { location: 7308 }, Load { destination: Relative(9), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(31) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 7316 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(12) }, Load { destination: Relative(51), source_pointer: Relative(9) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 7367 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(51) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7371 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(42), location: 14587 }, Jump { location: 7374 }, Load { destination: Relative(9), source_pointer: Relative(48) }, Load { destination: Relative(42), source_pointer: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(39) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7382 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, JumpIf { condition: Relative(39), location: 7408 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, Mov { destination: Relative(56), source: Relative(54) }, IndirectConst { destination_pointer: Relative(56), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(57) }, Mov { destination: Direct(32772), source: Relative(56) }, Mov { destination: Direct(32773), source: Relative(58) }, Call { location: 23 }, Const { destination: Relative(57), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, Store { destination_pointer: Relative(56), source: Relative(15) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(36) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(42) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(54), size: Relative(51) } }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(39) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, Load { destination: Relative(42), source_pointer: Relative(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(42) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 7492 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(42) }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(42), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Mov { destination: Relative(56), source: Relative(54) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(8) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(13) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7509 }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 14330 }, Jump { location: 7512 }, Load { destination: Relative(2), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 7519 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Load { destination: Relative(36), source_pointer: Relative(9) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(31), source: Relative(36) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(9) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 7530 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, JumpIf { condition: Relative(9), location: 7535 }, Call { location: 20608 }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(9) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 7541 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(44) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, Load { destination: Relative(48), source_pointer: Relative(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 7592 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(48) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7596 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 14279 }, Jump { location: 7599 }, Load { destination: Relative(2), source_pointer: Relative(44) }, Load { destination: Relative(36), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(9) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 7607 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, JumpIf { condition: Relative(2), location: 7633 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, Mov { destination: Relative(44), source: Relative(42) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(48) }, Mov { destination: Direct(32772), source: Relative(44) }, Mov { destination: Direct(32773), source: Relative(51) }, Call { location: 23 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(15) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(36) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(42), size: Relative(9) } }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(31) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 7641 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(44) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(36) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(12) }, Load { destination: Relative(48), source_pointer: Relative(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 7676 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(48) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7680 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(39), location: 14241 }, Jump { location: 7683 }, Load { destination: Relative(2), source_pointer: Relative(44) }, Load { destination: Relative(39), source_pointer: Relative(36) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 7691 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(9) }, JumpIf { condition: Relative(2), location: 7717 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, Mov { destination: Relative(48), source: Relative(44) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U64), value: 8503083277066543196 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(51) }, Mov { destination: Direct(32772), source: Relative(48) }, Mov { destination: Direct(32773), source: Relative(54) }, Call { location: 23 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(51) }, Store { destination_pointer: Relative(48), source: Relative(15) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(9) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(39) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(44), size: Relative(36) } }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(31) }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(12) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 7752 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7756 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(36), location: 14203 }, Jump { location: 7759 }, Load { destination: Relative(2), source_pointer: Relative(31) }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 7767 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(9) }, JumpIf { condition: Relative(2), location: 7793 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, Mov { destination: Relative(39), source: Relative(36) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U64), value: 11671323210994517436 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(42) }, Mov { destination: Direct(32772), source: Relative(39) }, Mov { destination: Direct(32773), source: Relative(44) }, Call { location: 23 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(42) }, Store { destination_pointer: Relative(39), source: Relative(15) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(9) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(17) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(36), size: Relative(11) } }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(11), source: Relative(9) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(12) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 7850 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(17) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(4) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(3) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7890 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 14174 }, Jump { location: 7893 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 7902 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(17) }, Cast { destination: Relative(31), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(31), bit_size: Field }, Cast { destination: Relative(2), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Const { destination: Relative(31), bit_size: Field, value: 42 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7927 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(36), location: 14064 }, Jump { location: 7930 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 7938 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(3) }, JumpIf { condition: Relative(36), location: 7944 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(42) } }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 7950 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(8) }, Load { destination: Relative(44), source_pointer: Relative(2) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 7964 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(13) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(58), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Mov { destination: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(60), source: Relative(4) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(58) }, Store { destination_pointer: Relative(54), source: Relative(44) }, Store { destination_pointer: Relative(56), source: Relative(3) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8004 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 14035 }, Jump { location: 8007 }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(54) }, Load { destination: Relative(44), source_pointer: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(39) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(48) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 8016 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(59), size: Relative(60) }, output: HeapArray { pointer: Relative(61), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(54), source: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(44) }, Store { destination_pointer: Relative(57), source: Relative(14) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(36), source_pointer: Relative(39) }, Cast { destination: Relative(44), source: Relative(36), bit_size: Integer(U32) }, Cast { destination: Relative(39), source: Relative(44), bit_size: Field }, Cast { destination: Relative(36), source: Relative(39), bit_size: Integer(U32) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8040 }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(44), location: 13971 }, Jump { location: 8043 }, Load { destination: Relative(1), source_pointer: Relative(17) }, Load { destination: Relative(2), source_pointer: Relative(42) }, JumpIf { condition: Relative(1), location: 8047 }, Jump { location: 8055 }, JumpIf { condition: Relative(1), location: 8050 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(2), rhs: Relative(31) }, JumpIf { condition: Relative(1), location: 8054 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Jump { location: 8055 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8062 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(17) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(4) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(44) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8102 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13942 }, Jump { location: 8105 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(36) }, Load { destination: Relative(44), source_pointer: Relative(39) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 8114 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(17) }, Cast { destination: Relative(31), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(31), bit_size: Field }, Cast { destination: Relative(2), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8138 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(31), location: 13856 }, Jump { location: 8141 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(31), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 8149 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(12) }, JumpIf { condition: Relative(31), location: 8155 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(39) } }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 8161 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(17) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(4) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(3) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8201 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13827 }, Jump { location: 8204 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 8213 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(17) }, Cast { destination: Relative(31), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(31), bit_size: Field }, Cast { destination: Relative(2), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8237 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(31), location: 13741 }, Jump { location: 8240 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8248 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(12) }, JumpIf { condition: Relative(17), location: 8254 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(36) } }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8260 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(4) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(41) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(44) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8300 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13712 }, Jump { location: 8303 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(17) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 8312 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(54) }, output: HeapArray { pointer: Relative(56), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(44) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(17), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(17), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8336 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 13602 }, Jump { location: 8339 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8347 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(12) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(17), rhs: Relative(7) }, JumpIf { condition: Relative(4), location: 8354 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(36) } }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8360 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(4) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(41) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(44) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8400 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13573 }, Jump { location: 8403 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(17) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 8412 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(54) }, output: HeapArray { pointer: Relative(56), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(44) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(17), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(17), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8436 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 13487 }, Jump { location: 8439 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8447 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(12) }, JumpIf { condition: Relative(17), location: 8453 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(36) } }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8459 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(4) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(41) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(44) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8499 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13458 }, Jump { location: 8502 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(17) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 8511 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(54) }, output: HeapArray { pointer: Relative(56), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(44) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(14) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(17), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(17), bit_size: Field }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8535 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 13348 }, Jump { location: 8538 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8546 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(4) }, JumpIf { condition: Relative(36), location: 8553 }, Call { location: 20452 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 15 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(4) }, JumpIf { condition: Relative(36), location: 8557 }, Call { location: 20455 }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 8563 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(17) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(45) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(3) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8603 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13319 }, Jump { location: 8606 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 8615 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(17) }, Cast { destination: Relative(31), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(31), bit_size: Field }, Cast { destination: Relative(2), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Const { destination: Relative(31), bit_size: Field, value: 4 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8640 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(36), location: 13209 }, Jump { location: 8643 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(31), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 8651 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, JumpIf { condition: Relative(39), location: 8658 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(4) }, JumpIf { condition: Relative(17), location: 8661 }, Call { location: 20455 }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 8667 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(17) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(8) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(52) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(3) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8707 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13180 }, Jump { location: 8710 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 8719 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(17) }, Cast { destination: Relative(31), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(31), bit_size: Field }, Cast { destination: Relative(2), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8743 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(31), location: 13070 }, Jump { location: 8746 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8754 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, JumpIf { condition: Relative(17), location: 8760 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(36) } }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8766 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(16) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(45) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Store { destination_pointer: Relative(16), source: Relative(44) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8806 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13041 }, Jump { location: 8809 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(17) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 8818 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(52) }, output: HeapArray { pointer: Relative(54), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(16), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(44) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Cast { destination: Relative(17), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(17), bit_size: Field }, Cast { destination: Relative(2), source: Relative(16), bit_size: Integer(U32) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8842 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 12931 }, Jump { location: 8845 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8853 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, JumpIf { condition: Relative(17), location: 8859 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(36) } }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8865 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(16) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(41) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(8) }, Store { destination_pointer: Relative(16), source: Relative(44) }, Store { destination_pointer: Relative(36), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8905 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 12902 }, Jump { location: 8908 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(17) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 8917 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(52) }, output: HeapArray { pointer: Relative(54), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(16), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(44) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Cast { destination: Relative(17), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(16), source: Relative(17), bit_size: Field }, Cast { destination: Relative(2), source: Relative(16), bit_size: Integer(U32) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8941 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 12816 }, Jump { location: 8944 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(17) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8952 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(5) }, JumpIf { condition: Relative(17), location: 8958 }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(36) } }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 8964 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(16) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Store { destination_pointer: Relative(11), source: Relative(12) }, Load { destination: Relative(16), source_pointer: Relative(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(16) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 9019 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Load { destination: Relative(39), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 9030 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(44) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(13) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(54), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(50) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Store { destination_pointer: Relative(44), source: Relative(54) }, Store { destination_pointer: Relative(48), source: Relative(39) }, Store { destination_pointer: Relative(51), source: Relative(3) }, Store { destination_pointer: Relative(52), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9070 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(17), location: 12787 }, Jump { location: 9073 }, Load { destination: Relative(17), source_pointer: Relative(44) }, Load { destination: Relative(31), source_pointer: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 9082 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(56) }, output: HeapArray { pointer: Relative(57), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(44), source: Relative(17) }, Store { destination_pointer: Relative(48), source: Relative(39) }, Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Load { destination: Relative(17), source_pointer: Relative(31) }, Cast { destination: Relative(36), source: Relative(17), bit_size: Integer(U32) }, Cast { destination: Relative(31), source: Relative(36), bit_size: Field }, Cast { destination: Relative(17), source: Relative(31), bit_size: Integer(U32) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9106 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(36), location: 12728 }, Jump { location: 9109 }, Load { destination: Relative(1), source_pointer: Relative(16) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 34 }, JumpIf { condition: Relative(1), location: 9226 }, Jump { location: 9113 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 55 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 33 }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(43) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(24) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(26) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(27) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(28) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(29) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(20) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(24) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(34) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(21) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(24) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(20) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(38) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(24) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(1) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 57 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 30 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(25) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(37) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(49) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(23) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(40) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(19) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(22) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(21) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(49) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(32) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(47) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(28) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(20) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(32) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(22) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(35) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(40) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(46) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(1) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(30) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(14)), HeapArray(HeapArray { pointer: Relative(1), size: 19 }), HeapArray(HeapArray { pointer: Relative(19), size: 29 }), MemoryAddress(Relative(7))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 19 }, Array { value_types: [Simple(Integer(U8))], size: 29 }, Simple(Integer(U1))] }, Jump { location: 9328 }, Load { destination: Relative(16), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 9233 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Load { destination: Relative(21), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 9244 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(8) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(8) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(8) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(13) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(32), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(50) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(8) }, Store { destination_pointer: Relative(31), source: Relative(39) }, Store { destination_pointer: Relative(32), source: Relative(21) }, Store { destination_pointer: Relative(35), source: Relative(3) }, Store { destination_pointer: Relative(36), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9284 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(19), location: 12699 }, Jump { location: 9287 }, Load { destination: Relative(19), source_pointer: Relative(31) }, Load { destination: Relative(21), source_pointer: Relative(32) }, Load { destination: Relative(22), source_pointer: Relative(35) }, Load { destination: Relative(39), source_pointer: Relative(21) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 9296 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(43), size: Relative(44) }, output: HeapArray { pointer: Relative(46), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(31), source: Relative(19) }, Store { destination_pointer: Relative(32), source: Relative(39) }, Store { destination_pointer: Relative(35), source: Relative(22) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Cast { destination: Relative(22), source: Relative(19), bit_size: Integer(U32) }, Cast { destination: Relative(21), source: Relative(22), bit_size: Field }, Cast { destination: Relative(19), source: Relative(21), bit_size: Integer(U32) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9320 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(22), location: 12640 }, Jump { location: 9323 }, Load { destination: Relative(1), source_pointer: Relative(17) }, JumpIf { condition: Relative(1), location: 9327 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Jump { location: 9328 }, Load { destination: Relative(16), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(19), source_pointer: Relative(16) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9336 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(22) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(12) }, Load { destination: Relative(31), source_pointer: Relative(16) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(31) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 9375 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(31) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9379 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(21), location: 12589 }, Jump { location: 9382 }, Load { destination: Relative(21), source_pointer: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(19) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 9390 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 9416 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(35), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, Mov { destination: Relative(36), source: Relative(35) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(39) }, Mov { destination: Direct(32772), source: Relative(36) }, Mov { destination: Direct(32773), source: Relative(42) }, Call { location: 23 }, Const { destination: Relative(39), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(39) }, Store { destination_pointer: Relative(36), source: Relative(15) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(17) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(22) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(35), size: Relative(32) } }, Load { destination: Relative(19), source_pointer: Relative(16) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(19) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 9422 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 45 }, Const { destination: Relative(35), bit_size: Integer(U8), value: 62 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(39) }, Store { destination_pointer: Relative(42), source: Relative(25) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(37) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(38) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(30) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(19) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(35) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(25) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(26) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(27) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(28) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(29) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(20) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(30) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(38), source: Relative(35) }, Store { destination_pointer: Relative(38), source: Relative(25) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(37) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(49) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(18) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(23) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(40) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(34) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(49) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(20) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(28) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(23) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(30) }, Load { destination: Relative(2), source_pointer: Relative(19) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(2) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 9506 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9510 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 12536 }, Jump { location: 9513 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9519 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(22) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, Load { destination: Relative(31), source_pointer: Relative(16) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(31) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 9548 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(31) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9552 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(21), location: 12498 }, Jump { location: 9555 }, Load { destination: Relative(21), source_pointer: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(21) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(2) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 9563 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, JumpIf { condition: Relative(2), location: 9589 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, Mov { destination: Relative(35), source: Relative(34) }, IndirectConst { destination_pointer: Relative(35), bit_size: Integer(U64), value: 8503083277066543196 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(37) }, Mov { destination: Direct(32772), source: Relative(35) }, Mov { destination: Direct(32773), source: Relative(38) }, Call { location: 23 }, Const { destination: Relative(37), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(37) }, Store { destination_pointer: Relative(35), source: Relative(15) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(17) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(22) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(34), size: Relative(32) } }, Load { destination: Relative(2), source_pointer: Relative(21) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(2) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 9595 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(35), source: Relative(34) }, Store { destination_pointer: Relative(35), source: Relative(8) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(8) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(8) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(13) }, Load { destination: Relative(34), source_pointer: Relative(36) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 9616 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(34) }, Load { destination: Relative(34), source_pointer: Relative(19) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(34) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 9624 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(34) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9628 }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(31), location: 12268 }, Jump { location: 9631 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 9658 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9662 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(22), location: 12230 }, Jump { location: 9665 }, Load { destination: Relative(16), source_pointer: Relative(21) }, Load { destination: Relative(21), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 9673 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, JumpIf { condition: Relative(2), location: 9699 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(32), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, Mov { destination: Relative(34), source: Relative(32) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U64), value: 11671323210994517436 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(35) }, Mov { destination: Direct(32772), source: Relative(34) }, Mov { destination: Direct(32773), source: Relative(36) }, Call { location: 23 }, Const { destination: Relative(35), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(35) }, Store { destination_pointer: Relative(34), source: Relative(15) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(17) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(21) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(32), size: Relative(31) } }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(2) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 9705 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 70 }, Mov { destination: Relative(31), source: Direct(1) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(32) }, IndirectConst { destination_pointer: Relative(31), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Mov { destination: Relative(34), source: Relative(32) }, Store { destination_pointer: Relative(34), source: Relative(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(33) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(29) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(18) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(23) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(24) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(26) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(27) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(28) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(29) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(20) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(24) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(25) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(26) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(27) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(28) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(29) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(20) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(30) }, Load { destination: Relative(2), source_pointer: Relative(19) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 9757 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9761 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 12185 }, Jump { location: 9764 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9772 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Load { destination: Relative(20), source_pointer: Relative(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9786 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(20) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(12) }, Load { destination: Relative(23), source_pointer: Relative(2) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 9825 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(23) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9829 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(18), location: 12134 }, Jump { location: 9832 }, Load { destination: Relative(2), source_pointer: Relative(22) }, Load { destination: Relative(18), source_pointer: Relative(20) }, Load { destination: Relative(20), source_pointer: Relative(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9840 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 9866 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, Mov { destination: Relative(24), source: Relative(23) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(25) }, Mov { destination: Direct(32772), source: Relative(24) }, Mov { destination: Direct(32773), source: Relative(26) }, Call { location: 23 }, Const { destination: Relative(25), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(25) }, Store { destination_pointer: Relative(24), source: Relative(15) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(16) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(18) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(23), size: Relative(22) } }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(18) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9935 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(21), location: 11870 }, Jump { location: 9938 }, Load { destination: Relative(16), source_pointer: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 9946 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Store { destination_pointer: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(18) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9956 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(12) }, Load { destination: Relative(23), source_pointer: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 9995 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(23) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 9999 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(20), location: 11819 }, Jump { location: 10002 }, Load { destination: Relative(16), source_pointer: Relative(22) }, Load { destination: Relative(20), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 10010 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, JumpIf { condition: Relative(2), location: 10036 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, Mov { destination: Relative(24), source: Relative(23) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U64), value: 2658413227894878119 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(25) }, Mov { destination: Direct(32772), source: Relative(24) }, Mov { destination: Direct(32773), source: Relative(26) }, Call { location: 23 }, Const { destination: Relative(25), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(25) }, Store { destination_pointer: Relative(24), source: Relative(15) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(18) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(20) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(23), size: Relative(22) } }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(18), source: Relative(16) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(20) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10105 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(20), location: 11564 }, Jump { location: 10108 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 10115 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(10) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(19), source: Relative(4) }, Const { destination: Relative(2), bit_size: Field, value: 10944121435919637611123202872628637544274182200208017171849102093287904247809 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10123 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(4), location: 11505 }, Jump { location: 10126 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10128 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 11450 }, Jump { location: 10131 }, Const { destination: Relative(2), bit_size: Integer(U64), value: 0 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(6) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(11) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 10224 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(15) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(15) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(13) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(41) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, Store { destination_pointer: Relative(15), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(4) }, Store { destination_pointer: Relative(18), source: Relative(3) }, Store { destination_pointer: Relative(19), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10264 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(4), location: 11421 }, Jump { location: 10267 }, Load { destination: Relative(4), source_pointer: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(17) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Load { destination: Relative(21), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 10276 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(23), size: Relative(24) }, output: HeapArray { pointer: Relative(25), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(15), source: Relative(4) }, Store { destination_pointer: Relative(17), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(20) }, Store { destination_pointer: Relative(19), source: Relative(14) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(15) }, Cast { destination: Relative(16), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(15), source: Relative(16), bit_size: Field }, Cast { destination: Relative(4), source: Relative(15), bit_size: Integer(U32) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, Const { destination: Relative(16), bit_size: Integer(U64), value: 2 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10301 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 11310 }, Jump { location: 10304 }, Load { destination: Relative(4), source_pointer: Relative(6) }, Load { destination: Relative(15), source_pointer: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 10312 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 10319 }, Call { location: 20452 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 10323 }, Call { location: 20455 }, Load { destination: Relative(17), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 10329 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(17) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(17) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(24) }, Store { destination_pointer: Relative(25), source: Relative(45) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(8) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(23) }, Store { destination_pointer: Relative(20), source: Relative(4) }, Store { destination_pointer: Relative(21), source: Relative(3) }, Store { destination_pointer: Relative(22), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10369 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(4), location: 11281 }, Jump { location: 10372 }, Load { destination: Relative(4), source_pointer: Relative(17) }, Load { destination: Relative(18), source_pointer: Relative(20) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Load { destination: Relative(23), source_pointer: Relative(18) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 10381 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(23) }, Mov { destination: Relative(23), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(23), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(25), size: Relative(26) }, output: HeapArray { pointer: Relative(27), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(4) }, Store { destination_pointer: Relative(20), source: Relative(23) }, Store { destination_pointer: Relative(21), source: Relative(19) }, Store { destination_pointer: Relative(22), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(17) }, Cast { destination: Relative(18), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(18), bit_size: Field }, Cast { destination: Relative(4), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Const { destination: Relative(18), bit_size: Integer(U64), value: 4 }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10406 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(19), location: 11170 }, Jump { location: 10409 }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(10) }, Load { destination: Relative(19), source_pointer: Relative(4) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 10417 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Div, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, JumpIf { condition: Relative(21), location: 10424 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 10427 }, Call { location: 20455 }, Load { destination: Relative(17), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 10433 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(17) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(17) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(26), source: Relative(45) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(8) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(8) }, Store { destination_pointer: Relative(17), source: Relative(24) }, Store { destination_pointer: Relative(21), source: Relative(4) }, Store { destination_pointer: Relative(22), source: Relative(3) }, Store { destination_pointer: Relative(23), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10473 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(4), location: 11141 }, Jump { location: 10476 }, Load { destination: Relative(4), source_pointer: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Load { destination: Relative(20), source_pointer: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 10485 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, Mov { destination: Relative(24), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(26), size: Relative(27) }, output: HeapArray { pointer: Relative(28), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(4) }, Store { destination_pointer: Relative(21), source: Relative(24) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Store { destination_pointer: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(17) }, Cast { destination: Relative(19), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(17), source: Relative(19), bit_size: Field }, Cast { destination: Relative(4), source: Relative(17), bit_size: Integer(U32) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10509 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(19), location: 11030 }, Jump { location: 10512 }, Load { destination: Relative(4), source_pointer: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(10) }, Load { destination: Relative(18), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 10520 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(18), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, JumpIf { condition: Relative(20), location: 10527 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 10530 }, Call { location: 20455 }, Load { destination: Relative(15), source_pointer: Relative(4) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 10536 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(15) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(18), source: Relative(15) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(13) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(24), source: Relative(41) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(8) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(8) }, Store { destination_pointer: Relative(15), source: Relative(22) }, Store { destination_pointer: Relative(18), source: Relative(4) }, Store { destination_pointer: Relative(20), source: Relative(3) }, Store { destination_pointer: Relative(21), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10576 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(4), location: 11001 }, Jump { location: 10579 }, Load { destination: Relative(4), source_pointer: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(20) }, Load { destination: Relative(22), source_pointer: Relative(17) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 10588 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(24) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(24), size: Relative(25) }, output: HeapArray { pointer: Relative(26), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(15), source: Relative(4) }, Store { destination_pointer: Relative(18), source: Relative(22) }, Store { destination_pointer: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(21), source: Relative(14) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(15) }, Cast { destination: Relative(17), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(15), source: Relative(17), bit_size: Field }, Cast { destination: Relative(4), source: Relative(15), bit_size: Integer(U32) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(7) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 10612 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 10890 }, Jump { location: 10615 }, Load { destination: Relative(1), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(6), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Load { destination: Relative(11), source_pointer: Relative(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 10628 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(6) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(11) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 10636 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 10641 }, Jump { location: 10661 }, Store { destination_pointer: Relative(10), source: Relative(14) }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(11) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(13) }, Mov { destination: Relative(4), source: Relative(12) }, Jump { location: 10657 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, JumpIf { condition: Relative(11), location: 10666 }, Jump { location: 10660 }, Jump { location: 10661 }, Load { destination: Relative(1), source_pointer: Relative(10) }, JumpIf { condition: Relative(1), location: 10665 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(5) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(11), source_pointer: Relative(19) }, Load { destination: Relative(15), source_pointer: Relative(10) }, Not { destination: Relative(18), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 10688 }, Jump { location: 10793 }, Load { destination: Relative(13), source_pointer: Relative(6) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 10694 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(13) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(7) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(2) }, Load { destination: Relative(19), source_pointer: Relative(6) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 10708 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(9) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 10716 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(8) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(8) }, Store { destination_pointer: Relative(19), source: Relative(25) }, Store { destination_pointer: Relative(22), source: Relative(9) }, Store { destination_pointer: Relative(23), source: Relative(3) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Mov { destination: Relative(11), source: Relative(12) }, Jump { location: 10743 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, JumpIf { condition: Relative(15), location: 10861 }, Jump { location: 10746 }, Load { destination: Relative(15), source_pointer: Relative(19) }, Load { destination: Relative(20), source_pointer: Relative(22) }, Load { destination: Relative(21), source_pointer: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(20) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 10755 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(27), size: Relative(28) }, output: HeapArray { pointer: Relative(29), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(19), source: Relative(15) }, Store { destination_pointer: Relative(22), source: Relative(25) }, Store { destination_pointer: Relative(23), source: Relative(21) }, Store { destination_pointer: Relative(24), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(3) }, Load { destination: Relative(15), source_pointer: Relative(19) }, Cast { destination: Relative(20), source: Relative(15), bit_size: Integer(U32) }, Cast { destination: Relative(19), source: Relative(20), bit_size: Field }, Cast { destination: Relative(15), source: Relative(19), bit_size: Integer(U32) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(7) }, Mov { destination: Relative(11), source: Relative(12) }, Jump { location: 10779 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, JumpIf { condition: Relative(20), location: 10796 }, Jump { location: 10782 }, Load { destination: Relative(11), source_pointer: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(18) }, JumpIf { condition: Relative(11), location: 10788 }, Jump { location: 10786 }, Store { destination_pointer: Relative(10), source: Relative(7) }, Jump { location: 10793 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U64, lhs: Relative(17), rhs: Relative(13) }, JumpIf { condition: Relative(11), location: 10793 }, Jump { location: 10791 }, Store { destination_pointer: Relative(10), source: Relative(7) }, Jump { location: 10793 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Mov { destination: Relative(4), source: Relative(11) }, Jump { location: 10657 }, Load { destination: Relative(20), source_pointer: Relative(19) }, JumpIf { condition: Relative(20), location: 10858 }, Jump { location: 10799 }, Load { destination: Relative(20), source_pointer: Relative(6) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 10805 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Relative(11) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(11) }, JumpIf { condition: Relative(22), location: 10815 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(20), rhs: Relative(11) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, JumpIf { condition: Relative(24), location: 10815 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 10819 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 10824 }, Call { location: 20515 }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(23) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Relative(25) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, JumpIf { condition: Relative(22), location: 10831 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Load { destination: Relative(20), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(5) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(27) }, Not { destination: Relative(23), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(23), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 10851 }, Jump { location: 10858 }, BinaryFieldOp { destination: Relative(20), op: Equals, lhs: Relative(24), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 10854 }, Jump { location: 10858 }, Store { destination_pointer: Relative(13), source: Relative(14) }, Store { destination_pointer: Relative(18), source: Relative(25) }, Store { destination_pointer: Relative(19), source: Relative(14) }, Jump { location: 10858 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(20) }, Jump { location: 10779 }, Load { destination: Relative(15), source_pointer: Relative(19) }, Load { destination: Relative(20), source_pointer: Relative(22) }, Load { destination: Relative(21), source_pointer: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(21) }, JumpIf { condition: Relative(26), location: 10868 }, Jump { location: 10887 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(11) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(11) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Add, lhs: Relative(26), rhs: Relative(27) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(11) }, Store { destination_pointer: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(19), source: Relative(15) }, Store { destination_pointer: Relative(22), source: Relative(26) }, Store { destination_pointer: Relative(23), source: Relative(21) }, Store { destination_pointer: Relative(24), source: Relative(25) }, Jump { location: 10887 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(15) }, Jump { location: 10743 }, Load { destination: Relative(17), source_pointer: Relative(15) }, JumpIf { condition: Relative(17), location: 10998 }, Jump { location: 10893 }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(18), source_pointer: Relative(10) }, Load { destination: Relative(19), source_pointer: Relative(17) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 10901 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, JumpIf { condition: Relative(21), location: 10911 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(19), rhs: Relative(1) }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(23), location: 10911 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 10915 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 10920 }, Call { location: 20515 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(22) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U32, lhs: Relative(21), rhs: Relative(24) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, JumpIf { condition: Relative(21), location: 10927 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Load { destination: Relative(19), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Not { destination: Relative(26), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: Or, bit_size: U1, lhs: Relative(25), rhs: Relative(26) }, JumpIf { condition: Relative(19), location: 10951 }, Jump { location: 10946 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(23), rhs: Relative(41) }, JumpIf { condition: Relative(17), location: 10949 }, Jump { location: 10959 }, Store { destination_pointer: Relative(24), source: Relative(14) }, Jump { location: 10959 }, Store { destination_pointer: Relative(24), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, JumpIf { condition: Relative(20), location: 10956 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(17) }, Store { destination_pointer: Relative(10), source: Relative(19) }, Jump { location: 10959 }, Load { destination: Relative(17), source_pointer: Relative(24) }, JumpIf { condition: Relative(17), location: 10962 }, Jump { location: 10998 }, Load { destination: Relative(17), source_pointer: Relative(11) }, Load { destination: Relative(18), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(21) }, Store { destination_pointer: Relative(23), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(22) }, Store { destination_pointer: Relative(21), source: Relative(41) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(19) }, Store { destination_pointer: Relative(10), source: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Jump { location: 10998 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 10612 }, Load { destination: Relative(4), source_pointer: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(20) }, Load { destination: Relative(22), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(19) }, JumpIf { condition: Relative(23), location: 11008 }, Jump { location: 11027 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryFieldOp { destination: Relative(25), op: Add, lhs: Relative(23), rhs: Relative(24) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(23), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, Store { destination_pointer: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(15), source: Relative(4) }, Store { destination_pointer: Relative(18), source: Relative(23) }, Store { destination_pointer: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(21), source: Relative(22) }, Jump { location: 11027 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 10576 }, Load { destination: Relative(19), source_pointer: Relative(17) }, JumpIf { condition: Relative(19), location: 11138 }, Jump { location: 11033 }, Load { destination: Relative(19), source_pointer: Relative(11) }, Load { destination: Relative(20), source_pointer: Relative(10) }, Load { destination: Relative(21), source_pointer: Relative(19) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 11041 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(23), location: 11051 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(1) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, JumpIf { condition: Relative(25), location: 11051 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 11055 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 11060 }, Call { location: 20515 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U32, lhs: Relative(23), rhs: Relative(26) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, JumpIf { condition: Relative(23), location: 11067 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(7) }, Not { destination: Relative(28), source: Relative(21), bit_size: U1 }, BinaryIntOp { destination: Relative(21), op: Or, bit_size: U1, lhs: Relative(27), rhs: Relative(28) }, JumpIf { condition: Relative(21), location: 11091 }, Jump { location: 11086 }, BinaryFieldOp { destination: Relative(19), op: Equals, lhs: Relative(25), rhs: Relative(45) }, JumpIf { condition: Relative(19), location: 11089 }, Jump { location: 11099 }, Store { destination_pointer: Relative(26), source: Relative(14) }, Jump { location: 11099 }, Store { destination_pointer: Relative(26), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(20), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 11096 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(19) }, Store { destination_pointer: Relative(10), source: Relative(21) }, Jump { location: 11099 }, Load { destination: Relative(19), source_pointer: Relative(26) }, JumpIf { condition: Relative(19), location: 11102 }, Jump { location: 11138 }, Load { destination: Relative(19), source_pointer: Relative(11) }, Load { destination: Relative(20), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(23) }, Store { destination_pointer: Relative(25), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, Store { destination_pointer: Relative(23), source: Relative(45) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Store { destination_pointer: Relative(24), source: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(19) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(21) }, Store { destination_pointer: Relative(10), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 11138 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 10509 }, Load { destination: Relative(4), source_pointer: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Load { destination: Relative(20), source_pointer: Relative(22) }, Load { destination: Relative(24), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(25), location: 11148 }, Jump { location: 11167 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(1) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Add, lhs: Relative(25), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(17), source: Relative(4) }, Store { destination_pointer: Relative(21), source: Relative(25) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Jump { location: 11167 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 10473 }, Load { destination: Relative(19), source_pointer: Relative(17) }, JumpIf { condition: Relative(19), location: 11278 }, Jump { location: 11173 }, Load { destination: Relative(19), source_pointer: Relative(6) }, Load { destination: Relative(20), source_pointer: Relative(9) }, Load { destination: Relative(21), source_pointer: Relative(19) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 11181 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(23), location: 11191 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(1) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, JumpIf { condition: Relative(25), location: 11191 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 11195 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 11200 }, Call { location: 20515 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U32, lhs: Relative(23), rhs: Relative(26) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, JumpIf { condition: Relative(23), location: 11207 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(7) }, Not { destination: Relative(28), source: Relative(21), bit_size: U1 }, BinaryIntOp { destination: Relative(21), op: Or, bit_size: U1, lhs: Relative(27), rhs: Relative(28) }, JumpIf { condition: Relative(21), location: 11231 }, Jump { location: 11226 }, BinaryFieldOp { destination: Relative(19), op: Equals, lhs: Relative(25), rhs: Relative(45) }, JumpIf { condition: Relative(19), location: 11229 }, Jump { location: 11239 }, Store { destination_pointer: Relative(26), source: Relative(14) }, Jump { location: 11239 }, Store { destination_pointer: Relative(26), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(20), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 11236 }, Call { location: 20515 }, Store { destination_pointer: Relative(6), source: Relative(19) }, Store { destination_pointer: Relative(9), source: Relative(21) }, Jump { location: 11239 }, Load { destination: Relative(19), source_pointer: Relative(26) }, JumpIf { condition: Relative(19), location: 11242 }, Jump { location: 11278 }, Load { destination: Relative(19), source_pointer: Relative(6) }, Load { destination: Relative(20), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(23) }, Store { destination_pointer: Relative(25), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, Store { destination_pointer: Relative(23), source: Relative(45) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Store { destination_pointer: Relative(24), source: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(19) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Store { destination_pointer: Relative(6), source: Relative(21) }, Store { destination_pointer: Relative(9), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 11278 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 10406 }, Load { destination: Relative(4), source_pointer: Relative(17) }, Load { destination: Relative(18), source_pointer: Relative(20) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Load { destination: Relative(23), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(19) }, JumpIf { condition: Relative(24), location: 11288 }, Jump { location: 11307 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryFieldOp { destination: Relative(26), op: Add, lhs: Relative(24), rhs: Relative(25) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(24), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, Store { destination_pointer: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(17), source: Relative(4) }, Store { destination_pointer: Relative(20), source: Relative(24) }, Store { destination_pointer: Relative(21), source: Relative(19) }, Store { destination_pointer: Relative(22), source: Relative(23) }, Jump { location: 11307 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 10369 }, Load { destination: Relative(17), source_pointer: Relative(15) }, JumpIf { condition: Relative(17), location: 11418 }, Jump { location: 11313 }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(18), source_pointer: Relative(9) }, Load { destination: Relative(19), source_pointer: Relative(17) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 11321 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, JumpIf { condition: Relative(21), location: 11331 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(19), rhs: Relative(1) }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, JumpIf { condition: Relative(23), location: 11331 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 11335 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 11340 }, Call { location: 20515 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(22) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U32, lhs: Relative(21), rhs: Relative(24) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, JumpIf { condition: Relative(21), location: 11347 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Load { destination: Relative(19), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Not { destination: Relative(26), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: Or, bit_size: U1, lhs: Relative(25), rhs: Relative(26) }, JumpIf { condition: Relative(19), location: 11371 }, Jump { location: 11366 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(23), rhs: Relative(41) }, JumpIf { condition: Relative(17), location: 11369 }, Jump { location: 11379 }, Store { destination_pointer: Relative(24), source: Relative(14) }, Jump { location: 11379 }, Store { destination_pointer: Relative(24), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, JumpIf { condition: Relative(20), location: 11376 }, Call { location: 20515 }, Store { destination_pointer: Relative(6), source: Relative(17) }, Store { destination_pointer: Relative(9), source: Relative(19) }, Jump { location: 11379 }, Load { destination: Relative(17), source_pointer: Relative(24) }, JumpIf { condition: Relative(17), location: 11382 }, Jump { location: 11418 }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(18), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(21) }, Store { destination_pointer: Relative(23), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(22) }, Store { destination_pointer: Relative(21), source: Relative(41) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(7) }, Store { destination_pointer: Relative(6), source: Relative(19) }, Store { destination_pointer: Relative(9), source: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Jump { location: 11418 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 10301 }, Load { destination: Relative(4), source_pointer: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(17) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Load { destination: Relative(21), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 11428 }, Jump { location: 11447 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(1) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(1) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryFieldOp { destination: Relative(24), op: Add, lhs: Relative(22), rhs: Relative(23) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(1) }, Store { destination_pointer: Relative(25), source: Relative(24) }, Store { destination_pointer: Relative(15), source: Relative(4) }, Store { destination_pointer: Relative(17), source: Relative(22) }, Store { destination_pointer: Relative(18), source: Relative(20) }, Store { destination_pointer: Relative(19), source: Relative(21) }, Jump { location: 11447 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 10264 }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(10) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(10), source_pointer: Relative(21) }, Not { destination: Relative(18), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(15) }, JumpIf { condition: Relative(10), location: 11472 }, Jump { location: 11502 }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(17), rhs: Relative(8) }, Not { destination: Relative(15), source: Relative(10), bit_size: U1 }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(19), rhs: Relative(8) }, Not { destination: Relative(17), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(10), location: 11502 }, Jump { location: 11479 }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(15), location: 11483 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Store { destination_pointer: Relative(17), source: Relative(19) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Jump { location: 11502 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 10128 }, Load { destination: Relative(4), source_pointer: Relative(17) }, Load { destination: Relative(10), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(21) }, Load { destination: Relative(23), source_pointer: Relative(25) }, Not { destination: Relative(21), source: Relative(23), bit_size: U1 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U1, lhs: Relative(21), rhs: Relative(16) }, JumpIf { condition: Relative(23), location: 11527 }, Jump { location: 11561 }, BinaryFieldOp { destination: Relative(16), op: Mul, lhs: Relative(22), rhs: Relative(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(15) }, Store { destination_pointer: Relative(23), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, Store { destination_pointer: Relative(22), source: Relative(20) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(15) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Store { destination_pointer: Relative(20), source: Relative(7) }, Store { destination_pointer: Relative(17), source: Relative(15) }, Store { destination_pointer: Relative(19), source: Relative(10) }, Jump { location: 11561 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 10123 }, Load { destination: Relative(20), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 11568 }, Jump { location: 11677 }, Load { destination: Relative(21), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(26) }, BinaryFieldOp { destination: Relative(21), op: Mul, lhs: Relative(23), rhs: Relative(15) }, Load { destination: Relative(23), source_pointer: Relative(16) }, Load { destination: Relative(24), source_pointer: Relative(10) }, Load { destination: Relative(25), source_pointer: Relative(23) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 11586 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(24) }, JumpIf { condition: Relative(27), location: 11593 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(24), location: 11596 }, Call { location: 20455 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 11602 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Load { destination: Relative(23), source_pointer: Relative(18) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 11610 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(23) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(27), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(8) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(8) }, Store { destination_pointer: Relative(23), source: Relative(30) }, Store { destination_pointer: Relative(27), source: Relative(18) }, Store { destination_pointer: Relative(28), source: Relative(3) }, Store { destination_pointer: Relative(29), source: Relative(7) }, Mov { destination: Relative(20), source: Relative(12) }, Jump { location: 11637 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Direct(32837) }, JumpIf { condition: Relative(24), location: 11790 }, Jump { location: 11640 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Load { destination: Relative(30), source_pointer: Relative(25) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 11649 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(30) }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(32) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(32), size: Relative(33) }, output: HeapArray { pointer: Relative(34), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(23), source: Relative(24) }, Store { destination_pointer: Relative(27), source: Relative(30) }, Store { destination_pointer: Relative(28), source: Relative(26) }, Store { destination_pointer: Relative(29), source: Relative(14) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(3) }, Load { destination: Relative(23), source_pointer: Relative(24) }, Cast { destination: Relative(25), source: Relative(23), bit_size: Integer(U32) }, Cast { destination: Relative(24), source: Relative(25), bit_size: Field }, Cast { destination: Relative(23), source: Relative(24), bit_size: Integer(U32) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Mov { destination: Relative(20), source: Relative(12) }, Jump { location: 11673 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(6) }, JumpIf { condition: Relative(25), location: 11680 }, Jump { location: 11676 }, Jump { location: 11677 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(20) }, Jump { location: 10105 }, Load { destination: Relative(25), source_pointer: Relative(24) }, JumpIf { condition: Relative(25), location: 11787 }, Jump { location: 11683 }, Load { destination: Relative(25), source_pointer: Relative(16) }, Load { destination: Relative(26), source_pointer: Relative(10) }, Load { destination: Relative(27), source_pointer: Relative(25) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 11691 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U32, lhs: Relative(20), rhs: Relative(20) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(20) }, JumpIf { condition: Relative(29), location: 11701 }, BinaryIntOp { destination: Relative(32), op: Div, bit_size: U32, lhs: Relative(27), rhs: Relative(20) }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(20) }, JumpIf { condition: Relative(31), location: 11701 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(27) }, BinaryIntOp { destination: Relative(30), op: LessThanEquals, bit_size: U32, lhs: Relative(20), rhs: Relative(29) }, JumpIf { condition: Relative(30), location: 11705 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(27), op: Div, bit_size: U32, lhs: Relative(29), rhs: Relative(5) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(27) }, BinaryIntOp { destination: Relative(30), op: LessThanEquals, bit_size: U32, lhs: Relative(23), rhs: Relative(29) }, JumpIf { condition: Relative(30), location: 11710 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(29), rhs: Relative(6) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Relative(6) }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U32, lhs: Relative(29), rhs: Relative(31) }, BinaryIntOp { destination: Relative(29), op: LessThan, bit_size: U32, lhs: Relative(27), rhs: Relative(6) }, JumpIf { condition: Relative(29), location: 11716 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(29), op: Mul, bit_size: U32, lhs: Relative(27), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(29) }, Load { destination: Relative(27), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(3) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(30) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Load { destination: Relative(33), source_pointer: Relative(35) }, Mov { destination: Relative(32), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(7) }, Not { destination: Relative(34), source: Relative(27), bit_size: U1 }, BinaryIntOp { destination: Relative(27), op: Or, bit_size: U1, lhs: Relative(33), rhs: Relative(34) }, JumpIf { condition: Relative(27), location: 11740 }, Jump { location: 11735 }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(31), rhs: Relative(21) }, JumpIf { condition: Relative(25), location: 11738 }, Jump { location: 11748 }, Store { destination_pointer: Relative(32), source: Relative(14) }, Jump { location: 11748 }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(3) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(26), rhs: Relative(27) }, JumpIf { condition: Relative(28), location: 11745 }, Call { location: 20515 }, Store { destination_pointer: Relative(16), source: Relative(25) }, Store { destination_pointer: Relative(10), source: Relative(27) }, Jump { location: 11748 }, Load { destination: Relative(25), source_pointer: Relative(32) }, JumpIf { condition: Relative(25), location: 11751 }, Jump { location: 11787 }, Load { destination: Relative(25), source_pointer: Relative(16) }, Load { destination: Relative(26), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(29) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(27) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(30) }, Store { destination_pointer: Relative(29), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(28), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Store { destination_pointer: Relative(30), source: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(28) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(27), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(25) }, Store { destination_pointer: Relative(30), source: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(27) }, Store { destination_pointer: Relative(10), source: Relative(26) }, Store { destination_pointer: Relative(24), source: Relative(14) }, Jump { location: 11787 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, Mov { destination: Relative(20), source: Relative(25) }, Jump { location: 11673 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Load { destination: Relative(30), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(26) }, JumpIf { condition: Relative(31), location: 11797 }, Jump { location: 11816 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(20) }, Load { destination: Relative(31), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(20) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryFieldOp { destination: Relative(33), op: Add, lhs: Relative(31), rhs: Relative(32) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(20) }, Store { destination_pointer: Relative(34), source: Relative(33) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Store { destination_pointer: Relative(27), source: Relative(31) }, Store { destination_pointer: Relative(28), source: Relative(26) }, Store { destination_pointer: Relative(29), source: Relative(30) }, Jump { location: 11816 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 11637 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(20) }, Load { destination: Relative(21), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(5) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(20), source_pointer: Relative(27) }, Not { destination: Relative(23), source: Relative(20), bit_size: U1 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U1, lhs: Relative(23), rhs: Relative(21) }, JumpIf { condition: Relative(20), location: 11839 }, Jump { location: 11867 }, Load { destination: Relative(20), source_pointer: Relative(22) }, Load { destination: Relative(21), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(6) }, JumpIf { condition: Relative(23), location: 11844 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 20518 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Store { destination_pointer: Relative(28), source: Relative(24) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 20518 }, Mov { destination: Relative(23), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(20) }, Store { destination_pointer: Relative(27), source: Relative(25) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 11864 }, Call { location: 20515 }, Store { destination_pointer: Relative(22), source: Relative(23) }, Store { destination_pointer: Relative(2), source: Relative(20) }, Jump { location: 11867 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(20) }, Jump { location: 9999 }, Load { destination: Relative(21), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 11874 }, Jump { location: 11992 }, Load { destination: Relative(22), source_pointer: Relative(16) }, Load { destination: Relative(23), source_pointer: Relative(22) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 11881 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Load { destination: Relative(23), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(25), rhs: Relative(41) }, BinaryFieldOp { destination: Relative(25), op: Mul, lhs: Relative(23), rhs: Relative(15) }, Load { destination: Relative(23), source_pointer: Relative(18) }, Load { destination: Relative(26), source_pointer: Relative(2) }, Load { destination: Relative(27), source_pointer: Relative(23) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 11901 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U32, lhs: Relative(26), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(27), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(26) }, JumpIf { condition: Relative(29), location: 11908 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(27), rhs: Relative(4) }, JumpIf { condition: Relative(26), location: 11911 }, Call { location: 20455 }, Load { destination: Relative(26), source_pointer: Relative(23) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(26) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 11917 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(26) }, Load { destination: Relative(23), source_pointer: Relative(20) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 11925 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(23) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(32), source: Direct(1) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(33) }, IndirectConst { destination_pointer: Relative(32), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Mov { destination: Relative(34), source: Relative(33) }, Store { destination_pointer: Relative(34), source: Relative(22) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(8) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(8) }, Store { destination_pointer: Relative(23), source: Relative(32) }, Store { destination_pointer: Relative(29), source: Relative(20) }, Store { destination_pointer: Relative(30), source: Relative(3) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Mov { destination: Relative(21), source: Relative(12) }, Jump { location: 11952 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Direct(32837) }, JumpIf { condition: Relative(24), location: 12105 }, Jump { location: 11955 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Load { destination: Relative(26), source_pointer: Relative(29) }, Load { destination: Relative(27), source_pointer: Relative(30) }, Load { destination: Relative(28), source_pointer: Relative(26) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(28) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 11964 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(28) }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(33) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(33), size: Relative(34) }, output: HeapArray { pointer: Relative(35), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(23), source: Relative(24) }, Store { destination_pointer: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(30), source: Relative(27) }, Store { destination_pointer: Relative(31), source: Relative(14) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Load { destination: Relative(23), source_pointer: Relative(24) }, Cast { destination: Relative(26), source: Relative(23), bit_size: Integer(U32) }, Cast { destination: Relative(24), source: Relative(26), bit_size: Field }, Cast { destination: Relative(23), source: Relative(24), bit_size: Integer(U32) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, Mov { destination: Relative(21), source: Relative(12) }, Jump { location: 11988 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(6) }, JumpIf { condition: Relative(26), location: 11995 }, Jump { location: 11991 }, Jump { location: 11992 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(21) }, Jump { location: 9935 }, Load { destination: Relative(26), source_pointer: Relative(24) }, JumpIf { condition: Relative(26), location: 12102 }, Jump { location: 11998 }, Load { destination: Relative(26), source_pointer: Relative(18) }, Load { destination: Relative(27), source_pointer: Relative(2) }, Load { destination: Relative(28), source_pointer: Relative(26) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 12006 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Relative(21) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(21) }, JumpIf { condition: Relative(30), location: 12016 }, BinaryIntOp { destination: Relative(33), op: Div, bit_size: U32, lhs: Relative(28), rhs: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(21) }, JumpIf { condition: Relative(32), location: 12016 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(28) }, BinaryIntOp { destination: Relative(31), op: LessThanEquals, bit_size: U32, lhs: Relative(21), rhs: Relative(30) }, JumpIf { condition: Relative(31), location: 12020 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(28), op: Div, bit_size: U32, lhs: Relative(30), rhs: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(28) }, BinaryIntOp { destination: Relative(31), op: LessThanEquals, bit_size: U32, lhs: Relative(23), rhs: Relative(30) }, JumpIf { condition: Relative(31), location: 12025 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(31), op: Div, bit_size: U32, lhs: Relative(30), rhs: Relative(6) }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U32, lhs: Relative(30), rhs: Relative(32) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(28), rhs: Relative(6) }, JumpIf { condition: Relative(30), location: 12031 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(28), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Load { destination: Relative(28), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(33) }, Load { destination: Relative(34), source_pointer: Relative(36) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(7) }, Not { destination: Relative(35), source: Relative(28), bit_size: U1 }, BinaryIntOp { destination: Relative(28), op: Or, bit_size: U1, lhs: Relative(34), rhs: Relative(35) }, JumpIf { condition: Relative(28), location: 12055 }, Jump { location: 12050 }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(32), rhs: Relative(22) }, JumpIf { condition: Relative(26), location: 12053 }, Jump { location: 12063 }, Store { destination_pointer: Relative(33), source: Relative(14) }, Jump { location: 12063 }, Store { destination_pointer: Relative(33), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, BinaryIntOp { destination: Relative(29), op: LessThanEquals, bit_size: U32, lhs: Relative(27), rhs: Relative(28) }, JumpIf { condition: Relative(29), location: 12060 }, Call { location: 20515 }, Store { destination_pointer: Relative(18), source: Relative(26) }, Store { destination_pointer: Relative(2), source: Relative(28) }, Jump { location: 12063 }, Load { destination: Relative(26), source_pointer: Relative(33) }, JumpIf { condition: Relative(26), location: 12066 }, Jump { location: 12102 }, Load { destination: Relative(26), source_pointer: Relative(18) }, Load { destination: Relative(27), source_pointer: Relative(2) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(28), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(30) }, Store { destination_pointer: Relative(32), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(28) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(31) }, Store { destination_pointer: Relative(30), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(29), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(28) }, Store { destination_pointer: Relative(31), source: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(29) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(28), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(26) }, Store { destination_pointer: Relative(31), source: Relative(7) }, Store { destination_pointer: Relative(18), source: Relative(28) }, Store { destination_pointer: Relative(2), source: Relative(27) }, Store { destination_pointer: Relative(24), source: Relative(14) }, Jump { location: 12102 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Mov { destination: Relative(21), source: Relative(26) }, Jump { location: 11988 }, Load { destination: Relative(24), source_pointer: Relative(23) }, Load { destination: Relative(26), source_pointer: Relative(29) }, Load { destination: Relative(27), source_pointer: Relative(30) }, Load { destination: Relative(28), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(27) }, JumpIf { condition: Relative(32), location: 12112 }, Jump { location: 12131 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(21) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(21) }, Load { destination: Relative(33), source_pointer: Relative(35) }, BinaryFieldOp { destination: Relative(34), op: Add, lhs: Relative(32), rhs: Relative(33) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(32), source: Direct(32773) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(21) }, Store { destination_pointer: Relative(35), source: Relative(34) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Store { destination_pointer: Relative(29), source: Relative(32) }, Store { destination_pointer: Relative(30), source: Relative(27) }, Store { destination_pointer: Relative(31), source: Relative(28) }, Jump { location: 12131 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Mov { destination: Relative(21), source: Relative(24) }, Jump { location: 11952 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(18) }, Load { destination: Relative(21), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(5) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(23) }, Load { destination: Relative(18), source_pointer: Relative(27) }, Not { destination: Relative(23), source: Relative(18), bit_size: U1 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U1, lhs: Relative(23), rhs: Relative(21) }, JumpIf { condition: Relative(18), location: 12154 }, Jump { location: 12182 }, Load { destination: Relative(18), source_pointer: Relative(22) }, Load { destination: Relative(21), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(6) }, JumpIf { condition: Relative(23), location: 12159 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 20518 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Store { destination_pointer: Relative(28), source: Relative(24) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 20518 }, Mov { destination: Relative(23), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(18) }, Store { destination_pointer: Relative(27), source: Relative(25) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, JumpIf { condition: Relative(24), location: 12179 }, Call { location: 20515 }, Store { destination_pointer: Relative(22), source: Relative(23) }, Store { destination_pointer: Relative(20), source: Relative(18) }, Jump { location: 12182 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(18) }, Jump { location: 9829 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(2) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 12191 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(21) }, JumpIf { condition: Relative(2), location: 12196 }, Jump { location: 12227 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(2) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 12202 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, Load { destination: Relative(2), source_pointer: Relative(20) }, Load { destination: Relative(18), source_pointer: Relative(31) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 12213 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(19) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(18) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 12221 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(14)), HeapArray(HeapArray { pointer: Relative(18), size: 19 }), MemoryAddress(Relative(41)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(23), size: 16 }), MemoryAddress(Relative(14))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 19 }, Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 12227 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 9761 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(22) }, Load { destination: Relative(31), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(5) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(34), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(22), source_pointer: Relative(36) }, Not { destination: Relative(32), source: Relative(22), bit_size: U1 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(32), rhs: Relative(31) }, JumpIf { condition: Relative(22), location: 12246 }, Jump { location: 12265 }, Load { destination: Relative(22), source_pointer: Relative(21) }, Load { destination: Relative(31), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, JumpIf { condition: Relative(32), location: 12251 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 20518 }, Mov { destination: Relative(32), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(31) }, Store { destination_pointer: Relative(36), source: Relative(34) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, JumpIf { condition: Relative(34), location: 12262 }, Call { location: 20515 }, Store { destination_pointer: Relative(21), source: Relative(32) }, Store { destination_pointer: Relative(2), source: Relative(22) }, Jump { location: 12265 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 9662 }, Load { destination: Relative(31), source_pointer: Relative(21) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(31) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 12274 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(31), location: 12279 }, Jump { location: 12403 }, Load { destination: Relative(32), source_pointer: Relative(21) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 12285 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(32) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, Load { destination: Relative(32), source_pointer: Relative(37) }, Load { destination: Relative(35), source_pointer: Relative(16) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(35) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 12296 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(35) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(8) }, Load { destination: Relative(38), source_pointer: Relative(16) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(38) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 12307 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(38) }, Load { destination: Relative(38), source_pointer: Relative(2) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(38) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 12315 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(38) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(32) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(8) }, Store { destination_pointer: Relative(38), source: Relative(46) }, Store { destination_pointer: Relative(42), source: Relative(2) }, Store { destination_pointer: Relative(43), source: Relative(3) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Mov { destination: Relative(31), source: Relative(12) }, Jump { location: 12342 }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Direct(32837) }, JumpIf { condition: Relative(34), location: 12469 }, Jump { location: 12345 }, Load { destination: Relative(34), source_pointer: Relative(38) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(39), source_pointer: Relative(43) }, Load { destination: Relative(40), source_pointer: Relative(37) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(40) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 12354 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(40) }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(48) }, output: HeapArray { pointer: Relative(49), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(38), source: Relative(34) }, Store { destination_pointer: Relative(42), source: Relative(40) }, Store { destination_pointer: Relative(43), source: Relative(39) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, Load { destination: Relative(34), source_pointer: Relative(37) }, Cast { destination: Relative(38), source: Relative(34), bit_size: Integer(U32) }, Cast { destination: Relative(37), source: Relative(38), bit_size: Field }, Cast { destination: Relative(34), source: Relative(37), bit_size: Integer(U32) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(7) }, Mov { destination: Relative(31), source: Relative(12) }, Jump { location: 12378 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, JumpIf { condition: Relative(38), location: 12406 }, Jump { location: 12381 }, Load { destination: Relative(31), source_pointer: Relative(35) }, Load { destination: Relative(34), source_pointer: Relative(36) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 12388 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(34) }, Load { destination: Relative(34), source_pointer: Relative(19) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(34) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 12396 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(14)), HeapArray(HeapArray { pointer: Relative(34), size: 16 }), MemoryAddress(Relative(15)), MemoryAddress(Relative(32)), MemoryAddress(Relative(31)), HeapArray(HeapArray { pointer: Relative(38), size: 16 }), HeapArray(HeapArray { pointer: Relative(39), size: 16 }), MemoryAddress(Relative(14))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Field), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 12403 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 9628 }, Load { destination: Relative(38), source_pointer: Relative(37) }, JumpIf { condition: Relative(38), location: 12466 }, Jump { location: 12409 }, Load { destination: Relative(38), source_pointer: Relative(16) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(38) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 12415 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Relative(31) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(31) }, JumpIf { condition: Relative(40), location: 12425 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(38), rhs: Relative(31) }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(31) }, JumpIf { condition: Relative(43), location: 12425 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(38) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(40) }, JumpIf { condition: Relative(42), location: 12429 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(38), op: Div, bit_size: U32, lhs: Relative(40), rhs: Relative(5) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(38) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(34), rhs: Relative(40) }, JumpIf { condition: Relative(42), location: 12434 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(40), rhs: Relative(6) }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(38), op: Sub, bit_size: U32, lhs: Relative(40), rhs: Relative(43) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(38), rhs: Relative(6) }, JumpIf { condition: Relative(40), location: 12440 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U32, lhs: Relative(38), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(40) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(43), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(5) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(42) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(42) }, Load { destination: Relative(40), source_pointer: Relative(47) }, Not { destination: Relative(42), source: Relative(40), bit_size: U1 }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U1, lhs: Relative(42), rhs: Relative(38) }, JumpIf { condition: Relative(40), location: 12460 }, Jump { location: 12466 }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(43), rhs: Relative(32) }, JumpIf { condition: Relative(38), location: 12463 }, Jump { location: 12466 }, Store { destination_pointer: Relative(35), source: Relative(44) }, Store { destination_pointer: Relative(37), source: Relative(14) }, Jump { location: 12466 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Mov { destination: Relative(31), source: Relative(38) }, Jump { location: 12378 }, Load { destination: Relative(34), source_pointer: Relative(38) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(39), source_pointer: Relative(43) }, Load { destination: Relative(40), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(39) }, JumpIf { condition: Relative(46), location: 12476 }, Jump { location: 12495 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(31) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(31) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryFieldOp { destination: Relative(48), op: Add, lhs: Relative(46), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(46), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(31) }, Store { destination_pointer: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(38), source: Relative(34) }, Store { destination_pointer: Relative(42), source: Relative(46) }, Store { destination_pointer: Relative(43), source: Relative(39) }, Store { destination_pointer: Relative(44), source: Relative(40) }, Jump { location: 12495 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Mov { destination: Relative(31), source: Relative(34) }, Jump { location: 12342 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(21) }, Load { destination: Relative(31), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(34), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(21), source_pointer: Relative(37) }, Not { destination: Relative(32), source: Relative(21), bit_size: U1 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(32), rhs: Relative(31) }, JumpIf { condition: Relative(21), location: 12514 }, Jump { location: 12533 }, Load { destination: Relative(21), source_pointer: Relative(22) }, Load { destination: Relative(31), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, JumpIf { condition: Relative(32), location: 12519 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 20518 }, Mov { destination: Relative(32), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(31) }, Store { destination_pointer: Relative(37), source: Relative(34) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(21) }, JumpIf { condition: Relative(34), location: 12530 }, Call { location: 20515 }, Store { destination_pointer: Relative(22), source: Relative(32) }, Store { destination_pointer: Relative(2), source: Relative(21) }, Jump { location: 12533 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(21) }, Jump { location: 9552 }, Load { destination: Relative(2), source_pointer: Relative(21) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(2) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 12542 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(2), location: 12547 }, Jump { location: 12586 }, Load { destination: Relative(31), source_pointer: Relative(21) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(31) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 12553 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(31) }, JumpIf { condition: Relative(2), location: 12557 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(2) }, Load { destination: Relative(31), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(2), source_pointer: Relative(37) }, Load { destination: Relative(34), source_pointer: Relative(36) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 12571 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(34) }, Load { destination: Relative(34), source_pointer: Relative(19) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(34) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 12579 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(14)), HeapArray(HeapArray { pointer: Relative(34), size: 16 }), MemoryAddress(Relative(15)), MemoryAddress(Relative(31)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(38), size: 16 }), HeapArray(HeapArray { pointer: Relative(39), size: 16 }), MemoryAddress(Relative(14))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Field), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 12586 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 9510 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(21) }, Load { destination: Relative(31), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(32) }, Load { destination: Relative(35), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(32) }, Load { destination: Relative(36), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(32) }, Load { destination: Relative(21), source_pointer: Relative(42) }, Not { destination: Relative(32), source: Relative(21), bit_size: U1 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(32), rhs: Relative(31) }, JumpIf { condition: Relative(21), location: 12609 }, Jump { location: 12637 }, Load { destination: Relative(21), source_pointer: Relative(22) }, Load { destination: Relative(31), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, JumpIf { condition: Relative(32), location: 12614 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(32) }, Store { destination_pointer: Relative(43), source: Relative(35) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 20518 }, Mov { destination: Relative(32), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(21) }, Store { destination_pointer: Relative(42), source: Relative(36) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(21) }, JumpIf { condition: Relative(35), location: 12634 }, Call { location: 20515 }, Store { destination_pointer: Relative(22), source: Relative(32) }, Store { destination_pointer: Relative(19), source: Relative(21) }, Jump { location: 12637 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(21) }, Jump { location: 9379 }, Load { destination: Relative(22), source_pointer: Relative(21) }, JumpIf { condition: Relative(22), location: 12696 }, Jump { location: 12643 }, Load { destination: Relative(22), source_pointer: Relative(16) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 12649 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, JumpIf { condition: Relative(32), location: 12659 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, JumpIf { condition: Relative(36), location: 12659 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(32) }, JumpIf { condition: Relative(35), location: 12663 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(22), op: Div, bit_size: U32, lhs: Relative(32), rhs: Relative(5) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(22) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(19), rhs: Relative(32) }, JumpIf { condition: Relative(35), location: 12668 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(32), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U32, lhs: Relative(32), rhs: Relative(36) }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(6) }, JumpIf { condition: Relative(32), location: 12674 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(32) }, Load { destination: Relative(22), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(35) }, Load { destination: Relative(36), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(35) }, Load { destination: Relative(32), source_pointer: Relative(42) }, Not { destination: Relative(35), source: Relative(32), bit_size: U1 }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U1, lhs: Relative(35), rhs: Relative(22) }, JumpIf { condition: Relative(32), location: 12690 }, Jump { location: 12696 }, BinaryFieldOp { destination: Relative(22), op: Equals, lhs: Relative(36), rhs: Relative(50) }, JumpIf { condition: Relative(22), location: 12693 }, Jump { location: 12696 }, Store { destination_pointer: Relative(17), source: Relative(14) }, Store { destination_pointer: Relative(21), source: Relative(14) }, Jump { location: 12696 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(22) }, Jump { location: 9320 }, Load { destination: Relative(19), source_pointer: Relative(31) }, Load { destination: Relative(21), source_pointer: Relative(32) }, Load { destination: Relative(22), source_pointer: Relative(35) }, Load { destination: Relative(39), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(22) }, JumpIf { condition: Relative(42), location: 12706 }, Jump { location: 12725 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(1) }, Load { destination: Relative(42), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, Load { destination: Relative(43), source_pointer: Relative(46) }, BinaryFieldOp { destination: Relative(44), op: Add, lhs: Relative(42), rhs: Relative(43) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(1) }, Store { destination_pointer: Relative(46), source: Relative(44) }, Store { destination_pointer: Relative(31), source: Relative(19) }, Store { destination_pointer: Relative(32), source: Relative(42) }, Store { destination_pointer: Relative(35), source: Relative(22) }, Store { destination_pointer: Relative(36), source: Relative(39) }, Jump { location: 12725 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(19) }, Jump { location: 9284 }, Load { destination: Relative(36), source_pointer: Relative(31) }, JumpIf { condition: Relative(36), location: 12784 }, Jump { location: 12731 }, Load { destination: Relative(36), source_pointer: Relative(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 12737 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(42), location: 12747 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 12747 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 12751 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(17), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 12756 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(6) }, JumpIf { condition: Relative(42), location: 12762 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(42), source_pointer: Relative(52) }, Not { destination: Relative(44), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U1, lhs: Relative(44), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 12778 }, Jump { location: 12784 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(48), rhs: Relative(50) }, JumpIf { condition: Relative(36), location: 12781 }, Jump { location: 12784 }, Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Jump { location: 12784 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 9106 }, Load { destination: Relative(17), source_pointer: Relative(44) }, Load { destination: Relative(31), source_pointer: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 12794 }, Jump { location: 12813 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(42), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(42), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(44), source: Relative(17) }, Store { destination_pointer: Relative(48), source: Relative(42) }, Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(52), source: Relative(39) }, Jump { location: 12813 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 9070 }, Load { destination: Relative(17), source_pointer: Relative(16) }, JumpIf { condition: Relative(17), location: 12899 }, Jump { location: 12819 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(17) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 12827 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(42), location: 12837 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 12837 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 12841 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 12846 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(6) }, JumpIf { condition: Relative(42), location: 12852 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(42), source_pointer: Relative(56) }, Not { destination: Relative(51), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U1, lhs: Relative(51), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 12872 }, Jump { location: 12899 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(48), rhs: Relative(41) }, JumpIf { condition: Relative(36), location: 12875 }, Jump { location: 12899 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(52) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Sub, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(31) }, JumpIf { condition: Relative(39), location: 12895 }, Call { location: 20596 }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(17) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Jump { location: 12899 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 8941 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 12909 }, Jump { location: 12928 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(54) }, BinaryFieldOp { destination: Relative(52), op: Add, lhs: Relative(48), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(54), source: Relative(52) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(44) }, Jump { location: 12928 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8905 }, Load { destination: Relative(17), source_pointer: Relative(16) }, JumpIf { condition: Relative(17), location: 13038 }, Jump { location: 12934 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(17) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 12942 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(42), location: 12952 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 12952 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 12956 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 12961 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(6) }, JumpIf { condition: Relative(42), location: 12967 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(56) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Not { destination: Relative(54), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Or, bit_size: U1, lhs: Relative(52), rhs: Relative(54) }, JumpIf { condition: Relative(36), location: 12991 }, Jump { location: 12986 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(48), rhs: Relative(45) }, JumpIf { condition: Relative(17), location: 12989 }, Jump { location: 12999 }, Store { destination_pointer: Relative(51), source: Relative(14) }, Jump { location: 12999 }, Store { destination_pointer: Relative(51), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(36) }, JumpIf { condition: Relative(39), location: 12996 }, Call { location: 20515 }, Store { destination_pointer: Relative(9), source: Relative(17) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Jump { location: 12999 }, Load { destination: Relative(17), source_pointer: Relative(51) }, JumpIf { condition: Relative(17), location: 13002 }, Jump { location: 13038 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(45) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(50) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Jump { location: 13038 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 8842 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 13048 }, Jump { location: 13067 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(54) }, BinaryFieldOp { destination: Relative(52), op: Add, lhs: Relative(48), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(54), source: Relative(52) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(44) }, Jump { location: 13067 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8806 }, Load { destination: Relative(31), source_pointer: Relative(17) }, JumpIf { condition: Relative(31), location: 13177 }, Jump { location: 13073 }, Load { destination: Relative(31), source_pointer: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 13081 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 13091 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, JumpIf { condition: Relative(51), location: 13091 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(39) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 13095 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(5) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(39) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 13100 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(6) }, BinaryIntOp { destination: Relative(39), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(6) }, JumpIf { condition: Relative(44), location: 13106 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Load { destination: Relative(39), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Not { destination: Relative(57), source: Relative(39), bit_size: U1 }, BinaryIntOp { destination: Relative(39), op: Or, bit_size: U1, lhs: Relative(56), rhs: Relative(57) }, JumpIf { condition: Relative(39), location: 13130 }, Jump { location: 13125 }, BinaryFieldOp { destination: Relative(31), op: Equals, lhs: Relative(51), rhs: Relative(52) }, JumpIf { condition: Relative(31), location: 13128 }, Jump { location: 13138 }, Store { destination_pointer: Relative(54), source: Relative(14) }, Jump { location: 13138 }, Store { destination_pointer: Relative(54), source: Relative(14) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(39) }, JumpIf { condition: Relative(42), location: 13135 }, Call { location: 20515 }, Store { destination_pointer: Relative(9), source: Relative(31) }, Store { destination_pointer: Relative(11), source: Relative(39) }, Jump { location: 13138 }, Load { destination: Relative(31), source_pointer: Relative(54) }, JumpIf { condition: Relative(31), location: 13141 }, Jump { location: 13177 }, Load { destination: Relative(31), source_pointer: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(44) }, Store { destination_pointer: Relative(51), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(52) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(39) }, Store { destination_pointer: Relative(48), source: Relative(16) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(31) }, Store { destination_pointer: Relative(48), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(39) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 13177 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 8743 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 13187 }, Jump { location: 13206 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(51), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(51) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(48) }, Jump { location: 13206 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8707 }, Load { destination: Relative(36), source_pointer: Relative(17) }, JumpIf { condition: Relative(36), location: 13316 }, Jump { location: 13212 }, Load { destination: Relative(36), source_pointer: Relative(9) }, Load { destination: Relative(39), source_pointer: Relative(11) }, Load { destination: Relative(42), source_pointer: Relative(36) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 13220 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 13230 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(1) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 13230 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 13234 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(5) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 13239 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(6) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Relative(6) }, BinaryIntOp { destination: Relative(42), op: Sub, bit_size: U32, lhs: Relative(48), rhs: Relative(54) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, JumpIf { condition: Relative(48), location: 13245 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Load { destination: Relative(42), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Not { destination: Relative(58), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Or, bit_size: U1, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(42), location: 13269 }, Jump { location: 13264 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(54), rhs: Relative(45) }, JumpIf { condition: Relative(36), location: 13267 }, Jump { location: 13277 }, Store { destination_pointer: Relative(56), source: Relative(14) }, Jump { location: 13277 }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13274 }, Call { location: 20515 }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(42) }, Jump { location: 13277 }, Load { destination: Relative(36), source_pointer: Relative(56) }, JumpIf { condition: Relative(36), location: 13280 }, Jump { location: 13316 }, Load { destination: Relative(36), source_pointer: Relative(9) }, Load { destination: Relative(39), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(48) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, Store { destination_pointer: Relative(48), source: Relative(45) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Store { destination_pointer: Relative(51), source: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(42) }, Store { destination_pointer: Relative(11), source: Relative(39) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 13316 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 8640 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 13326 }, Jump { location: 13345 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(51), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(51) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(48) }, Jump { location: 13345 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8603 }, Load { destination: Relative(17), source_pointer: Relative(4) }, JumpIf { condition: Relative(17), location: 13455 }, Jump { location: 13351 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(17) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 13359 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(42), location: 13369 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 13369 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13373 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13378 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(6) }, JumpIf { condition: Relative(42), location: 13384 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Load { destination: Relative(54), source_pointer: Relative(57) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Not { destination: Relative(56), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Or, bit_size: U1, lhs: Relative(54), rhs: Relative(56) }, JumpIf { condition: Relative(36), location: 13408 }, Jump { location: 13403 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(48), rhs: Relative(41) }, JumpIf { condition: Relative(17), location: 13406 }, Jump { location: 13416 }, Store { destination_pointer: Relative(51), source: Relative(14) }, Jump { location: 13416 }, Store { destination_pointer: Relative(51), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(36) }, JumpIf { condition: Relative(39), location: 13413 }, Call { location: 20515 }, Store { destination_pointer: Relative(9), source: Relative(17) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Jump { location: 13416 }, Load { destination: Relative(17), source_pointer: Relative(51) }, JumpIf { condition: Relative(17), location: 13419 }, Jump { location: 13455 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(41) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(15) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Jump { location: 13455 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 8535 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 13465 }, Jump { location: 13484 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(54), op: Add, lhs: Relative(48), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(56), source: Relative(54) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(44) }, Jump { location: 13484 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8499 }, Load { destination: Relative(17), source_pointer: Relative(4) }, JumpIf { condition: Relative(17), location: 13570 }, Jump { location: 13490 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(17) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 13498 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(42), location: 13508 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 13508 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13512 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13517 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(6) }, JumpIf { condition: Relative(42), location: 13523 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Load { destination: Relative(42), source_pointer: Relative(57) }, Not { destination: Relative(51), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U1, lhs: Relative(51), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 13543 }, Jump { location: 13570 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(48), rhs: Relative(41) }, JumpIf { condition: Relative(36), location: 13546 }, Jump { location: 13570 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(54) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Sub, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(31) }, JumpIf { condition: Relative(39), location: 13566 }, Call { location: 20596 }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(17) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Jump { location: 13570 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 8436 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 13580 }, Jump { location: 13599 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(54), op: Add, lhs: Relative(48), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(56), source: Relative(54) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(44) }, Jump { location: 13599 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8400 }, Load { destination: Relative(17), source_pointer: Relative(4) }, JumpIf { condition: Relative(17), location: 13709 }, Jump { location: 13605 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Load { destination: Relative(36), source_pointer: Relative(17) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 13613 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(42), location: 13623 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 13623 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13627 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(36), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 13632 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(36), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(6) }, JumpIf { condition: Relative(42), location: 13638 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Load { destination: Relative(54), source_pointer: Relative(57) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Not { destination: Relative(56), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Or, bit_size: U1, lhs: Relative(54), rhs: Relative(56) }, JumpIf { condition: Relative(36), location: 13662 }, Jump { location: 13657 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(48), rhs: Relative(41) }, JumpIf { condition: Relative(17), location: 13660 }, Jump { location: 13670 }, Store { destination_pointer: Relative(51), source: Relative(14) }, Jump { location: 13670 }, Store { destination_pointer: Relative(51), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(31), rhs: Relative(36) }, JumpIf { condition: Relative(39), location: 13667 }, Call { location: 20515 }, Store { destination_pointer: Relative(9), source: Relative(17) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Jump { location: 13670 }, Load { destination: Relative(17), source_pointer: Relative(51) }, JumpIf { condition: Relative(17), location: 13673 }, Jump { location: 13709 }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(31), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(42) }, Store { destination_pointer: Relative(48), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(41) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(15) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Jump { location: 13709 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(17) }, Jump { location: 8336 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(44), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(31) }, JumpIf { condition: Relative(48), location: 13719 }, Jump { location: 13738 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(54), op: Add, lhs: Relative(48), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(56), source: Relative(54) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(42), source: Relative(44) }, Jump { location: 13738 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8300 }, Load { destination: Relative(31), source_pointer: Relative(17) }, JumpIf { condition: Relative(31), location: 13824 }, Jump { location: 13744 }, Load { destination: Relative(31), source_pointer: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 13752 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 13762 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, JumpIf { condition: Relative(51), location: 13762 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(39) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 13766 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(5) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(39) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 13771 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(6) }, BinaryIntOp { destination: Relative(39), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(6) }, JumpIf { condition: Relative(44), location: 13777 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Load { destination: Relative(39), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(44), source_pointer: Relative(58) }, Not { destination: Relative(54), source: Relative(44), bit_size: U1 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U1, lhs: Relative(54), rhs: Relative(39) }, JumpIf { condition: Relative(44), location: 13797 }, Jump { location: 13824 }, BinaryFieldOp { destination: Relative(39), op: Equals, lhs: Relative(51), rhs: Relative(4) }, JumpIf { condition: Relative(39), location: 13800 }, Jump { location: 13824 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(39) }, Store { destination_pointer: Relative(48), source: Relative(56) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(31) }, Store { destination_pointer: Relative(48), source: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 13820 }, Call { location: 20596 }, Store { destination_pointer: Relative(9), source: Relative(39) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 13824 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 8237 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 13834 }, Jump { location: 13853 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(51), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(51) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(48) }, Jump { location: 13853 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8201 }, Load { destination: Relative(31), source_pointer: Relative(17) }, JumpIf { condition: Relative(31), location: 13939 }, Jump { location: 13859 }, Load { destination: Relative(31), source_pointer: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Load { destination: Relative(39), source_pointer: Relative(31) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 13867 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 13877 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, JumpIf { condition: Relative(51), location: 13877 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(39) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 13881 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(5) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(39) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 13886 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(6) }, BinaryIntOp { destination: Relative(39), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(6) }, JumpIf { condition: Relative(44), location: 13892 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Load { destination: Relative(39), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(44), source_pointer: Relative(58) }, Not { destination: Relative(54), source: Relative(44), bit_size: U1 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U1, lhs: Relative(54), rhs: Relative(39) }, JumpIf { condition: Relative(44), location: 13912 }, Jump { location: 13939 }, BinaryFieldOp { destination: Relative(39), op: Equals, lhs: Relative(51), rhs: Relative(4) }, JumpIf { condition: Relative(39), location: 13915 }, Jump { location: 13939 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(39) }, Store { destination_pointer: Relative(48), source: Relative(56) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(31) }, Store { destination_pointer: Relative(48), source: Relative(14) }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 13935 }, Call { location: 20596 }, Store { destination_pointer: Relative(9), source: Relative(39) }, Store { destination_pointer: Relative(11), source: Relative(31) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 13939 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 8138 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(36) }, Load { destination: Relative(44), source_pointer: Relative(39) }, Load { destination: Relative(48), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(51), location: 13949 }, Jump { location: 13968 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(51), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(51) }, Store { destination_pointer: Relative(39), source: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(48) }, Jump { location: 13968 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 8102 }, Load { destination: Relative(44), source_pointer: Relative(39) }, JumpIf { condition: Relative(44), location: 14032 }, Jump { location: 13974 }, Load { destination: Relative(44), source_pointer: Relative(2) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(44) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 13980 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, JumpIf { condition: Relative(51), location: 13990 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 13990 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, JumpIf { condition: Relative(54), location: 13994 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(44) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(51) }, JumpIf { condition: Relative(54), location: 13999 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(6) }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Relative(6) }, BinaryIntOp { destination: Relative(44), op: Sub, bit_size: U32, lhs: Relative(51), rhs: Relative(56) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(44), rhs: Relative(6) }, JumpIf { condition: Relative(51), location: 14005 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(44), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Load { destination: Relative(51), source_pointer: Relative(59) }, Not { destination: Relative(54), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U1, lhs: Relative(54), rhs: Relative(44) }, JumpIf { condition: Relative(51), location: 14025 }, Jump { location: 14032 }, BinaryFieldOp { destination: Relative(44), op: Equals, lhs: Relative(56), rhs: Relative(4) }, JumpIf { condition: Relative(44), location: 14028 }, Jump { location: 14032 }, Store { destination_pointer: Relative(17), source: Relative(14) }, Store { destination_pointer: Relative(42), source: Relative(57) }, Store { destination_pointer: Relative(39), source: Relative(14) }, Jump { location: 14032 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(44) }, Jump { location: 8040 }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(54) }, Load { destination: Relative(44), source_pointer: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(58), location: 14042 }, Jump { location: 14061 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryFieldOp { destination: Relative(60), op: Add, lhs: Relative(58), rhs: Relative(59) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(56), source: Relative(44) }, Store { destination_pointer: Relative(57), source: Relative(48) }, Jump { location: 14061 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 8004 }, Load { destination: Relative(36), source_pointer: Relative(17) }, JumpIf { condition: Relative(36), location: 14171 }, Jump { location: 14067 }, Load { destination: Relative(36), source_pointer: Relative(9) }, Load { destination: Relative(39), source_pointer: Relative(11) }, Load { destination: Relative(42), source_pointer: Relative(36) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 14075 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 14085 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(1) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 14085 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 14089 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(5) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 14094 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(6) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Relative(6) }, BinaryIntOp { destination: Relative(42), op: Sub, bit_size: U32, lhs: Relative(48), rhs: Relative(54) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(6) }, JumpIf { condition: Relative(48), location: 14100 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Load { destination: Relative(42), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Not { destination: Relative(58), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Or, bit_size: U1, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(42), location: 14124 }, Jump { location: 14119 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(54), rhs: Relative(4) }, JumpIf { condition: Relative(36), location: 14122 }, Jump { location: 14132 }, Store { destination_pointer: Relative(56), source: Relative(14) }, Jump { location: 14132 }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 14129 }, Call { location: 20515 }, Store { destination_pointer: Relative(9), source: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(42) }, Jump { location: 14132 }, Load { destination: Relative(36), source_pointer: Relative(56) }, JumpIf { condition: Relative(36), location: 14135 }, Jump { location: 14171 }, Load { destination: Relative(36), source_pointer: Relative(9) }, Load { destination: Relative(39), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(48) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, Store { destination_pointer: Relative(48), source: Relative(4) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Store { destination_pointer: Relative(51), source: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(42) }, Store { destination_pointer: Relative(11), source: Relative(39) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Jump { location: 14171 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 7927 }, Load { destination: Relative(2), source_pointer: Relative(17) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 14181 }, Jump { location: 14200 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(51), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Store { destination_pointer: Relative(39), source: Relative(51) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(44), source: Relative(48) }, Jump { location: 14200 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 7890 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Load { destination: Relative(39), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(5) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Load { destination: Relative(44), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(51) }, Not { destination: Relative(42), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(42), rhs: Relative(39) }, JumpIf { condition: Relative(36), location: 14219 }, Jump { location: 14238 }, Load { destination: Relative(36), source_pointer: Relative(31) }, Load { destination: Relative(39), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(17) }, JumpIf { condition: Relative(42), location: 14224 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(39) }, Store { destination_pointer: Relative(51), source: Relative(44) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, JumpIf { condition: Relative(44), location: 14235 }, Call { location: 20515 }, Store { destination_pointer: Relative(31), source: Relative(42) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Jump { location: 14238 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 7756 }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(39) }, Load { destination: Relative(42), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(39), source_pointer: Relative(56) }, Not { destination: Relative(48), source: Relative(39), bit_size: U1 }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(42) }, JumpIf { condition: Relative(39), location: 14257 }, Jump { location: 14276 }, Load { destination: Relative(39), source_pointer: Relative(44) }, Load { destination: Relative(42), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 14262 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Store { destination_pointer: Relative(56), source: Relative(51) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(39) }, JumpIf { condition: Relative(51), location: 14273 }, Call { location: 20515 }, Store { destination_pointer: Relative(44), source: Relative(48) }, Store { destination_pointer: Relative(36), source: Relative(39) }, Jump { location: 14276 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(39) }, Jump { location: 7680 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Load { destination: Relative(39), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(42) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(56) }, Not { destination: Relative(42), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(42), rhs: Relative(39) }, JumpIf { condition: Relative(36), location: 14299 }, Jump { location: 14327 }, Load { destination: Relative(36), source_pointer: Relative(44) }, Load { destination: Relative(39), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(17) }, JumpIf { condition: Relative(42), location: 14304 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(48) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(51) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, JumpIf { condition: Relative(48), location: 14324 }, Call { location: 20515 }, Store { destination_pointer: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(9), source: Relative(36) }, Jump { location: 14327 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 7596 }, Load { destination: Relative(48), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 14334 }, Jump { location: 14444 }, Load { destination: Relative(51), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(54), source_pointer: Relative(58) }, Load { destination: Relative(51), source_pointer: Relative(39) }, Load { destination: Relative(56), source_pointer: Relative(9) }, Load { destination: Relative(57), source_pointer: Relative(51) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 14348 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(60), op: Div, bit_size: U32, lhs: Relative(57), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(56) }, JumpIf { condition: Relative(59), location: 14355 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(44) }, JumpIf { condition: Relative(56), location: 14358 }, Call { location: 20455 }, Load { destination: Relative(56), source_pointer: Relative(51) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 14364 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 14372 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(51) }, Load { destination: Relative(51), source_pointer: Relative(42) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(51) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 14380 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(62), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Load { destination: Relative(63), source_pointer: Relative(2) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(65), op: Equals, bit_size: U32, lhs: Relative(64), rhs: Relative(63) }, Not { destination: Relative(65), source: Relative(65), bit_size: U1 }, JumpIf { condition: Relative(65), location: 14396 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(63) }, Store { destination_pointer: Relative(51), source: Relative(2) }, Store { destination_pointer: Relative(60), source: Relative(42) }, Store { destination_pointer: Relative(61), source: Relative(3) }, Store { destination_pointer: Relative(62), source: Relative(7) }, Mov { destination: Relative(48), source: Relative(12) }, Jump { location: 14404 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, JumpIf { condition: Relative(56), location: 14558 }, Jump { location: 14407 }, Load { destination: Relative(56), source_pointer: Relative(51) }, Load { destination: Relative(57), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(61) }, Load { destination: Relative(59), source_pointer: Relative(57) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(64), op: Equals, bit_size: U32, lhs: Relative(63), rhs: Relative(59) }, Not { destination: Relative(64), source: Relative(64), bit_size: U1 }, JumpIf { condition: Relative(64), location: 14416 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(59) }, Mov { destination: Relative(59), source: Direct(1) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(64) }, IndirectConst { destination_pointer: Relative(59), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Const { destination: Relative(65), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(64), size: Relative(65) }, output: HeapArray { pointer: Relative(66), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(61), source: Relative(58) }, Store { destination_pointer: Relative(62), source: Relative(14) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, Load { destination: Relative(51), source_pointer: Relative(56) }, Cast { destination: Relative(57), source: Relative(51), bit_size: Integer(U32) }, Cast { destination: Relative(56), source: Relative(57), bit_size: Field }, Cast { destination: Relative(51), source: Relative(56), bit_size: Integer(U32) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Mov { destination: Relative(48), source: Relative(12) }, Jump { location: 14440 }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(17) }, JumpIf { condition: Relative(57), location: 14447 }, Jump { location: 14443 }, Jump { location: 14444 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(48) }, Jump { location: 7509 }, Load { destination: Relative(57), source_pointer: Relative(56) }, JumpIf { condition: Relative(57), location: 14555 }, Jump { location: 14450 }, Load { destination: Relative(57), source_pointer: Relative(39) }, Load { destination: Relative(58), source_pointer: Relative(9) }, Load { destination: Relative(59), source_pointer: Relative(57) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(59) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 14458 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(48) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(48) }, JumpIf { condition: Relative(61), location: 14468 }, BinaryIntOp { destination: Relative(64), op: Div, bit_size: U32, lhs: Relative(59), rhs: Relative(48) }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(64), rhs: Relative(48) }, JumpIf { condition: Relative(63), location: 14468 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(59) }, BinaryIntOp { destination: Relative(62), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(61) }, JumpIf { condition: Relative(62), location: 14472 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(61), rhs: Relative(5) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(59) }, BinaryIntOp { destination: Relative(62), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(61) }, JumpIf { condition: Relative(62), location: 14477 }, Call { location: 20515 }, Const { destination: Relative(62), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(63), op: Div, bit_size: U32, lhs: Relative(61), rhs: Relative(62) }, BinaryIntOp { destination: Relative(64), op: Mul, bit_size: U32, lhs: Relative(63), rhs: Relative(62) }, BinaryIntOp { destination: Relative(59), op: Sub, bit_size: U32, lhs: Relative(61), rhs: Relative(64) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(59), rhs: Relative(17) }, JumpIf { condition: Relative(61), location: 14484 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(61), op: Mul, bit_size: U32, lhs: Relative(59), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(61) }, Load { destination: Relative(59), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(3) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Relative(64) }, Load { destination: Relative(65), source_pointer: Relative(67) }, Mov { destination: Relative(64), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(7) }, Not { destination: Relative(66), source: Relative(59), bit_size: U1 }, BinaryIntOp { destination: Relative(59), op: Or, bit_size: U1, lhs: Relative(65), rhs: Relative(66) }, JumpIf { condition: Relative(59), location: 14508 }, Jump { location: 14503 }, BinaryFieldOp { destination: Relative(57), op: Equals, lhs: Relative(63), rhs: Relative(8) }, JumpIf { condition: Relative(57), location: 14506 }, Jump { location: 14516 }, Store { destination_pointer: Relative(64), source: Relative(14) }, Jump { location: 14516 }, Store { destination_pointer: Relative(64), source: Relative(14) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, BinaryIntOp { destination: Relative(60), op: LessThanEquals, bit_size: U32, lhs: Relative(58), rhs: Relative(59) }, JumpIf { condition: Relative(60), location: 14513 }, Call { location: 20515 }, Store { destination_pointer: Relative(39), source: Relative(57) }, Store { destination_pointer: Relative(9), source: Relative(59) }, Jump { location: 14516 }, Load { destination: Relative(57), source_pointer: Relative(64) }, JumpIf { condition: Relative(57), location: 14519 }, Jump { location: 14555 }, Load { destination: Relative(57), source_pointer: Relative(39) }, Load { destination: Relative(58), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(59), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(61) }, Store { destination_pointer: Relative(63), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(59) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(62) }, Store { destination_pointer: Relative(61), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(60), source: Direct(32773) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Store { destination_pointer: Relative(62), source: Relative(54) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(60) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(59), source: Direct(32773) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(57) }, Store { destination_pointer: Relative(62), source: Relative(7) }, Store { destination_pointer: Relative(39), source: Relative(59) }, Store { destination_pointer: Relative(9), source: Relative(58) }, Store { destination_pointer: Relative(56), source: Relative(14) }, Jump { location: 14555 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Relative(48), source: Relative(57) }, Jump { location: 14440 }, Load { destination: Relative(56), source_pointer: Relative(51) }, Load { destination: Relative(57), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(61) }, Load { destination: Relative(59), source_pointer: Relative(62) }, BinaryIntOp { destination: Relative(63), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(58) }, JumpIf { condition: Relative(63), location: 14565 }, Jump { location: 14584 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(48) }, Load { destination: Relative(63), source_pointer: Relative(65) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(48) }, Load { destination: Relative(64), source_pointer: Relative(66) }, BinaryFieldOp { destination: Relative(65), op: Add, lhs: Relative(63), rhs: Relative(64) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(63), source: Direct(32773) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(48) }, Store { destination_pointer: Relative(66), source: Relative(65) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(63) }, Store { destination_pointer: Relative(61), source: Relative(58) }, Store { destination_pointer: Relative(62), source: Relative(59) }, Jump { location: 14584 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Relative(48), source: Relative(56) }, Jump { location: 14404 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Load { destination: Relative(42), source_pointer: Relative(59) }, Not { destination: Relative(54), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U1, lhs: Relative(54), rhs: Relative(51) }, JumpIf { condition: Relative(42), location: 14607 }, Jump { location: 14635 }, Load { destination: Relative(42), source_pointer: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 14612 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(54) }, Store { destination_pointer: Relative(60), source: Relative(56) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(42) }, Store { destination_pointer: Relative(59), source: Relative(57) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(42) }, JumpIf { condition: Relative(56), location: 14632 }, Call { location: 20515 }, Store { destination_pointer: Relative(48), source: Relative(54) }, Store { destination_pointer: Relative(39), source: Relative(42) }, Jump { location: 14635 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(42) }, Jump { location: 7371 }, Load { destination: Relative(42), source_pointer: Relative(39) }, JumpIf { condition: Relative(42), location: 14746 }, Jump { location: 14641 }, Load { destination: Relative(42), source_pointer: Relative(11) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Load { destination: Relative(51), source_pointer: Relative(42) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 14649 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 14659 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, JumpIf { condition: Relative(58), location: 14659 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 14663 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(51) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 14668 }, Call { location: 20515 }, Const { destination: Relative(57), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, BinaryIntOp { destination: Relative(51), op: Sub, bit_size: U32, lhs: Relative(56), rhs: Relative(59) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 14675 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(51), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Load { destination: Relative(60), source_pointer: Relative(62) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(7) }, Not { destination: Relative(61), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Or, bit_size: U1, lhs: Relative(60), rhs: Relative(61) }, JumpIf { condition: Relative(51), location: 14699 }, Jump { location: 14694 }, BinaryFieldOp { destination: Relative(42), op: Equals, lhs: Relative(58), rhs: Relative(45) }, JumpIf { condition: Relative(42), location: 14697 }, Jump { location: 14707 }, Store { destination_pointer: Relative(59), source: Relative(14) }, Jump { location: 14707 }, Store { destination_pointer: Relative(59), source: Relative(14) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(51) }, JumpIf { condition: Relative(54), location: 14704 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(42) }, Store { destination_pointer: Relative(31), source: Relative(51) }, Jump { location: 14707 }, Load { destination: Relative(42), source_pointer: Relative(59) }, JumpIf { condition: Relative(42), location: 14710 }, Jump { location: 14746 }, Load { destination: Relative(42), source_pointer: Relative(11) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(56) }, Store { destination_pointer: Relative(58), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(57) }, Store { destination_pointer: Relative(56), source: Relative(45) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(9) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(51) }, Store { destination_pointer: Relative(31), source: Relative(48) }, Store { destination_pointer: Relative(39), source: Relative(14) }, Jump { location: 14746 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(42) }, Jump { location: 7305 }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(54) }, Load { destination: Relative(42), source_pointer: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(58), location: 14756 }, Jump { location: 14775 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryFieldOp { destination: Relative(60), op: Add, lhs: Relative(58), rhs: Relative(59) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(56), source: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(48) }, Jump { location: 14775 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 7269 }, Load { destination: Relative(48), source_pointer: Relative(39) }, JumpIf { condition: Relative(48), location: 14886 }, Jump { location: 14781 }, Load { destination: Relative(48), source_pointer: Relative(11) }, Load { destination: Relative(51), source_pointer: Relative(31) }, Load { destination: Relative(54), source_pointer: Relative(48) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 14789 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, JumpIf { condition: Relative(57), location: 14799 }, BinaryIntOp { destination: Relative(60), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, JumpIf { condition: Relative(59), location: 14799 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 14803 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(54) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 14808 }, Call { location: 20515 }, Const { destination: Relative(58), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(58) }, BinaryIntOp { destination: Relative(60), op: Mul, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Sub, bit_size: U32, lhs: Relative(57), rhs: Relative(60) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(17) }, JumpIf { condition: Relative(57), location: 14815 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Load { destination: Relative(54), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(60) }, Load { destination: Relative(61), source_pointer: Relative(63) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Not { destination: Relative(62), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Or, bit_size: U1, lhs: Relative(61), rhs: Relative(62) }, JumpIf { condition: Relative(54), location: 14839 }, Jump { location: 14834 }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(59), rhs: Relative(15) }, JumpIf { condition: Relative(48), location: 14837 }, Jump { location: 14847 }, Store { destination_pointer: Relative(60), source: Relative(14) }, Jump { location: 14847 }, Store { destination_pointer: Relative(60), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 14844 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(48) }, Store { destination_pointer: Relative(31), source: Relative(54) }, Jump { location: 14847 }, Load { destination: Relative(48), source_pointer: Relative(60) }, JumpIf { condition: Relative(48), location: 14850 }, Jump { location: 14886 }, Load { destination: Relative(48), source_pointer: Relative(11) }, Load { destination: Relative(51), source_pointer: Relative(31) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, Store { destination_pointer: Relative(59), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(58) }, Store { destination_pointer: Relative(57), source: Relative(15) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Store { destination_pointer: Relative(58), source: Relative(42) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(48) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(54) }, Store { destination_pointer: Relative(31), source: Relative(51) }, Store { destination_pointer: Relative(39), source: Relative(14) }, Jump { location: 14886 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(48) }, Jump { location: 7194 }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(39), source_pointer: Relative(54) }, Load { destination: Relative(42), source_pointer: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, JumpIf { condition: Relative(58), location: 14896 }, Jump { location: 14915 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryFieldOp { destination: Relative(60), op: Add, lhs: Relative(58), rhs: Relative(59) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(51), source: Relative(36) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(56), source: Relative(42) }, Store { destination_pointer: Relative(57), source: Relative(48) }, Jump { location: 14915 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 7157 }, Load { destination: Relative(48), source_pointer: Relative(39) }, JumpIf { condition: Relative(48), location: 15026 }, Jump { location: 14921 }, Load { destination: Relative(48), source_pointer: Relative(11) }, Load { destination: Relative(51), source_pointer: Relative(31) }, Load { destination: Relative(54), source_pointer: Relative(48) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 14929 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, JumpIf { condition: Relative(57), location: 14939 }, BinaryIntOp { destination: Relative(60), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, JumpIf { condition: Relative(59), location: 14939 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 14943 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(54) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 14948 }, Call { location: 20515 }, Const { destination: Relative(58), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(58) }, BinaryIntOp { destination: Relative(60), op: Mul, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Sub, bit_size: U32, lhs: Relative(57), rhs: Relative(60) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(17) }, JumpIf { condition: Relative(57), location: 14955 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Load { destination: Relative(54), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(60) }, Load { destination: Relative(61), source_pointer: Relative(63) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Not { destination: Relative(62), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Or, bit_size: U1, lhs: Relative(61), rhs: Relative(62) }, JumpIf { condition: Relative(54), location: 14979 }, Jump { location: 14974 }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(59), rhs: Relative(41) }, JumpIf { condition: Relative(48), location: 14977 }, Jump { location: 14987 }, Store { destination_pointer: Relative(60), source: Relative(14) }, Jump { location: 14987 }, Store { destination_pointer: Relative(60), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 14984 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(48) }, Store { destination_pointer: Relative(31), source: Relative(54) }, Jump { location: 14987 }, Load { destination: Relative(48), source_pointer: Relative(60) }, JumpIf { condition: Relative(48), location: 14990 }, Jump { location: 15026 }, Load { destination: Relative(48), source_pointer: Relative(11) }, Load { destination: Relative(51), source_pointer: Relative(31) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, Store { destination_pointer: Relative(59), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(58) }, Store { destination_pointer: Relative(57), source: Relative(41) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Store { destination_pointer: Relative(58), source: Relative(42) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(48) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(54) }, Store { destination_pointer: Relative(31), source: Relative(51) }, Store { destination_pointer: Relative(39), source: Relative(14) }, Jump { location: 15026 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(48) }, Jump { location: 7082 }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(39), source_pointer: Relative(48) }, Load { destination: Relative(56), source_pointer: Relative(51) }, Load { destination: Relative(57), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(56) }, JumpIf { condition: Relative(58), location: 15036 }, Jump { location: 15055 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryFieldOp { destination: Relative(60), op: Add, lhs: Relative(58), rhs: Relative(59) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(48), source: Relative(58) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(57) }, Jump { location: 15055 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 7045 }, Load { destination: Relative(31), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Load { destination: Relative(42), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(36) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(42), rhs: Relative(54) }, BinaryFieldOp { destination: Relative(42), op: Equals, lhs: Relative(51), rhs: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U1, lhs: Relative(31), rhs: Relative(36) }, Store { destination_pointer: Relative(11), source: Relative(42) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 6907 }, Load { destination: Relative(4), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(4) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 15087 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, JumpIf { condition: Relative(36), location: 15091 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Load { destination: Relative(4), source_pointer: Relative(51) }, Load { destination: Relative(42), source_pointer: Relative(31) }, Load { destination: Relative(48), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, JumpIf { condition: Relative(51), location: 15104 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(39) }, Store { destination_pointer: Relative(56), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(4) }, JumpIf { condition: Relative(39), location: 15124 }, Call { location: 20515 }, Store { destination_pointer: Relative(31), source: Relative(42) }, Store { destination_pointer: Relative(2), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 6603 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(9) }, Load { destination: Relative(36), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(39) }, Load { destination: Relative(42), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(39) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(39) }, Load { destination: Relative(9), source_pointer: Relative(54) }, Not { destination: Relative(39), source: Relative(9), bit_size: U1 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(39), rhs: Relative(36) }, JumpIf { condition: Relative(9), location: 15149 }, Jump { location: 15177 }, Load { destination: Relative(9), source_pointer: Relative(4) }, Load { destination: Relative(36), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(17) }, JumpIf { condition: Relative(39), location: 15154 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(39) }, Store { destination_pointer: Relative(56), source: Relative(42) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(9) }, Store { destination_pointer: Relative(54), source: Relative(48) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(42), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(9) }, JumpIf { condition: Relative(42), location: 15174 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(39) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Jump { location: 15177 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(9) }, Jump { location: 6540 }, Load { destination: Relative(39), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(39) }, JumpIf { condition: Relative(42), location: 15184 }, Jump { location: 15302 }, Load { destination: Relative(42), source_pointer: Relative(11) }, Load { destination: Relative(48), source_pointer: Relative(42) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 15191 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(58) }, BinaryFieldOp { destination: Relative(42), op: Mul, lhs: Relative(54), rhs: Relative(15) }, BinaryFieldOp { destination: Relative(54), op: Mul, lhs: Relative(48), rhs: Relative(15) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Load { destination: Relative(56), source_pointer: Relative(2) }, Load { destination: Relative(57), source_pointer: Relative(48) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 15211 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(60), op: Div, bit_size: U32, lhs: Relative(57), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(56) }, JumpIf { condition: Relative(59), location: 15218 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(44) }, JumpIf { condition: Relative(56), location: 15221 }, Call { location: 20455 }, Load { destination: Relative(56), source_pointer: Relative(48) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 15227 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(56) }, Load { destination: Relative(48), source_pointer: Relative(36) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 15235 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(62), source: Direct(1) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(63) }, IndirectConst { destination_pointer: Relative(62), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Direct(2) }, Mov { destination: Relative(64), source: Relative(63) }, Store { destination_pointer: Relative(64), source: Relative(42) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(8) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(8) }, Store { destination_pointer: Relative(48), source: Relative(62) }, Store { destination_pointer: Relative(59), source: Relative(36) }, Store { destination_pointer: Relative(60), source: Relative(3) }, Store { destination_pointer: Relative(61), source: Relative(7) }, Mov { destination: Relative(39), source: Relative(12) }, Jump { location: 15262 }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Direct(32837) }, JumpIf { condition: Relative(51), location: 15416 }, Jump { location: 15265 }, Load { destination: Relative(51), source_pointer: Relative(48) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(56) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(58) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 15274 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(58) }, Mov { destination: Relative(58), source: Direct(1) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(63) }, IndirectConst { destination_pointer: Relative(58), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(63), size: Relative(64) }, output: HeapArray { pointer: Relative(65), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(48), source: Relative(51) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(14) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Load { destination: Relative(48), source_pointer: Relative(51) }, Cast { destination: Relative(56), source: Relative(48), bit_size: Integer(U32) }, Cast { destination: Relative(51), source: Relative(56), bit_size: Field }, Cast { destination: Relative(48), source: Relative(51), bit_size: Integer(U32) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Mov { destination: Relative(39), source: Relative(12) }, Jump { location: 15298 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 15305 }, Jump { location: 15301 }, Jump { location: 15302 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(39) }, Jump { location: 6472 }, Load { destination: Relative(56), source_pointer: Relative(51) }, JumpIf { condition: Relative(56), location: 15413 }, Jump { location: 15308 }, Load { destination: Relative(56), source_pointer: Relative(31) }, Load { destination: Relative(57), source_pointer: Relative(2) }, Load { destination: Relative(58), source_pointer: Relative(56) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 15316 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Relative(39) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(39) }, JumpIf { condition: Relative(60), location: 15326 }, BinaryIntOp { destination: Relative(63), op: Div, bit_size: U32, lhs: Relative(58), rhs: Relative(39) }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(63), rhs: Relative(39) }, JumpIf { condition: Relative(62), location: 15326 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(58) }, BinaryIntOp { destination: Relative(61), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(60) }, JumpIf { condition: Relative(61), location: 15330 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(60), rhs: Relative(5) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(58) }, BinaryIntOp { destination: Relative(61), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(60) }, JumpIf { condition: Relative(61), location: 15335 }, Call { location: 20515 }, Const { destination: Relative(61), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(62), op: Div, bit_size: U32, lhs: Relative(60), rhs: Relative(61) }, BinaryIntOp { destination: Relative(63), op: Mul, bit_size: U32, lhs: Relative(62), rhs: Relative(61) }, BinaryIntOp { destination: Relative(58), op: Sub, bit_size: U32, lhs: Relative(60), rhs: Relative(63) }, BinaryIntOp { destination: Relative(60), op: LessThan, bit_size: U32, lhs: Relative(58), rhs: Relative(17) }, JumpIf { condition: Relative(60), location: 15342 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(60), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(62) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(3) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(61) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(63) }, Load { destination: Relative(64), source_pointer: Relative(66) }, Mov { destination: Relative(63), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(7) }, Not { destination: Relative(65), source: Relative(58), bit_size: U1 }, BinaryIntOp { destination: Relative(58), op: Or, bit_size: U1, lhs: Relative(64), rhs: Relative(65) }, JumpIf { condition: Relative(58), location: 15366 }, Jump { location: 15361 }, BinaryFieldOp { destination: Relative(56), op: Equals, lhs: Relative(62), rhs: Relative(42) }, JumpIf { condition: Relative(56), location: 15364 }, Jump { location: 15374 }, Store { destination_pointer: Relative(63), source: Relative(14) }, Jump { location: 15374 }, Store { destination_pointer: Relative(63), source: Relative(14) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: LessThanEquals, bit_size: U32, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(59), location: 15371 }, Call { location: 20515 }, Store { destination_pointer: Relative(31), source: Relative(56) }, Store { destination_pointer: Relative(2), source: Relative(58) }, Jump { location: 15374 }, Load { destination: Relative(56), source_pointer: Relative(63) }, JumpIf { condition: Relative(56), location: 15377 }, Jump { location: 15413 }, Load { destination: Relative(56), source_pointer: Relative(31) }, Load { destination: Relative(57), source_pointer: Relative(2) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(60) }, Store { destination_pointer: Relative(62), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(61) }, Store { destination_pointer: Relative(60), source: Relative(42) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(59), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Store { destination_pointer: Relative(61), source: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(59) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(56) }, Store { destination_pointer: Relative(61), source: Relative(7) }, Store { destination_pointer: Relative(31), source: Relative(58) }, Store { destination_pointer: Relative(2), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(14) }, Jump { location: 15413 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Relative(39), source: Relative(56) }, Jump { location: 15298 }, Load { destination: Relative(51), source_pointer: Relative(48) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(62), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(57) }, JumpIf { condition: Relative(62), location: 15423 }, Jump { location: 15442 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(39) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(39) }, Load { destination: Relative(63), source_pointer: Relative(65) }, BinaryFieldOp { destination: Relative(64), op: Add, lhs: Relative(62), rhs: Relative(63) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(62), source: Direct(32773) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(39) }, Store { destination_pointer: Relative(65), source: Relative(64) }, Store { destination_pointer: Relative(48), source: Relative(51) }, Store { destination_pointer: Relative(59), source: Relative(62) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(58) }, Jump { location: 15442 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Relative(39), source: Relative(51) }, Jump { location: 15262 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Load { destination: Relative(42), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(57) }, Not { destination: Relative(48), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(42) }, JumpIf { condition: Relative(36), location: 15465 }, Jump { location: 15493 }, Load { destination: Relative(36), source_pointer: Relative(39) }, Load { destination: Relative(42), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 15470 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(48) }, Store { destination_pointer: Relative(58), source: Relative(51) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(36) }, Store { destination_pointer: Relative(57), source: Relative(54) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 15490 }, Call { location: 20515 }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(31), source: Relative(36) }, Jump { location: 15493 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 6342 }, Load { destination: Relative(31), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(1) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, Load { destination: Relative(42), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(36), rhs: Relative(42) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(31), rhs: Relative(48) }, Store { destination_pointer: Relative(2), source: Relative(36) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 6273 }, Load { destination: Relative(31), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(54), op: Equals, lhs: Relative(48), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U1, lhs: Relative(31), rhs: Relative(54) }, Store { destination_pointer: Relative(39), source: Relative(48) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 6139 }, Load { destination: Relative(36), source_pointer: Relative(11) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(36) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 15528 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(36) }, JumpIf { condition: Relative(40), location: 15532 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, Load { destination: Relative(36), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(31) }, Load { destination: Relative(51), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 15540 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(36) }, JumpIf { condition: Relative(48), location: 15551 }, Call { location: 20515 }, Store { destination_pointer: Relative(31), source: Relative(54) }, Store { destination_pointer: Relative(16), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5883 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Load { destination: Relative(40), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(56) }, Not { destination: Relative(48), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(40) }, JumpIf { condition: Relative(36), location: 15572 }, Jump { location: 15591 }, Load { destination: Relative(36), source_pointer: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(40), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 15577 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(40) }, Store { destination_pointer: Relative(56), source: Relative(51) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(40), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 15588 }, Call { location: 20515 }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(31), source: Relative(36) }, Jump { location: 15591 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5826 }, Load { destination: Relative(31), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(31) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 15600 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(31) }, JumpIf { condition: Relative(40), location: 15604 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, Load { destination: Relative(31), source_pointer: Relative(48) }, Load { destination: Relative(39), source_pointer: Relative(16) }, Load { destination: Relative(48), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, JumpIf { condition: Relative(51), location: 15612 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(39), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(31) }, JumpIf { condition: Relative(39), location: 15623 }, Call { location: 20515 }, Store { destination_pointer: Relative(16), source: Relative(51) }, Store { destination_pointer: Relative(2), source: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 5550 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Load { destination: Relative(40), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(56) }, Not { destination: Relative(48), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(40) }, JumpIf { condition: Relative(36), location: 15644 }, Jump { location: 15663 }, Load { destination: Relative(36), source_pointer: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(40), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 15649 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(40) }, Store { destination_pointer: Relative(56), source: Relative(51) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(40), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 15660 }, Call { location: 20515 }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(31), source: Relative(36) }, Jump { location: 15663 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5496 }, Load { destination: Relative(11), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Load { destination: Relative(36), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(54), source_pointer: Relative(57) }, Not { destination: Relative(48), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(36) }, JumpIf { condition: Relative(54), location: 15688 }, Jump { location: 15722 }, BinaryFieldOp { destination: Relative(36), op: Mul, lhs: Relative(51), rhs: Relative(52) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(31) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(39) }, Store { destination_pointer: Relative(51), source: Relative(40) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(31) }, Store { destination_pointer: Relative(48), source: Relative(36) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(31), source: Direct(32773) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(11) }, Store { destination_pointer: Relative(40), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(31) }, Store { destination_pointer: Relative(9), source: Relative(16) }, Jump { location: 15722 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 5446 }, Load { destination: Relative(39), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(39) }, JumpIf { condition: Relative(40), location: 15729 }, Jump { location: 15846 }, Load { destination: Relative(40), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(40), op: Mul, lhs: Relative(51), rhs: Relative(45) }, Load { destination: Relative(51), source_pointer: Relative(31) }, Load { destination: Relative(54), source_pointer: Relative(11) }, Load { destination: Relative(56), source_pointer: Relative(51) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 15747 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(56), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(54) }, JumpIf { condition: Relative(58), location: 15754 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(56), rhs: Relative(44) }, JumpIf { condition: Relative(54), location: 15757 }, Call { location: 20455 }, Load { destination: Relative(54), source_pointer: Relative(51) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 15763 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(54) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 15771 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(51) }, Load { destination: Relative(51), source_pointer: Relative(36) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(51) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 15779 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(62), source: Direct(1) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(63) }, IndirectConst { destination_pointer: Relative(62), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Direct(2) }, Mov { destination: Relative(64), source: Relative(63) }, Store { destination_pointer: Relative(64), source: Relative(40) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(8) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(8) }, Store { destination_pointer: Relative(51), source: Relative(62) }, Store { destination_pointer: Relative(59), source: Relative(36) }, Store { destination_pointer: Relative(60), source: Relative(3) }, Store { destination_pointer: Relative(61), source: Relative(7) }, Mov { destination: Relative(39), source: Relative(12) }, Jump { location: 15806 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 15960 }, Jump { location: 15809 }, Load { destination: Relative(54), source_pointer: Relative(51) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(56) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(58) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 15818 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(58) }, Mov { destination: Relative(58), source: Direct(1) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(63) }, IndirectConst { destination_pointer: Relative(58), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(63), size: Relative(64) }, output: HeapArray { pointer: Relative(65), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(54) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Load { destination: Relative(51), source_pointer: Relative(54) }, Cast { destination: Relative(56), source: Relative(51), bit_size: Integer(U32) }, Cast { destination: Relative(54), source: Relative(56), bit_size: Field }, Cast { destination: Relative(51), source: Relative(54), bit_size: Integer(U32) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(39), source: Relative(12) }, Jump { location: 15842 }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 15849 }, Jump { location: 15845 }, Jump { location: 15846 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(39) }, Jump { location: 5429 }, Load { destination: Relative(56), source_pointer: Relative(54) }, JumpIf { condition: Relative(56), location: 15957 }, Jump { location: 15852 }, Load { destination: Relative(56), source_pointer: Relative(31) }, Load { destination: Relative(57), source_pointer: Relative(11) }, Load { destination: Relative(58), source_pointer: Relative(56) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 15860 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Relative(39) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(39) }, JumpIf { condition: Relative(60), location: 15870 }, BinaryIntOp { destination: Relative(63), op: Div, bit_size: U32, lhs: Relative(58), rhs: Relative(39) }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(63), rhs: Relative(39) }, JumpIf { condition: Relative(62), location: 15870 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(58) }, BinaryIntOp { destination: Relative(61), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(60) }, JumpIf { condition: Relative(61), location: 15874 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(60), rhs: Relative(5) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(58) }, BinaryIntOp { destination: Relative(61), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(60) }, JumpIf { condition: Relative(61), location: 15879 }, Call { location: 20515 }, Const { destination: Relative(61), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(62), op: Div, bit_size: U32, lhs: Relative(60), rhs: Relative(61) }, BinaryIntOp { destination: Relative(63), op: Mul, bit_size: U32, lhs: Relative(62), rhs: Relative(61) }, BinaryIntOp { destination: Relative(58), op: Sub, bit_size: U32, lhs: Relative(60), rhs: Relative(63) }, BinaryIntOp { destination: Relative(60), op: LessThan, bit_size: U32, lhs: Relative(58), rhs: Relative(17) }, JumpIf { condition: Relative(60), location: 15886 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(60), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(62) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(3) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(61) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(63) }, Load { destination: Relative(64), source_pointer: Relative(66) }, Mov { destination: Relative(63), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(7) }, Not { destination: Relative(65), source: Relative(58), bit_size: U1 }, BinaryIntOp { destination: Relative(58), op: Or, bit_size: U1, lhs: Relative(64), rhs: Relative(65) }, JumpIf { condition: Relative(58), location: 15910 }, Jump { location: 15905 }, BinaryFieldOp { destination: Relative(56), op: Equals, lhs: Relative(62), rhs: Relative(40) }, JumpIf { condition: Relative(56), location: 15908 }, Jump { location: 15918 }, Store { destination_pointer: Relative(63), source: Relative(14) }, Jump { location: 15918 }, Store { destination_pointer: Relative(63), source: Relative(14) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: LessThanEquals, bit_size: U32, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(59), location: 15915 }, Call { location: 20515 }, Store { destination_pointer: Relative(31), source: Relative(56) }, Store { destination_pointer: Relative(11), source: Relative(58) }, Jump { location: 15918 }, Load { destination: Relative(56), source_pointer: Relative(63) }, JumpIf { condition: Relative(56), location: 15921 }, Jump { location: 15957 }, Load { destination: Relative(56), source_pointer: Relative(31) }, Load { destination: Relative(57), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(60) }, Store { destination_pointer: Relative(62), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(61) }, Store { destination_pointer: Relative(60), source: Relative(40) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(59), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Store { destination_pointer: Relative(61), source: Relative(48) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(59) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(56) }, Store { destination_pointer: Relative(61), source: Relative(7) }, Store { destination_pointer: Relative(31), source: Relative(58) }, Store { destination_pointer: Relative(11), source: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Jump { location: 15957 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Relative(39), source: Relative(56) }, Jump { location: 15842 }, Load { destination: Relative(54), source_pointer: Relative(51) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(62), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(57) }, JumpIf { condition: Relative(62), location: 15967 }, Jump { location: 15986 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(39) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(39) }, Load { destination: Relative(63), source_pointer: Relative(65) }, BinaryFieldOp { destination: Relative(64), op: Add, lhs: Relative(62), rhs: Relative(63) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(62), source: Direct(32773) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(39) }, Store { destination_pointer: Relative(65), source: Relative(64) }, Store { destination_pointer: Relative(51), source: Relative(54) }, Store { destination_pointer: Relative(59), source: Relative(62) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(58) }, Jump { location: 15986 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Mov { destination: Relative(39), source: Relative(54) }, Jump { location: 15806 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Load { destination: Relative(40), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(54), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(48) }, Load { destination: Relative(36), source_pointer: Relative(57) }, Not { destination: Relative(48), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(40) }, JumpIf { condition: Relative(36), location: 16009 }, Jump { location: 16037 }, Load { destination: Relative(36), source_pointer: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(40), rhs: Relative(17) }, JumpIf { condition: Relative(48), location: 16014 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(40), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(48) }, Store { destination_pointer: Relative(58), source: Relative(51) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(36) }, Store { destination_pointer: Relative(57), source: Relative(54) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(40), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 16034 }, Call { location: 20515 }, Store { destination_pointer: Relative(39), source: Relative(48) }, Store { destination_pointer: Relative(31), source: Relative(36) }, Jump { location: 16037 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5291 }, Load { destination: Relative(36), source_pointer: Relative(31) }, JumpIf { condition: Relative(36), location: 16148 }, Jump { location: 16043 }, Load { destination: Relative(36), source_pointer: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Load { destination: Relative(48), source_pointer: Relative(36) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 16051 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 16061 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, JumpIf { condition: Relative(57), location: 16061 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 16065 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(48) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 16070 }, Call { location: 20515 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(56) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(58) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 16077 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Not { destination: Relative(60), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Or, bit_size: U1, lhs: Relative(59), rhs: Relative(60) }, JumpIf { condition: Relative(48), location: 16101 }, Jump { location: 16096 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(57), rhs: Relative(16) }, JumpIf { condition: Relative(36), location: 16099 }, Jump { location: 16109 }, Store { destination_pointer: Relative(58), source: Relative(14) }, Jump { location: 16109 }, Store { destination_pointer: Relative(58), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 16106 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(36) }, Store { destination_pointer: Relative(9), source: Relative(48) }, Jump { location: 16109 }, Load { destination: Relative(36), source_pointer: Relative(58) }, JumpIf { condition: Relative(36), location: 16112 }, Jump { location: 16148 }, Load { destination: Relative(36), source_pointer: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(16) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(40) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(48) }, Store { destination_pointer: Relative(9), source: Relative(39) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Jump { location: 16148 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5225 }, Load { destination: Relative(11), source_pointer: Relative(48) }, Load { destination: Relative(31), source_pointer: Relative(51) }, Load { destination: Relative(36), source_pointer: Relative(54) }, Load { destination: Relative(39), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(57), location: 16158 }, Jump { location: 16177 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: Add, lhs: Relative(57), rhs: Relative(58) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(48), source: Relative(11) }, Store { destination_pointer: Relative(51), source: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(39) }, Jump { location: 16177 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 5189 }, Load { destination: Relative(36), source_pointer: Relative(31) }, JumpIf { condition: Relative(36), location: 16288 }, Jump { location: 16183 }, Load { destination: Relative(36), source_pointer: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Load { destination: Relative(48), source_pointer: Relative(36) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 16191 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 16201 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, JumpIf { condition: Relative(57), location: 16201 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 16205 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(48) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 16210 }, Call { location: 20515 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(56) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(58) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 16217 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Not { destination: Relative(60), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Or, bit_size: U1, lhs: Relative(59), rhs: Relative(60) }, JumpIf { condition: Relative(48), location: 16241 }, Jump { location: 16236 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(57), rhs: Relative(52) }, JumpIf { condition: Relative(36), location: 16239 }, Jump { location: 16249 }, Store { destination_pointer: Relative(58), source: Relative(14) }, Jump { location: 16249 }, Store { destination_pointer: Relative(58), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 16246 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(36) }, Store { destination_pointer: Relative(9), source: Relative(48) }, Jump { location: 16249 }, Load { destination: Relative(36), source_pointer: Relative(58) }, JumpIf { condition: Relative(36), location: 16252 }, Jump { location: 16288 }, Load { destination: Relative(36), source_pointer: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(52) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(50) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(48) }, Store { destination_pointer: Relative(9), source: Relative(39) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Jump { location: 16288 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5114 }, Load { destination: Relative(11), source_pointer: Relative(48) }, Load { destination: Relative(31), source_pointer: Relative(51) }, Load { destination: Relative(36), source_pointer: Relative(54) }, Load { destination: Relative(39), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(36) }, JumpIf { condition: Relative(57), location: 16298 }, Jump { location: 16317 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: Add, lhs: Relative(57), rhs: Relative(58) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(48), source: Relative(11) }, Store { destination_pointer: Relative(51), source: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(39) }, Jump { location: 16317 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 5078 }, Load { destination: Relative(36), source_pointer: Relative(31) }, JumpIf { condition: Relative(36), location: 16428 }, Jump { location: 16323 }, Load { destination: Relative(36), source_pointer: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Load { destination: Relative(48), source_pointer: Relative(36) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 16331 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 16341 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, JumpIf { condition: Relative(57), location: 16341 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 16345 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(48) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 16350 }, Call { location: 20515 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(56) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(58) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 16357 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(48), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Not { destination: Relative(60), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Or, bit_size: U1, lhs: Relative(59), rhs: Relative(60) }, JumpIf { condition: Relative(48), location: 16381 }, Jump { location: 16376 }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(57), rhs: Relative(15) }, JumpIf { condition: Relative(36), location: 16379 }, Jump { location: 16389 }, Store { destination_pointer: Relative(58), source: Relative(14) }, Jump { location: 16389 }, Store { destination_pointer: Relative(58), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(39), rhs: Relative(48) }, JumpIf { condition: Relative(51), location: 16386 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(36) }, Store { destination_pointer: Relative(9), source: Relative(48) }, Jump { location: 16389 }, Load { destination: Relative(36), source_pointer: Relative(58) }, JumpIf { condition: Relative(36), location: 16392 }, Jump { location: 16428 }, Load { destination: Relative(36), source_pointer: Relative(4) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(36), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(15) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(36) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(48) }, Store { destination_pointer: Relative(56), source: Relative(45) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(36) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(48) }, Store { destination_pointer: Relative(9), source: Relative(39) }, Store { destination_pointer: Relative(31), source: Relative(14) }, Jump { location: 16428 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 5003 }, Load { destination: Relative(11), source_pointer: Relative(36) }, Load { destination: Relative(31), source_pointer: Relative(39) }, Load { destination: Relative(54), source_pointer: Relative(48) }, Load { destination: Relative(56), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(57), location: 16438 }, Jump { location: 16457 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: Add, lhs: Relative(57), rhs: Relative(58) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(36), source: Relative(11) }, Store { destination_pointer: Relative(39), source: Relative(57) }, Store { destination_pointer: Relative(48), source: Relative(54) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Jump { location: 16457 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 4967 }, Load { destination: Relative(11), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(31) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(39) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(31) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(39) }, Load { destination: Relative(31), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(39), op: Equals, lhs: Relative(36), rhs: Relative(51) }, BinaryFieldOp { destination: Relative(36), op: Equals, lhs: Relative(48), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Mul, bit_size: U1, lhs: Relative(39), rhs: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(31) }, Store { destination_pointer: Relative(9), source: Relative(36) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 4829 }, Load { destination: Relative(31), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, Load { destination: Relative(36), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, Load { destination: Relative(39), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(36), rhs: Relative(39) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(31), rhs: Relative(48) }, Store { destination_pointer: Relative(11), source: Relative(36) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(31) }, Jump { location: 4801 }, Load { destination: Relative(36), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, Load { destination: Relative(39), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(54) }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(39), rhs: Relative(48) }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U1, lhs: Relative(36), rhs: Relative(51) }, Store { destination_pointer: Relative(31), source: Relative(39) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 4779 }, Load { destination: Relative(36), source_pointer: Relative(11) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(36) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 16515 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(36) }, JumpIf { condition: Relative(39), location: 16519 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(36) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(36), source_pointer: Relative(57) }, Load { destination: Relative(54), source_pointer: Relative(31) }, Load { destination: Relative(56), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, JumpIf { condition: Relative(57), location: 16532 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Store { destination_pointer: Relative(60), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(51) }, Store { destination_pointer: Relative(59), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(56), rhs: Relative(36) }, JumpIf { condition: Relative(51), location: 16552 }, Call { location: 20515 }, Store { destination_pointer: Relative(31), source: Relative(54) }, Store { destination_pointer: Relative(4), source: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(36) }, Jump { location: 4486 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(58) }, Load { destination: Relative(60), source_pointer: Relative(62) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(62) }, Not { destination: Relative(58), source: Relative(56), bit_size: U1 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U1, lhs: Relative(58), rhs: Relative(57) }, JumpIf { condition: Relative(56), location: 16577 }, Jump { location: 16605 }, Load { destination: Relative(56), source_pointer: Relative(54) }, Load { destination: Relative(57), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(17) }, JumpIf { condition: Relative(58), location: 16582 }, Call { location: 20611 }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(5) }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(58) }, Store { destination_pointer: Relative(63), source: Relative(59) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(61) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(56) }, Store { destination_pointer: Relative(62), source: Relative(60) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: LessThanEquals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, JumpIf { condition: Relative(59), location: 16602 }, Call { location: 20515 }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(10), source: Relative(56) }, Jump { location: 16605 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(56) }, Jump { location: 4246 }, Load { destination: Relative(54), source_pointer: Relative(9) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 16614 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(54) }, JumpIf { condition: Relative(59), location: 16618 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(60) }, Load { destination: Relative(58), source_pointer: Relative(57) }, Load { destination: Relative(60), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(60), rhs: Direct(32837) }, JumpIf { condition: Relative(61), location: 16626 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(60) }, Store { destination_pointer: Relative(63), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(60), rhs: Relative(54) }, JumpIf { condition: Relative(58), location: 16637 }, Call { location: 20515 }, Store { destination_pointer: Relative(57), source: Relative(61) }, Store { destination_pointer: Relative(11), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(54) }, Jump { location: 3962 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(54), source_pointer: Relative(61) }, Not { destination: Relative(58), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U1, lhs: Relative(58), rhs: Relative(57) }, JumpIf { condition: Relative(54), location: 16658 }, Jump { location: 16677 }, Load { destination: Relative(54), source_pointer: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(17) }, JumpIf { condition: Relative(58), location: 16663 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(59) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: LessThanEquals, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, JumpIf { condition: Relative(59), location: 16674 }, Call { location: 20515 }, Store { destination_pointer: Relative(56), source: Relative(58) }, Store { destination_pointer: Relative(53), source: Relative(54) }, Jump { location: 16677 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(54) }, Jump { location: 3730 }, Load { destination: Relative(53), source_pointer: Relative(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 16686 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(53) }, JumpIf { condition: Relative(58), location: 16690 }, Call { location: 20614 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(53), source_pointer: Relative(57) }, Load { destination: Relative(56), source_pointer: Relative(11) }, Load { destination: Relative(57), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Direct(32837) }, JumpIf { condition: Relative(59), location: 16698 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(56) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 20518 }, Mov { destination: Relative(59), source: Direct(32773) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(57) }, Store { destination_pointer: Relative(61), source: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(57), rhs: Relative(53) }, JumpIf { condition: Relative(56), location: 16709 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(59) }, Store { destination_pointer: Relative(9), source: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(53) }, Jump { location: 3454 }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(53), source_pointer: Relative(59) }, Not { destination: Relative(56), source: Relative(53), bit_size: U1 }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U1, lhs: Relative(56), rhs: Relative(55) }, JumpIf { condition: Relative(53), location: 16730 }, Jump { location: 16749 }, Load { destination: Relative(53), source_pointer: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(55), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 16735 }, Call { location: 20611 }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(55) }, Store { destination_pointer: Relative(59), source: Relative(57) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, JumpIf { condition: Relative(57), location: 16746 }, Call { location: 20515 }, Store { destination_pointer: Relative(54), source: Relative(56) }, Store { destination_pointer: Relative(51), source: Relative(53) }, Jump { location: 16749 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(53) }, Jump { location: 3228 }, Load { destination: Relative(51), source_pointer: Relative(11) }, JumpIf { condition: Relative(51), location: 16860 }, Jump { location: 16755 }, Load { destination: Relative(51), source_pointer: Relative(4) }, Load { destination: Relative(53), source_pointer: Relative(10) }, Load { destination: Relative(54), source_pointer: Relative(51) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 16763 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 16773 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, JumpIf { condition: Relative(58), location: 16773 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 16777 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(54) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 16782 }, Call { location: 20515 }, Const { destination: Relative(57), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: Sub, bit_size: U32, lhs: Relative(56), rhs: Relative(59) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 16789 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(54), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Load { destination: Relative(60), source_pointer: Relative(62) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(7) }, Not { destination: Relative(61), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Or, bit_size: U1, lhs: Relative(60), rhs: Relative(61) }, JumpIf { condition: Relative(54), location: 16813 }, Jump { location: 16808 }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(58), rhs: Relative(16) }, JumpIf { condition: Relative(51), location: 16811 }, Jump { location: 16821 }, Store { destination_pointer: Relative(59), source: Relative(14) }, Jump { location: 16821 }, Store { destination_pointer: Relative(59), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 16818 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(51) }, Store { destination_pointer: Relative(10), source: Relative(54) }, Jump { location: 16821 }, Load { destination: Relative(51), source_pointer: Relative(59) }, JumpIf { condition: Relative(51), location: 16824 }, Jump { location: 16860 }, Load { destination: Relative(51), source_pointer: Relative(4) }, Load { destination: Relative(53), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(56) }, Store { destination_pointer: Relative(58), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(57) }, Store { destination_pointer: Relative(56), source: Relative(16) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(40) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(54) }, Store { destination_pointer: Relative(10), source: Relative(53) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Jump { location: 16860 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(51) }, Jump { location: 3178 }, Load { destination: Relative(2), source_pointer: Relative(54) }, Load { destination: Relative(11), source_pointer: Relative(55) }, Load { destination: Relative(51), source_pointer: Relative(56) }, Load { destination: Relative(53), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(58), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, JumpIf { condition: Relative(58), location: 16870 }, Jump { location: 16889 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryFieldOp { destination: Relative(60), op: Add, lhs: Relative(58), rhs: Relative(59) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(54), source: Relative(2) }, Store { destination_pointer: Relative(55), source: Relative(58) }, Store { destination_pointer: Relative(56), source: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(53) }, Jump { location: 16889 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 3142 }, Load { destination: Relative(51), source_pointer: Relative(11) }, JumpIf { condition: Relative(51), location: 17000 }, Jump { location: 16895 }, Load { destination: Relative(51), source_pointer: Relative(4) }, Load { destination: Relative(53), source_pointer: Relative(10) }, Load { destination: Relative(54), source_pointer: Relative(51) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 16903 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 16913 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, JumpIf { condition: Relative(58), location: 16913 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 16917 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(54) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 16922 }, Call { location: 20515 }, Const { destination: Relative(57), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: Sub, bit_size: U32, lhs: Relative(56), rhs: Relative(59) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 16929 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(54), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(59) }, Load { destination: Relative(60), source_pointer: Relative(62) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(7) }, Not { destination: Relative(61), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Or, bit_size: U1, lhs: Relative(60), rhs: Relative(61) }, JumpIf { condition: Relative(54), location: 16953 }, Jump { location: 16948 }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(58), rhs: Relative(52) }, JumpIf { condition: Relative(51), location: 16951 }, Jump { location: 16961 }, Store { destination_pointer: Relative(59), source: Relative(14) }, Jump { location: 16961 }, Store { destination_pointer: Relative(59), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 16958 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(51) }, Store { destination_pointer: Relative(10), source: Relative(54) }, Jump { location: 16961 }, Load { destination: Relative(51), source_pointer: Relative(59) }, JumpIf { condition: Relative(51), location: 16964 }, Jump { location: 17000 }, Load { destination: Relative(51), source_pointer: Relative(4) }, Load { destination: Relative(53), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(56) }, Store { destination_pointer: Relative(58), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(57) }, Store { destination_pointer: Relative(56), source: Relative(52) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Store { destination_pointer: Relative(57), source: Relative(50) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(51) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(54) }, Store { destination_pointer: Relative(10), source: Relative(53) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Jump { location: 17000 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(51) }, Jump { location: 3067 }, Load { destination: Relative(2), source_pointer: Relative(53) }, Load { destination: Relative(11), source_pointer: Relative(54) }, Load { destination: Relative(50), source_pointer: Relative(55) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(50) }, JumpIf { condition: Relative(57), location: 17010 }, Jump { location: 17029 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: Add, lhs: Relative(57), rhs: Relative(58) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(53), source: Relative(2) }, Store { destination_pointer: Relative(54), source: Relative(57) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Store { destination_pointer: Relative(56), source: Relative(51) }, Jump { location: 17029 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 3030 }, Load { destination: Relative(50), source_pointer: Relative(11) }, JumpIf { condition: Relative(50), location: 17140 }, Jump { location: 17035 }, Load { destination: Relative(50), source_pointer: Relative(4) }, Load { destination: Relative(51), source_pointer: Relative(10) }, Load { destination: Relative(53), source_pointer: Relative(50) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 17043 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(55), location: 17053 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(1) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, JumpIf { condition: Relative(57), location: 17053 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(53) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(55) }, JumpIf { condition: Relative(56), location: 17057 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(55), rhs: Relative(5) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(53) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(55) }, JumpIf { condition: Relative(56), location: 17062 }, Call { location: 20515 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(55), rhs: Relative(56) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, BinaryIntOp { destination: Relative(53), op: Sub, bit_size: U32, lhs: Relative(55), rhs: Relative(58) }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(53), rhs: Relative(17) }, JumpIf { condition: Relative(55), location: 17069 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(53), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Load { destination: Relative(53), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Not { destination: Relative(60), source: Relative(53), bit_size: U1 }, BinaryIntOp { destination: Relative(53), op: Or, bit_size: U1, lhs: Relative(59), rhs: Relative(60) }, JumpIf { condition: Relative(53), location: 17093 }, Jump { location: 17088 }, BinaryFieldOp { destination: Relative(50), op: Equals, lhs: Relative(57), rhs: Relative(15) }, JumpIf { condition: Relative(50), location: 17091 }, Jump { location: 17101 }, Store { destination_pointer: Relative(58), source: Relative(14) }, Jump { location: 17101 }, Store { destination_pointer: Relative(58), source: Relative(14) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 17098 }, Call { location: 20515 }, Store { destination_pointer: Relative(4), source: Relative(50) }, Store { destination_pointer: Relative(10), source: Relative(53) }, Jump { location: 17101 }, Load { destination: Relative(50), source_pointer: Relative(58) }, JumpIf { condition: Relative(50), location: 17104 }, Jump { location: 17140 }, Load { destination: Relative(50), source_pointer: Relative(4) }, Load { destination: Relative(51), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(55) }, Store { destination_pointer: Relative(57), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(56) }, Store { destination_pointer: Relative(55), source: Relative(15) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Store { destination_pointer: Relative(56), source: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(50) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(53) }, Store { destination_pointer: Relative(10), source: Relative(51) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Jump { location: 17140 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(50) }, Jump { location: 2955 }, Load { destination: Relative(2), source_pointer: Relative(50) }, Load { destination: Relative(11), source_pointer: Relative(51) }, Load { destination: Relative(45), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(56), location: 17150 }, Jump { location: 17169 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryFieldOp { destination: Relative(58), op: Add, lhs: Relative(56), rhs: Relative(57) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(50), source: Relative(2) }, Store { destination_pointer: Relative(51), source: Relative(56) }, Store { destination_pointer: Relative(53), source: Relative(45) }, Store { destination_pointer: Relative(54), source: Relative(55) }, Jump { location: 17169 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2918 }, Load { destination: Relative(45), source_pointer: Relative(11) }, JumpIf { condition: Relative(45), location: 17229 }, Jump { location: 17175 }, Load { destination: Relative(45), source_pointer: Relative(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 17181 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(1) }, JumpIf { condition: Relative(51), location: 17191 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 17191 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, JumpIf { condition: Relative(53), location: 17195 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(45) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(51) }, JumpIf { condition: Relative(53), location: 17200 }, Call { location: 20515 }, Const { destination: Relative(53), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(53) }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, BinaryIntOp { destination: Relative(45), op: Sub, bit_size: U32, lhs: Relative(51), rhs: Relative(55) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 17207 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(45), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(56) }, Not { destination: Relative(53), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U1, lhs: Relative(53), rhs: Relative(45) }, JumpIf { condition: Relative(51), location: 17223 }, Jump { location: 17229 }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(54), rhs: Relative(15) }, JumpIf { condition: Relative(45), location: 17226 }, Jump { location: 17229 }, Store { destination_pointer: Relative(4), source: Relative(14) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Jump { location: 17229 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 2782 }, Load { destination: Relative(10), source_pointer: Relative(51) }, Load { destination: Relative(11), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(54) }, Load { destination: Relative(50), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(56), location: 17239 }, Jump { location: 17258 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryFieldOp { destination: Relative(58), op: Add, lhs: Relative(56), rhs: Relative(57) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(51), source: Relative(10) }, Store { destination_pointer: Relative(53), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(45) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Jump { location: 17258 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 2746 }, Load { destination: Relative(4), source_pointer: Relative(10) }, Load { destination: Relative(45), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(50), source_pointer: Relative(58) }, Not { destination: Relative(55), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U1, lhs: Relative(55), rhs: Relative(51) }, JumpIf { condition: Relative(50), location: 17283 }, Jump { location: 17310 }, BinaryFieldOp { destination: Relative(50), op: Mul, lhs: Relative(54), rhs: Relative(56) }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(50), rhs: Relative(2) }, JumpIf { condition: Relative(51), location: 17310 }, Jump { location: 17287 }, BinaryIntOp { destination: Relative(50), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(45) }, JumpIf { condition: Relative(51), location: 17291 }, Call { location: 20596 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(45) }, Store { destination_pointer: Relative(54), source: Relative(56) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(4) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Store { destination_pointer: Relative(10), source: Relative(45) }, Store { destination_pointer: Relative(11), source: Relative(50) }, Jump { location: 17310 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 2673 }, Load { destination: Relative(45), source_pointer: Relative(4) }, JumpIf { condition: Relative(45), location: 17421 }, Jump { location: 17316 }, Load { destination: Relative(45), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(11) }, Load { destination: Relative(51), source_pointer: Relative(45) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 17324 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 17334 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 17334 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 17338 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(51) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 17343 }, Call { location: 20515 }, Const { destination: Relative(55), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(55) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, BinaryIntOp { destination: Relative(51), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 17350 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Not { destination: Relative(59), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Or, bit_size: U1, lhs: Relative(58), rhs: Relative(59) }, JumpIf { condition: Relative(51), location: 17374 }, Jump { location: 17369 }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(56), rhs: Relative(16) }, JumpIf { condition: Relative(45), location: 17372 }, Jump { location: 17382 }, Store { destination_pointer: Relative(57), source: Relative(14) }, Jump { location: 17382 }, Store { destination_pointer: Relative(57), source: Relative(14) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, JumpIf { condition: Relative(53), location: 17379 }, Call { location: 20515 }, Store { destination_pointer: Relative(10), source: Relative(45) }, Store { destination_pointer: Relative(11), source: Relative(51) }, Jump { location: 17382 }, Load { destination: Relative(45), source_pointer: Relative(57) }, JumpIf { condition: Relative(45), location: 17385 }, Jump { location: 17421 }, Load { destination: Relative(45), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, Store { destination_pointer: Relative(56), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(55) }, Store { destination_pointer: Relative(54), source: Relative(16) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Store { destination_pointer: Relative(55), source: Relative(52) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(45) }, Store { destination_pointer: Relative(55), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(51) }, Store { destination_pointer: Relative(11), source: Relative(50) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Jump { location: 17421 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 2667 }, Load { destination: Relative(2), source_pointer: Relative(51) }, Load { destination: Relative(4), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(54) }, Load { destination: Relative(50), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(56), location: 17431 }, Jump { location: 17450 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryFieldOp { destination: Relative(58), op: Add, lhs: Relative(56), rhs: Relative(57) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(51), source: Relative(2) }, Store { destination_pointer: Relative(53), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(45) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Jump { location: 17450 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2631 }, Load { destination: Relative(45), source_pointer: Relative(4) }, JumpIf { condition: Relative(45), location: 17561 }, Jump { location: 17456 }, Load { destination: Relative(45), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(11) }, Load { destination: Relative(51), source_pointer: Relative(45) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 17464 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 17474 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 17474 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 17478 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(51) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 17483 }, Call { location: 20515 }, Const { destination: Relative(55), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(55) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, BinaryIntOp { destination: Relative(51), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 17490 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Load { destination: Relative(51), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(7) }, Not { destination: Relative(59), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Or, bit_size: U1, lhs: Relative(58), rhs: Relative(59) }, JumpIf { condition: Relative(51), location: 17514 }, Jump { location: 17509 }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(56), rhs: Relative(15) }, JumpIf { condition: Relative(45), location: 17512 }, Jump { location: 17522 }, Store { destination_pointer: Relative(57), source: Relative(14) }, Jump { location: 17522 }, Store { destination_pointer: Relative(57), source: Relative(14) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, JumpIf { condition: Relative(53), location: 17519 }, Call { location: 20515 }, Store { destination_pointer: Relative(10), source: Relative(45) }, Store { destination_pointer: Relative(11), source: Relative(51) }, Jump { location: 17522 }, Load { destination: Relative(45), source_pointer: Relative(57) }, JumpIf { condition: Relative(45), location: 17525 }, Jump { location: 17561 }, Load { destination: Relative(45), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, Store { destination_pointer: Relative(56), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(55) }, Store { destination_pointer: Relative(54), source: Relative(15) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Store { destination_pointer: Relative(55), source: Relative(40) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(45) }, Store { destination_pointer: Relative(55), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(51) }, Store { destination_pointer: Relative(11), source: Relative(50) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Jump { location: 17561 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 2556 }, Load { destination: Relative(2), source_pointer: Relative(50) }, Load { destination: Relative(4), source_pointer: Relative(51) }, Load { destination: Relative(40), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(40) }, JumpIf { condition: Relative(55), location: 17571 }, Jump { location: 17590 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryFieldOp { destination: Relative(57), op: Add, lhs: Relative(55), rhs: Relative(56) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(50), source: Relative(2) }, Store { destination_pointer: Relative(51), source: Relative(55) }, Store { destination_pointer: Relative(53), source: Relative(40) }, Store { destination_pointer: Relative(54), source: Relative(45) }, Jump { location: 17590 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2519 }, Load { destination: Relative(40), source_pointer: Relative(4) }, JumpIf { condition: Relative(40), location: 17701 }, Jump { location: 17596 }, Load { destination: Relative(40), source_pointer: Relative(10) }, Load { destination: Relative(45), source_pointer: Relative(11) }, Load { destination: Relative(50), source_pointer: Relative(40) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 17604 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, JumpIf { condition: Relative(53), location: 17614 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, JumpIf { condition: Relative(55), location: 17614 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(50) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 17618 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(5) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(50) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 17623 }, Call { location: 20515 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, BinaryIntOp { destination: Relative(50), op: Sub, bit_size: U32, lhs: Relative(53), rhs: Relative(56) }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(17) }, JumpIf { condition: Relative(53), location: 17630 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Load { destination: Relative(50), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Not { destination: Relative(58), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(50), op: Or, bit_size: U1, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(50), location: 17654 }, Jump { location: 17649 }, BinaryFieldOp { destination: Relative(40), op: Equals, lhs: Relative(55), rhs: Relative(52) }, JumpIf { condition: Relative(40), location: 17652 }, Jump { location: 17662 }, Store { destination_pointer: Relative(56), source: Relative(14) }, Jump { location: 17662 }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 17659 }, Call { location: 20515 }, Store { destination_pointer: Relative(10), source: Relative(40) }, Store { destination_pointer: Relative(11), source: Relative(50) }, Jump { location: 17662 }, Load { destination: Relative(40), source_pointer: Relative(56) }, JumpIf { condition: Relative(40), location: 17665 }, Jump { location: 17701 }, Load { destination: Relative(40), source_pointer: Relative(10) }, Load { destination: Relative(45), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(53) }, Store { destination_pointer: Relative(55), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, Store { destination_pointer: Relative(53), source: Relative(52) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(50) }, Store { destination_pointer: Relative(54), source: Relative(16) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(40) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(50) }, Store { destination_pointer: Relative(11), source: Relative(45) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Jump { location: 17701 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(40) }, Jump { location: 2444 }, Load { destination: Relative(2), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(45) }, Load { destination: Relative(40), source_pointer: Relative(50) }, Load { destination: Relative(53), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(40) }, JumpIf { condition: Relative(54), location: 17711 }, Jump { location: 17730 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(1) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(1) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(54), rhs: Relative(55) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(1) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Store { destination_pointer: Relative(45), source: Relative(54) }, Store { destination_pointer: Relative(50), source: Relative(40) }, Store { destination_pointer: Relative(51), source: Relative(53) }, Jump { location: 17730 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2407 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(16) }, Load { destination: Relative(40), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(5) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(45) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(45) }, Load { destination: Relative(16), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(11) }, Not { destination: Relative(52), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U1, lhs: Relative(52), rhs: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U1, lhs: Relative(45), rhs: Relative(16) }, JumpIf { condition: Relative(40), location: 17755 }, Jump { location: 17860 }, Load { destination: Relative(40), source_pointer: Relative(4) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(40) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 17761 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(40) }, Mov { destination: Relative(40), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(7) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(8) }, Load { destination: Relative(53), source_pointer: Relative(4) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 17775 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(2) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 17783 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(59), source: Direct(1) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(60) }, IndirectConst { destination_pointer: Relative(59), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Mov { destination: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(61), source: Relative(50) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Store { destination_pointer: Relative(61), source: Relative(8) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Store { destination_pointer: Relative(61), source: Relative(8) }, Store { destination_pointer: Relative(53), source: Relative(59) }, Store { destination_pointer: Relative(56), source: Relative(2) }, Store { destination_pointer: Relative(57), source: Relative(3) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 17810 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 17928 }, Jump { location: 17813 }, Load { destination: Relative(45), source_pointer: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, Load { destination: Relative(55), source_pointer: Relative(57) }, Load { destination: Relative(59), source_pointer: Relative(54) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(59) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 17822 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(59) }, Mov { destination: Relative(59), source: Direct(1) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(61) }, IndirectConst { destination_pointer: Relative(59), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(61), size: Relative(62) }, output: HeapArray { pointer: Relative(63), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(53), source: Relative(45) }, Store { destination_pointer: Relative(56), source: Relative(59) }, Store { destination_pointer: Relative(57), source: Relative(55) }, Store { destination_pointer: Relative(58), source: Relative(14) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, Load { destination: Relative(45), source_pointer: Relative(53) }, Cast { destination: Relative(54), source: Relative(45), bit_size: Integer(U32) }, Cast { destination: Relative(53), source: Relative(54), bit_size: Field }, Cast { destination: Relative(45), source: Relative(53), bit_size: Integer(U32) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(7) }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 17846 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 17863 }, Jump { location: 17849 }, Load { destination: Relative(16), source_pointer: Relative(40) }, Load { destination: Relative(40), source_pointer: Relative(52) }, JumpIf { condition: Relative(16), location: 17855 }, Jump { location: 17853 }, Store { destination_pointer: Relative(11), source: Relative(7) }, Jump { location: 17860 }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(51), rhs: Relative(40) }, JumpIf { condition: Relative(16), location: 17860 }, Jump { location: 17858 }, Store { destination_pointer: Relative(11), source: Relative(7) }, Jump { location: 17860 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Mov { destination: Relative(10), source: Relative(16) }, Jump { location: 2282 }, Load { destination: Relative(54), source_pointer: Relative(53) }, JumpIf { condition: Relative(54), location: 17925 }, Jump { location: 17866 }, Load { destination: Relative(54), source_pointer: Relative(4) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 17872 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Relative(16) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(16) }, JumpIf { condition: Relative(56), location: 17882 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(16) }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(16) }, JumpIf { condition: Relative(58), location: 17882 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(54) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 17886 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(54) }, BinaryIntOp { destination: Relative(57), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(56) }, JumpIf { condition: Relative(57), location: 17891 }, Call { location: 20515 }, Const { destination: Relative(57), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: Sub, bit_size: U32, lhs: Relative(56), rhs: Relative(59) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(54), rhs: Relative(17) }, JumpIf { condition: Relative(56), location: 17898 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Load { destination: Relative(54), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(5) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(57) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(57) }, Load { destination: Relative(56), source_pointer: Relative(61) }, Not { destination: Relative(57), source: Relative(56), bit_size: U1 }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U1, lhs: Relative(57), rhs: Relative(54) }, JumpIf { condition: Relative(56), location: 17918 }, Jump { location: 17925 }, BinaryFieldOp { destination: Relative(54), op: Equals, lhs: Relative(58), rhs: Relative(50) }, JumpIf { condition: Relative(54), location: 17921 }, Jump { location: 17925 }, Store { destination_pointer: Relative(40), source: Relative(14) }, Store { destination_pointer: Relative(52), source: Relative(59) }, Store { destination_pointer: Relative(53), source: Relative(14) }, Jump { location: 17925 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Mov { destination: Relative(16), source: Relative(54) }, Jump { location: 17846 }, Load { destination: Relative(45), source_pointer: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, Load { destination: Relative(55), source_pointer: Relative(57) }, Load { destination: Relative(59), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(60), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(55) }, JumpIf { condition: Relative(60), location: 17935 }, Jump { location: 17954 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(16) }, Load { destination: Relative(60), source_pointer: Relative(62) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(16) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryFieldOp { destination: Relative(62), op: Add, lhs: Relative(60), rhs: Relative(61) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(60), source: Direct(32773) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(16) }, Store { destination_pointer: Relative(63), source: Relative(62) }, Store { destination_pointer: Relative(53), source: Relative(45) }, Store { destination_pointer: Relative(56), source: Relative(60) }, Store { destination_pointer: Relative(57), source: Relative(55) }, Store { destination_pointer: Relative(58), source: Relative(59) }, Jump { location: 17954 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Mov { destination: Relative(16), source: Relative(45) }, Jump { location: 17810 }, Load { destination: Relative(50), source_pointer: Relative(45) }, JumpIf { condition: Relative(50), location: 18041 }, Jump { location: 17960 }, Load { destination: Relative(50), source_pointer: Relative(40) }, Load { destination: Relative(51), source_pointer: Relative(16) }, Load { destination: Relative(52), source_pointer: Relative(50) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 17968 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(1) }, JumpIf { condition: Relative(54), location: 17978 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, JumpIf { condition: Relative(56), location: 17978 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(52) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 17982 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(52), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(52) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 17987 }, Call { location: 20515 }, Const { destination: Relative(55), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(55) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, BinaryIntOp { destination: Relative(52), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(52), rhs: Relative(17) }, JumpIf { condition: Relative(54), location: 17994 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(52), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Load { destination: Relative(52), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(5) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Load { destination: Relative(54), source_pointer: Relative(60) }, Not { destination: Relative(57), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U1, lhs: Relative(57), rhs: Relative(52) }, JumpIf { condition: Relative(54), location: 18014 }, Jump { location: 18041 }, BinaryFieldOp { destination: Relative(52), op: Equals, lhs: Relative(56), rhs: Relative(4) }, JumpIf { condition: Relative(52), location: 18017 }, Jump { location: 18041 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Store { destination_pointer: Relative(55), source: Relative(58) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(50) }, Store { destination_pointer: Relative(55), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Sub, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(51) }, JumpIf { condition: Relative(53), location: 18037 }, Call { location: 20596 }, Store { destination_pointer: Relative(40), source: Relative(52) }, Store { destination_pointer: Relative(16), source: Relative(50) }, Store { destination_pointer: Relative(45), source: Relative(14) }, Jump { location: 18041 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(50) }, Jump { location: 2229 }, Load { destination: Relative(2), source_pointer: Relative(45) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(56), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(51) }, JumpIf { condition: Relative(56), location: 18051 }, Jump { location: 18070 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(1) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryFieldOp { destination: Relative(58), op: Add, lhs: Relative(56), rhs: Relative(57) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(1) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(45), source: Relative(2) }, Store { destination_pointer: Relative(52), source: Relative(56) }, Store { destination_pointer: Relative(53), source: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(55) }, Jump { location: 18070 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2193 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Load { destination: Relative(51), source_pointer: Relative(58) }, Load { destination: Relative(54), source_pointer: Relative(52) }, Not { destination: Relative(57), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U1, lhs: Relative(57), rhs: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U1, lhs: Relative(54), rhs: Relative(51) }, JumpIf { condition: Relative(53), location: 18095 }, Jump { location: 18200 }, Load { destination: Relative(53), source_pointer: Relative(45) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18101 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(7) }, Mov { destination: Relative(57), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Relative(8) }, Load { destination: Relative(58), source_pointer: Relative(45) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 18115 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(58) }, Load { destination: Relative(58), source_pointer: Relative(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 18123 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(58) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(62), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(63), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(64), source: Direct(1) }, Const { destination: Relative(65), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(65) }, IndirectConst { destination_pointer: Relative(64), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Mov { destination: Relative(66), source: Relative(65) }, Store { destination_pointer: Relative(66), source: Relative(55) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, Store { destination_pointer: Relative(66), source: Relative(8) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, Store { destination_pointer: Relative(66), source: Relative(8) }, Store { destination_pointer: Relative(58), source: Relative(64) }, Store { destination_pointer: Relative(61), source: Relative(2) }, Store { destination_pointer: Relative(62), source: Relative(3) }, Store { destination_pointer: Relative(63), source: Relative(7) }, Mov { destination: Relative(51), source: Relative(12) }, Jump { location: 18150 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 18268 }, Jump { location: 18153 }, Load { destination: Relative(54), source_pointer: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Load { destination: Relative(60), source_pointer: Relative(62) }, Load { destination: Relative(64), source_pointer: Relative(59) }, Const { destination: Relative(65), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(66), op: Equals, bit_size: U32, lhs: Relative(65), rhs: Relative(64) }, Not { destination: Relative(66), source: Relative(66), bit_size: U1 }, JumpIf { condition: Relative(66), location: 18162 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(64) }, Mov { destination: Relative(64), source: Direct(1) }, Const { destination: Relative(66), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(66) }, IndirectConst { destination_pointer: Relative(64), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Const { destination: Relative(67), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(66), size: Relative(67) }, output: HeapArray { pointer: Relative(68), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(58), source: Relative(54) }, Store { destination_pointer: Relative(61), source: Relative(64) }, Store { destination_pointer: Relative(62), source: Relative(60) }, Store { destination_pointer: Relative(63), source: Relative(14) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(3) }, Load { destination: Relative(54), source_pointer: Relative(58) }, Cast { destination: Relative(59), source: Relative(54), bit_size: Integer(U32) }, Cast { destination: Relative(58), source: Relative(59), bit_size: Field }, Cast { destination: Relative(54), source: Relative(58), bit_size: Integer(U32) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Mov { destination: Relative(51), source: Relative(12) }, Jump { location: 18186 }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(17) }, JumpIf { condition: Relative(59), location: 18203 }, Jump { location: 18189 }, Load { destination: Relative(51), source_pointer: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(57) }, JumpIf { condition: Relative(51), location: 18195 }, Jump { location: 18193 }, Store { destination_pointer: Relative(52), source: Relative(7) }, Jump { location: 18200 }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(56), rhs: Relative(53) }, JumpIf { condition: Relative(51), location: 18200 }, Jump { location: 18198 }, Store { destination_pointer: Relative(52), source: Relative(7) }, Jump { location: 18200 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Relative(50), source: Relative(51) }, Jump { location: 2144 }, Load { destination: Relative(59), source_pointer: Relative(58) }, JumpIf { condition: Relative(59), location: 18265 }, Jump { location: 18206 }, Load { destination: Relative(59), source_pointer: Relative(45) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(59) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 18212 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Relative(51) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(51) }, JumpIf { condition: Relative(61), location: 18222 }, BinaryIntOp { destination: Relative(64), op: Div, bit_size: U32, lhs: Relative(59), rhs: Relative(51) }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(64), rhs: Relative(51) }, JumpIf { condition: Relative(63), location: 18222 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(59) }, BinaryIntOp { destination: Relative(62), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(61) }, JumpIf { condition: Relative(62), location: 18226 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(61), rhs: Relative(5) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(59) }, BinaryIntOp { destination: Relative(62), op: LessThanEquals, bit_size: U32, lhs: Relative(54), rhs: Relative(61) }, JumpIf { condition: Relative(62), location: 18231 }, Call { location: 20515 }, Const { destination: Relative(62), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(63), op: Div, bit_size: U32, lhs: Relative(61), rhs: Relative(62) }, BinaryIntOp { destination: Relative(64), op: Mul, bit_size: U32, lhs: Relative(63), rhs: Relative(62) }, BinaryIntOp { destination: Relative(59), op: Sub, bit_size: U32, lhs: Relative(61), rhs: Relative(64) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(59), rhs: Relative(17) }, JumpIf { condition: Relative(61), location: 18238 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(61), op: Mul, bit_size: U32, lhs: Relative(59), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(61) }, Load { destination: Relative(59), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(3) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Relative(5) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(62) }, Load { destination: Relative(64), source_pointer: Relative(66) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Relative(62) }, Load { destination: Relative(61), source_pointer: Relative(66) }, Not { destination: Relative(62), source: Relative(61), bit_size: U1 }, BinaryIntOp { destination: Relative(61), op: Mul, bit_size: U1, lhs: Relative(62), rhs: Relative(59) }, JumpIf { condition: Relative(61), location: 18258 }, Jump { location: 18265 }, BinaryFieldOp { destination: Relative(59), op: Equals, lhs: Relative(63), rhs: Relative(55) }, JumpIf { condition: Relative(59), location: 18261 }, Jump { location: 18265 }, Store { destination_pointer: Relative(53), source: Relative(14) }, Store { destination_pointer: Relative(57), source: Relative(64) }, Store { destination_pointer: Relative(58), source: Relative(14) }, Jump { location: 18265 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Relative(51), source: Relative(59) }, Jump { location: 18186 }, Load { destination: Relative(54), source_pointer: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Load { destination: Relative(60), source_pointer: Relative(62) }, Load { destination: Relative(64), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(65), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(60) }, JumpIf { condition: Relative(65), location: 18275 }, Jump { location: 18294 }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Relative(51) }, Load { destination: Relative(65), source_pointer: Relative(67) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(67), rhs: Relative(51) }, Load { destination: Relative(66), source_pointer: Relative(68) }, BinaryFieldOp { destination: Relative(67), op: Add, lhs: Relative(65), rhs: Relative(66) }, Mov { destination: Direct(32771), source: Relative(59) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(65), source: Direct(32773) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(65), rhs: Direct(2) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(66), rhs: Relative(51) }, Store { destination_pointer: Relative(68), source: Relative(67) }, Store { destination_pointer: Relative(58), source: Relative(54) }, Store { destination_pointer: Relative(61), source: Relative(65) }, Store { destination_pointer: Relative(62), source: Relative(60) }, Store { destination_pointer: Relative(63), source: Relative(64) }, Jump { location: 18294 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Relative(51), source: Relative(54) }, Jump { location: 18150 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(55) }, Load { destination: Relative(53), source_pointer: Relative(11) }, Load { destination: Relative(54), source_pointer: Relative(10) }, Load { destination: Relative(55), source_pointer: Relative(53) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18313 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(55) }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(55), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, JumpIf { condition: Relative(57), location: 18320 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(55), rhs: Relative(44) }, JumpIf { condition: Relative(54), location: 18323 }, Call { location: 20455 }, Load { destination: Relative(54), source_pointer: Relative(53) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18329 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(54) }, Load { destination: Relative(53), source_pointer: Relative(9) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18337 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(45) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(53) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 18345 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(61), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Mov { destination: Relative(63), source: Relative(62) }, Store { destination_pointer: Relative(63), source: Relative(52) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(8) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(8) }, Store { destination_pointer: Relative(53), source: Relative(61) }, Store { destination_pointer: Relative(58), source: Relative(45) }, Store { destination_pointer: Relative(59), source: Relative(3) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Mov { destination: Relative(50), source: Relative(12) }, Jump { location: 18372 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 18771 }, Jump { location: 18375 }, Load { destination: Relative(54), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(55) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(57) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 18384 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(57) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(62), size: Relative(63) }, output: HeapArray { pointer: Relative(64), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(53), source: Relative(54) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(59), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Load { destination: Relative(53), source_pointer: Relative(54) }, Cast { destination: Relative(55), source: Relative(53), bit_size: Integer(U32) }, Cast { destination: Relative(54), source: Relative(55), bit_size: Field }, Cast { destination: Relative(53), source: Relative(54), bit_size: Integer(U32) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(50), source: Relative(12) }, Jump { location: 18408 }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(17) }, JumpIf { condition: Relative(55), location: 18660 }, Jump { location: 18411 }, Load { destination: Relative(53), source_pointer: Relative(40) }, Load { destination: Relative(54), source_pointer: Relative(16) }, Load { destination: Relative(55), source_pointer: Relative(53) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18419 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(55) }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(55), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(54) }, JumpIf { condition: Relative(57), location: 18426 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(55), rhs: Relative(44) }, JumpIf { condition: Relative(54), location: 18429 }, Call { location: 20455 }, Load { destination: Relative(54), source_pointer: Relative(53) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18435 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(54) }, Load { destination: Relative(53), source_pointer: Relative(9) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18443 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(45) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(53) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 18451 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(61), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Mov { destination: Relative(63), source: Relative(62) }, Store { destination_pointer: Relative(63), source: Relative(52) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(8) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(8) }, Store { destination_pointer: Relative(53), source: Relative(61) }, Store { destination_pointer: Relative(58), source: Relative(45) }, Store { destination_pointer: Relative(59), source: Relative(3) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Mov { destination: Relative(50), source: Relative(12) }, Jump { location: 18478 }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 18631 }, Jump { location: 18481 }, Load { destination: Relative(54), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(55) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(57) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 18490 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(57) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(62), size: Relative(63) }, output: HeapArray { pointer: Relative(64), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(53), source: Relative(54) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(59), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Load { destination: Relative(53), source_pointer: Relative(54) }, Cast { destination: Relative(55), source: Relative(53), bit_size: Integer(U32) }, Cast { destination: Relative(54), source: Relative(55), bit_size: Field }, Cast { destination: Relative(53), source: Relative(54), bit_size: Integer(U32) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(50), source: Relative(12) }, Jump { location: 18514 }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(17) }, JumpIf { condition: Relative(55), location: 18520 }, Jump { location: 18517 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(50) }, Jump { location: 2075 }, Load { destination: Relative(55), source_pointer: Relative(54) }, JumpIf { condition: Relative(55), location: 18628 }, Jump { location: 18523 }, Load { destination: Relative(55), source_pointer: Relative(40) }, Load { destination: Relative(56), source_pointer: Relative(16) }, Load { destination: Relative(57), source_pointer: Relative(55) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 18531 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Relative(50) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(50) }, JumpIf { condition: Relative(59), location: 18541 }, BinaryIntOp { destination: Relative(62), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(50) }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, JumpIf { condition: Relative(61), location: 18541 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(57) }, BinaryIntOp { destination: Relative(60), op: LessThanEquals, bit_size: U32, lhs: Relative(50), rhs: Relative(59) }, JumpIf { condition: Relative(60), location: 18545 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(59), rhs: Relative(5) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(57) }, BinaryIntOp { destination: Relative(60), op: LessThanEquals, bit_size: U32, lhs: Relative(53), rhs: Relative(59) }, JumpIf { condition: Relative(60), location: 18550 }, Call { location: 20515 }, Const { destination: Relative(60), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(61), op: Div, bit_size: U32, lhs: Relative(59), rhs: Relative(60) }, BinaryIntOp { destination: Relative(62), op: Mul, bit_size: U32, lhs: Relative(61), rhs: Relative(60) }, BinaryIntOp { destination: Relative(57), op: Sub, bit_size: U32, lhs: Relative(59), rhs: Relative(62) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(17) }, JumpIf { condition: Relative(59), location: 18557 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(60) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, Mov { destination: Relative(62), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(62), source: Relative(7) }, Not { destination: Relative(64), source: Relative(57), bit_size: U1 }, BinaryIntOp { destination: Relative(57), op: Or, bit_size: U1, lhs: Relative(63), rhs: Relative(64) }, JumpIf { condition: Relative(57), location: 18581 }, Jump { location: 18576 }, BinaryFieldOp { destination: Relative(55), op: Equals, lhs: Relative(61), rhs: Relative(52) }, JumpIf { condition: Relative(55), location: 18579 }, Jump { location: 18589 }, Store { destination_pointer: Relative(62), source: Relative(14) }, Jump { location: 18589 }, Store { destination_pointer: Relative(62), source: Relative(14) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 18586 }, Call { location: 20515 }, Store { destination_pointer: Relative(40), source: Relative(55) }, Store { destination_pointer: Relative(16), source: Relative(57) }, Jump { location: 18589 }, Load { destination: Relative(55), source_pointer: Relative(62) }, JumpIf { condition: Relative(55), location: 18592 }, Jump { location: 18628 }, Load { destination: Relative(55), source_pointer: Relative(40) }, Load { destination: Relative(56), source_pointer: Relative(16) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(59) }, Store { destination_pointer: Relative(61), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(60) }, Store { destination_pointer: Relative(59), source: Relative(52) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Store { destination_pointer: Relative(60), source: Relative(51) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(55) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Store { destination_pointer: Relative(40), source: Relative(57) }, Store { destination_pointer: Relative(16), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Jump { location: 18628 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Relative(50), source: Relative(55) }, Jump { location: 18514 }, Load { destination: Relative(54), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(56) }, JumpIf { condition: Relative(61), location: 18638 }, Jump { location: 18657 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(50) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryFieldOp { destination: Relative(63), op: Add, lhs: Relative(61), rhs: Relative(62) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, Store { destination_pointer: Relative(64), source: Relative(63) }, Store { destination_pointer: Relative(53), source: Relative(54) }, Store { destination_pointer: Relative(58), source: Relative(61) }, Store { destination_pointer: Relative(59), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Jump { location: 18657 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Relative(50), source: Relative(54) }, Jump { location: 18478 }, Load { destination: Relative(55), source_pointer: Relative(54) }, JumpIf { condition: Relative(55), location: 18768 }, Jump { location: 18663 }, Load { destination: Relative(55), source_pointer: Relative(11) }, Load { destination: Relative(56), source_pointer: Relative(10) }, Load { destination: Relative(57), source_pointer: Relative(55) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 18671 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Relative(50) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(50) }, JumpIf { condition: Relative(59), location: 18681 }, BinaryIntOp { destination: Relative(62), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(50) }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, JumpIf { condition: Relative(61), location: 18681 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(57) }, BinaryIntOp { destination: Relative(60), op: LessThanEquals, bit_size: U32, lhs: Relative(50), rhs: Relative(59) }, JumpIf { condition: Relative(60), location: 18685 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(59), rhs: Relative(5) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(57) }, BinaryIntOp { destination: Relative(60), op: LessThanEquals, bit_size: U32, lhs: Relative(53), rhs: Relative(59) }, JumpIf { condition: Relative(60), location: 18690 }, Call { location: 20515 }, Const { destination: Relative(60), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(61), op: Div, bit_size: U32, lhs: Relative(59), rhs: Relative(60) }, BinaryIntOp { destination: Relative(62), op: Mul, bit_size: U32, lhs: Relative(61), rhs: Relative(60) }, BinaryIntOp { destination: Relative(57), op: Sub, bit_size: U32, lhs: Relative(59), rhs: Relative(62) }, BinaryIntOp { destination: Relative(59), op: LessThan, bit_size: U32, lhs: Relative(57), rhs: Relative(17) }, JumpIf { condition: Relative(59), location: 18697 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(59), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(3) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(60) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(62) }, Load { destination: Relative(63), source_pointer: Relative(65) }, Mov { destination: Relative(62), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(62), source: Relative(7) }, Not { destination: Relative(64), source: Relative(57), bit_size: U1 }, BinaryIntOp { destination: Relative(57), op: Or, bit_size: U1, lhs: Relative(63), rhs: Relative(64) }, JumpIf { condition: Relative(57), location: 18721 }, Jump { location: 18716 }, BinaryFieldOp { destination: Relative(55), op: Equals, lhs: Relative(61), rhs: Relative(52) }, JumpIf { condition: Relative(55), location: 18719 }, Jump { location: 18729 }, Store { destination_pointer: Relative(62), source: Relative(14) }, Jump { location: 18729 }, Store { destination_pointer: Relative(62), source: Relative(14) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(56), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 18726 }, Call { location: 20515 }, Store { destination_pointer: Relative(11), source: Relative(55) }, Store { destination_pointer: Relative(10), source: Relative(57) }, Jump { location: 18729 }, Load { destination: Relative(55), source_pointer: Relative(62) }, JumpIf { condition: Relative(55), location: 18732 }, Jump { location: 18768 }, Load { destination: Relative(55), source_pointer: Relative(11) }, Load { destination: Relative(56), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(59) }, Store { destination_pointer: Relative(61), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(57) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(60) }, Store { destination_pointer: Relative(59), source: Relative(52) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(57) }, Store { destination_pointer: Relative(60), source: Relative(51) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(58) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(55) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(57) }, Store { destination_pointer: Relative(10), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Jump { location: 18768 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Relative(50), source: Relative(55) }, Jump { location: 18408 }, Load { destination: Relative(54), source_pointer: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(56) }, JumpIf { condition: Relative(61), location: 18778 }, Jump { location: 18797 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(50) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryFieldOp { destination: Relative(63), op: Add, lhs: Relative(61), rhs: Relative(62) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, Store { destination_pointer: Relative(64), source: Relative(63) }, Store { destination_pointer: Relative(53), source: Relative(54) }, Store { destination_pointer: Relative(58), source: Relative(61) }, Store { destination_pointer: Relative(59), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Jump { location: 18797 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Relative(50), source: Relative(54) }, Jump { location: 18372 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(45) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Load { destination: Relative(45), source_pointer: Relative(16) }, Load { destination: Relative(52), source_pointer: Relative(45) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 18811 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(7) }, Load { destination: Relative(54), source_pointer: Relative(45) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 18822 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(54) }, Load { destination: Relative(54), source_pointer: Relative(9) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18830 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(54) }, Load { destination: Relative(54), source_pointer: Relative(10) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(54) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 18838 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(54) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(59), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(60), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(61), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(61), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, Mov { destination: Relative(63), source: Relative(62) }, Store { destination_pointer: Relative(63), source: Relative(51) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(8) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(8) }, Store { destination_pointer: Relative(54), source: Relative(61) }, Store { destination_pointer: Relative(58), source: Relative(10) }, Store { destination_pointer: Relative(59), source: Relative(3) }, Store { destination_pointer: Relative(60), source: Relative(7) }, Mov { destination: Relative(11), source: Relative(12) }, Jump { location: 18865 }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, JumpIf { condition: Relative(53), location: 18989 }, Jump { location: 18868 }, Load { destination: Relative(53), source_pointer: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(55) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(57) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 18877 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(57) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(62), size: Relative(63) }, output: HeapArray { pointer: Relative(64), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(59), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(14) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, Load { destination: Relative(53), source_pointer: Relative(54) }, Cast { destination: Relative(55), source: Relative(53), bit_size: Integer(U32) }, Cast { destination: Relative(54), source: Relative(55), bit_size: Field }, Cast { destination: Relative(53), source: Relative(54), bit_size: Integer(U32) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Mov { destination: Relative(11), source: Relative(12) }, Jump { location: 18901 }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(17) }, JumpIf { condition: Relative(55), location: 18929 }, Jump { location: 18904 }, Load { destination: Relative(11), source_pointer: Relative(52) }, JumpIf { condition: Relative(11), location: 18926 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 38 }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, Mov { destination: Relative(53), source: Relative(52) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U64), value: 2572122181750573608 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 35 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(53) }, Mov { destination: Direct(32773), source: Relative(55) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 35 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, Store { destination_pointer: Relative(53), source: Relative(41) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(51) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(52), size: Relative(45) } }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(11) }, Jump { location: 1804 }, Load { destination: Relative(55), source_pointer: Relative(54) }, JumpIf { condition: Relative(55), location: 18986 }, Jump { location: 18932 }, Load { destination: Relative(55), source_pointer: Relative(45) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 18938 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(55) }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Relative(11) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(11) }, JumpIf { condition: Relative(57), location: 18948 }, BinaryIntOp { destination: Relative(60), op: Div, bit_size: U32, lhs: Relative(55), rhs: Relative(11) }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(11) }, JumpIf { condition: Relative(59), location: 18948 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(55) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 18952 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(5) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(55) }, BinaryIntOp { destination: Relative(58), op: LessThanEquals, bit_size: U32, lhs: Relative(53), rhs: Relative(57) }, JumpIf { condition: Relative(58), location: 18957 }, Call { location: 20515 }, Const { destination: Relative(58), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(59), op: Div, bit_size: U32, lhs: Relative(57), rhs: Relative(58) }, BinaryIntOp { destination: Relative(60), op: Mul, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, BinaryIntOp { destination: Relative(55), op: Sub, bit_size: U32, lhs: Relative(57), rhs: Relative(60) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(55), rhs: Relative(17) }, JumpIf { condition: Relative(57), location: 18964 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(55), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Load { destination: Relative(55), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(3) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(57), source_pointer: Relative(61) }, Not { destination: Relative(58), source: Relative(57), bit_size: U1 }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U1, lhs: Relative(58), rhs: Relative(55) }, JumpIf { condition: Relative(57), location: 18980 }, Jump { location: 18986 }, BinaryFieldOp { destination: Relative(55), op: Equals, lhs: Relative(59), rhs: Relative(51) }, JumpIf { condition: Relative(55), location: 18983 }, Jump { location: 18986 }, Store { destination_pointer: Relative(52), source: Relative(14) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Jump { location: 18986 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(55) }, Jump { location: 18901 }, Load { destination: Relative(53), source_pointer: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(58) }, Load { destination: Relative(56), source_pointer: Relative(59) }, Load { destination: Relative(57), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(61), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(56) }, JumpIf { condition: Relative(61), location: 18996 }, Jump { location: 19015 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(11) }, Load { destination: Relative(61), source_pointer: Relative(63) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(63), rhs: Relative(11) }, Load { destination: Relative(62), source_pointer: Relative(64) }, BinaryFieldOp { destination: Relative(63), op: Add, lhs: Relative(61), rhs: Relative(62) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(61), source: Direct(32773) }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(61), rhs: Direct(2) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(62), rhs: Relative(11) }, Store { destination_pointer: Relative(64), source: Relative(63) }, Store { destination_pointer: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(58), source: Relative(61) }, Store { destination_pointer: Relative(59), source: Relative(56) }, Store { destination_pointer: Relative(60), source: Relative(57) }, Jump { location: 19015 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(53) }, Jump { location: 18865 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(43) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(3) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Load { destination: Relative(43), source_pointer: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(16) }, Load { destination: Relative(50), source_pointer: Relative(40) }, Load { destination: Relative(51), source_pointer: Relative(49) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 19034 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(50) }, JumpIf { condition: Relative(53), location: 19041 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, JumpIf { condition: Relative(50), location: 19044 }, Call { location: 20455 }, Load { destination: Relative(50), source_pointer: Relative(49) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 19050 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(50) }, Load { destination: Relative(49), source_pointer: Relative(9) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 19058 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(49) }, Load { destination: Relative(49), source_pointer: Relative(10) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(49) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 19066 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(49) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Mov { destination: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(59), source: Relative(45) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(8) }, Store { destination_pointer: Relative(49), source: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(10) }, Store { destination_pointer: Relative(55), source: Relative(3) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Mov { destination: Relative(11), source: Relative(12) }, Jump { location: 19093 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, JumpIf { condition: Relative(50), location: 19246 }, Jump { location: 19096 }, Load { destination: Relative(50), source_pointer: Relative(49) }, Load { destination: Relative(51), source_pointer: Relative(54) }, Load { destination: Relative(52), source_pointer: Relative(55) }, Load { destination: Relative(53), source_pointer: Relative(51) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(53) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 19105 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(53) }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(58), size: Relative(59) }, output: HeapArray { pointer: Relative(60), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(49), source: Relative(50) }, Store { destination_pointer: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(55), source: Relative(52) }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Load { destination: Relative(49), source_pointer: Relative(50) }, Cast { destination: Relative(51), source: Relative(49), bit_size: Integer(U32) }, Cast { destination: Relative(50), source: Relative(51), bit_size: Field }, Cast { destination: Relative(49), source: Relative(50), bit_size: Integer(U32) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(7) }, Mov { destination: Relative(11), source: Relative(12) }, Jump { location: 19129 }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 19135 }, Jump { location: 19132 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(11) }, Jump { location: 1688 }, Load { destination: Relative(51), source_pointer: Relative(50) }, JumpIf { condition: Relative(51), location: 19243 }, Jump { location: 19138 }, Load { destination: Relative(51), source_pointer: Relative(16) }, Load { destination: Relative(52), source_pointer: Relative(40) }, Load { destination: Relative(53), source_pointer: Relative(51) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 19146 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Relative(11) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(11) }, JumpIf { condition: Relative(55), location: 19156 }, BinaryIntOp { destination: Relative(58), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(11) }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(11) }, JumpIf { condition: Relative(57), location: 19156 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(53) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(55) }, JumpIf { condition: Relative(56), location: 19160 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(55), rhs: Relative(5) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(53) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(49), rhs: Relative(55) }, JumpIf { condition: Relative(56), location: 19165 }, Call { location: 20515 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(55), rhs: Relative(56) }, BinaryIntOp { destination: Relative(58), op: Mul, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, BinaryIntOp { destination: Relative(53), op: Sub, bit_size: U32, lhs: Relative(55), rhs: Relative(58) }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(53), rhs: Relative(17) }, JumpIf { condition: Relative(55), location: 19172 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(53), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, Load { destination: Relative(53), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(3) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Load { destination: Relative(59), source_pointer: Relative(61) }, Mov { destination: Relative(58), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Relative(7) }, Not { destination: Relative(60), source: Relative(53), bit_size: U1 }, BinaryIntOp { destination: Relative(53), op: Or, bit_size: U1, lhs: Relative(59), rhs: Relative(60) }, JumpIf { condition: Relative(53), location: 19196 }, Jump { location: 19191 }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(57), rhs: Relative(45) }, JumpIf { condition: Relative(51), location: 19194 }, Jump { location: 19204 }, Store { destination_pointer: Relative(58), source: Relative(14) }, Jump { location: 19204 }, Store { destination_pointer: Relative(58), source: Relative(14) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(52), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 19201 }, Call { location: 20515 }, Store { destination_pointer: Relative(16), source: Relative(51) }, Store { destination_pointer: Relative(40), source: Relative(53) }, Jump { location: 19204 }, Load { destination: Relative(51), source_pointer: Relative(58) }, JumpIf { condition: Relative(51), location: 19207 }, Jump { location: 19243 }, Load { destination: Relative(51), source_pointer: Relative(16) }, Load { destination: Relative(52), source_pointer: Relative(40) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(55) }, Store { destination_pointer: Relative(57), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(56) }, Store { destination_pointer: Relative(55), source: Relative(45) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Store { destination_pointer: Relative(56), source: Relative(43) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(54) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(51) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(53) }, Store { destination_pointer: Relative(40), source: Relative(52) }, Store { destination_pointer: Relative(50), source: Relative(14) }, Jump { location: 19243 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(51) }, Jump { location: 19129 }, Load { destination: Relative(50), source_pointer: Relative(49) }, Load { destination: Relative(51), source_pointer: Relative(54) }, Load { destination: Relative(52), source_pointer: Relative(55) }, Load { destination: Relative(53), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(57), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(52) }, JumpIf { condition: Relative(57), location: 19253 }, Jump { location: 19272 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(11) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(11) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryFieldOp { destination: Relative(59), op: Add, lhs: Relative(57), rhs: Relative(58) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(57), source: Direct(32773) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(11) }, Store { destination_pointer: Relative(60), source: Relative(59) }, Store { destination_pointer: Relative(49), source: Relative(50) }, Store { destination_pointer: Relative(54), source: Relative(57) }, Store { destination_pointer: Relative(55), source: Relative(52) }, Store { destination_pointer: Relative(56), source: Relative(53) }, Jump { location: 19272 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(50) }, Jump { location: 19093 }, Load { destination: Relative(49), source_pointer: Relative(48) }, JumpIf { condition: Relative(49), location: 19337 }, Jump { location: 19278 }, Load { destination: Relative(49), source_pointer: Relative(11) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 19284 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(2) }, JumpIf { condition: Relative(51), location: 19294 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(2) }, JumpIf { condition: Relative(53), location: 19294 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(49) }, BinaryIntOp { destination: Relative(52), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(51) }, JumpIf { condition: Relative(52), location: 19298 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(49) }, BinaryIntOp { destination: Relative(52), op: LessThanEquals, bit_size: U32, lhs: Relative(43), rhs: Relative(51) }, JumpIf { condition: Relative(52), location: 19303 }, Call { location: 20515 }, Const { destination: Relative(52), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(52) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, BinaryIntOp { destination: Relative(49), op: Sub, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(49), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 19310 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(49), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(52) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(52) }, Load { destination: Relative(51), source_pointer: Relative(56) }, Not { destination: Relative(52), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U1, lhs: Relative(52), rhs: Relative(49) }, JumpIf { condition: Relative(51), location: 19330 }, Jump { location: 19337 }, BinaryFieldOp { destination: Relative(49), op: Equals, lhs: Relative(53), rhs: Relative(10) }, JumpIf { condition: Relative(49), location: 19333 }, Jump { location: 19337 }, Store { destination_pointer: Relative(40), source: Relative(14) }, Store { destination_pointer: Relative(42), source: Relative(54) }, Store { destination_pointer: Relative(48), source: Relative(14) }, Jump { location: 19337 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(49) }, Jump { location: 1453 }, Load { destination: Relative(43), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(53) }, Load { destination: Relative(50), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(49) }, JumpIf { condition: Relative(55), location: 19347 }, Jump { location: 19366 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(2) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryFieldOp { destination: Relative(57), op: Add, lhs: Relative(55), rhs: Relative(56) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(43) }, Store { destination_pointer: Relative(52), source: Relative(55) }, Store { destination_pointer: Relative(53), source: Relative(49) }, Store { destination_pointer: Relative(54), source: Relative(50) }, Jump { location: 19366 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(43) }, Jump { location: 1417 }, Load { destination: Relative(48), source_pointer: Relative(40) }, JumpIf { condition: Relative(48), location: 19477 }, Jump { location: 19372 }, Load { destination: Relative(48), source_pointer: Relative(42) }, Load { destination: Relative(49), source_pointer: Relative(43) }, Load { destination: Relative(50), source_pointer: Relative(48) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 19380 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(2) }, JumpIf { condition: Relative(52), location: 19390 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(2) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(2) }, JumpIf { condition: Relative(54), location: 19390 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(50) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(52) }, JumpIf { condition: Relative(53), location: 19394 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(52), rhs: Relative(5) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(50) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(52) }, JumpIf { condition: Relative(53), location: 19399 }, Call { location: 20515 }, Const { destination: Relative(53), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(52), rhs: Relative(53) }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, BinaryIntOp { destination: Relative(50), op: Sub, bit_size: U32, lhs: Relative(52), rhs: Relative(55) }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(17) }, JumpIf { condition: Relative(52), location: 19406 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(52), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Load { destination: Relative(50), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(3) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(7) }, Not { destination: Relative(57), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(50), op: Or, bit_size: U1, lhs: Relative(56), rhs: Relative(57) }, JumpIf { condition: Relative(50), location: 19430 }, Jump { location: 19425 }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(54), rhs: Relative(10) }, JumpIf { condition: Relative(48), location: 19428 }, Jump { location: 19438 }, Store { destination_pointer: Relative(55), source: Relative(14) }, Jump { location: 19438 }, Store { destination_pointer: Relative(55), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(3) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(49), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 19435 }, Call { location: 20515 }, Store { destination_pointer: Relative(42), source: Relative(48) }, Store { destination_pointer: Relative(43), source: Relative(50) }, Jump { location: 19438 }, Load { destination: Relative(48), source_pointer: Relative(55) }, JumpIf { condition: Relative(48), location: 19441 }, Jump { location: 19477 }, Load { destination: Relative(48), source_pointer: Relative(42) }, Load { destination: Relative(49), source_pointer: Relative(43) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(52) }, Store { destination_pointer: Relative(54), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(53) }, Store { destination_pointer: Relative(52), source: Relative(10) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Store { destination_pointer: Relative(53), source: Relative(16) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(48) }, Store { destination_pointer: Relative(53), source: Relative(7) }, Store { destination_pointer: Relative(42), source: Relative(50) }, Store { destination_pointer: Relative(43), source: Relative(49) }, Store { destination_pointer: Relative(40), source: Relative(14) }, Jump { location: 19477 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(48) }, Jump { location: 1341 }, Load { destination: Relative(11), source_pointer: Relative(50) }, Load { destination: Relative(40), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(48) }, JumpIf { condition: Relative(54), location: 19487 }, Jump { location: 19506 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(2) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryFieldOp { destination: Relative(56), op: Add, lhs: Relative(54), rhs: Relative(55) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(2) }, Store { destination_pointer: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(50), source: Relative(11) }, Store { destination_pointer: Relative(51), source: Relative(54) }, Store { destination_pointer: Relative(52), source: Relative(48) }, Store { destination_pointer: Relative(53), source: Relative(49) }, Jump { location: 19506 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(11) }, Jump { location: 1305 }, Load { destination: Relative(49), source_pointer: Relative(48) }, JumpIf { condition: Relative(49), location: 19617 }, Jump { location: 19512 }, Load { destination: Relative(49), source_pointer: Relative(42) }, Load { destination: Relative(50), source_pointer: Relative(43) }, Load { destination: Relative(51), source_pointer: Relative(49) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 19520 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(2) }, JumpIf { condition: Relative(53), location: 19530 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(2) }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, JumpIf { condition: Relative(55), location: 19530 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(51) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 19534 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(5) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(51) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(40), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 19539 }, Call { location: 20515 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Sub, bit_size: U32, lhs: Relative(53), rhs: Relative(56) }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(17) }, JumpIf { condition: Relative(53), location: 19546 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(3) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(56), source: Relative(7) }, Not { destination: Relative(58), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Or, bit_size: U1, lhs: Relative(57), rhs: Relative(58) }, JumpIf { condition: Relative(51), location: 19570 }, Jump { location: 19565 }, BinaryFieldOp { destination: Relative(49), op: Equals, lhs: Relative(55), rhs: Relative(10) }, JumpIf { condition: Relative(49), location: 19568 }, Jump { location: 19578 }, Store { destination_pointer: Relative(56), source: Relative(14) }, Jump { location: 19578 }, Store { destination_pointer: Relative(56), source: Relative(14) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, BinaryIntOp { destination: Relative(52), op: LessThanEquals, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, JumpIf { condition: Relative(52), location: 19575 }, Call { location: 20515 }, Store { destination_pointer: Relative(42), source: Relative(49) }, Store { destination_pointer: Relative(43), source: Relative(51) }, Jump { location: 19578 }, Load { destination: Relative(49), source_pointer: Relative(56) }, JumpIf { condition: Relative(49), location: 19581 }, Jump { location: 19617 }, Load { destination: Relative(49), source_pointer: Relative(42) }, Load { destination: Relative(50), source_pointer: Relative(43) }, Mov { destination: Direct(32771), source: Relative(49) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(53) }, Store { destination_pointer: Relative(55), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(54) }, Store { destination_pointer: Relative(53), source: Relative(10) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(49) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(11) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(52) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(49) }, Store { destination_pointer: Relative(54), source: Relative(7) }, Store { destination_pointer: Relative(42), source: Relative(51) }, Store { destination_pointer: Relative(43), source: Relative(50) }, Store { destination_pointer: Relative(48), source: Relative(14) }, Jump { location: 19617 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(49) }, Jump { location: 1230 }, Load { destination: Relative(40), source_pointer: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(52) }, Load { destination: Relative(54), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(49) }, JumpIf { condition: Relative(55), location: 19627 }, Jump { location: 19646 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(2) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryFieldOp { destination: Relative(57), op: Add, lhs: Relative(55), rhs: Relative(56) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(50), source: Relative(40) }, Store { destination_pointer: Relative(51), source: Relative(55) }, Store { destination_pointer: Relative(52), source: Relative(49) }, Store { destination_pointer: Relative(53), source: Relative(54) }, Jump { location: 19646 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(40) }, Jump { location: 1194 }, Load { destination: Relative(49), source_pointer: Relative(48) }, JumpIf { condition: Relative(49), location: 19711 }, Jump { location: 19652 }, Load { destination: Relative(49), source_pointer: Relative(11) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 19658 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(2) }, JumpIf { condition: Relative(51), location: 19668 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(2) }, JumpIf { condition: Relative(53), location: 19668 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(49) }, BinaryIntOp { destination: Relative(52), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(51) }, JumpIf { condition: Relative(52), location: 19672 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(49) }, BinaryIntOp { destination: Relative(52), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(51) }, JumpIf { condition: Relative(52), location: 19677 }, Call { location: 20515 }, Const { destination: Relative(52), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(52) }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, BinaryIntOp { destination: Relative(49), op: Sub, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(49), rhs: Relative(17) }, JumpIf { condition: Relative(51), location: 19684 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(49), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(5) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(52) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(52) }, Load { destination: Relative(51), source_pointer: Relative(56) }, Not { destination: Relative(52), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U1, lhs: Relative(52), rhs: Relative(49) }, JumpIf { condition: Relative(51), location: 19704 }, Jump { location: 19711 }, BinaryFieldOp { destination: Relative(49), op: Equals, lhs: Relative(53), rhs: Relative(6) }, JumpIf { condition: Relative(49), location: 19707 }, Jump { location: 19711 }, Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(43), source: Relative(54) }, Store { destination_pointer: Relative(48), source: Relative(14) }, Jump { location: 19711 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(49) }, Jump { location: 1027 }, Load { destination: Relative(42), source_pointer: Relative(51) }, Load { destination: Relative(48), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(53) }, Load { destination: Relative(50), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(55), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(49) }, JumpIf { condition: Relative(55), location: 19721 }, Jump { location: 19740 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(2) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryFieldOp { destination: Relative(57), op: Add, lhs: Relative(55), rhs: Relative(56) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(2) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Relative(42) }, Store { destination_pointer: Relative(52), source: Relative(55) }, Store { destination_pointer: Relative(53), source: Relative(49) }, Store { destination_pointer: Relative(54), source: Relative(50) }, Jump { location: 19740 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(42) }, Jump { location: 991 }, Load { destination: Relative(43), source_pointer: Relative(16) }, Load { destination: Relative(45), source_pointer: Relative(41) }, Load { destination: Relative(46), source_pointer: Relative(43) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 19751 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(46), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(45) }, JumpIf { condition: Relative(48), location: 19758 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 19761 }, Call { location: 20455 }, Load { destination: Relative(45), source_pointer: Relative(43) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 19767 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(45) }, Load { destination: Relative(43), source_pointer: Relative(9) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 19775 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(43) }, Load { destination: Relative(43), source_pointer: Relative(11) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(43) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 19783 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(43) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(6) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Relative(8) }, Store { destination_pointer: Relative(43), source: Relative(52) }, Store { destination_pointer: Relative(49), source: Relative(11) }, Store { destination_pointer: Relative(50), source: Relative(3) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Mov { destination: Relative(42), source: Relative(12) }, Jump { location: 19810 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 19963 }, Jump { location: 19813 }, Load { destination: Relative(45), source_pointer: Relative(43) }, Load { destination: Relative(46), source_pointer: Relative(49) }, Load { destination: Relative(47), source_pointer: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(46) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(48) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 19822 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(53), size: Relative(54) }, output: HeapArray { pointer: Relative(55), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(43), source: Relative(45) }, Store { destination_pointer: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(51), source: Relative(14) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Load { destination: Relative(43), source_pointer: Relative(45) }, Cast { destination: Relative(46), source: Relative(43), bit_size: Integer(U32) }, Cast { destination: Relative(45), source: Relative(46), bit_size: Field }, Cast { destination: Relative(43), source: Relative(45), bit_size: Integer(U32) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Mov { destination: Relative(42), source: Relative(12) }, Jump { location: 19846 }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(17) }, JumpIf { condition: Relative(46), location: 19852 }, Jump { location: 19849 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(42) }, Jump { location: 813 }, Load { destination: Relative(46), source_pointer: Relative(45) }, JumpIf { condition: Relative(46), location: 19960 }, Jump { location: 19855 }, Load { destination: Relative(46), source_pointer: Relative(16) }, Load { destination: Relative(47), source_pointer: Relative(41) }, Load { destination: Relative(48), source_pointer: Relative(46) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 19863 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Relative(42) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(42) }, JumpIf { condition: Relative(50), location: 19873 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(42) }, JumpIf { condition: Relative(52), location: 19873 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 19877 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(5) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(48) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(43), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 19882 }, Call { location: 20515 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(52), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(50), rhs: Relative(53) }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(17) }, JumpIf { condition: Relative(50), location: 19889 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(3) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(7) }, Not { destination: Relative(55), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Or, bit_size: U1, lhs: Relative(54), rhs: Relative(55) }, JumpIf { condition: Relative(48), location: 19913 }, Jump { location: 19908 }, BinaryFieldOp { destination: Relative(46), op: Equals, lhs: Relative(52), rhs: Relative(6) }, JumpIf { condition: Relative(46), location: 19911 }, Jump { location: 19921 }, Store { destination_pointer: Relative(53), source: Relative(14) }, Jump { location: 19921 }, Store { destination_pointer: Relative(53), source: Relative(14) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(3) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(47), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 19918 }, Call { location: 20515 }, Store { destination_pointer: Relative(16), source: Relative(46) }, Store { destination_pointer: Relative(41), source: Relative(48) }, Jump { location: 19921 }, Load { destination: Relative(46), source_pointer: Relative(53) }, JumpIf { condition: Relative(46), location: 19924 }, Jump { location: 19960 }, Load { destination: Relative(46), source_pointer: Relative(16) }, Load { destination: Relative(47), source_pointer: Relative(41) }, Mov { destination: Direct(32771), source: Relative(46) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(50) }, Store { destination_pointer: Relative(52), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(46), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(51) }, Store { destination_pointer: Relative(50), source: Relative(6) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(46) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(10) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(49) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(46) }, Store { destination_pointer: Relative(51), source: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(48) }, Store { destination_pointer: Relative(41), source: Relative(47) }, Store { destination_pointer: Relative(45), source: Relative(14) }, Jump { location: 19960 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Mov { destination: Relative(42), source: Relative(46) }, Jump { location: 19846 }, Load { destination: Relative(45), source_pointer: Relative(43) }, Load { destination: Relative(46), source_pointer: Relative(49) }, Load { destination: Relative(47), source_pointer: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(47) }, JumpIf { condition: Relative(52), location: 19970 }, Jump { location: 19989 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(42) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryFieldOp { destination: Relative(54), op: Add, lhs: Relative(52), rhs: Relative(53) }, Mov { destination: Direct(32771), source: Relative(46) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(42) }, Store { destination_pointer: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(43), source: Relative(45) }, Store { destination_pointer: Relative(49), source: Relative(52) }, Store { destination_pointer: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(51), source: Relative(48) }, Jump { location: 19989 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Mov { destination: Relative(42), source: Relative(45) }, Jump { location: 19810 }, Load { destination: Relative(41), source_pointer: Relative(16) }, JumpIf { condition: Relative(41), location: 20049 }, Jump { location: 19995 }, Load { destination: Relative(41), source_pointer: Relative(6) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 20001 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(2) }, JumpIf { condition: Relative(43), location: 20011 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(2) }, JumpIf { condition: Relative(45), location: 20011 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 20015 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(41), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(5) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 20020 }, Call { location: 20515 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(44) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, BinaryIntOp { destination: Relative(41), op: Sub, bit_size: U32, lhs: Relative(43), rhs: Relative(46) }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(41), rhs: Relative(17) }, JumpIf { condition: Relative(43), location: 20027 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(41), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(3) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Load { destination: Relative(43), source_pointer: Relative(47) }, Not { destination: Relative(44), source: Relative(43), bit_size: U1 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U1, lhs: Relative(44), rhs: Relative(41) }, JumpIf { condition: Relative(43), location: 20043 }, Jump { location: 20049 }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(45), rhs: Relative(4) }, JumpIf { condition: Relative(41), location: 20046 }, Jump { location: 20049 }, Store { destination_pointer: Relative(10), source: Relative(14) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Jump { location: 20049 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(41) }, Jump { location: 695 }, Load { destination: Relative(11), source_pointer: Relative(43) }, Load { destination: Relative(16), source_pointer: Relative(44) }, Load { destination: Relative(41), source_pointer: Relative(45) }, Load { destination: Relative(42), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(41) }, JumpIf { condition: Relative(47), location: 20059 }, Jump { location: 20078 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(49), op: Add, lhs: Relative(47), rhs: Relative(48) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Store { destination_pointer: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(43), source: Relative(11) }, Store { destination_pointer: Relative(44), source: Relative(47) }, Store { destination_pointer: Relative(45), source: Relative(41) }, Store { destination_pointer: Relative(46), source: Relative(42) }, Jump { location: 20078 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(11) }, Jump { location: 659 }, Load { destination: Relative(41), source_pointer: Relative(16) }, JumpIf { condition: Relative(41), location: 20165 }, Jump { location: 20084 }, Load { destination: Relative(41), source_pointer: Relative(10) }, Load { destination: Relative(42), source_pointer: Relative(11) }, Load { destination: Relative(43), source_pointer: Relative(41) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 20092 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(2) }, JumpIf { condition: Relative(45), location: 20102 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(2) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, JumpIf { condition: Relative(47), location: 20102 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, BinaryIntOp { destination: Relative(46), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(45) }, JumpIf { condition: Relative(46), location: 20106 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(43), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(5) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(43) }, BinaryIntOp { destination: Relative(46), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(45) }, JumpIf { condition: Relative(46), location: 20111 }, Call { location: 20515 }, Const { destination: Relative(46), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(46) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, BinaryIntOp { destination: Relative(43), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Relative(48) }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(43), rhs: Relative(17) }, JumpIf { condition: Relative(45), location: 20118 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(43), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Load { destination: Relative(43), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(5) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Load { destination: Relative(45), source_pointer: Relative(51) }, Not { destination: Relative(48), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(48), rhs: Relative(43) }, JumpIf { condition: Relative(45), location: 20138 }, Jump { location: 20165 }, BinaryFieldOp { destination: Relative(43), op: Equals, lhs: Relative(47), rhs: Relative(4) }, JumpIf { condition: Relative(43), location: 20141 }, Jump { location: 20165 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(41) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Store { destination_pointer: Relative(46), source: Relative(49) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(43), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(41) }, Store { destination_pointer: Relative(46), source: Relative(14) }, BinaryIntOp { destination: Relative(41), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(42) }, JumpIf { condition: Relative(44), location: 20161 }, Call { location: 20596 }, Store { destination_pointer: Relative(10), source: Relative(43) }, Store { destination_pointer: Relative(11), source: Relative(41) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Jump { location: 20165 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(41) }, Jump { location: 586 }, Load { destination: Relative(6), source_pointer: Relative(42) }, Load { destination: Relative(16), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(41) }, JumpIf { condition: Relative(47), location: 20175 }, Jump { location: 20194 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(49), op: Add, lhs: Relative(47), rhs: Relative(48) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Store { destination_pointer: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(42), source: Relative(6) }, Store { destination_pointer: Relative(43), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(41) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Jump { location: 20194 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(6) }, Jump { location: 550 }, Load { destination: Relative(21), source_pointer: Relative(19) }, JumpIf { condition: Relative(21), location: 20259 }, Jump { location: 20200 }, Load { destination: Relative(21), source_pointer: Relative(15) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 20206 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 20216 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 20216 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 20220 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(18), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 20225 }, Call { location: 20515 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U32, lhs: Relative(23), rhs: Relative(26) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, JumpIf { condition: Relative(23), location: 20232 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(5) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(24) }, Load { destination: Relative(23), source_pointer: Relative(28) }, Not { destination: Relative(24), source: Relative(23), bit_size: U1 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U1, lhs: Relative(24), rhs: Relative(21) }, JumpIf { condition: Relative(23), location: 20252 }, Jump { location: 20259 }, BinaryFieldOp { destination: Relative(21), op: Equals, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(21), location: 20255 }, Jump { location: 20259 }, Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(20), source: Relative(26) }, Store { destination_pointer: Relative(19), source: Relative(14) }, Jump { location: 20259 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(21) }, Jump { location: 339 }, Load { destination: Relative(18), source_pointer: Relative(24) }, Load { destination: Relative(19), source_pointer: Relative(25) }, Load { destination: Relative(21), source_pointer: Relative(26) }, Load { destination: Relative(22), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(21) }, JumpIf { condition: Relative(23), location: 20269 }, Jump { location: 20288 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Load { destination: Relative(23), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(2) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryFieldOp { destination: Relative(29), op: Add, lhs: Relative(23), rhs: Relative(28) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(23), source: Direct(32773) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(29) }, Store { destination_pointer: Relative(24), source: Relative(18) }, Store { destination_pointer: Relative(25), source: Relative(23) }, Store { destination_pointer: Relative(26), source: Relative(21) }, Store { destination_pointer: Relative(27), source: Relative(22) }, Jump { location: 20288 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(18) }, Jump { location: 303 }, Load { destination: Relative(18), source_pointer: Relative(16) }, JumpIf { condition: Relative(18), location: 20399 }, Jump { location: 20294 }, Load { destination: Relative(18), source_pointer: Relative(10) }, Load { destination: Relative(19), source_pointer: Relative(11) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 20302 }, Call { location: 20437 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 20312 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(2) }, JumpIf { condition: Relative(24), location: 20312 }, Call { location: 20452 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 20316 }, Call { location: 20515 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 20321 }, Call { location: 20515 }, Const { destination: Relative(23), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(23) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Relative(25) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, JumpIf { condition: Relative(22), location: 20328 }, Call { location: 20476 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Load { destination: Relative(20), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(25) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(7) }, Not { destination: Relative(27), source: Relative(20), bit_size: U1 }, BinaryIntOp { destination: Relative(20), op: Or, bit_size: U1, lhs: Relative(26), rhs: Relative(27) }, JumpIf { condition: Relative(20), location: 20352 }, Jump { location: 20347 }, BinaryFieldOp { destination: Relative(18), op: Equals, lhs: Relative(24), rhs: Relative(4) }, JumpIf { condition: Relative(18), location: 20350 }, Jump { location: 20360 }, Store { destination_pointer: Relative(25), source: Relative(14) }, Jump { location: 20360 }, Store { destination_pointer: Relative(25), source: Relative(14) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(19), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 20357 }, Call { location: 20515 }, Store { destination_pointer: Relative(10), source: Relative(18) }, Store { destination_pointer: Relative(11), source: Relative(20) }, Jump { location: 20360 }, Load { destination: Relative(18), source_pointer: Relative(25) }, JumpIf { condition: Relative(18), location: 20363 }, Jump { location: 20399 }, Load { destination: Relative(18), source_pointer: Relative(10) }, Load { destination: Relative(19), source_pointer: Relative(11) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(22) }, Store { destination_pointer: Relative(24), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(23) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(20) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 20518 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(18) }, Store { destination_pointer: Relative(23), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Relative(20) }, Store { destination_pointer: Relative(11), source: Relative(19) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Jump { location: 20399 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(18) }, Jump { location: 219 }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Load { destination: Relative(21), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 20409 }, Jump { location: 20428 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(2) }, Load { destination: Relative(23), source_pointer: Relative(25) }, BinaryFieldOp { destination: Relative(24), op: Add, lhs: Relative(22), rhs: Relative(23) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 20518 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, Store { destination_pointer: Relative(25), source: Relative(24) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(17), source: Relative(22) }, Store { destination_pointer: Relative(18), source: Relative(20) }, Store { destination_pointer: Relative(19), source: Relative(21) }, Jump { location: 20428 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(14) }, Jump { location: 181 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 20436 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 9417307514377997680 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12632160011611521689 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14479745468926698352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 11665340019033496436 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16850003084350092401 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17677620431177272765 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1359149291226868540 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16567169223151679177 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 6895136539169241630 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 955212737754845985 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15583592523844085222 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, BinaryIntOp { destination: Direct(32776), op: Mul, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, BinaryIntOp { destination: Direct(32777), op: Sub, bit_size: U32, lhs: Direct(32776), rhs: Direct(32773) }, Load { destination: Direct(32778), source_pointer: Direct(32772) }, BinaryIntOp { destination: Direct(32779), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, Const { destination: Direct(32781), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32772), rhs: Direct(32781) }, JumpIf { condition: Direct(32779), location: 20487 }, Jump { location: 20491 }, Mov { destination: Direct(32774), source: Direct(32772) }, BinaryIntOp { destination: Direct(32781), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Store { destination_pointer: Direct(32781), source: Direct(32777) }, Jump { location: 20513 }, Const { destination: Direct(32782), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32781), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(32782) }, Mov { destination: Direct(32774), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32781) }, IndirectConst { destination_pointer: Direct(32774), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32781), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Store { destination_pointer: Direct(32781), source: Direct(32777) }, BinaryIntOp { destination: Direct(32781), op: Add, bit_size: U32, lhs: Direct(32781), rhs: Direct(2) }, Store { destination_pointer: Direct(32781), source: Direct(32777) }, Const { destination: Direct(32782), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32781), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(32782) }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32780), rhs: Direct(32777) }, Mov { destination: Direct(32784), source: Direct(32780) }, Mov { destination: Direct(32785), source: Direct(32781) }, BinaryIntOp { destination: Direct(32786), op: Equals, bit_size: U32, lhs: Direct(32784), rhs: Direct(32783) }, JumpIf { condition: Direct(32786), location: 20512 }, Load { destination: Direct(32782), source_pointer: Direct(32784) }, Store { destination_pointer: Direct(32785), source: Direct(32782) }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32784), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32785), op: Add, bit_size: U32, lhs: Direct(32785), rhs: Direct(2) }, Jump { location: 20505 }, Jump { location: 20513 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32780), rhs: Direct(32777) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 20522 }, Jump { location: 20524 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 20539 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 20536 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 20529 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 20539 }, Return, Load { destination: Direct(32776), source_pointer: Direct(32772) }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32772), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Mul, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32780), rhs: Direct(2) }, Load { destination: Direct(32778), source_pointer: Direct(32780) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32780), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32780), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(32773) }, BinaryIntOp { destination: Direct(32781), op: LessThanEquals, bit_size: U32, lhs: Direct(32780), rhs: Direct(32778) }, BinaryIntOp { destination: Direct(32782), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, JumpIf { condition: Direct(32781), location: 20551 }, Jump { location: 20568 }, JumpIf { condition: Direct(32782), location: 20553 }, Jump { location: 20557 }, Mov { destination: Direct(32774), source: Direct(32772) }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Store { destination_pointer: Direct(32783), source: Direct(32780) }, Jump { location: 20567 }, Const { destination: Direct(32784), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(32784) }, Mov { destination: Direct(32774), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32783) }, IndirectConst { destination_pointer: Direct(32774), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Store { destination_pointer: Direct(32783), source: Direct(32780) }, BinaryIntOp { destination: Direct(32783), op: Add, bit_size: U32, lhs: Direct(32783), rhs: Direct(2) }, Store { destination_pointer: Direct(32783), source: Direct(32778) }, Jump { location: 20567 }, Jump { location: 20580 }, Const { destination: Direct(32784), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(32783), op: Mul, bit_size: U32, lhs: Direct(32780), rhs: Direct(32784) }, Const { destination: Direct(32785), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32783), rhs: Direct(32785) }, Mov { destination: Direct(32774), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32784) }, IndirectConst { destination_pointer: Direct(32774), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Store { destination_pointer: Direct(32784), source: Direct(32780) }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32784), rhs: Direct(2) }, Store { destination_pointer: Direct(32784), source: Direct(32783) }, Jump { location: 20580 }, Const { destination: Direct(32782), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32781), op: Add, bit_size: U32, lhs: Direct(32774), rhs: Direct(32782) }, BinaryIntOp { destination: Direct(32782), op: Equals, bit_size: U32, lhs: Direct(32772), rhs: Direct(32774) }, JumpIf { condition: Direct(32782), location: 20594 }, BinaryIntOp { destination: Direct(32784), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(32777) }, Mov { destination: Direct(32785), source: Direct(32779) }, Mov { destination: Direct(32786), source: Direct(32781) }, BinaryIntOp { destination: Direct(32787), op: Equals, bit_size: U32, lhs: Direct(32785), rhs: Direct(32784) }, JumpIf { condition: Direct(32787), location: 20594 }, Load { destination: Direct(32783), source_pointer: Direct(32785) }, Store { destination_pointer: Direct(32786), source: Direct(32783) }, BinaryIntOp { destination: Direct(32785), op: Add, bit_size: U32, lhs: Direct(32785), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32786), op: Add, bit_size: U32, lhs: Direct(32786), rhs: Direct(2) }, Jump { location: 20587 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32781), rhs: Direct(32777) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16291778408346427203 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 3078107792722303059 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 10951819287827820458 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2874511916965227423 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5727012404371710682 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16954218183513903507 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        if result {\n            for i in 0..self.len() {\n                result &= self[i].eq(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use super::{Eq, max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n\n    #[test]\n    fn correctly_handles_unequal_length_slices() {\n        let slice_1 = &[0, 1, 2, 3];\n        let slice_2 = &[0, 1, 2];\n        assert(!slice_1.eq(slice_2));\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            let _ = vec.get(0);\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n        }\n    }\n\n    mod any {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn returns_false_if_predicate_not_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, false, false]);\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn returns_true_if_predicate_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, true, true]);\n            let result = vec.any(|value| value);\n\n            assert(result);\n        }\n\n        #[test]\n        fn returns_false_on_empty_boundedvec() {\n            let vec: BoundedVec<bool, 0> = BoundedVec::new();\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher(_build_hasher: B) -> Self\n    where\n        B: BuildHasher,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n        self._len = new_map._len;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n        self._len = new_map._len;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n    test_iter_len_shrink_on_key_collision();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// Ensure that mutating keys to collide shrinks the length and keeps iterator invariants intact.\nfn test_iter_len_shrink_on_key_collision() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(1, 10);\n    hashmap.insert(2, 20);\n    hashmap.insert(3, 30);\n\n    // Mutate all keys to the same value to force collisions.\n    hashmap.iter_keys_mut(|_k: K| -> K { 0 });\n\n    assert_eq(\n        hashmap.len(),\n        1,\n        \"HashMap length should shrink to 1 after key collisions during iter_keys_mut.\",\n    );\n\n    // These calls will assert internally if _len is not synchronized with the table.\n    let _ = hashmap.entries();\n    let _ = hashmap.keys();\n    let _ = hashmap.values();\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    },
    "58": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
