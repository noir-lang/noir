---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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rUevtx6d7zx66/X7uF25i/H4fm+9fi8cPdx69Hjr0enWo6dbj55vPXq59eh3foclBb7z6NHdenR/69HDrUenW49ef/xt1USNNi+vnicKtx493nr01i7l6kpoojuvJia6daKg1kp/deU/pVvPwBRvPfqt53dKtx4933r01mp59e291PppkXD0O7/xmbK79ej+1qOHW48ebz063Xr0dOvR861Hb/0W2dX3SVPrJ13C0fnOoxd369H9rUcPtx493nr0xnP18vukqaRbj55vPXq59ej11qPf+e3sVN2tR/e3Hj3cevR469FvPVfrredqvfVcrbeeq/XOb2eneue3sxO7W4/ubz16uPXo8daj061HT7cePd969HLr0W89V/nOczU7d+vR/a1HD7ce/fxcvbpPI7uf33ORXfmD36l/8Dv889/xP7/nInv/B78T/uB34h/8Dv3B76Q/+J38B79T/uB36s9/J/z8nosc/B/8TviD34l/8Dunf9PLTwNySH/wO/kPfqf8we/UP/idn99zkaP7g9/xf/A74Q9+5847KXLMtx693Hr0euvR77yTIpO79ej+1qOHW48ebz063Xr0Oz/7zM2ffV4fvdx69G53gaStK83ub99KHvgukJxuuhthPXq49ejx1qPTnUfPt3rPt3rPt3rP93pPtx69NZFeffk653Lr0eutR7/za+m59UNG4ej+1qOHW48ebz1647l6+ZX63Poho3D0fOvRy61Hr7cene88enW3Hr31XL36Sn1uvmHy+ujx1qPTrUdPtx4933r0cuvR661Hv/MWktz6IaNw9FvPVb71XOVbz1W+9VzlO28hyZxvPXq59ej11qPzjUcvzt16dH/r0cOtR4+3Hp1uPXq69ej51qOXW49ebz36reeqv/N2r+L9rUcPtx493np0uvXod90O8v8t/8f/85///V//83/5t//2fy+/8Nd/+9///b/+r3/9H/99/T//1//7P1//5b/8+7/+27/96//1n/7nv/+P//rf/s///e//7T/92//4r3/9t//g1v/1fyyskf7j8r9TWsj/Mh7if4zxryh+/ecY8vKfY/R//b/8r99I/NdvZL/QLET/Pw==",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
