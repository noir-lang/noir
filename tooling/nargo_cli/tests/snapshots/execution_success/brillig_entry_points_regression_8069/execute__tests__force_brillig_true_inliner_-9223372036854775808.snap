---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : [_0]",
    "BRILLIG CALL func 0: inputs: [], outputs: [Simple(Witness(0))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32838), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 12 }, Call { location: 16 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Const { destination: Direct(32835), bit_size: Integer(U1), value: 0 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 1 }, Return, Call { location: 45 }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Relative(1) }, Mov { destination: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Relative(3) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 51 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(4), source: Relative(7) }, JumpIf { condition: Relative(4), location: 42 }, Jump { location: 31 }, Const { destination: Relative(2), bit_size: Field, value: 1 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Relative(2) }, Mov { destination: Relative(8), source: Relative(1) }, Mov { destination: Relative(9), source: Relative(3) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 87 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(4), source: Relative(7) }, Jump { location: 43 }, Jump { location: 43 }, Mov { destination: Relative(1), source: Direct(32835) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 50 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 45 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, JumpIf { condition: Relative(5), location: 83 }, Jump { location: 55 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Direct(32837), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 59 }, Call { location: 137 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Field }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Relative(3) }, Mov { destination: Relative(8), source: Direct(32835) }, Mov { destination: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 87 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(7) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(5), source_pointer: Relative(6) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Direct(32835) }, Mov { destination: Relative(8), source: Relative(5) }, Mov { destination: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 51 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(7) }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 85 }, Mov { destination: Relative(4), source: Direct(32835) }, Jump { location: 85 }, Mov { destination: Relative(1), source: Relative(4) }, Return, Call { location: 45 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, JumpIf { condition: Relative(5), location: 116 }, Jump { location: 91 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Direct(32837), rhs: Relative(3) }, JumpIf { condition: Relative(6), location: 95 }, Call { location: 137 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 0 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Mov { destination: Relative(8), source: Direct(0) }, Mov { destination: Relative(9), source: Relative(2) }, Mov { destination: Relative(10), source: Relative(3) }, Mov { destination: Relative(11), source: Relative(5) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 51 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 7 }, Mov { destination: Relative(7), source: Direct(0) }, Mov { destination: Relative(8), source: Relative(1) }, Mov { destination: Relative(9), source: Relative(6) }, Mov { destination: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 87 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(8) }, Mov { destination: Relative(4), source: Relative(2) }, Jump { location: 135 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 6 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 92 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 30 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(3) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(4), source: Relative(6) }, Jump { location: 135 }, Mov { destination: Relative(1), source: Relative(4) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pZXNbqMwFIXfxWsWtq9/8ypVFJGEVEiIRBRGGkW8+1xzfDvpolJFN3wHyHcg5gqe6tqdl/dTP97uH+rw9lTnqR+G/v003C/t3N9HPvpUumxMVAfTKJOAvMFqwAAWIMABHggAWixaiD3LsAABDvBAACKQgLzB6Q2edWKw4BgBiEACWPCNCiwEhgEsQIADPBCACCSAW2KjogYMwC2JQYADPBCACCQgb0ga4IO5UbmsoGbaSqp0lWUVecVyqIyVqTKDRmsJRoKVQBKchNJqSwgSooQkIddgtAQjwUogCaWHSogSkoRcwzYzWzASrASS4CR4CdJspdlKs5VmkmaSZtqa17VRMtCneeq6Ms8vE85z/2inbpzVYVyGoVF/2mHZfvTxaMeNczvxWX4Q3XhlcuGtH7qS1ua/rb9X+TFUmW/8U/c/9q2O1bdEO3zyufoU9/jO+uo72nP/Lhrxk9njB6q+17/13R7fyfp5E3b4wcjzC7Tn/kN21Y867vCjTeL7PdeP5tMPe+Yn+CD/33+dnyPvtZd++vLNWUvT1Lfnoau7t2W8vJyd/z7kjHyzHtP90l2XqStNLx8u3r4533h9LK8h3jEUG0P5uJaL/wM=",
  "file_map": {
    "50": {
      "source": "fn main() -> pub bool {\n    let ctx_depth = 5;\n    // Safety: testing context\n    let cond = unsafe { func_1(true, 1, ctx_depth) };\n    let _ = if !cond {\n        // Safety: testing context\n        unsafe { func_2(1, true, ctx_depth) }[0]\n    } else {\n        0\n    };\n    false\n}\nunconstrained fn func_1(a: bool, b: i8, mut ctx_depth: u32) -> bool {\n    if (ctx_depth == 0) {\n        false\n    } else {\n        ctx_depth = (ctx_depth - 1);\n        func_1(false, func_2((a as Field), false, ctx_depth)[3], ctx_depth)\n    }\n}\nunconstrained fn func_2(mut a: Field, mut b: bool, mut ctx_depth: u32) -> [i8; 4] {\n    if (ctx_depth == 0) {\n        [6, 101, 92, 30]\n    } else {\n        ctx_depth = (ctx_depth - 1);\n        func_2(a, func_1(b, 0, ctx_depth), ctx_depth)\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
