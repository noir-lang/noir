---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _6",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_1, 56)] []",
    "EXPR [ (1, _0) (-256, _1) (-1, _2) 0 ]",
    "EXPR [ (1, _2) -255 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 48)] []",
    "EXPR [ (1, _0) (-65536, _3) (-1, _4) 0 ]",
    "EXPR [ (1, _4) -65535 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _5) (-1, _6) 0 ]",
    "EXPR [ (1, _6) -4294967295 ]",
    "EXPR [ (1, _0) -18446744073709551615 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZJNjsMgDIXv4jULCC35ucpoFJHEqZAQiShUGkW9+zhMmLaLLppsnsH2Z1nyW2DALl5a48bpCs3XAp031ppLa6deBzM5yi53BvnbBo9IKXiqEzVrjy5A46K1DG7axtR0nbVLMWhPVc4A3UCRBo7G4vq6swfN36Oy2FhZ/8Pnz+mT3EGrvLeqjtBlsYOu6o2uyyO04GIHLkSV+UId4yV/4b/pp3vjX2wGnBoZiKRFUgkNne5EF2RwTqqSlnRKBhUNY1AnFfwvEK0oEL4e66a90Z3FzcVjdP2TqcPPnCvZ9rOfehyix3WzVKNdfwE=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64) {\n    assert_eq(x as i8, -1);\n    assert_eq(x as i16, -1);\n    assert_eq(x as i32, -1);\n    assert_eq(x as i64, -1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
