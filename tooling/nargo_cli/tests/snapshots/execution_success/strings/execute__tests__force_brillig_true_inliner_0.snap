---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
