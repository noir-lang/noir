---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "1236648746354126079",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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5hyXzDkumXNcMue4ZM5xyZzjkjnHJXOOS+Ycl8w5LplzXDLnuGTOccmc45I5xyVzjkvmHJfMOS6Zc1wy57hkznHJnOOSOcclc45L5hyXzDkumXNcMue4ZM5xyZzjkjnHJXOOS+Ycl8w5LplzXDLnuGTOccmc45I5xyULjksWHJcsOC5ZcFyyKBjaBsclC45LFhyXLDguWXBcsuC4ZMFxyYLjkgXHJQuOSxYclyw4LllwXLLguGTBccmC45IFxyULjksWHJcsOC5ZcFyy4LhkwXHJguOSBcclC45LFhyXLDguWXBcsuC4ZMFxyYLjkgXHJQuOSxYclyw4LllwXLLguGTBccmC45IFxyULjksWHJcsOC5ZcFyy4LhkwXHJguOSBcclC45LFhyXLDguWXBcsuC4ZMFxyYLjkgXHJQuOSxYclyw4LllwXLLguGTBccmC45IFxyULjksWHJcsOC5ZcFyy4LhkcUyXbPcB/eGt0cuTIk4pEpQinVJkm7Ku+yIxDhc5cAbTB/YZi+xEZSqpjJDKKKlMI5UxUhknlYljljmIvGecspNUydH3LjJKPlLzEclHNB9p+YjlI56PRD7S85H09nsp+UjNRyQf0Xxke/tjHxnVD1+H0kp5eK+0+vMuyP4Zb2vH+9rxsXZ8Xzt+LB3/jCPwx8bXtePl1eObPo7/9YPCP+N17fi2drytHe9rx8fa8X3t+LF0vLz+qvXxOH60X8Zn3ntfpXKqCKeKH7FKHbH/BqOOXn+vMo5aZfj+vUX8tyqaO7b3kZqPSD6yCfpaZDx+OGlPbrq2Hyt9KWQzIZ8JxUxoYM5tOyrjSvl5bp/cZrTKqSKcKsqp0jhVjFPFOVXiqFVq/PxDyH6v0jlVBqaKFU6VyqkinCrKqXI62vrhGwopbX9DIfX3D01mmBthc06VwFTZfjbk8DdA2w9xvJCRiYxOZNpExiYyPpGJiUzfzhz6pmL7L8UPZ3qZyNSJjExkdCLTJjI2kXnmHPypLzV6LJ7f184f8tr5hz+xDnv9/EN8HLG4/+t//w9+CBhj6fxRyuL5dfF8WTxfF89vi+fb6+cfuK8dxRfPj8Xz++L5Y+38WhbPr4vn/+Hr9xUfdkbVpX8WjdoWz7fF88f2t+OHnrwa23/t9lKozoRkJqQzoTYTspmQz4RiJtRnQjMnQmdOhM6cCJ05ETpzInTmROjMidCZE6EzJ0JnToTOnIg2cyLazIloMyeizZyINnMi2syJaDMnos2ciDZzItrMibCZE2EzJ8JmToTNnAibORE2cyK2vyo99Cjw2P5K8/nIj92r/727vXz3/uriyy5x95Pfrj98vby5fnj59f+f9z/z/vby6ury09vPtzcfLj5+u714e3Xz4e7nzsrdD3e/mSbnLrsi9/ez3ct5d7t7We9f+u5l3/2au1/3bw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
