---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
