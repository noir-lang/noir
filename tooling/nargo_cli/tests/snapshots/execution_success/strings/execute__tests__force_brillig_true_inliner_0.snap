---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZ3dblPJEkbfJde56K7qqurmVY6OED8ZFClKUIAjHSHefZJMHBiy7ag6tL1u0Hjir/hE116xnb3g+9nHi/ffPr29vP7r5svZm/98P7u6+fDu6+XN9d2j7z/Oz97fXl5dXX56++v/Piv3v9QWD4Evn99d3z/+8vXd7dezN1L9/Ozi+uPdf7VyN+Cvy6uLszdWfvz3/C7S85GRjljJR2o+IvmI5iMtH7F8xPOR/Onb9ulb20XCn0VGOuIlH6n5iOQjmo+0fMTyEc9HIh/Jn75vnr7W/hhRbb9Gzp89tY/6+NQh+vRUkYfpUZZOr0uny9LpunR6Wzrdlk73pdM3ryptZTfdXphei+6a1BL12fy+eP5YO7+XxfPr4vmyeL4unr995fpupfXfCE9uf7el033p9Fg6vS+dPlZOH2Xp9Lp0+ub12mR3PTXVV11PQxfPb4vn2+L5vnh+LJ7fF8/fvHKbjt18e8WrESll6fS6dLosna5Lp7el023p9O0r1p82Pl618VJi8fy+eP5YO7+WxfPr4vmyeP7mlWvFHjNWfv8QQmrLRywf8Xwk8pGej4x0REo+UvMRyUfypy/505f86Uv+9CV/+pI/fcmfvuZPX/Onr/nT1+3Tf3o1ZvI80vIRy0c8H9k8fS+7T99dbPK7eBqp2jlVBqZKK5wqlVNFOFWUU6VxqhininOqcGjbOLRtHNoah7bGoa1xaGsc2hqHtsahrXFoaxzaGoe2xqGtc2jrHNo6h7bOoa1zaOsc2jqHts6hrXNo6xzaBoe2waFtcGgbHNoGh7bBoW1waBsc2gaHtsGhbefQtnNo2zm07Rzadg5tO4e2nUPbzqFt59C2c2g7OLQdHNoODm0Hh7aDQ9vBoe3g0HZwaDs4tB0Y2mrB0FYLhrZaMLTVgqGtFgxttWBoqwVDWy0Y2mrB0FYLh7aVQ9vKoW3l0LZyaFs5tK0c2lYObSuHtpVD28qhrXBoKxzaCoe2wqGtcGgrHNoKh7bCoa1waCsc2iqHtsqhrXJoqxzaKoe2yqGtcmjLccmU45IpxyVTjkumHJdMOS6Zclwy5bhkynHJlOOSKcclU45LphyXTDkumR7TJYsWj0+NXp4VEUoRpRTZ5qzupnvrh4scOPr8nhipjJPKBKlMJ5UZoDJ7jLITlamkMnLMMgeRt8cqO0mVxqmSY+9DxPORyEd6PjLSkSj5SM1HJB/RfKTlI/nTj/zpR/70I3/6kT/9nj/9nj/9nj/9nj/9nj/9nj/9nj/9nj/9nj/9nj/9kT/9kT/9kT/9PXctj91fqBX1aG/h9ty1fJIqxqninCrBqdI5VQalSttz1/JJqlROFeFUwdC2FQxtW8HQthUMbVvB0LYVDG1b4dC2cmhbObStHNpWDm0rh7aVQ9vKoW3l0LZyaFs5tBUObYVDW+HQVji0FQ5thUNb4dBWOLQVDm2FQ1vl0FY5tFUObZVDW+XQVjm0VQ5tlUNb5dBWObRtHNo2Dm0bh7aNQ9vGoW3j0LZxaNs4tG0c2jYObY1DW+PQ1ji0NQ5tjUNb49DWOLQ1Dm3tiLQ9dJ9lswEp4oVSZJOzIbvp0V74l3z/4H3Kbfs+5VOVUVKZRipjpDJOKhOkMp1UZhyzzEHkbd9tfpoqlVNlm732FInxa5WHiOYjLR+xfMTzkchHej4y0pHtu+MPR2o+kj/9nj/97bvju47HSLc41kvS7bvuT1PFOVWCU6VzqgxMlW1b4jRVKqeKcKoopwqHtoND28Gh7eDQdnBoOzC0tYKhrRUMba1gaGsFQ1srGNpawdDWCoa2VjC0tYKhrRUObSuHtpVD28qhbeXQtnJoWzm0rRzaVg5tK4e2lUNb4dBWOLQVDm2FQ1vh0FY4tBUObYVDW+HQVji0VQ5tlUNb5dBWObRVDm2VQ1vl0FY5tFUObZVD28ahbePQtnFo2zi0bRzaNg5tG4e2jUPbxqFt49DWOLQ1Dm2NQ1vj0NY4tDUObY1DW+PQ1ji0NQ5tnUNb59DWObR1Dm2dQ1vn0NY5tHUObZ1DW+fQNji0DQ5tg0Pb4NA2OLQNDm2DQ9vg0DY4tA0ObTuHtp1D286hbefQluOSGcclM45LZhyXzDgumXFcMuO4ZMZxyYzjkhnHJTOOS2Ycl8w4LplxXDLjuGTGccmc45I5xyVzjkvmHJfMC4a2znHJnOOSOcclc45L5hyXzDkumXNcMue4ZM5xyZzjkjnHJXOOS+Ycl8w5LplzXDLnuGTOccmc45I5xyVzjkvmHJfMOS6Zc1wy57hkznHJnOOSOcclc45L5hyXzDkumXNcMue4ZM5xyZzjkjnHJXOOS+Ycl8w5LplzXDLnuGTOccmc45I5xyVzjkvmHJfMOS6Zc1wy57hkznHJnOOSOcclc45L5hyXzDkumXNcMue4ZM5xyZzjkjnHJXOOS+Ycl8w5LplzXDLnuGTOccmc45I5xyVzjkvmHJfMOS6Zc1wy57hkznHJnOOSOcclc45L5hyXzDkumXNcMue4ZM5xyZzjkjnHJXOOS+Ycl8w5LplzXDLnuGTOccmc45I5xyVzjkvmHJfMOS6Zc1yy4LhkwXHJguOSBccli4KhbXBcsuC4ZMFxyYLjkgXHJQuOSxYclyw4LllwXLLguGTBccmC45IFxyULjksWHJcsOC5ZcFyy4LhkwXHJguOSBcclC45LFhyXLDguWXBcsuC4ZMFxyYLjkgXHJQuOSxYclyw4LllwXLLguGTBccmC45IFxyULjksWHJcsOC5ZcFyy4LhkwXHJguOSBcclC45LFhyXLDguWXBcsuC4ZMFxyYLjkgXHJQuOSxYclyw4LllwXLLguGTBccmC45IFxyULjksWHJcsOC5ZcFyy4LhkwXHJguOSBcclC45LFsd0ye7eoD8+NXp5VsQpRYJSpFOKbFPWdVckxuEiB3YwvbB7LLITlamkMkIqo6QyjVTGSGWcVCaOWeYg8vY4ZSepkqPvfWSUfKTmI5KPaD7S8hHLRzwfiXyk5yPp0++l5CM1H5F8RPOR7dMfu8iofvg6lFbK43Ol1Z+vguyf8bZ2vK8dH2vH97Xjx9LxexyBPza+rh0vrx7f9Gn8r28U/hmva8e3teNt7XhfOz7Wju9rx4+l4+X1V62Pp/Gj/TI+89yHKpVTRThV/IhV6ojdJxh19Pp7lXHUKsN3zy3iv1XR3No+RGo+IvnIJuhrkfH05qQ9e9G1fVvpSyGbCflMKGZCA7O37aiMK+Xn3j57mdEqp4pwquhRq9T4CRb7vUrjVDFOFT/ZrvjhC19K2134Un9/cdMC8w2rdU4Vzrfx7XtDDr9T276J44VMm8jYRMYnMjGR6ROZkc9s/4z98DuK7R+Gv5CRiYxOZNpExiYyPpGJicyePfhTbz5irJ3fy+L57bXzD7+y7PH6+Yf42Mfa/uP1f/4HX9iNuni+LJ6vr59/6HXVaIvn2+L5/mf//F/zYm8svhZHXzx/LJ0/yp5PJg79hHiUNhOymZDPhGIm1GdCYyK0/SORl0J1JiQzoZmNqDMbUWc2os5sRJ3ZiDqzEXVmI2RmI2RmI2RmI2RmI2RmI2RmI2RmI2RmI2RmI2RmI3RmI3RmI3RmI3RmI3RmI3RmI3RmI3RmI3RmI3RmI7Y/rj50y9LY/lh5f+TH3aP/vbu9fPf+6uLLXeL+i9+uP3y9vLl+fPj1/593X3l/e3l1dfnp7efbmw8XH7/dXry9uvlw/7Wzcv/L/YKYnLvcFXn4htfvHnWL+4f14WE/717ufs+73/dv",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
