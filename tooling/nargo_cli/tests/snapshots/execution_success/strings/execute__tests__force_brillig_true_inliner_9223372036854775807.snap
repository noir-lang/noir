---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
