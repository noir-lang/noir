---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
