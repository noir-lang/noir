---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdfLTuNAEAXQf/E6C1d3VT/4ldEImWBQJCuJTII0Qvz7VLvqMrCYTXvje/OoQ+fRNvkYnuen++vj6fxyeRsefn0MT+tpWU6vj8vlON1Ol7Pe+/F5GHDz8bbOs941fHtcp67TOp9vw8P5viyH4X1a7tuT3q7TecvbtOqj42GYz8+aCr6clrm1z8O/6fH/oxSiD1MoX+PSM8+5Zz4x5lPdN1961h9G8flA47750LP+wAnzQvvmc9f6S8Z8DbvmI/WsP4aCee5Zf5Svv5/CvvnStf6K9fMY982HnvVzrJhn3jefetbPBScfLmnXvIw98/J1/pGu/fdtnrvmE/afZNo3X3u+/2nE9zdR3Dcfu+YFn1/KPz+/33prOp7WH1e8Iegp4zBE/eAPA+sTD4Nsx7Qd83Ys27FuRxotyCJY6Ly+baSArp7EIllki2JRtwijBVkEi2hhSjAlmBJMCaYEU6IqulujKrppYrCIFmwhFskiWxSLugWPFqawKWwKm8KmsCmsCum7zMoQadZ22dU3TiHSb69Qu/hqKkXtDY3tsqjJnuKpHOnLkObp65DiWS3T6EmewTN6sqd4Jk/3knvJvexedi+7l93L7mX3snvZvexedq+4V9wr7hX3invFveJeca+4V9yr7lX3qnvVvepeda+6V92r7lX3aBxRCCWgRBRGEZSEklEKCmSCTJAJMkEmyAS57QiqreT2j0orBaV6aTvDCqEElIjCKIKSUCAHyAFyhBwhR8gRcoQcIUfIEXKEHCEzZIbMkBkyQ2bIDJkhM2SGLJAFskAWyAJZIAtkgSyQBXKCnCAnyAlygpwgJ8gJcoKcILdtFqiVJodWAkpEYRRBaXJspcncSkGpXtqGs0IoTW4n4LbnQjsFt00X2on/fVpP09My+++al/v5+O1nzu3PFY/gh9B1vRzn5/s6twvE9pheMv4C",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u8) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
