---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _114",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 128)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "EXPR [ (1, _0) (1, _1) -2358023 ]",
    "EXPR [ (-1, _0) (1, _1) -2333333 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 64)] []",
    "BLACKBOX::RANGE [(_7, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _6) (-1, _7) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(8)), Simple(Witness(9))]",
    "BLACKBOX::RANGE [(_8, 64)] []",
    "BLACKBOX::RANGE [(_9, 64)] []",
    "EXPR [ (1, _1) (-18446744073709551616, _8) (-1, _9) 0 ]",
    "EXPR [ (1, _6, _8) 0 ]",
    "EXPR [ (1, _0, _1) -28957394910 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(10))]",
    "EXPR [ (1, _0, _10) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [(_12, 128)] []",
    "EXPR [ (1, _0) (-1, _12) (-1, _13) -1 ]",
    "BLACKBOX::RANGE [(_13, 128)] []",
    "EXPR [ (-1, _0, _11) (1, _1) (-1, _12) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 64)] []",
    "BLACKBOX::RANGE [(_15, 64)] []",
    "EXPR [ (1, _11) (-18446744073709551616, _14) (-1, _15) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 64)] []",
    "BLACKBOX::RANGE [(_17, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _16) (-1, _17) 0 ]",
    "EXPR [ (1, _14, _16) 0 ]",
    "EXPR [ (1, _11) -190 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(18))]",
    "EXPR [ (1, _0, _18) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(19)), Simple(Witness(20))]",
    "BLACKBOX::RANGE [(_19, 128)] []",
    "EXPR [ (1, _0) (-1, _20) (-1, _21) -1 ]",
    "BLACKBOX::RANGE [(_21, 128)] []",
    "EXPR [ (-1, _0, _19) (1, _1) (-1, _20) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 64)] []",
    "BLACKBOX::RANGE [(_23, 64)] []",
    "EXPR [ (1, _19) (-18446744073709551616, _22) (-1, _23) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 64)] []",
    "BLACKBOX::RANGE [(_25, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _24) (-1, _25) 0 ]",
    "EXPR [ (1, _22, _24) 0 ]",
    "EXPR [ (1, _20) -128 ]",
    "EXPR [ (-1, _0) 12345 ]",
    "BLACKBOX::XOR [(_0, 128), (_1, 128)] [_26]",
    "EXPR [ (1, _26) -2358007 ]",
    "BLACKBOX::AND [(_0, 128), (_1, 128)] [_27]",
    "EXPR [ (1, _27) -8 ]",
    "EXPR [ (-1, _0) (-1, _28) 340282366920938463463374607431768211455 ]",
    "EXPR [ (-1, _1) (-1, _29) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::AND [(_28, 128), (_29, 128)] [_30]",
    "EXPR [ (-1, _30) 340282366920938463463374607431765853440 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(31)), Simple(Witness(32))]",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "EXPR [ (1, _2) (-256, _31) (-1, _32) 128 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [(-1, Witness(31), Witness(2))], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(33), Witness(34), Witness(35), Witness(36), Witness(37), Witness(38), Witness(39), Witness(40)])]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "EXPR [ (-1, _2, _31) (1, _2) (-1, _33) (-2, _34) (-4, _35) (-8, _36) (-16, _37) (-32, _38) (-64, _39) (-128, _40) 0 ]",
    "EXPR [ (1, _40, _40) (2, _40) (-1, _41) 1 ]",
    "EXPR [ (-1, _39) (-1, _42) 1 ]",
    "EXPR [ (2, _39, _41) (1, _41, _42) (-1, _43) 0 ]",
    "EXPR [ (1, _43, _43) (-1, _44) 0 ]",
    "EXPR [ (-1, _38) (-1, _45) 1 ]",
    "EXPR [ (2, _38, _44) (1, _44, _45) (-1, _46) 0 ]",
    "EXPR [ (1, _46, _46) (-1, _47) 0 ]",
    "EXPR [ (-1, _37) (-1, _48) 1 ]",
    "EXPR [ (2, _37, _47) (1, _47, _48) (-1, _49) 0 ]",
    "EXPR [ (1, _49, _49) (-1, _50) 0 ]",
    "EXPR [ (-1, _36) (-1, _51) 1 ]",
    "EXPR [ (2, _36, _50) (1, _50, _51) (-1, _52) 0 ]",
    "EXPR [ (1, _52, _52) (-1, _53) 0 ]",
    "EXPR [ (-1, _35) (-1, _54) 1 ]",
    "EXPR [ (2, _35, _53) (1, _53, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _55, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _34) (-1, _57) 1 ]",
    "EXPR [ (2, _34, _56) (1, _56, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _58, _58) (-1, _59) 0 ]",
    "EXPR [ (-1, _33) (-1, _60) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(2, Witness(59), Witness(33)), (1, Witness(59), Witness(60))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(61))]",
    "EXPR [ (2, _33, _59) (1, _59, _60) (-1, _62) 0 ]",
    "EXPR [ (1, _61, _62) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 })], outputs: [Simple(Witness(63)), Simple(Witness(64))]",
    "BLACKBOX::RANGE [(_63, 128)] []",
    "BLACKBOX::RANGE [(_64, 128)] []",
    "EXPR [ (1, _62) (-1, _64) (-1, _65) -1 ]",
    "BLACKBOX::RANGE [(_65, 128)] []",
    "EXPR [ (-1, _62, _63) (1, _0) (-1, _64) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(66)), Simple(Witness(67))]",
    "BLACKBOX::RANGE [(_66, 64)] []",
    "BLACKBOX::RANGE [(_67, 64)] []",
    "EXPR [ (1, _63) (-18446744073709551616, _66) (-1, _67) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [(_68, 64)] []",
    "BLACKBOX::RANGE [(_69, 64)] []",
    "EXPR [ (1, _62) (-18446744073709551616, _68) (-1, _69) 0 ]",
    "EXPR [ (1, _66, _68) 0 ]",
    "EXPR [ (-1, _31, _63) (1, _63) -3086 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(70), Witness(71), Witness(72), Witness(73), Witness(74), Witness(75), Witness(76), Witness(77)])]",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "BLACKBOX::RANGE [(_71, 1)] []",
    "BLACKBOX::RANGE [(_72, 1)] []",
    "BLACKBOX::RANGE [(_73, 1)] []",
    "BLACKBOX::RANGE [(_74, 1)] []",
    "BLACKBOX::RANGE [(_75, 1)] []",
    "BLACKBOX::RANGE [(_76, 1)] []",
    "BLACKBOX::RANGE [(_77, 1)] []",
    "EXPR [ (1, _2) (-1, _70) (-2, _71) (-4, _72) (-8, _73) (-16, _74) (-32, _75) (-64, _76) (-128, _77) 0 ]",
    "EXPR [ (1, _77, _77) (2, _77) (-1, _78) 1 ]",
    "EXPR [ (-1, _76) (-1, _79) 1 ]",
    "EXPR [ (2, _76, _78) (1, _78, _79) (-1, _80) 0 ]",
    "EXPR [ (1, _80, _80) (-1, _81) 0 ]",
    "EXPR [ (-1, _75) (-1, _82) 1 ]",
    "EXPR [ (2, _75, _81) (1, _81, _82) (-1, _83) 0 ]",
    "EXPR [ (1, _83, _83) (-1, _84) 0 ]",
    "EXPR [ (-1, _74) (-1, _85) 1 ]",
    "EXPR [ (2, _74, _84) (1, _84, _85) (-1, _86) 0 ]",
    "EXPR [ (1, _86, _86) (-1, _87) 0 ]",
    "EXPR [ (-1, _73) (-1, _88) 1 ]",
    "EXPR [ (2, _73, _87) (1, _87, _88) (-1, _89) 0 ]",
    "EXPR [ (1, _89, _89) (-1, _90) 0 ]",
    "EXPR [ (-1, _72) (-1, _91) 1 ]",
    "EXPR [ (2, _72, _90) (1, _90, _91) (-1, _92) 0 ]",
    "EXPR [ (1, _92, _92) (-1, _93) 0 ]",
    "EXPR [ (-1, _71) (-1, _94) 1 ]",
    "EXPR [ (2, _71, _93) (1, _93, _94) (-1, _95) 0 ]",
    "EXPR [ (1, _95, _95) (-1, _96) 0 ]",
    "EXPR [ (-1, _70) (-1, _97) 1 ]",
    "EXPR [ (-1, _31) (-1, _98) 1 ]",
    "EXPR [ (2, _70, _96) (1, _96, _97) (-1, _99) 0 ]",
    "EXPR [ (1, _98, _99) (-1, _100) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(0), Witness(100))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(101)), Simple(Witness(102))]",
    "BLACKBOX::RANGE [(_101, 126)] []",
    "EXPR [ (-1, _102) (-1, _103) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_103, 129)] []",
    "EXPR [ (1, _0, _100) (-340282366920938463463374607431768211456, _101) (-1, _102) 0 ]",
    "EXPR [ (1, _101) (-1, _104) 20746827117051438823981594372716013474 ]",
    "BLACKBOX::RANGE [(_104, 126)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(101))], q_c: 64323764613183177041862057485226039389 })], outputs: [Simple(Witness(105))]",
    "EXPR [ (-1, _101, _105) (64323764613183177041862057485226039389, _105) (1, _106) -1 ]",
    "EXPR [ (-1, _101, _106) (64323764613183177041862057485226039389, _106) 0 ]",
    "EXPR [ (-1, _102, _106) (-1, _106, _106) (53438638232309528389504892708671455233, _106) (-1, _107) 0 ]",
    "BLACKBOX::RANGE [(_107, 129)] []",
    "EXPR [ (1, _98) -1 ]",
    "EXPR [ (1, _102) -49380 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(108)), Simple(Witness(109))]",
    "BLACKBOX::RANGE [(_109, 129)] []",
    "EXPR [ (-1, _109) (-1, _110) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_110, 129)] []",
    "EXPR [ (1, _0) (-1, _1) (-340282366920938463463374607431768211456, _108) (-1, _109) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _108) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0)), (1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(111)), Simple(Witness(112))]",
    "BLACKBOX::RANGE [(_112, 129)] []",
    "EXPR [ (-1, _112) (-1, _113) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_113, 129)] []",
    "EXPR [ (-1, _0) (1, _1) (-340282366920938463463374607431768211456, _111) (-1, _112) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _111) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(114))]",
    "EXPR [ (1, _0, _114) (-1, _1, _114) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pdfLTuNAEAXQf/E6C3dV9YtfGY2QCQZFspLIJEgjxL9PtasuA4vZtDe+N486dBw/yMfwPD/dXx9P55fL2/Dw62N4Wk/Lcnp9XC7H6Xa6nPXZj8/DgIePt3We9anh2+s6dZ3W+XwbHs73ZTkM79Ny3970dp3OW96mVV8dD8N8ftZU8OW0zK19Hv5Nj/8fDcQ+HKh8jceeeck980kwn+q++dKzfhqjz1MY981Tz/pJEuZj2Defu9ZfMuYr7Zrn0LN+poJ56Vk/x6+/n2jffOlaf8X6ZeR989SzfuGKeZF986ln/VJw8ZGSds3HsWc+fl1/Ytf5921euuYTzr+Yw7752nP8pxHHbwq8b5675iO+v5R/fn+/9dF0PK0/7ngD6SXjMLB+8YdB9I2HIW7btG3zti3btm7bMFoEC7LQed1tQQFdfYgWySJbFIu6BY0WwYIs2MIUMoVMIVPIFDKFVdGzlVXRk4bJgi3EIloki2xRLOoWMlqYIqaIKWKKmCKmiCpB97IoE4Jmbbdd3XEKBT16Y2g3X02lQtuh3G6LmuIZPZUL+jFi8/RzxOJZLdPoGTzJkz3FM3omT/eSe8m97F52L7uX3cvuZfeye9m97F52r7hX3CvuFfeKe8W94l5xr7hX3KvuVfeqe9W96l51r7pX3avuVffCOKIEFEJhFEGJKAkloxSUJtd29I/tP41WAgqhMIqgRJSEklEKSvVCkAkyQSbIBJkgE2SCTJAJMkNmyAyZITNkhsyQGTJDZsgCWSALZIEskAWyQBbIAlkgR8gRcoQcIUfIEXI7sSi00mRqpaBUL+3kshJQmsytNFlaEZSIklAySpPbJbCdZdQugu00o3bpfZ/W0/S0zP7L4uV+Pn77oXH7c8Ur+ClyXS/H+fm+zu0Svb2mF+2/",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u8) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
