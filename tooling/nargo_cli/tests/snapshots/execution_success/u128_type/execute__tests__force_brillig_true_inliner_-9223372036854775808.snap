---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U128) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U128) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 17 }, Call { location: 18 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 121 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U128, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 23 }, Call { location: 127 }, Const { destination: Relative(5), bit_size: Integer(U128), value: 2358023 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 28 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U128, lhs: Relative(2), rhs: Relative(1) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 32 }, Call { location: 130 }, Const { destination: Relative(5), bit_size: Integer(U128), value: 2333333 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 37 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U128), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U128, lhs: Relative(6), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 45 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U128, lhs: Relative(4), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U128, lhs: Relative(8), rhs: Relative(1) }, JumpIf { condition: Relative(7), location: 45 }, Call { location: 133 }, Const { destination: Relative(5), bit_size: Integer(U128), value: 28957394910 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 50 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U128, lhs: Relative(2), rhs: Relative(1) }, Const { destination: Relative(5), bit_size: Integer(U128), value: 190 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 56 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U128, lhs: Relative(2), rhs: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U128, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U128, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(5), bit_size: Integer(U128), value: 128 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 64 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Not { destination: Relative(4), source: Relative(1), bit_size: U128 }, Const { destination: Relative(5), bit_size: Integer(U128), value: 340282366920938463463374607431768199110 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 70 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Xor, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U128), value: 2358007 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 76 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: And, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U128), value: 8 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 82 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Or, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U128), value: 2358015 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 88 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U128, lhs: Relative(1), rhs: Relative(3) }, Const { destination: Relative(5), bit_size: Integer(U128), value: 3086 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 94 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U128, lhs: Relative(1), rhs: Relative(3) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U8, lhs: Relative(3), rhs: Relative(5) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(6), location: 100 }, Call { location: 136 }, Const { destination: Relative(5), bit_size: Integer(U128), value: 49380 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U128, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 105 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 109 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U128, lhs: Relative(2), rhs: Relative(1) }, Const { destination: Relative(4), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 115 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U128, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(1), location: 120 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 126 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pZZNjuJADIXvUussyvVfXKXVQgFCK1IUUBpGGiHuPnZsM/SiN5VNvhfCe7FNKtTDnIbD/Ws/zufLt9l9PMxhGadp/NpPl2N/Gy8zfvowlg5QzQ464ywDGI7hzc4hAiMyEiMzitl5RF3hLQMYmBIQnhEYkZEYmBIRhVFXBMsAhmN4RmBgSkIkRmYURl0RMSUjMKUgHMMzAiMyMKUiMqMwaC62M8kKQeiEXhiEmAU4s5SEWViElZkpDweXKQ+HlJ3QC4MwCikPJ5UpDzvPRViZxQpBSHnYfqE87L8EYRQmYRZSHg6hUB72Xa0QhE7ohfQwYL81CpMwC4uwMsFioAMSoMKp8CqCCkp1JCjWk8gqigpKxokAUHIkASqcCq8iqKDkRIKSM4msoqig5Px8dkbXyf62DAMtk7eFg8vp2i/DfDO7+T5NnfnTT/f1S9/Xfl556xe8it0P8wmJgedxGkg9u/9u+7sVqNPVDK687LHFH3KLPwX1p7rNX1rqdzaK34Hd5nct9buQ1B9hmz831V+y+qvb5PfQUr93Rf2hpX4fX/dPbpu/NNVftf5g/Ta/a6k/+Kr+ELb5U0v9oejLJ5S0yR9tiz++3j+xaf29+UOTP+n6ixm2+WvL85+sPr8J/Da/b/JH/f1STNv8+af/E8/647j82Eo+KWkZ+8M0yOn5Ph/frt7+XvWKbkWvy+U4nO7LQElv+1E8fgBuBsClT/pPplNvO/Du80m3/wc=",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u8) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
