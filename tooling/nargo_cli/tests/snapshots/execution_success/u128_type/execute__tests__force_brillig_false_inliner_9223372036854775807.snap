---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 93",
    "private parameters indices : [0, 1, 2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 128)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "EXPR [ (1, _0) (1, _1) -2358023 ]",
    "EXPR [ (-1, _0) (1, _1) -2333333 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 64)] []",
    "BLACKBOX::RANGE [(_7, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _6) (-1, _7) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(8)), Simple(Witness(9))]",
    "BLACKBOX::RANGE [(_8, 64)] []",
    "BLACKBOX::RANGE [(_9, 64)] []",
    "EXPR [ (1, _1) (-18446744073709551616, _8) (-1, _9) 0 ]",
    "EXPR [ (1, _6, _8) 0 ]",
    "EXPR [ (1, _0, _1) -28957394910 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(10))]",
    "EXPR [ (1, _0, _10) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [(_12, 128)] []",
    "EXPR [ (1, _0) (-1, _12) (-1, _13) -1 ]",
    "BLACKBOX::RANGE [(_13, 128)] []",
    "EXPR [ (-1, _0, _11) (1, _1) (-1, _12) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 64)] []",
    "BLACKBOX::RANGE [(_15, 64)] []",
    "EXPR [ (1, _11) (-18446744073709551616, _14) (-1, _15) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 64)] []",
    "BLACKBOX::RANGE [(_17, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _16) (-1, _17) 0 ]",
    "EXPR [ (1, _14, _16) 0 ]",
    "EXPR [ (1, _11) -190 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(18))]",
    "EXPR [ (1, _0, _18) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(19)), Simple(Witness(20))]",
    "BLACKBOX::RANGE [(_19, 128)] []",
    "EXPR [ (1, _0) (-1, _20) (-1, _21) -1 ]",
    "BLACKBOX::RANGE [(_21, 128)] []",
    "EXPR [ (-1, _0, _19) (1, _1) (-1, _20) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 64)] []",
    "BLACKBOX::RANGE [(_23, 64)] []",
    "EXPR [ (1, _19) (-18446744073709551616, _22) (-1, _23) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 64)] []",
    "BLACKBOX::RANGE [(_25, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _24) (-1, _25) 0 ]",
    "EXPR [ (1, _22, _24) 0 ]",
    "EXPR [ (1, _20) -128 ]",
    "EXPR [ (-1, _0) 12345 ]",
    "BLACKBOX::XOR [(_0, 128), (_1, 128)] [_26]",
    "EXPR [ (1, _26) -2358007 ]",
    "BLACKBOX::AND [(_0, 128), (_1, 128)] [_27]",
    "EXPR [ (1, _27) -8 ]",
    "EXPR [ (-1, _0) (-1, _28) 340282366920938463463374607431768211455 ]",
    "EXPR [ (-1, _1) (-1, _29) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::AND [(_28, 128), (_29, 128)] [_30]",
    "EXPR [ (-1, _30) 340282366920938463463374607431765853440 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(31), Witness(32), Witness(33), Witness(34), Witness(35), Witness(36), Witness(37), Witness(38)])]",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 1)] []",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "EXPR [ (1, _2) (-1, _31) (-2, _32) (-4, _33) (-8, _34) (-16, _35) (-32, _36) (-64, _37) (-128, _38) 0 ]",
    "EXPR [ (2, _38, _38) (4, _38) (-1, _39) 2 ]",
    "EXPR [ (1, _38, _38) (2, _38) (-1, _40) 1 ]",
    "EXPR [ (-1, _37) (-1, _41) 1 ]",
    "EXPR [ (1, _37, _39) (1, _40, _41) (-1, _42) 0 ]",
    "EXPR [ (2, _42, _42) (-1, _43) 0 ]",
    "EXPR [ (1, _42, _42) (-1, _44) 0 ]",
    "EXPR [ (-1, _36) (-1, _45) 1 ]",
    "EXPR [ (1, _36, _43) (1, _44, _45) (-1, _46) 0 ]",
    "EXPR [ (2, _46, _46) (-1, _47) 0 ]",
    "EXPR [ (1, _46, _46) (-1, _48) 0 ]",
    "EXPR [ (-1, _35) (-1, _49) 1 ]",
    "EXPR [ (1, _35, _47) (1, _48, _49) (-1, _50) 0 ]",
    "EXPR [ (2, _50, _50) (-1, _51) 0 ]",
    "EXPR [ (1, _50, _50) (-1, _52) 0 ]",
    "EXPR [ (-1, _34) (-1, _53) 1 ]",
    "EXPR [ (1, _34, _51) (1, _52, _53) (-1, _54) 0 ]",
    "EXPR [ (2, _54, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _54, _54) (-1, _56) 0 ]",
    "EXPR [ (-1, _33) (-1, _57) 1 ]",
    "EXPR [ (1, _33, _55) (1, _56, _57) (-1, _58) 0 ]",
    "EXPR [ (2, _58, _58) (-1, _59) 0 ]",
    "EXPR [ (1, _58, _58) (-1, _60) 0 ]",
    "EXPR [ (-1, _32) (-1, _61) 1 ]",
    "EXPR [ (1, _32, _59) (1, _60, _61) (-1, _62) 0 ]",
    "EXPR [ (2, _62, _62) (-1, _63) 0 ]",
    "EXPR [ (1, _62, _62) (-1, _64) 0 ]",
    "EXPR [ (-1, _31) (-1, _65) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(66)), Simple(Witness(67))]",
    "BLACKBOX::RANGE [(_66, 1)] []",
    "BLACKBOX::RANGE [(_67, 8)] []",
    "EXPR [ (1, _2) (-256, _66) (-1, _67) 128 ]",
    "EXPR [ (-1, _66) (-1, _68) 1 ]",
    "EXPR [ (1, _31, _63) (1, _64, _65) (-1, _69) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(68), Witness(69))], linear_combinations: [(340282366920938463463374607431768211455, Witness(66))], q_c: 0 })], outputs: [Simple(Witness(70))]",
    "EXPR [ (1, _68, _69) (340282366920938463463374607431768211455, _66) (-1, _71) 0 ]",
    "EXPR [ (1, _70, _71) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 })], outputs: [Simple(Witness(72)), Simple(Witness(73))]",
    "BLACKBOX::RANGE [(_73, 128)] []",
    "EXPR [ (1, _71) (-1, _73) (-1, _74) -1 ]",
    "BLACKBOX::RANGE [(_74, 128)] []",
    "EXPR [ (-1, _71, _72) (1, _0) (-1, _73) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(72))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(75)), Simple(Witness(76))]",
    "BLACKBOX::RANGE [(_75, 64)] []",
    "BLACKBOX::RANGE [(_76, 64)] []",
    "EXPR [ (1, _72) (-18446744073709551616, _75) (-1, _76) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(77)), Simple(Witness(78))]",
    "BLACKBOX::RANGE [(_77, 64)] []",
    "BLACKBOX::RANGE [(_78, 64)] []",
    "EXPR [ (1, _71) (-18446744073709551616, _77) (-1, _78) 0 ]",
    "EXPR [ (1, _75, _77) 0 ]",
    "EXPR [ (1, _72) -3086 ]",
    "EXPR [ (1, _68, _69) (-1, _79) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(0), Witness(79))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(80)), Simple(Witness(81))]",
    "BLACKBOX::RANGE [(_80, 126)] []",
    "EXPR [ (-1, _81) (-1, _82) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_82, 129)] []",
    "EXPR [ (1, _0, _79) (-340282366920938463463374607431768211456, _80) (-1, _81) 0 ]",
    "EXPR [ (1, _80) (-1, _83) 20746827117051438823981594372716013474 ]",
    "BLACKBOX::RANGE [(_83, 126)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(80))], q_c: 64323764613183177041862057485226039389 })], outputs: [Simple(Witness(84))]",
    "EXPR [ (-1, _80, _84) (64323764613183177041862057485226039389, _84) (1, _85) -1 ]",
    "EXPR [ (-1, _80, _85) (64323764613183177041862057485226039389, _85) 0 ]",
    "EXPR [ (-1, _81, _85) (53438638232309528389504892708671455232, _85) (-1, _86) 0 ]",
    "BLACKBOX::RANGE [(_86, 129)] []",
    "EXPR [ (1, _68) -1 ]",
    "EXPR [ (1, _81) -49380 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(87)), Simple(Witness(88))]",
    "BLACKBOX::RANGE [(_88, 129)] []",
    "EXPR [ (-1, _88) (-1, _89) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_89, 129)] []",
    "EXPR [ (1, _0) (-1, _1) (-340282366920938463463374607431768211456, _87) (-1, _88) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _87) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0)), (1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(90)), Simple(Witness(91))]",
    "BLACKBOX::RANGE [(_91, 129)] []",
    "EXPR [ (-1, _91) (-1, _92) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_92, 129)] []",
    "EXPR [ (-1, _0) (1, _1) (-340282366920938463463374607431768211456, _90) (-1, _91) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _90) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(93))]",
    "EXPR [ (1, _0, _93) (-1, _1, _93) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "ldnLauMwFIDhd/G6C+noSDrKqwxDybUYQhJyGRhC333SUpUia2L+XWTzOTI/9uL4Pmy2q9vb63jYHS/D4td92B/Xy+t4PDxW90E+D11Oy8PH6nJdnq/Dwkt4GbaHzeOX5veXYTfut8MiuvffL0PogqQVmDVAe0Bc/ALiXQMiBYmCTIFRUCjwDguPhWARZoSUVvRza6oi+lZELBIWGQvDolAhDguPhWARsMDNBTcX3Fxwc8HNBTcPc81z+wyGfnPLVRRphWARsFAsIhYJi4yFYVGoUIcFbq64ueLmipsrbq64uc40D759BrXbPIhVoe0zqN3mIX7/R2p3Fd2MsHZXsds8lLordaEVMiNksqtucw2lCtVWKBYRizQj0uTOu83VXBWWWmFYFCqSw8JjIVgELBSLiEXCAjdPuHnCzTNunnHzjJtn3Dzj5hk3z7h5xs0zbp5xc8PNDTc33Nxwc8PNDTc33Nxwc8PNDTcvuHnBzQtuXnDzgpsX3Lzg5gU3L7h5wc29c5x4ToSTwIlyEjlJnGROjBNe3/P6ntf3vL7n9T2v73l9z+v7mfrRTUm3fvyeWcfpULI/m3tK+sO558RzIpwETpSTyEniJHPC6wuvH3j9wOuHufo6Jf36qc4PY57MpfujuuckcpI4yZzYDCnTTxjd+snVSUzy7XTB9wd2z4nnRDgJnOgMCVPSrZ9ifSenPHkn98d2/yePxeo87vfj2+vPz5GPw3+W53G52m+/lrvbYf3j7PXvqZ6p/nQ+rreb23n7caXPc4/L/wM=",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u8) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
