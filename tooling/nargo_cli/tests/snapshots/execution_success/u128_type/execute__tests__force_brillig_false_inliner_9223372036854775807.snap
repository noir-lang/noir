---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5795655218219125583": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 8 limbs"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _108",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 128)] []",
    "BLACKBOX::RANGE [(_2, 128)] []",
    "EXPR [ (1, _0) (1, _1) -2358023 ]",
    "EXPR [ (-1, _0) (1, _1) -2333333 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_6, _7]",
    "BLACKBOX::RANGE [(_6, 64)] []",
    "BLACKBOX::RANGE [(_7, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _6) (-1, _7) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_8, _9]",
    "BLACKBOX::RANGE [(_8, 64)] []",
    "BLACKBOX::RANGE [(_9, 64)] []",
    "EXPR [ (1, _1) (-18446744073709551616, _8) (-1, _9) 0 ]",
    "EXPR [ (1, _6, _8) 0 ]",
    "EXPR [ (1, _0, _1) -28957394910 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_10]",
    "EXPR [ (1, _0, _10) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ (1, _0) 0 ]], outputs: [_11, _12]",
    "BLACKBOX::RANGE [(_12, 128)] []",
    "EXPR [ (1, _0) (-1, _12) (-1, _13) -1 ]",
    "BLACKBOX::RANGE [(_13, 128)] []",
    "EXPR [ (-1, _0, _11) (1, _1) (-1, _12) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _11) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_14, _15]",
    "BLACKBOX::RANGE [(_14, 64)] []",
    "BLACKBOX::RANGE [(_15, 64)] []",
    "EXPR [ (1, _11) (-18446744073709551616, _14) (-1, _15) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_16, _17]",
    "BLACKBOX::RANGE [(_16, 64)] []",
    "BLACKBOX::RANGE [(_17, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _16) (-1, _17) 0 ]",
    "EXPR [ (1, _14, _16) 0 ]",
    "EXPR [ (1, _11) -190 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_18]",
    "EXPR [ (1, _0, _18) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ (1, _0) 0 ]], outputs: [_19, _20]",
    "BLACKBOX::RANGE [(_19, 128)] []",
    "EXPR [ (1, _0) (-1, _20) (-1, _21) -1 ]",
    "BLACKBOX::RANGE [(_21, 128)] []",
    "EXPR [ (-1, _0, _19) (1, _1) (-1, _20) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _19) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_22, _23]",
    "BLACKBOX::RANGE [(_22, 64)] []",
    "BLACKBOX::RANGE [(_23, 64)] []",
    "EXPR [ (1, _19) (-18446744073709551616, _22) (-1, _23) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_24, _25]",
    "BLACKBOX::RANGE [(_24, 64)] []",
    "BLACKBOX::RANGE [(_25, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _24) (-1, _25) 0 ]",
    "EXPR [ (1, _22, _24) 0 ]",
    "EXPR [ (1, _20) -128 ]",
    "EXPR [ (-1, _0) 12345 ]",
    "BLACKBOX::XOR [(_0, 128), (_1, 128)] [_26]",
    "EXPR [ (1, _26) -2358007 ]",
    "BLACKBOX::AND [(_0, 128), (_1, 128)] [_27]",
    "EXPR [ (1, _27) -8 ]",
    "EXPR [ (-1, _0) (-1, _28) 340282366920938463463374607431768211455 ]",
    "EXPR [ (-1, _1) (-1, _29) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::AND [(_28, 128), (_29, 128)] [_30]",
    "EXPR [ (-1, _30) 340282366920938463463374607431765853440 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _2) 340282366920938463463374607431768211328 ], EXPR [ 340282366920938463463374607431768211456 ]], outputs: [_31, _32]",
    "BLACKBOX::RANGE [(_32, 129)] []",
    "EXPR [ (-1, _32) (-1, _33) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_33, 129)] []",
    "EXPR [ (1, _2) (-340282366920938463463374607431768211456, _31) (-1, _32) 340282366920938463463374607431768211328 ]",
    "EXPR [ (-1, _31) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _2) 0 ], EXPR [ 8 ], EXPR [ 2 ]], outputs: [[_34, _35, _36, _37, _38, _39, _40, _41]]",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "EXPR [ (1, _2) (-1, _34) (-2, _35) (-4, _36) (-8, _37) (-16, _38) (-32, _39) (-64, _40) (-128, _41) 0 ]",
    "EXPR [ (1, _41, _41) (2, _41) (-1, _42) 1 ]",
    "EXPR [ (-1, _40) (-1, _43) 1 ]",
    "EXPR [ (2, _40, _42) (1, _42, _43) (-1, _44) 0 ]",
    "EXPR [ (1, _44, _44) (-1, _45) 0 ]",
    "EXPR [ (-1, _39) (-1, _46) 1 ]",
    "EXPR [ (2, _39, _45) (1, _45, _46) (-1, _47) 0 ]",
    "EXPR [ (1, _47, _47) (-1, _48) 0 ]",
    "EXPR [ (-1, _38) (-1, _49) 1 ]",
    "EXPR [ (2, _38, _48) (1, _48, _49) (-1, _50) 0 ]",
    "EXPR [ (1, _50, _50) (-1, _51) 0 ]",
    "EXPR [ (-1, _37) (-1, _52) 1 ]",
    "EXPR [ (2, _37, _51) (1, _51, _52) (-1, _53) 0 ]",
    "EXPR [ (1, _53, _53) (-1, _54) 0 ]",
    "EXPR [ (-1, _36) (-1, _55) 1 ]",
    "EXPR [ (2, _36, _54) (1, _54, _55) (-1, _56) 0 ]",
    "EXPR [ (1, _56, _56) (-1, _57) 0 ]",
    "EXPR [ (-1, _35) (-1, _58) 1 ]",
    "EXPR [ (2, _35, _57) (1, _57, _58) (-1, _59) 0 ]",
    "EXPR [ (1, _59, _59) (-1, _60) 0 ]",
    "EXPR [ (-1, _34) (-1, _61) 1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (2, _60, _34) (1, _60, _61) 0 ], EXPR [ 340282366920938463463374607431768211456 ]], outputs: [_62, _63]",
    "BLACKBOX::RANGE [(_62, 126)] []",
    "BLACKBOX::RANGE [(_63, 129)] []",
    "EXPR [ (-1, _63) (-1, _64) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_64, 129)] []",
    "EXPR [ (2, _34, _60) (-1, _107) 0 ]",
    "EXPR [ (1, _60, _61) (-1, _108) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _62) (-1, _63) (1, _107) (1, _108) 0 ]",
    "EXPR [ (1, _62) (-1, _65) 20746827117051438823981594372716013474 ]",
    "BLACKBOX::RANGE [(_65, 126)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _62) 64323764613183177041862057485226039389 ]], outputs: [_66]",
    "EXPR [ (-1, _62, _66) (64323764613183177041862057485226039389, _66) (1, _67) -1 ]",
    "EXPR [ (-1, _62, _67) (64323764613183177041862057485226039389, _67) 0 ]",
    "EXPR [ (-1, _63, _67) (53438638232309528389504892708671455233, _67) (-1, _68) 0 ]",
    "BLACKBOX::RANGE [(_68, 129)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _63) 0 ]], outputs: [_69]",
    "EXPR [ (1, _63, _69) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _63) 0 ]], outputs: [_70, _71]",
    "BLACKBOX::RANGE [(_71, 128)] []",
    "EXPR [ (1, _63) (-1, _71) (-1, _72) -1 ]",
    "BLACKBOX::RANGE [(_72, 128)] []",
    "EXPR [ (-1, _63, _70) (1, _0) (-1, _71) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _70) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_73, _74]",
    "BLACKBOX::RANGE [(_73, 64)] []",
    "BLACKBOX::RANGE [(_74, 64)] []",
    "EXPR [ (1, _70) (-18446744073709551616, _73) (-1, _74) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _63) 0 ], EXPR [ 18446744073709551616 ]], outputs: [_75, _76]",
    "BLACKBOX::RANGE [(_75, 64)] []",
    "BLACKBOX::RANGE [(_76, 64)] []",
    "EXPR [ (1, _63) (-18446744073709551616, _75) (-1, _76) 0 ]",
    "EXPR [ (1, _73, _75) 0 ]",
    "EXPR [ (1, _70) -3086 ]",
    "EXPR [ (-1, _77) (1, _107) (1, _108) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0, _77) 0 ], EXPR [ 340282366920938463463374607431768211456 ]], outputs: [_78, _79]",
    "BLACKBOX::RANGE [(_78, 126)] []",
    "EXPR [ (-1, _79) (-1, _80) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_80, 129)] []",
    "EXPR [ (1, _0, _77) (-340282366920938463463374607431768211456, _78) (-1, _79) 0 ]",
    "EXPR [ (1, _78) (-1, _81) 20746827117051438823981594372716013474 ]",
    "BLACKBOX::RANGE [(_81, 126)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _78) 64323764613183177041862057485226039389 ]], outputs: [_82]",
    "EXPR [ (-1, _78, _82) (64323764613183177041862057485226039389, _82) (1, _83) -1 ]",
    "EXPR [ (-1, _78, _83) (64323764613183177041862057485226039389, _83) 0 ]",
    "EXPR [ (-1, _79, _83) (53438638232309528389504892708671455233, _83) (-1, _84) 0 ]",
    "BLACKBOX::RANGE [(_84, 129)] []",
    "EXPR [ (1, _79) -49380 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) (-1, _1) 340282366920938463463374607431768211456 ], EXPR [ 340282366920938463463374607431768211456 ]], outputs: [_85, _86]",
    "BLACKBOX::RANGE [(_86, 129)] []",
    "EXPR [ (-1, _86) (-1, _87) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_87, 129)] []",
    "EXPR [ (1, _0) (-1, _1) (-340282366920938463463374607431768211456, _85) (-1, _86) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _85) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _0) (1, _1) 340282366920938463463374607431768211456 ], EXPR [ 340282366920938463463374607431768211456 ]], outputs: [_88, _89]",
    "BLACKBOX::RANGE [(_89, 129)] []",
    "EXPR [ (-1, _89) (-1, _90) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_90, 129)] []",
    "EXPR [ (-1, _0) (1, _1) (-340282366920938463463374607431768211456, _88) (-1, _89) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _88) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) (-1, _1) 0 ]], outputs: [_91]",
    "EXPR [ (1, _0, _91) (-1, _1, _91) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pZbLbuMwDEX/xessRIp6za8MBoWbuoUBwwncpMCg6L8PaZJ9LGYjb3xu4txT1bYkvw9P0+P95WFeny+vw6/f78PjNi/L/PKwXM7jbb6s/O37x2nwjw+3bZr4q+HbeW5dx21ab8Ov9b4sp+FtXO77j16v47rzNm58NpyGaX1isvB5XiZJH6evdvh/FTBZGeJXPfX0qfX0c/Z+gWP91jN+DMX6CHisH3vGj1S9n+Kxfukaf23eb3SoH6Fn/DH6wxupZ/wxff79TMf6tWf8FHz8FNKxPvaMnwi8T/lYP3eNv6L3az3UT6Gnnz7Xn9Q1/771U1c/+/xLJR7rt57nPwd/fjOkY/3Y1U9+/3L5ef/+8KfxPG8/drwBeck4DZFv/Gkg/uFpSPsx78eyH+t+bPsRggIUqOA+L/vAAl59ISmyoiiqou3AoAAFKqJCLagWVAuqBdWCaols4bsV2cIXLaIiKkiRFFlRFFXRdlBQqIXUQmohtZBaSC3EFuBbQKwBnq3UZNvlCxdk02aCbL5MVoFc0CjbIpOMyZhlk2WKj/+PVI1NmYMRjGiMRjImYzaaL5svm6+Yr5ivmK+Yr5ivmK+Yr5ivmK+Yr5qvmq+ar5qvmq+ar5qvmq+ar5qvma+Zr5mvma+Zr5mvma+Zr5mvmQ9C8AAe0EP0QB6Sh+yheKge3AxuBjeDm8HN4GZwM7gZ3AxuBjejm9HN6GZ0s8wQaBKSvPBIyB6Kh+qhWZDZogE8oIfogTy4Obo5ullmD4IEMaNM++ABPKCH6EHMUYKYSUL2UDxUD82CTCnZEEDmFMoSI5MKZWN9G7d5fFwme29/vq/nb6/xt79XP+Mv+tftcp6e7tskC+B+jpfEfw==",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u128) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
