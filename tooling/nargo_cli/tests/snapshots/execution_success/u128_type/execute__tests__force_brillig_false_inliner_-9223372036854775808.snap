---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _116",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 128)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "EXPR [ (1, _0) (1, _1) -2358023 ]",
    "EXPR [ (-1, _0) (1, _1) -2333333 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 340282366920938463444927863358058659839 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 129)] []",
    "EXPR [ (-1, _7) (-1, _8) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_8, 129)] []",
    "EXPR [ (1, _0) (-340282366920938463463374607431768211456, _6) (-1, _7) 340282366920938463444927863358058659839 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 340282366920938463444927863358058659839 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(9)), Simple(Witness(10))]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 129)] []",
    "EXPR [ (-1, _10) (-1, _11) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_11, 129)] []",
    "EXPR [ (1, _1) (-340282366920938463463374607431768211456, _9) (-1, _10) 340282366920938463444927863358058659839 ]",
    "EXPR [ (1, _6, _9) 0 ]",
    "EXPR [ (1, _0, _1) -28957394910 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(12))]",
    "EXPR [ (1, _0, _12) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(13)), Simple(Witness(14))]",
    "BLACKBOX::RANGE [(_14, 128)] []",
    "EXPR [ (1, _0) (-1, _14) (-1, _15) -1 ]",
    "BLACKBOX::RANGE [(_15, 128)] []",
    "EXPR [ (-1, _0, _13) (1, _1) (-1, _14) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 64)] []",
    "BLACKBOX::RANGE [(_17, 64)] []",
    "EXPR [ (1, _13) (-18446744073709551616, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 64)] []",
    "BLACKBOX::RANGE [(_19, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _18) (-1, _19) 0 ]",
    "EXPR [ (1, _16, _18) 0 ]",
    "EXPR [ (1, _13) -190 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(20))]",
    "EXPR [ (1, _0, _20) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(21)), Simple(Witness(22))]",
    "BLACKBOX::RANGE [(_21, 128)] []",
    "EXPR [ (1, _0) (-1, _22) (-1, _23) -1 ]",
    "BLACKBOX::RANGE [(_23, 128)] []",
    "EXPR [ (-1, _0, _21) (1, _1) (-1, _22) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 64)] []",
    "BLACKBOX::RANGE [(_25, 64)] []",
    "EXPR [ (1, _21) (-18446744073709551616, _24) (-1, _25) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(26)), Simple(Witness(27))]",
    "BLACKBOX::RANGE [(_26, 64)] []",
    "BLACKBOX::RANGE [(_27, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _26) (-1, _27) 0 ]",
    "EXPR [ (1, _24, _26) 0 ]",
    "EXPR [ (1, _22) -128 ]",
    "EXPR [ (-1, _0) 12345 ]",
    "BLACKBOX::XOR [(_0, 128), (_1, 128)] [_28]",
    "EXPR [ (1, _28) -2358007 ]",
    "BLACKBOX::AND [(_0, 128), (_1, 128)] [_29]",
    "EXPR [ (1, _29) -8 ]",
    "EXPR [ (-1, _0) (-1, _30) 340282366920938463463374607431768211455 ]",
    "EXPR [ (-1, _1) (-1, _31) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::AND [(_30, 128), (_31, 128)] [_32]",
    "EXPR [ (-1, _32) 340282366920938463463374607431765853440 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(33)), Simple(Witness(34))]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 8)] []",
    "EXPR [ (1, _2) (-256, _33) (-1, _34) 128 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [(-1, Witness(33), Witness(2))], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(35), Witness(36), Witness(37), Witness(38), Witness(39), Witness(40), Witness(41), Witness(42)])]",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "EXPR [ (-1, _2, _33) (1, _2) (-1, _35) (-2, _36) (-4, _37) (-8, _38) (-16, _39) (-32, _40) (-64, _41) (-128, _42) 0 ]",
    "EXPR [ (1, _42, _42) (2, _42) (-1, _43) 1 ]",
    "EXPR [ (-1, _41) (-1, _44) 1 ]",
    "EXPR [ (2, _41, _43) (1, _43, _44) (-1, _45) 0 ]",
    "EXPR [ (1, _45, _45) (-1, _46) 0 ]",
    "EXPR [ (-1, _40) (-1, _47) 1 ]",
    "EXPR [ (2, _40, _46) (1, _46, _47) (-1, _48) 0 ]",
    "EXPR [ (1, _48, _48) (-1, _49) 0 ]",
    "EXPR [ (-1, _39) (-1, _50) 1 ]",
    "EXPR [ (2, _39, _49) (1, _49, _50) (-1, _51) 0 ]",
    "EXPR [ (1, _51, _51) (-1, _52) 0 ]",
    "EXPR [ (-1, _38) (-1, _53) 1 ]",
    "EXPR [ (2, _38, _52) (1, _52, _53) (-1, _54) 0 ]",
    "EXPR [ (1, _54, _54) (-1, _55) 0 ]",
    "EXPR [ (-1, _37) (-1, _56) 1 ]",
    "EXPR [ (2, _37, _55) (1, _55, _56) (-1, _57) 0 ]",
    "EXPR [ (1, _57, _57) (-1, _58) 0 ]",
    "EXPR [ (-1, _36) (-1, _59) 1 ]",
    "EXPR [ (2, _36, _58) (1, _58, _59) (-1, _60) 0 ]",
    "EXPR [ (1, _60, _60) (-1, _61) 0 ]",
    "EXPR [ (-1, _35) (-1, _62) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(2, Witness(61), Witness(35)), (1, Witness(61), Witness(62))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(63))]",
    "EXPR [ (2, _35, _61) (1, _61, _62) (-1, _64) 0 ]",
    "EXPR [ (1, _63, _64) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 })], outputs: [Simple(Witness(65)), Simple(Witness(66))]",
    "BLACKBOX::RANGE [(_65, 128)] []",
    "BLACKBOX::RANGE [(_66, 128)] []",
    "EXPR [ (1, _64) (-1, _66) (-1, _67) -1 ]",
    "BLACKBOX::RANGE [(_67, 128)] []",
    "EXPR [ (-1, _64, _65) (1, _0) (-1, _66) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [(_68, 64)] []",
    "BLACKBOX::RANGE [(_69, 64)] []",
    "EXPR [ (1, _65) (-18446744073709551616, _68) (-1, _69) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(70)), Simple(Witness(71))]",
    "BLACKBOX::RANGE [(_70, 64)] []",
    "BLACKBOX::RANGE [(_71, 64)] []",
    "EXPR [ (1, _64) (-18446744073709551616, _70) (-1, _71) 0 ]",
    "EXPR [ (1, _68, _70) 0 ]",
    "EXPR [ (-1, _33, _65) (1, _65) -3086 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(72), Witness(73), Witness(74), Witness(75), Witness(76), Witness(77), Witness(78), Witness(79)])]",
    "BLACKBOX::RANGE [(_72, 1)] []",
    "BLACKBOX::RANGE [(_73, 1)] []",
    "BLACKBOX::RANGE [(_74, 1)] []",
    "BLACKBOX::RANGE [(_75, 1)] []",
    "BLACKBOX::RANGE [(_76, 1)] []",
    "BLACKBOX::RANGE [(_77, 1)] []",
    "BLACKBOX::RANGE [(_78, 1)] []",
    "BLACKBOX::RANGE [(_79, 1)] []",
    "EXPR [ (1, _2) (-1, _72) (-2, _73) (-4, _74) (-8, _75) (-16, _76) (-32, _77) (-64, _78) (-128, _79) 0 ]",
    "EXPR [ (1, _79, _79) (2, _79) (-1, _80) 1 ]",
    "EXPR [ (-1, _78) (-1, _81) 1 ]",
    "EXPR [ (2, _78, _80) (1, _80, _81) (-1, _82) 0 ]",
    "EXPR [ (1, _82, _82) (-1, _83) 0 ]",
    "EXPR [ (-1, _77) (-1, _84) 1 ]",
    "EXPR [ (2, _77, _83) (1, _83, _84) (-1, _85) 0 ]",
    "EXPR [ (1, _85, _85) (-1, _86) 0 ]",
    "EXPR [ (-1, _76) (-1, _87) 1 ]",
    "EXPR [ (2, _76, _86) (1, _86, _87) (-1, _88) 0 ]",
    "EXPR [ (1, _88, _88) (-1, _89) 0 ]",
    "EXPR [ (-1, _75) (-1, _90) 1 ]",
    "EXPR [ (2, _75, _89) (1, _89, _90) (-1, _91) 0 ]",
    "EXPR [ (1, _91, _91) (-1, _92) 0 ]",
    "EXPR [ (-1, _74) (-1, _93) 1 ]",
    "EXPR [ (2, _74, _92) (1, _92, _93) (-1, _94) 0 ]",
    "EXPR [ (1, _94, _94) (-1, _95) 0 ]",
    "EXPR [ (-1, _73) (-1, _96) 1 ]",
    "EXPR [ (2, _73, _95) (1, _95, _96) (-1, _97) 0 ]",
    "EXPR [ (1, _97, _97) (-1, _98) 0 ]",
    "EXPR [ (-1, _72) (-1, _99) 1 ]",
    "EXPR [ (-1, _33) (-1, _100) 1 ]",
    "EXPR [ (2, _72, _98) (1, _98, _99) (-1, _101) 0 ]",
    "EXPR [ (1, _100, _101) (-1, _102) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(0), Witness(102))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(103)), Simple(Witness(104))]",
    "BLACKBOX::RANGE [(_103, 126)] []",
    "EXPR [ (-1, _104) (-1, _105) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_105, 129)] []",
    "EXPR [ (1, _0, _102) (-340282366920938463463374607431768211456, _103) (-1, _104) 0 ]",
    "EXPR [ (1, _103) (-1, _106) 20746827117051438823981594372716013474 ]",
    "BLACKBOX::RANGE [(_106, 126)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(103))], q_c: 64323764613183177041862057485226039389 })], outputs: [Simple(Witness(107))]",
    "EXPR [ (-1, _103, _107) (64323764613183177041862057485226039389, _107) (1, _108) -1 ]",
    "EXPR [ (-1, _103, _108) (64323764613183177041862057485226039389, _108) 0 ]",
    "EXPR [ (-1, _104, _108) (-1, _108, _108) (53438638232309528389504892708671455233, _108) (-1, _109) 0 ]",
    "BLACKBOX::RANGE [(_109, 129)] []",
    "EXPR [ (1, _100) -1 ]",
    "EXPR [ (1, _104) -49380 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(110)), Simple(Witness(111))]",
    "BLACKBOX::RANGE [(_111, 129)] []",
    "EXPR [ (-1, _111) (-1, _112) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_112, 129)] []",
    "EXPR [ (1, _0) (-1, _1) (-340282366920938463463374607431768211456, _110) (-1, _111) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _110) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0)), (1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 340282366920938463463374607431768211456 })], outputs: [Simple(Witness(113)), Simple(Witness(114))]",
    "BLACKBOX::RANGE [(_114, 129)] []",
    "EXPR [ (-1, _114) (-1, _115) 340282366920938463463374607431768211455 ]",
    "BLACKBOX::RANGE [(_115, 129)] []",
    "EXPR [ (-1, _0) (1, _1) (-340282366920938463463374607431768211456, _113) (-1, _114) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _113) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(116))]",
    "EXPR [ (1, _0, _116) (-1, _1, _116) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pdfLTuNAEAXQf/E6C1dX9YtfGY2QCQZFspLIJEgjxL9PtasuA4vZtDe+N486dB5tk4/heX66vz6ezi+Xt+Hh18fwtJ6W5fT6uFyO0+10Oeu9H5+HATcfb+s8613Dt8d16jqt8/k2PJzvy3IY3qflvj3p7Tqdt7xNqz46Hob5/Kyp4MtpmVv7PPybHv8/SoF9mEL5Go8985J75pNgPtV986Vn/WGMPh9o3DcfetYfJGE+0r753LX+kjFfw655pp71cyiYl571c/z6+ynsmy9d669Yv4y8bz70rF+4Yl5k33zqWb8UnHykpF3zceyZj1/nn9i1/77NS9d8wv6LmfbN157vfxrx/U3E++a5az7i80v55+f3W29Nx9P644o3BD1lHAbWD/4wiD7xMMTtmLZj3o5lO9btSKMFWQQLtjCATCAjSA19S0kRfWVUtwijBVkEC7YQi2iRLLKFKcEUNoVNYVPYFFZFdzKrohuKk0W2KBZ1CxktyCJYsIVYmCKmiCliipgSTYmqkH4CURkiTW6XZE2FSL/ZMbYLs6ZS1N7s3C6ZmsWzWiblSF9Gap6+jhQ82VM8o2fyzJ7Fs1rm0dO97F52L7uX3cvuZfeye9m94l5xr7hX3CvuFfeKe8W94l5xr7pX3avuVfeqe9W96l51r7pX3aNxRCGUgMIoghJREkpGKSiQCTJBJshtH1BtRdp/Iq1ElISSUQpK9dJ2hRVCCSiMAjlADpAD5AA5QGbIDJkhM2SGzJAZMkNmyAxZIAtkgSyQBbJAFsgCWSAL5Ag5Qo6QI+QIOUKOkCPkCDlCbpsrUCtNDq0EFEYRlIjSZG6lydJKQale2jazQihN3k6DTW4nwrbVQjs1v0/raXpaZv/l8XI/H7/9ELn9ueIR/FS5rpfj/Hxf53YK3x7Tk/pf",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u8) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
