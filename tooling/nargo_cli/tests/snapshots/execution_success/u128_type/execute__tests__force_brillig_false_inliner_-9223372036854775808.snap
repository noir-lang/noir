---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 128
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdfLTuNAEAXQf/E6C3dV9YtfGY2QCQZFspLIJEgjxL9PtasuA4vZtDe+N486dBw/yMfwPD/dXx9P55fL2/Dw62N4Wk/Lcnp9XC7H6Xa6nPXZj8/DgIePt3We9anh2+s6dZ3W+XwbHs73ZTkM79Ny3970dp3OW96mVV8dD8N8ftZU8OW0zK19Hv5Nj/8fDcQ+HKh8jceeeck980kwn+q++dKzfhqjz1MY981Tz/pJEuZj2Defu9ZfMuYr7Zrn0LN+poJ56Vk/x6+/n2jffOlaf8X6ZeR989SzfuGKeZF986ln/VJw8ZGSds3HsWc+fl1/Ytf5921euuYTzr+Yw7752nP8pxHHbwq8b5675iO+v5R/fn+/9dF0PK0/7ngD6SXjMLB+8YdB9I2HIW7btG3zti3btm7bMFoEC7LQed1tQQFdfYgWySJbFIu6BY0WwYIs2MIUMoVMIVPIFDKFVdGzlVXRk4bJgi3EIloki2xRLOoWMlqYIqaIKWKKmCKmiCpB97IoE4Jmbbdd3XEKBT16Y2g3X02lQtuh3G6LmuIZPZUL+jFi8/RzxOJZLdPoGTzJkz3FM3omT/eSe8m97F52L7uX3cvuZfeye9m97F52r7hX3CvuFfeKe8W94l5xr7hX3KvuVfeqe9W96l51r7pX3avuVffCOKIEFEJhFEGJKAkloxSUJtd29I/tP41WAgqhMIqgRJSEklEKSvVCkAkyQSbIBJkgE2SCTJAJMkNmyAyZITNkhsyQGTJDZsgCWSALZIEskAWyQBbIAlkgR8gRcoQcIUfIEXI7sSi00mRqpaBUL+3kshJQmsytNFlaEZSIklAySpPbJbCdZdQugu00o3bpfZ/W0/S0zP7L4uV+Pn77oXH7c8Ur+ClyXS/H+fm+zu0Svb2mF+2/",
  "file_map": {
    "50": {
      "source": "fn main(x: u128, y: u128, z: u8) {\n    let const_x = 12345;\n    let const_y = 2345678;\n    let const_z = 2;\n\n    assert_eq(x + y, const_x + const_y);\n    assert_eq(y - x, const_y - const_x);\n    assert_eq(x * y, const_x * const_y);\n    assert_eq(y / x, const_y / const_x);\n    assert_eq(y % x, const_y % const_x);\n    assert_eq(!x, !const_x);\n    assert_eq(x ^ y, const_x ^ const_y);\n    assert_eq(x & y, const_x & const_y);\n    assert_eq(x | y, const_x | const_y);\n    assert_eq(x >> z, const_x >> const_z);\n    assert_eq(x << z, const_x << const_z);\n    assert_eq(x < y, const_x < const_y);\n    assert_eq(x <= y, const_x <= const_y);\n    assert_eq(x != y, const_x != const_y);\n    assert_eq(y > x, const_y > const_x);\n    assert_eq(y >= x, const_y >= const_x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert",
    "directive_to_radix"
  ]
}
