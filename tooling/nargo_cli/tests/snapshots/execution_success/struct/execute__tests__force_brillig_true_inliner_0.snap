---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 26 }, Const { destination: Relative(3), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 20 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 25 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 31 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "jZHBDoMgDIbfpWcOgtNNX2VZDGpdSAgaBksWw7uviG56WLJLP0r7/yVlhh5bf2+UGcYH1NcZWqu0VvdGj510ajR0O0MWAy+g5gx4mXBOuCRUCwQ1CgJPEAl5wokQAoPNuXEWMRrvRtEDJmnROKiN15rBU2q/ND0maRY6aamaMUDTE8lwUBrjKbCvOvstrU75Kq6K4iMv/teX1aa/iIP+RpnslD0sL0Qnq2SrcU0Hb7pd1b2mrbItf7Jjh723GJ12P0DxKkqW81uI094=",
  "file_map": {
    "50": {
      "source": "struct Foo {\n    bar: Field,\n    array: [Field; 2],\n}\n\nstruct Pair {\n    first: Foo,\n    second: Field,\n}\n\nimpl Foo {\n    fn default(x: Field, y: Field) -> Self {\n        Self { bar: 0, array: [x, y] }\n    }\n}\n\nimpl Pair {\n    fn foo(p: Self) -> Foo {\n        p.first\n    }\n\n    fn bar(self) -> Field {\n        self.foo().bar\n    }\n}\n\nstruct Nested {\n    a: Field,\n    b: Field,\n}\nstruct MyStruct {\n    my_bool: bool,\n    my_int: u32,\n    my_nest: Nested,\n}\nfn test_struct_in_tuple(a_bool: bool, x: Field, y: Field) -> (MyStruct, bool) {\n    let my_struct = MyStruct { my_bool: a_bool, my_int: 5, my_nest: Nested { a: x, b: y } };\n    (my_struct, a_bool)\n}\n\nstruct Animal {\n    legs: Field,\n    eyes: u8,\n}\n\nfn get_dog() -> Animal {\n    let dog = Animal { legs: 4, eyes: 2 };\n    dog\n}\n\nstruct Unit;\n\nfn main(x: Field, y: Field) {\n    let unit = Unit {};\n\n    let first = Foo::default(x, y);\n    let p = Pair { first, second: 1 };\n\n    assert(p.bar() == x);\n    assert(p.second == y);\n    assert(p.first.array[0] != p.first.array[1]);\n    // Nested structs\n    let (struct_from_tuple, a_bool) = test_struct_in_tuple(true, x, y);\n    assert(struct_from_tuple.my_bool == true);\n    assert(a_bool == true);\n    assert(struct_from_tuple.my_int == 5);\n    assert(struct_from_tuple.my_nest.a == 0);\n    // Regression test for issue #670\n    let Animal { legs, eyes } = get_dog();\n    let six = legs + eyes as Field;\n\n    assert(six == 6);\n\n    let Animal { legs: _, eyes: _ } = get_dog();\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
