---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/7WOQQ6AIAwEgfiglrbQ3vyKRPj/E9TAwUTjRZ1ks7fJeNfx+4K74sfP4wkSc82xIuEC0YoKsJSkqCgqa1SiqqzZimUwZKrYxKhB5+yCl/zZ6b/rxMM1DVe4aX5iA3i8zs+gAQAA",
  "debug_symbols": "jZDbCoMwDIbfJde9cAfH7KuMIbVGKZS2xFYY4rsvit30YrCrHP58CfknaLFJfW1c5weQjwkaMtaavrZeq2i84+40C8hlHQmRW7DTmQqK0EWQLlkrYFQ2rUNDUG6NURGrhQB0LUde2BmLSzaLL138RqvrZYOrsvzg5f/8rcr8/Xzgn1wpbejwMRQgTwJOIJfhUZFRjcXNiy45vbMmvkJWsnmBvMY2ES5LV43PvAE=",
  "file_map": {
    "50": {
      "source": "struct Foo {\n    bar: Field,\n    array: [Field; 2],\n}\n\nstruct Pair {\n    first: Foo,\n    second: Field,\n}\n\nimpl Foo {\n    fn default(x: Field, y: Field) -> Self {\n        Self { bar: 0, array: [x, y] }\n    }\n}\n\nimpl Pair {\n    fn foo(p: Self) -> Foo {\n        p.first\n    }\n\n    fn bar(self) -> Field {\n        self.foo().bar\n    }\n}\n\nstruct Nested {\n    a: Field,\n    b: Field,\n}\nstruct MyStruct {\n    my_bool: bool,\n    my_int: u32,\n    my_nest: Nested,\n}\nfn test_struct_in_tuple(a_bool: bool, x: Field, y: Field) -> (MyStruct, bool) {\n    let my_struct = MyStruct { my_bool: a_bool, my_int: 5, my_nest: Nested { a: x, b: y } };\n    (my_struct, a_bool)\n}\n\nstruct Animal {\n    legs: Field,\n    eyes: u8,\n}\n\nfn get_dog() -> Animal {\n    let dog = Animal { legs: 4, eyes: 2 };\n    dog\n}\n\nstruct Unit;\n\nfn main(x: Field, y: Field) {\n    let unit = Unit {};\n\n    let first = Foo::default(x, y);\n    let p = Pair { first, second: 1 };\n\n    assert(p.bar() == x);\n    assert(p.second == y);\n    assert(p.first.array[0] != p.first.array[1]);\n    // Nested structs\n    let (struct_from_tuple, a_bool) = test_struct_in_tuple(true, x, y);\n    assert(struct_from_tuple.my_bool == true);\n    assert(a_bool == true);\n    assert(struct_from_tuple.my_int == 5);\n    assert(struct_from_tuple.my_nest.a == 0);\n    // Regression test for issue #670\n    let Animal { legs, eyes } = get_dog();\n    let six = legs + eyes as Field;\n\n    assert(six == 6);\n\n    let Animal { legs: _, eyes: _ } = get_dog();\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
