---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 17 }, Call { location: 18 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 112 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U8, lhs: Relative(2), rhs: Relative(7) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, Const { destination: Relative(5), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(4), location: 27 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(4), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(4), rhs: Relative(1) }, Mov { destination: Relative(7), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(7), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(1), bit_size: Integer(U8) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U8, lhs: Relative(8), rhs: Relative(9) }, Not { destination: Relative(8), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 40 }, Call { location: 118 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(12) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U8, lhs: Relative(2), rhs: Relative(12) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U8, lhs: Relative(8), rhs: Relative(11) }, JumpIf { condition: Relative(6), location: 47 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(4), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(2), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(8), rhs: Relative(9) }, Not { destination: Relative(8), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 58 }, Call { location: 118 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U8, lhs: Relative(4), rhs: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(13) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U8, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(6), location: 65 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Const { destination: Relative(11), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U8, lhs: Relative(3), rhs: Relative(11) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, Const { destination: Relative(6), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 74 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(4), bit_size: Integer(U8), value: 5 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U8, lhs: Relative(4), rhs: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(13) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(11), rhs: Relative(12) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(6) }, JumpIf { condition: Relative(4), location: 83 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(4) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(8) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(9) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(10) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 93 }, Call { location: 118 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(4) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U8) }, Not { destination: Relative(4), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(9) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 104 }, Call { location: 118 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U8, lhs: Relative(3), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(7) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U8, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 111 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(1) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 117 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdXNboJAFAXgd5k1i7l3/n2VxhhUbEgIGgpNGsO79w6HsXbRpMEN38XxHIyOcFfn5ji9H9r+cv1Qu7e7Og5t17Xvh+56qsf22surd6XzgZLaUaVYAwIMDLDAAQ+C2rEQQVowGhBgYIAFDniAFoMWgxYrLUYgwMAACxzwQFqsEEFacBoQYGCABQ54gBYnLU5IC14DAgwMsEBavOBBABFIS6hU0IAAAwOkJQoOeBBABGkhakCAgbQkwQIHPAgggrSQNCDAIP/SWrSrbtWvhtW4miBpXQYqA5fBlCGXUh5cGXwZQhliGdI6UG6mea5U2bSHcWiavGefdrHs7Vs9NP2odv3UdZX6rLtpedPHre4Xx3qQVfkgTX8WpfDSdk2e5uonrf+OEts1TJwecff/vDUlb92L+U3X94+8d6/lg96Sj67k07Z8+f5Zb8kzPfJMW/Imlby1L+bTprz7I7+Xs/rUDr/u63NuGtr62DXr6WXqT0+r49etrJTnwm24nprzNDS56enhIMc3Iq6Iwj7/J5fTWBHr/Zwv/w0=",
  "file_map": {
    "50": {
      "source": "fn main(mut x: i8, mut y: i8, z: i8) {\n    let mut s1: i8 = 5;\n    let mut s2: i8 = 8;\n    assert(-1 as i8 < 0);\n    assert(x < y);\n    assert(-x < y);\n    assert(-y < -x);\n    assert((z > x) == false);\n    assert(x <= s1);\n    assert(z < x - y - s2);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
