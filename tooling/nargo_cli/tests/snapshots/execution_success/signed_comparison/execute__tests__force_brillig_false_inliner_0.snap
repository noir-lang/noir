---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _75",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 7)] []",
    "EXPR [ (1, _0) (-128, _3) (-1, _4) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 7)] []",
    "EXPR [ (1, _1) (-128, _5) (-1, _6) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(7)), Simple(Witness(8))]",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 9)] []",
    "EXPR [ (1, _0) (-1, _1) (-512, _7) (-1, _8) 512 ]",
    "EXPR [ (-1, _7) (-1, _9) 1 ]",
    "EXPR [ (-2, _3, _5) (1, _3) (1, _5) (-1, _10) 0 ]",
    "EXPR [ (-2, _9, _10) (1, _9) (1, _10) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [(_11, 2)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "EXPR [ (-1, _0) (-256, _11) (-1, _12) 512 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(13)), Simple(Witness(14))]",
    "BLACKBOX::RANGE [(_13, 1)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "EXPR [ (1, _0) (-256, _13) (-1, _14) 128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(15)), Simple(Witness(16))]",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "EXPR [ (1, _12) (-256, _15) (-1, _16) 128 ]",
    "EXPR [ (-1, _13, _15) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(17)), Simple(Witness(18))]",
    "BLACKBOX::RANGE [(_17, 1)] []",
    "BLACKBOX::RANGE [(_18, 7)] []",
    "EXPR [ (1, _12) (-128, _17) (-1, _18) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(19)), Simple(Witness(20))]",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "BLACKBOX::RANGE [(_20, 7)] []",
    "EXPR [ (1, _1) (-128, _19) (-1, _20) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(1)), (1, Witness(12))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(21)), Simple(Witness(22))]",
    "BLACKBOX::RANGE [(_21, 1)] []",
    "BLACKBOX::RANGE [(_22, 9)] []",
    "EXPR [ (-1, _1) (1, _12) (-512, _21) (-1, _22) 512 ]",
    "EXPR [ (-1, _21) (-1, _23) 1 ]",
    "EXPR [ (-2, _17, _19) (1, _17) (1, _19) (-1, _24) 0 ]",
    "EXPR [ (-2, _23, _24) (1, _23) (1, _24) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(1))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(25)), Simple(Witness(26))]",
    "BLACKBOX::RANGE [(_25, 2)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "EXPR [ (-1, _1) (-256, _25) (-1, _26) 512 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(27)), Simple(Witness(28))]",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "EXPR [ (1, _1) (-256, _27) (-1, _28) 128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(29)), Simple(Witness(30))]",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "EXPR [ (1, _26) (-256, _29) (-1, _30) 128 ]",
    "EXPR [ (-1, _27, _29) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(31)), Simple(Witness(32))]",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 7)] []",
    "EXPR [ (1, _26) (-128, _31) (-1, _32) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(33)), Simple(Witness(34))]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 7)] []",
    "EXPR [ (1, _12) (-128, _33) (-1, _34) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(12)), (1, Witness(26))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(35)), Simple(Witness(36))]",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 9)] []",
    "EXPR [ (-1, _12) (1, _26) (-512, _35) (-1, _36) 512 ]",
    "EXPR [ (-1, _35) (-1, _37) 1 ]",
    "EXPR [ (-2, _31, _33) (1, _31) (1, _33) (-1, _38) 0 ]",
    "EXPR [ (-2, _37, _38) (1, _37) (1, _38) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(39)), Simple(Witness(40))]",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 7)] []",
    "EXPR [ (1, _0) (-128, _39) (-1, _40) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(41)), Simple(Witness(42))]",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 7)] []",
    "EXPR [ (1, _2) (-128, _41) (-1, _42) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(2))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(43)), Simple(Witness(44))]",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 9)] []",
    "EXPR [ (1, _0) (-1, _2) (-512, _43) (-1, _44) 512 ]",
    "EXPR [ (-1, _43) (-1, _45) 1 ]",
    "EXPR [ (-2, _39, _41) (1, _39) (1, _41) (-1, _46) 0 ]",
    "EXPR [ (-2, _45, _46) (1, _45) (1, _46) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(47)), Simple(Witness(48))]",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 7)] []",
    "EXPR [ (1, _0) (-128, _47) (-1, _48) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 517 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(49)), Simple(Witness(50))]",
    "BLACKBOX::RANGE [(_49, 1)] []",
    "BLACKBOX::RANGE [(_50, 9)] []",
    "EXPR [ (-1, _0) (-512, _49) (-1, _50) 517 ]",
    "EXPR [ (2, _47, _49) (-1, _47) (-1, _49) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(51)), Simple(Witness(52))]",
    "BLACKBOX::RANGE [(_51, 2)] []",
    "BLACKBOX::RANGE [(_52, 8)] []",
    "EXPR [ (1, _0) (-1, _1) (-256, _51) (-1, _52) 512 ]",
    "EXPR [ (-1, _13) (-1, _27) (-1, _53) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(53))], q_c: 0 })], outputs: [Simple(Witness(54))]",
    "EXPR [ (1, _53, _54) (1, _55) -1 ]",
    "EXPR [ (1, _53, _55) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(56)), Simple(Witness(57))]",
    "BLACKBOX::RANGE [(_56, 1)] []",
    "BLACKBOX::RANGE [(_57, 8)] []",
    "EXPR [ (1, _52) (-256, _56) (-1, _57) 128 ]",
    "EXPR [ (1, _13) (-1, _56) (-1, _58) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(58))], q_c: 0 })], outputs: [Simple(Witness(59))]",
    "EXPR [ (1, _58, _59) (1, _60) -1 ]",
    "EXPR [ (1, _58, _60) 0 ]",
    "EXPR [ (1, _55, _60) (-1, _55) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 504 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(61)), Simple(Witness(62))]",
    "BLACKBOX::RANGE [(_61, 2)] []",
    "BLACKBOX::RANGE [(_62, 8)] []",
    "EXPR [ (1, _52) (-256, _61) (-1, _62) 504 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(63)), Simple(Witness(64))]",
    "BLACKBOX::RANGE [(_63, 1)] []",
    "BLACKBOX::RANGE [(_64, 8)] []",
    "EXPR [ (1, _62) (-256, _63) (-1, _64) 128 ]",
    "EXPR [ (1, _56) (-1, _63) (-1, _65) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 })], outputs: [Simple(Witness(66))]",
    "EXPR [ (1, _65, _66) (1, _67) -1 ]",
    "EXPR [ (1, _65, _67) 0 ]",
    "EXPR [ (1, _56, _67) (-1, _56) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [(_68, 1)] []",
    "BLACKBOX::RANGE [(_69, 7)] []",
    "EXPR [ (1, _2) (-128, _68) (-1, _69) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(70)), Simple(Witness(71))]",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "BLACKBOX::RANGE [(_71, 7)] []",
    "EXPR [ (1, _62) (-128, _70) (-1, _71) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(62))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(72)), Simple(Witness(73))]",
    "BLACKBOX::RANGE [(_72, 1)] []",
    "BLACKBOX::RANGE [(_73, 9)] []",
    "EXPR [ (1, _2) (-1, _62) (-512, _72) (-1, _73) 512 ]",
    "EXPR [ (-1, _72) (-1, _74) 1 ]",
    "EXPR [ (-2, _68, _70) (1, _68) (1, _70) (-1, _75) 0 ]",
    "EXPR [ (-2, _74, _75) (1, _74) (1, _75) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZbLjuIwEEX/JWsWLrv84ldGIxQgtCJFAaXJSCPEv0/Z18V0L3oTNj6XmHsQxnF4dOfhuH4cxvly/ez2vx7dcRmnafw4TNdTfx+vs1x9PHedvjzcl2GQS92XeWnd+mWY791+Xqdp1/3pp7W+6fPWz5X3fpFZs+uG+SwU4WWchpKeu/9t83M1p9YlE15tv6FOZkOdLGvf5i19dtpn/2Z/0+eHVz/49/px0/olr/28ra/rb82WvqVX39KWvsvaZ36znzf1/Q/93/KqP43Lt/u1c91efjCuo69jqGOsY6pjriMZgAALoE8QEAwEBcFBIpE1pVxhDUCABRzAgAcCEAFYLCwOFicW+brOAg5gwAMBiEACcgUbABaGhWFhWBgWFksQRCABucIbgAALOIABD8DiYfGweLFEWXUDEGABBzDggQBEIAGwRFgiLBGWCEsUi5xt0QMBiEACckUyAAEWcAAsCZYES4IliUV2b8rl7JVtYxqp0Ta6Rm70jaExNqZyCAszSMZoIA1Wg9PAGryGoCFqSBrUTGomNZOaSc2k5rLLyZYQNEQNSUNuoex3BNJgNTgNrEHNVs1WzWX/U73vcgvlHkAgDVaD08AavIagIWpQs1Mzq5nVzNX8LMfOMvbHaWjP+ss6n748+u9/bzqjfw5uy/U0nNdlKMdOnZOD6B8=",
  "file_map": {
    "50": {
      "source": "fn main(mut x: i8, mut y: i8, z: i8) {\n    let mut s1: i8 = 5;\n    let mut s2: i8 = 8;\n    assert(-1 as i8 < 0);\n    assert(x < y);\n    assert(-x < y);\n    assert(-y < -x);\n    assert((z > x) == false);\n    assert(x <= s1);\n    assert(z < x - y - s2);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
