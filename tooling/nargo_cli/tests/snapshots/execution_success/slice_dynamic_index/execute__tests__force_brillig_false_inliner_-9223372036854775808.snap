---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
