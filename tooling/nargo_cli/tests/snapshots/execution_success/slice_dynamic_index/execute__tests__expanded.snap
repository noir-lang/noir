---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(x: u32) {
    regression_dynamic_slice_index(x - 1_u32, x - 4_u32);
}

fn regression_dynamic_slice_index(x: u32, y: u32) {
    let mut slice: [Field] = &[];
    for i in 0_u32..5_u32 {
        slice = slice.push_back(i as Field);
    }
    assert(slice.len() == 5_u32);
    dynamic_slice_index_set_if(slice, x, y);
    dynamic_slice_index_set_else(slice, x, y);
    dynamic_slice_index_set_nested_if_else_else(slice, x, y);
    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1_u32);
    dynamic_slice_index_if(slice, x);
    dynamic_array_index_if([0_Field, 1_Field, 2_Field, 3_Field, 4_Field], x);
    dynamic_slice_index_else(slice, x);
    dynamic_slice_merge_if(slice, x);
    dynamic_slice_merge_else(slice, x);
    dynamic_slice_merge_two_ifs(slice, x);
    dynamic_slice_merge_mutate_between_ifs(slice, x, y);
    dynamic_slice_merge_push_then_pop(slice, x, y);
}

fn dynamic_slice_index_set_if(mut slice: [Field], x: u32, y: u32) {
    assert(slice[x] == 4_Field);
    assert(slice[y] == 1_Field);
    slice[y] = 0_Field;
    assert(slice[x] == 4_Field);
    assert(slice[1_u32] == 0_Field);
    if (x as u32) < 10_u32 {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
        {
            let i_3824: u32 = x - 1_u32;
            slice[i_3824] = slice[x];
        }
    } else {
        slice[x] = 0_Field;
    };
    assert(slice[3_u32] == 2_Field);
    assert(slice[4_u32] == 2_Field);
}

fn dynamic_slice_index_set_else(mut slice: [Field], x: u32, y: u32) {
    assert(slice[x] == 4_Field);
    assert(slice[y] == 1_Field);
    slice[y] = 0_Field;
    assert(slice[x] == 4_Field);
    assert(slice[1_u32] == 0_Field);
    if (x as u32) > 10_u32 {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
        {
            let i_3825: u32 = x - 1_u32;
            slice[i_3825] = slice[x];
        }
    } else {
        slice[x] = 0_Field;
    };
    assert(slice[4_u32] == 0_Field);
}

fn dynamic_slice_index_if(mut slice: [Field], x: u32) {
    if (x as u32) < 10_u32 {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
    } else {
        assert(slice[x] == 0_Field);
    };
    assert(slice[4_u32] == 2_Field);
}

fn dynamic_array_index_if(mut array: [Field; 5], x: u32) {
    if (x as u32) < 10_u32 {
        assert(array[x] == 4_Field);
        array[x] = array[x] - 2_Field;
    } else {
        assert(array[x] == 0_Field);
    };
    assert(array[4_u32] == 2_Field);
}

fn dynamic_slice_index_else(mut slice: [Field], x: u32) {
    if (x as u32) > 10_u32 {
        assert(slice[x] == 0_Field);
    } else {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
    };
    assert(slice[4_u32] == 2_Field);
}

fn dynamic_slice_merge_if(mut slice: [Field], x: u32) {
    if (x as u32) < 10_u32 {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
        slice = slice.push_back(10_Field);
        slice[x] = 10_Field;
        assert(slice[slice.len() - 1_u32] == 10_Field);
        assert(slice.len() == 6_u32);
        slice[x] = 20_Field;
        slice[x] = slice[x] + 10_Field;
        slice = slice.push_front(11_Field);
        assert(slice[0_u32] == 11_Field);
        assert(slice.len() == 7_u32);
        assert(slice[5_u32] == 30_Field);
        slice = slice.push_front(12_Field);
        assert(slice[0_u32] == 12_Field);
        assert(slice.len() == 8_u32);
        assert(slice[6_u32] == 30_Field);
        let (popped_slice, last_elem): ([Field], Field) = slice.pop_back();
        assert(last_elem == 10_Field);
        assert(popped_slice.len() == 7_u32);
        let (first_elem, rest_of_slice): (Field, [Field]) = popped_slice.pop_front();
        assert(first_elem == 12_Field);
        assert(rest_of_slice.len() == 6_u32);
        slice = rest_of_slice.insert((x as u32) - 2_u32, 20_Field);
        assert(slice[2_u32] == 20_Field);
        assert(slice[6_u32] == 30_Field);
        assert(slice.len() == 7_u32);
        let (removed_slice, removed_elem): ([Field], Field) = slice.remove((x as u32) - 1_u32);
        slice = removed_slice;
        assert(removed_elem == 1_Field);
        assert(slice.len() == 6_u32);
    } else {
        assert(slice[x] == 0_Field);
        slice = slice.push_back(20_Field);
    };
    assert(slice.len() == 6_u32);
    assert(slice[slice.len() - 1_u32] == 30_Field);
}

fn dynamic_slice_merge_else(mut slice: [Field], x: u32) {
    if (x as u32) > 10_u32 {
        assert(slice[x] == 0_Field);
        slice[x] = 2_Field;
    } else {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
        slice = slice.push_back(10_Field);
    };
    assert(slice.len() == 6_u32);
    assert(slice[slice.len() - 1_u32] == 10_Field);
    slice = slice.push_back(20_Field);
    assert(slice.len() == 7_u32);
    assert(slice[slice.len() - 1_u32] == 20_Field);
}

fn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: u32, y: u32) {
    assert(slice[x] == 4_Field);
    assert(slice[y] == 1_Field);
    slice[y] = 0_Field;
    assert(slice[x] == 4_Field);
    assert(slice[1_u32] == 0_Field);
    if (x as u32) < 10_u32 {
        slice[x] = slice[x] - 2_Field;
        if y != 1_u32 {
            slice[x] = slice[x] + 20_Field;
        } else {
            if x == 5_u32 {
                assert(slice[x] == 22_Field);
            } else {
                slice[x] = 10_Field;
                slice = slice.push_back(15_Field);
                assert(slice.len() == 6_u32);
            };
            assert(slice[4_u32] == 10_Field);
        }
    } else {
        slice[x] = 0_Field;
    };
    assert(slice[4_u32] == 10_Field);
    assert(slice.len() == 6_u32);
    assert(slice[slice.len() - 1_u32] == 15_Field);
    slice = slice.push_back(20_Field);
    assert(slice.len() == 7_u32);
    assert(slice[slice.len() - 1_u32] == 20_Field);
}

fn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: u32, y: u32) {
    assert(slice[x] == 4_Field);
    assert(slice[y] == 2_Field);
    slice[y] = 0_Field;
    assert(slice[x] == 4_Field);
    assert(slice[2_u32] == 0_Field);
    if (x as u32) < 10_u32 {
        slice[x] = slice[x] - 2_Field;
        if y == 1_u32 {
            slice[x] = slice[x] + 20_Field;
        } else {
            if x == 4_u32 { slice[x] = 5_Field; };
            assert(slice[4_u32] == 5_Field);
        }
    } else {
        slice[x] = 0_Field;
    };
    assert(slice[4_u32] == 5_Field);
}

fn dynamic_slice_merge_two_ifs(mut slice: [Field], x: u32) {
    if (x as u32) > 10_u32 {
        assert(slice[x] == 0_Field);
        slice[x] = 2_Field;
    } else {
        assert(slice[x] == 4_Field);
        slice[x] = slice[x] - 2_Field;
        slice = slice.push_back(10_Field);
    };
    assert(slice.len() == 6_u32);
    assert(slice[slice.len() - 1_u32] == 10_Field);
    if x == 20_u32 {
        slice = slice.push_back(20_Field);
    };
    slice = slice.push_back(15_Field);
    assert(slice.len() == 7_u32);
    assert(slice[slice.len() - 1_u32] == 15_Field);
    slice = slice.push_back(20_Field);
    assert(slice.len() == 8_u32);
    assert(slice[slice.len() - 1_u32] == 20_Field);
}

fn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: u32, y: u32) {
    if x != y {
        slice[x] = 50_Field;
        slice = slice.push_back(y as Field);
        slice = slice.push_back(x as Field);
    } else {
        slice[x] = slice[x] - 2_Field;
        slice = slice.push_back(x as Field);
    };
    slice = slice.push_back(30_Field);
    assert(slice.len() == 8_u32);
    if x == 20_u32 {
        slice = slice.push_back(20_Field);
    };
    slice = slice.push_back(15_Field);
    if x != 20_u32 {
        slice = slice.push_back(50_Field);
    };
    slice = slice.push_back(60_Field);
    assert(slice.len() == 11_u32);
    assert(slice[x] == 50_Field);
    assert(slice[slice.len() - 4_u32] == 30_Field);
    assert(slice[slice.len() - 3_u32] == 15_Field);
    assert(slice[slice.len() - 2_u32] == 50_Field);
    assert(slice[slice.len() - 1_u32] == 60_Field);
}

fn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: u32, y: u32) {
    if x != y {
        slice[x] = 5_Field;
        slice = slice.push_back(y as Field);
        slice = slice.push_back(x as Field);
        assert(slice.len() == 7_u32);
        let (popped_slice, elem): ([Field], Field) = slice.pop_back();
        assert(slice.len() == 7_u32);
        assert(elem == (x as Field));
        slice = popped_slice;
    } else {
        slice = slice.push_back(x as Field);
    };
    slice = slice.push_back(30_Field);
    assert(slice.len() == 7_u32);
    if x == 20_u32 {
        slice = slice.push_back(20_Field);
    };
    let (slice, elem): ([Field], Field) = slice.pop_back();
    assert(elem == 30_Field);
    let (_, elem): ([Field], Field) = slice.pop_back();
    assert(elem == (y as Field));
}
