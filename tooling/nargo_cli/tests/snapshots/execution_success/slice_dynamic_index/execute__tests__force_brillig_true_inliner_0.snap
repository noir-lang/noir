---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
