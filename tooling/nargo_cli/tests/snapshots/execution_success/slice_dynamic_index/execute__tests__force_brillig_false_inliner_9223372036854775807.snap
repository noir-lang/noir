---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
