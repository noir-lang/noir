---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
