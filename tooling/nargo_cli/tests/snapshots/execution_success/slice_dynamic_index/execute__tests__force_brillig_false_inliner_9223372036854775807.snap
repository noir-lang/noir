---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
