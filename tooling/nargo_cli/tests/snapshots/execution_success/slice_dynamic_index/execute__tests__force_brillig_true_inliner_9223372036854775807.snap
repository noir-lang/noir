---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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QLkboNxNUO4e7bOxNtc1m7TVIiCLgiwGsjjIEiBLgiwFspzMXdO5F7DZep/kaJ/NlaWDLAKy6KsstVoMZHGQJUCWBFkKZBkcy2ggSwdZBGQB5e4A5e7R/iMLmZay1RIgS77Isu7XnEf7j64sA2Opo/1HV5YOsgjIoiCLgSwOsgTIwsndapzcraO9UN7mmMFlmVOto71QV5b+IovKahGQRUEWA1kcZAmQJUGWAlkGxyINZAHlroBy9+izmNxmX5ZHrRYDWRxkiRdZ0lZLgiwFsgyO5WiPmFfdLdHX64CjPWJXFgFZ9FWW9ZrkaI/YlcVBlgBZtuXuz+Vrb/mn0zHHv986xP+fb/0ieb6P690kHSMRjEQxEsNI8pwk87FLTGqulgJZBsfi7aRF/GFZs9Y7yCIgi4IsBrI4yBIgS4IsBbIMjiVAuRug3A1Q7gYodwOUu3E0d/1hyXU2IgJkSZClQJbBsWQDWTrIIiCLgiwGsoByN0G5m6DcTVDuJih362jujtmpWm2dka4OsgjIoiCLgSwOsgTIkiBLgSyDYxmg3B2g3B2g3B2g3B2g3B0nc7dk3ieptZu4RoAsCbIUyDIwltEayNJBFgFZFGQxkIWTu6Nxcne0o7lbj+/G4aulQJbBsfQGsnSQRUAWBVkMZHGQJUAWUO52UO52UO4KKHcFlLsCyl0B5a6AcldAuSug3BVQ7goodwWUu3oyd4fNTo/huVo6yCIgi4IsBrI4yJIgS4Esg2MxUNYZKOsMlHUGyjoDZZ0dzLpq/f7eamqrJUCWBFkKZBkcy8kesUtLB1kEZFGQBZR1Dso6B2Wdg7LOQVkXoKwLUNYFKOsClHUn+7IuLUdz12ta1n0zRgTIkiBLgSyDY8kGsnSQRUAWBVkMZAHlboJyN0G5m6DcTVDuFih3C5S7dTR3x71s9XUd/CgFWQxkcZDlZL70ntMi63XAyf6jK8vJ/qNLSwdZBGRRkMVAFgdZTo7ruum0eK2WBFkKZBkUi7TWQJYOsgjIoiCLgSyYrLtZMFl3sxzNunHfz6OkjdUyOJbeQJYOsgjIoiCLgSwOsgTIkiALKHc7KHcFlLsCyl0B5e7Jnp8SsWlZ7k/fLAayOMgSIMvJ3JXHHLykrJYCWQbHcrLn59LSQRYBWRRkOZq7NecxZcRqcZAlQJYEWZ7NOon7PioSuZR/uo3nonzfW172lte95W1ved9bPvaWz73la2/5Z89abfcHoWlfv0SebgKRuuu19bV831te9pbXveVtb3nfWz72ls+95Wtv+bGt/L9ur/77mx8/ffPH7779++0Tn3/5j+//9NOnH77/98uf/udv99/88cdP33336a9/+NuPP/zp2z//48dv//DdD3/6/LsP7d//+b10j4/SMz/DP79uaR9vcw7j9tq+/L612+/db6/9y+vqH0X08+vPh4BI6ke5pcztdX55rbd6twHr7fXnf+Tbrz7/Pvvt9fjyOuWjmNjt9Zcpfmlx+x8tPgO+zLPfMHX7E6vd/q63v+//Ag==",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
