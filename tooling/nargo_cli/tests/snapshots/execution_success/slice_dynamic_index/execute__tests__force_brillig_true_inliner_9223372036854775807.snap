---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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GPcUVnXfrR3GmHlzf6/HjtdjnB7LqD4MOr0+aNR5ofF4CfR5jDkqxhyH4zHx/TbH2XjwVT0hfDU93I8piNFfj0GnxyI4Fu2HMepa52ucxpitYsx5FiP+TwFWjKbXYYxaXODT+YPjz+1mjPl6DDu7xphqXmdqh/tB9dqXSfT1GNoOY2A8yM5qn/FK6ubhsXB1aNwx+usxTuuWUbd8Wrc8MB5GXyHGYb3Im0ZkOTwWqe8XlsPvF5Zam2Slw+tUe13raoc1hy4gvhfDDmPUvfr98vFwTMdVxzJO54+OJvVxne6HYD/ETmM0xJivx9DD+WPUKz8+vQ+6YzBitK8Q43A+tatqzk7rxayuU5uH17pVv/Qd7vD55UIDSbvOzosQWmFI6TDGm7WPw/n0C9dPnj1Tcg7oePIcNp/0LHejrJVuT+rtWQwRqgYnedxC8pkYaBiTJ/f7Xx5jHMao5zDR6yvEePJe4HmMerV7h+tnMZSwH0/WXZ/G4PqelCctMZ+JMXEsV389xumY4jtf1PgwBtYcepuvx3jcF/M8Bhp37zuqwzHt9d0i3Q6P5e2a1OmxfNm61rN5sL6s7fG9fvzhtYcRtOpt9MMYnevZ5+Y8iyHVTHHfGbavEOPwWOTN6yv9CjH6dRijnknvcHoYY7x5FceH57ZVVwbT4bnluj/urPp6jNMx1VYxlA/HA1119/QzX48xDsdD67ml6+m5ffOqtT9uzvhMDEWMfhqjfjOzj+uw9kdDDB6vx5DDMR1aDS/jcTfuZ2JM3Jteh8fyl/tb/goxTt7lW90g2+P79PhjR48jVEuX0eP7wacx7ve8VSvz8XPPZ2KgfWeO0/3ojBjtMEatqY/rmkcx7tuOq2I8+W55HqOei8c1r68QQw5j1L3HzcPxwG9l36+gxmGM6n8frffDGPWMfy9nHR4LVa/yzcNjwTrBeLIe/pkYAzHmYQyu9Zv79pgOYzBeP8vhecH97WA7jCF1rz+EDutF6v3RePJ70n8jhh3GqH76e7lTXo9xOn/oVcfypP/ly2Pw4Zhqfb+MJ78g8OUxxuGY/uVZ7voKMfrJd349k87Hz8U06L8Z4V4V7FggHIcxSBGDD2MoYozrMEbdDd4L8v0shlWH6rAnM8fzGIb9mIfnZdaT8Zh6dl4MLeV2Pe7k+UyM+hMJ9w02H8aoDi1rh+fFWj2RWqPDY2nVsWbtcUf3Z2JUJ7XRk7vKpzGofh/e6PS8EM7Lkw7Rz8T4oieGZ383qn754v/fdfzj/umHnz58+v7NXyL740+P9OnDDz9+fL9//NfvP//05l9/+99f819+/PTh48cP//7+10+//PT+n79/eu+R/N/eXfs/viP/P0e/b93GP755R/7zdT953Cdl3j9L/Pt13f+uev+s8fNdl0TsP3f/2f/0K3GT++cRP99zoffb3j+b/8z3Uy6x8f3zjJ/tjn+vd98/t9iB6/5qvv/Dd8D/1N530ft7p7n+8acPwf8B",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
