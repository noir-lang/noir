---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
