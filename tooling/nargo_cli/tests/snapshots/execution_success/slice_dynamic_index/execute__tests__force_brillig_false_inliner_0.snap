---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
