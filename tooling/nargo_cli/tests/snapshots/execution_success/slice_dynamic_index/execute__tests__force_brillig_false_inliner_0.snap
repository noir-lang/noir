---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
<<<<<<< HEAD
  "bytecode": "",
  "debug_symbols": "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",
=======
  "bytecode": "",
  "debug_symbols": "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",
>>>>>>> master
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
