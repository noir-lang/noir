---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "nd3brh23lYXhd9G1L4qcJzKvEjQM23ECAYYd2E4DjSDv3iVDu1asybkp/jfGXlE+HRZHnUaxWP/+8Lcfv//XP779+PPff/ntw1/++u8PP/3yw3e/f/zl5/vTv//zzYfvf/34008f//Htf//PH65P/xH/4///2z+/+/nTx99+/+7X3z/8pVn75sOPP//t009++79//OnHD3+x6z//880HibUYb8LlSzGWol+P0C/FPBV6HYt2LPqxkGOhp8KO/ww7/zPsWPixiGNxnCs7zpUf58qPc+XHufLjMffjMffjMffjMffjMffjMffjMY/jMY/leHT3z6J7fCmW31Ufb0Ku9qWIY7H8rkT6m9DxpZinYlzHoh2L5fYh9vzLp30p5FjosbBj4ccijsU4FvNUzOtYLMdcr7ezDNX+pejHQo6FHgs7Fn4s4liMYzFPRbuWg676dtpnlybSzkk/J3JO9JzYOfFzEudknJPl6Ju/7YEtHa1aW46+teshI5F2Tvo5kXOi58TOiZ+TOCfjnKxHP/Qz8evLK777zOectHPSz4mcEz0ndk78nCxH358N2XUmMs7JPCZynZN2Tvo5kXOi58TOiZ+T89GX89GX89HX89HX89HX89Ffdyve3o5ibunAty5X3id2TvycxDkZ52QeE1uPvr8dX3xm0s5JPydyTvSc2DnxcxLnZDn68ZzAh0gi85isy6/3STsn/ZzIOdFzYudkOfoh841EJnFOxjmZx2Rdg71P2jnp50TOyXr0442Mls7Hws6Jn5M4J+OczGOyLvbeJ+2cLEd/9LdD0shDue723id6Tuyc+DmJczLOyTwm64rvfbIc/fGM/uyWSD8nck70nNg58XMS52Sck3lK+rq4e+92Rl8Xd++TdUl/PTcCWk9ET++B9HVx9z7xcxLnZJyTeUzWxd37pJ2Tfk7knJyPfjsf/XY++u189Nv56Lfz0e/no9/PR3/dj90ng8+UkJCMnKAgaBA0AVo3ZTvUCOoECUFKEEmEkEQISYSQRBRzkq4mb+jqCRXTkjaoEdQJkj3yhJQgI8gJCoIGQRMguwgqEqHPlJQrzZro1gkSgpQg2yKThJygIGgQVCTCXyjdkOvFFLMNagR1goQgJcgIcoKKRAx70EyDW0w926AJUDEBbYPaHqUvIjpBQpAStE5Eex2o79vZCTlBQdAoUH9QvxKaAK3buD+jdBm/7uN2qBMkBK0Tcd9wfZCmlA8jyAmKPUqBncXUUX9rW+7b/KkImY2gTpAQpAQZQU5QEFRshPM5arS0N5LrIqgR1AkSgpQgI6gY3P4aJ0nPgVzF4MqzW74vEhIaBE2A2kVQsbl3eX0RllAnSAhSgowgJygIGgB1sC+XdX3W7vS/oTvTCXWChCAt0PVCacst+r0N8i1q6UGxot/boEHQBKjo90SeGEnehRX93gZ1gopE9HihlPKi39sg2yK9EnKCgqBB0ASo6Pc2qBHUCRKClCCSCCWJ0GL2+vW2WzaXtN9bt2471AjqBAlBSpAR5AQFQYMgkggniXCSCCeJKFo3lefBbJWZkBJkBDlBsUWaDmpF67ZBE6CiddugRlAnSAhSgopEvB7xV8+rAjhBQdAgaG5RfHl7TIrWbYMaQZ2gIhHxQiN9EUXrtkFGkBMUBA2CJkBFv7dB60TY9ZzMW0uDW/R7GyQEKUG2R/mLcIKCoEHQOhEmzxW1pQO1FqXgBjWCikTI9UIjISFItyj15VqUghvkBAVBRSLslQhvCU2AilJwg9oeeULrcfLxXD95ehRfi6pug5ygIGgQNAEq+r0NagStN0K/Xmsmpb2RFlXdBhlBTlAQNAiaABVVnetrnKwnVAzus7JF88UST50gIUgJKhKh7fVFpJ1lUdVtUBA0CJoA6UVQI6gTRPblResW/e058/vHjJygIGg/zzLNdVOdABmYeavWCOoECUFKkBHkBAVBgyAwF1udJMJJItatm/enxfaeWmxdt2475AQFQYOgCdC6dduhRlAnSAgiiQiSiCCJCJKIIIkIkoh166ZD3pAOTYeadeu2Q50gIUi3yPIXYQQ5QUHQIGgCNC+CGkFFIlwfFOmyoVh5boOUICPI9yiVTcUqdBs0CJrnyIrV6MZ4odkTagR1goQgJcgIcoKCoEHQOhHzuWF6b9spEevWbYcaQZ0g2aKevoh1v7dDRpATtE7E1P6g1MPaut/boQlQLxLxlOw3SgtE90ZQ36OZkBCkBBlBRSLslYj0SL/1IGgQNLcoHQltXdXZ3aN/RqY55euqboeUICPICQqCBkEToHVVt0PFRjjkScRsCQlBSpAR5AQFQYOgCZBdBK0nXl3tmUN1pfrRiglyr0c4LT+WasUEuQ1ygoKgQdAEqJggt0GNoE5QMbjzWfi4XfmlFOuvvD/Toe4f05Fw3YXt0ARo3YXtUCOoEyQErcepxzO4faQtd92F7ZATFAQNgiZA4yKoEdQJEoJIIgZJxCCJGCQRgyRikERMkoh1F2byOqESuRLqBAlBSlCxwHrEcwDI5xEzCBoEzXPkFxgnvzpBxTjF8xIASUv8+aUEGUHrwZVnPbkb5Vc1BUFji0b+9iZAxTsUNqgRBC5ZvSlBxSXr8/64+8eMnKAgqLhkVXuhlL3iBQnvo+IVCX9CM6FGUCdICCoSEfKgkZER5AQFQetEvCYGm6ULSV+XTRu0noH2J5TmEvh6BtoOdYKEoHUi7JlVd18Jp42wqLU2yAkKggZBE6Ci1tqgRlAnSAgiiVCSCCWJUJIIJYlQkggjiSi6MHtW9L37nrQ3Kh5L3SAhSAn6isdS097oax5LzQg8lurksVQnj6U6eSzVyWOpTh5LdReClCAjyAkiiXCSiHVV16/nRly/0o04X1d1OyQEKUFGkBMUBA2CJkDrqm6HSCIGScQgiRgkEaN6XdpzpRYL5AQFQYOguUWWXzx8EdQI6gQJQUqQEeQEFYnw565QhCc0CJrnKK6LoLZFI736uSgFN0gIUoKKRIwXmvmLcIKCoEHQBKgoBTeoEdQJWidiPKtV3/eN0uAWTeIGGUFOUOxR/iIGQROgokncoHUihj418dD0CvqiSdwgIahIxOsO/8jvoi+axA3yLUrlbRRN4gYNgiZARZM4/JWItDhIFE3iBnWCZI9SYIsXsTZ7K6TvHzMqXpM537J31/Ca0CBoAlS8KnWDGkGdICFICSo2wudZ1vvWtyUUBA2CJkBFVbdBjaBOkBC03i3PZw6VX3lwi7eVXs+N7fuWatqFebFpPC/7um90Xgk1gjpBQpASZAQ5QUHQBKh4hPP9fXnxCOcGFYOr84XSyUfxCOcG6RalZj6KRzg3yAkKgtaD+5pE61dPX8S61tqhRlAnSAhSgowgJ4icsYziUdtnxWDPy6vHvAjaP3ydVgyO2QkCD1/HuqHaISPICQqCBkHg4etxXQQ1gjpBQpAStL7b0J/HUnte/X0U7/TcoAlQ8V7PDWoEdYKEICXICHKCSCKK5czuk/HPqM1LEpoAFcuZbVDbo5HQegmcac/6e9MyEoKcoCCouE/4TIfqV1oEc/QJkFwENYL6HnlCQpASZAQFCKwMgiZAxSJjsz9LtM10QjWKRcY2qBMkBOkezYSMICcoCBpgH1GsTPY+KlYm26BGENktG9ktFyuTbZARFGAfYcW+/Fkt4P4xHQltAuQXQV8x5yNthN4JAnM+hitBRpATFAQNgsAsoBEXQY2gThBJBJkXNorZWvas/NJtprPlYrbWBk2AitlaG9QI6gQJQUqQEeQEkUSsu7Denje39Zbm+I51F7ZB6y5sh9oepePTugvr7XmJQG8jIyHICQqCiubjeTa852fDx5znaF4XQW2L0uFzXp0gIUgJ8vPszaLW2qBBULER2rO551sUs6i1NqgR1PcoEhKClCAjCGzuswVBg6AJUL8IagR1goQgA5t7/4rOMqW8B0GgxZ4dtNhTLoIaQZ0gIUgJMoKcoCCIJEJIIopVvPrzvLv2mTaNYhWvDVKCjCAnKAgaBE2AilW8NqgRRBKxrrXuvepzxqLWElKCjCDfo3TUKLowjWd70pG2p6IL26DiivpZBr/nZ8Nn0YW93mDUzS0hAX+9oqHaINv+m9K06lk0VBsUBA2CyDgVDdUGNYI6QUKQEmT7wGbkBAVBg6AJNsJBttyqC3sfFYl49eVmV0JCkBJkBDlBQdAgaAJU1FrvH5+KWmuDhKCvOACkq5ppBDlBQRA5UBcF2ruoXUWDtlMNKbDx3qrYeuf1qopbVoaUI/UVZXbPaiAFbnC0q11INaQ6UoKUImVIOVKB1EAKZaOjbBQr1sdzM17z27FupUgZUo5UIDWQmkSte7Ktakh1pFA2BGVDUDYEZaOoy/x5ur17erjxVgOpSdR6ytmf1Mj/rvWcM23PFZO2NBPsVh0pQ8qRWm/Lze1RabXRWw2kJlFFc7ZTba9GVh0pQUqRKrIxn7d03bcZs3KkAqmB1CTKL6QaUh0pQUqRQtlwlA1H2XCUDUfZCJSNQNkoSrjNMaVo4XbKkFqfmft8e7Cux5XPYIsibqcGUpOooov7b7UYr6KM26mOlCC1zka8ppCszr6KQm6nHKlAaiA1iSpmqO3UOhvxHJd7jNzAFGXeTglSipQh5UgFUgOpCVQrOr2dakh1pAQpRcqQWmfjvlH0pmaasHCrQGogtc7GfE2pyG+9a61oAneqIdWREqQUKUNqmQ25u/TPSu6KMatAaiA1iVo3gVvVkOpIFdmY+lKelSJlSDlSsVU957CYm7dTk6hidt5OFdnQ1yhb/jakIyVIKVK2Vs91ilyxUI5UIDWQmkTphVRDqsjGbI+aMytBSpEypBypQGogtc7GvQW9qWb5PGrdcG5VQ6ojJUgpUoaUIxVIDaRQNhxlw1E2HGXDUTYcZcOLbDxr6cmiM2/uSAVSRTaivVTeb/gkKq6tGvn8MBpSHSlBap2N/tx5lN4W34Yh5UgFUutsdHkS1XXxbUyi1r3on1SaZn2rhlRHSpAqsvFKVM+zqtowpBypQGogNYmaF1INqY6UIIWyMVE2JsrGRNmYKBuTZKOve1F5vRz1/tGyakh1pNbZkGu8lGelSNlW5Sv6vu5FtyqQGkitsyGvK3rJV/S9XUg1pDpSRTbilaiRv42mSNlejawcqUBqILXOhsrbDGRRzd980YvuVEOqIyVIKVKGlCMVSA2kUDYEZUNQNgRlQ1A2il5Un7tmovmuWS960Z1ypAKpIhvPMvdi6S0xt5pEFb3oTjWk1tkwf644LL0A+VaClCJlSDlSgdRAahJV9KI71ZBC2TCUDUPZMJQNQ9kwlI2iF/XXuah3zWoSVfSiO9WQWmfDn2eyxD0fHYpedKcUKUNqnY24nlGO3GL1ohfdqYHUJKroRX34o678bRS96E51pAQpRcqQcqQCqYHUJGqgbAyUjYGyMVA2BsrGQNkYKBsDZWOgbAyUjYmyUfSioa99lOar7KIX3SlBSgvVXirvRYtedKd8qyx3ekUvulMDqQmUFL1oxHxUvpKSohfdqY5UkY2Ql2pZKVK2V5GVIxVIDaTW2RjXc72c34/apOhFd6oh1ZFaZ2OM5/xwpDWhbqVIGVKO1Dobw58tZSzSW/SiOzWJKnrRnWpIdaQEKUXKkHKkUDY6ykZH2RCUDUHZEJQNQdkQlA1B2RCUDUHZEJQNQdlQlA1F2SieUr/G86R/u/L5RrGI5E4pUoYUeSJeqifiN2ogNYky8oyqWEeqWCpUXqtJ2kIpUoaUI7VfLjTfGxUbSIEFQ5v4hVRDqiMlSClShpQjFUgNpFA2AmWjeLHvfcHwWfnIV/RSvNl3pwwpRyqQGkhNooqXAu9UQ6ojhbIxUDYGysZA2Vi3jirPnSy9o5rVQGoStW4d/6QWbc+6dVTtb9fLqrJQHan1fl6fJ0BV87O3sm4dVZ91D9RaPhddN4Hbv+FAau7/XenMQddN4FY1pDpSZLz0UqQMKUcqkBpIzW1682ok2i6kGlIdKQFbpTZFypAqsjGeayKdnlUgNZCaRPULqYZUR2qdDeuv8UqvWbmVImVIOVKB1EBqElWsV7lTDamOFMqGoGwIyoagbAjKhqBsCMpGsfLk++eHWnR6OyVIrUdZ5mtvk++ba9Hp7ZQjFUiNrVocv4pOb6OKVS53qiFFrgK0aAJ3SpEypBypQGogNYkqmsCdQvt5R/v5otN7zRe9vy/JypBypAKpYj//6sw9zz/UotPbqKLT+2/VLauGVEdKkFpnw5/5NncO8r533R9ulSMVSA2kJlHr/nCrGlIdKUEKZWOgbAyUjYGyMVA2BsrGRNko+kN/5kfd+768jyr6w50SpBSp/Vr3i33UdKTIexB0DqTIexDsupBqSHWkBClFypBypAIpkg1b94dhT9sTnp9tt3V/uFWClCJlSDlSgdRAahK17g+3CmWjo2x0lI2OsrHuD13a2x1wl/wkl637w60KpMZezazW95flWbXj/jGrdX+4Vev7y/c9gjelPX/z6/7Q77bkUX5lZehv6EjF/t+V96LrTm+rJlHr2X1bhcZLO1KClCJlSDlSsU2vLdRAahJlF1KNbJWGtmUTpIpsPOt93b+BZWVIOVKB1EBqEuUXUkU24jVeU7LqSAlSipQh5UgFUgOpSVRcSKFsBMpGoGwEykagbATKRqBsFDMJN+eHxUzCnWpIrUdZnqdNXfKTklbMJNwpRcqQ8q1aHL9GIDWQmkRNdBUwG1IdKUFKkUJXHBNdccxAagDlF9nP+9WQWo/y3Za8KZOFEqQUKUNqPcr22r7ug3BWgdTYqjwr2NfzD3dqPf9wqxpSRTae1RLcFolqhpQjtR6v+2/+prxHVgOpSdS609uqhlRHSpBSpAwpRwplo6NsdJQNQdkQlA1B2RCUDUGjLGiUiybQ7aV8oQZSk6iiCdyphlRHSpBSpAwpRwplQ1E2FGXDUDYMZaNoAn28rSvicbWsBClFypBaZyPaS8ni2wikxlZpPkspmsCNKprAnWpIrbMRNh8VmpUgpUgZUo5UIDWQmkQVTeBONaRQNgJlI1A2AmUjUDYCZSNQNor+MObredj8/JcX/eFONaQ6Ul/xJHLeR33Nk8gLRZ5EdvQkso9AaiBFnlL3eSHVkOpICVKKFMrGRNlYz+4bfbw1MKPn5/Vi3QRuVUOqIyVIKVKGlCMVSA2kUDYaykZD2WgoG+uZhPfG+nR6M6/bE+uZhD6fd5rcPy7+LENqElV0eju13otOl5dqWXWkBClFypBypAKp9RH29dbmez87s5pEFZ3eTjWkOlKClCJlSDlSgRTKhqBsKMqGomwoysa6CbwP8tej8uyjWDeBW2VIOVKB1EBqErVuAreqIdWRQtkwlA1D2TCUDUPZMJQNQ9lwNMqORtnRKHsxys/azvc57pWVIeVIBVJjrzSrYpSfWR/3j3nfGxdSDamOlCClSBlS62y05x7ifSUTWQVSA6lJ1LrT26qGVEdKkFKkDCmUjYGyMVA2BsrGRNmYKBsTZWOiUZ5olGcxyvbsN1p+T1bMQGogNYEa14VUQ6ojJUgpUoaUIxVIDaRQNhrKRkPZaCgbxTPF7Vnd/W7iZlaKlCHlSK2z0dtzttxb2keN4jnf13rmd6fWsmpIdaQEKUXKkHKkAqmB1CRKUDYEZUNQNgRlQ1A2BGVDUDYEjbKgUdZilOOl5kI1pDpSgpQiZUg5UoHUQGoSZSgbhrJhKBuGsmEoG4ayYSgbRTsn8pzbSH5H/FjP09uqhlRHSpBSpAwpRyqQGkihbATKRqBsBMpGoGwEykagbAQa5UCjXLRzr+f17vuFWRXt3E41pDpSgpQiZUg5UoHUQAplY6JsTJSNibIxUTYmysZE2ZgoG0Wnp89Ka/c98iurgdQEahad3k41pDpSgpQitc6GyjNjQbVn5UgFUgOpuVfpjXKz6PR2qiHVkSqy4U8/r0OzUqRsq/Ld21l0ejsVSA2kinUCr+ebt7zC1azWCdyotlWS01utE7hRgpQiVawh+cwyDfOc3qI/3KlAamxVfvpjFv3hRhX94U41pL5iDcmceRGkFCmyvugURyqQGkiR9UWnXkg1pDpSgpQihbKhKBvrJvC+3PyMZl57eq57wI1pwHRgBBgFxoBxYAKYAQzIgYMcOMiBgxwUzWJcz9YQLR83irYvXvdMFs9ez6Lt26mB1CSqaPvuO0AvJVk1pDpSgpQiZUg5UkU27KUinx0UHeFOTaKKjnCnGlIdKUFKkTKkHCmUjYGyMVA2JsrGRNkoOsLXE9sx8nvSZtER7pQiZUg5UoHUQGqeq34VHeFONaQ6UoKUImVIOVLrbIz+nAOM1PbdaiA1iSo6wp1aZ+O+H/WoaVl1pAQpRcqQcqQCqYHUJKroCHcKZaOjbHSUjY6y0VE2io5wPqvgx33hmFUgNZCaRBUd4U41pDpSgpQiZUihbAjKhqBsCMrGuu0b917osxr315xVR0qQUqQMKUcqkBpITaKKbnGnUDYMZcNQNgxlw1A2DGXDUDYMjbKjUS66w8vGo0Ky6kgJUoqUIeVIBVIDqUlUXEihbATKRqBsBMpGoGwEykagbESRjfn2pNFoi2vYmESNC6mG1Dob7Vndf7Se91Hr/nA0lUfZyMqRCqQGUpOodX+4VQ2pjpQgpUihbEyUjYmyMVE2JslGuy6kGlKClCJVjPJ8a79HT+sb3cqRCqQGUpOoYi3AnWpIdaQEKUUKZaOhbDSUjYay0VA2erFOZNdH5auA1htSHSlBap2N/jqP6tGzMqQcqUBqIDWJkgspsIborTpSgpQiZUg5UoHUQGoSpRdSKBt6nI3/3J/+97tfP373/U8//nabT7/4r59/+P3jLz9//vj7//3z7Ve+//XjTz99/Me3//z1lx9+/Nu/fv3x259++eHTr324Pv/nr71L/6Z3k09/nz8+X35/lnZ//hSm+++o3/T7Lu792f74dYtv7l/+9OufAnDvoeb9Ocb9Of743O7fT/TT5/HH57h/XTXuz5+Go396l26367o//3H0Vv/GPv1mfxyU799dP/1t/P533v/W/wc=",
  "file_map": {
    "50": {
      "source": "fn main(x: Field) {\n    // The parameters to this function must come directly from witness values (inputs to main).\n    regression_dynamic_slice_index(x - 1, x - 4);\n}\n\nfn regression_dynamic_slice_index(x: Field, y: Field) {\n    let mut slice = &[];\n    for i in 0..5 {\n        slice = slice.push_back(i as Field);\n    }\n    assert(slice.len() == 5);\n\n    dynamic_slice_index_set_if(slice, x, y);\n    dynamic_slice_index_set_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_else(slice, x, y);\n    dynamic_slice_index_set_nested_if_else_if(slice, x, y + 1);\n    dynamic_slice_index_if(slice, x);\n    dynamic_array_index_if([0, 1, 2, 3, 4], x);\n    dynamic_slice_index_else(slice, x);\n\n    dynamic_slice_merge_if(slice, x);\n    dynamic_slice_merge_else(slice, x);\n    dynamic_slice_merge_two_ifs(slice, x);\n    dynamic_slice_merge_mutate_between_ifs(slice, x, y);\n    dynamic_slice_merge_push_then_pop(slice, x, y);\n}\n\nfn dynamic_slice_index_set_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[3] == 2);\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_index_set_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 > 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice[x - 1] = slice[x];\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 0);\n}\n// This tests the case of missing a store instruction in the else branch\n// of merging slices\nfn dynamic_slice_index_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    } else {\n        assert(slice[x] == 0);\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_array_index_if(mut array: [Field; 5], x: Field) {\n    if x as u32 < 10 {\n        assert(array[x] == 4);\n        array[x] = array[x] - 2;\n    } else {\n        assert(array[x] == 0);\n    }\n    assert(array[4] == 2);\n}\n// This tests the case of missing a store instruction in the then branch\n// of merging slices\nfn dynamic_slice_index_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n    }\n    assert(slice[4] == 2);\n}\n\nfn dynamic_slice_merge_if(mut slice: [Field], x: Field) {\n    if x as u32 < 10 {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n\n        slice = slice.push_back(10);\n        // Having an array set here checks whether we appropriately\n        // handle a slice length that is not yet resolving to a constant\n        // during flattening\n        slice[x] = 10;\n        assert(slice[slice.len() - 1] == 10);\n        assert(slice.len() == 6);\n\n        slice[x] = 20;\n        slice[x] = slice[x] + 10;\n\n        slice = slice.push_front(11);\n        assert(slice[0] == 11);\n        assert(slice.len() == 7);\n        assert(slice[5] == 30);\n\n        slice = slice.push_front(12);\n        assert(slice[0] == 12);\n        assert(slice.len() == 8);\n        assert(slice[6] == 30);\n\n        let (popped_slice, last_elem) = slice.pop_back();\n        assert(last_elem == 10);\n        assert(popped_slice.len() == 7);\n\n        let (first_elem, rest_of_slice) = popped_slice.pop_front();\n        assert(first_elem == 12);\n        assert(rest_of_slice.len() == 6);\n\n        slice = rest_of_slice.insert(x as u32 - 2, 20);\n        assert(slice[2] == 20);\n        assert(slice[6] == 30);\n        assert(slice.len() == 7);\n\n        let (removed_slice, removed_elem) = slice.remove(x as u32 - 1);\n        // The deconstructed tuple assigns to the slice but is not seen outside of the if statement\n        // without a direct assignment\n        slice = removed_slice;\n\n        assert(removed_elem == 1);\n        assert(slice.len() == 6);\n    } else {\n        assert(slice[x] == 0);\n        slice = slice.push_back(20);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 30);\n}\n\nfn dynamic_slice_merge_else(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_else(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 1);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[1] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        if y != 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 5 {\n                // We should not hit this case\n                assert(slice[x] == 22);\n            } else {\n                slice[x] = 10;\n                slice = slice.push_back(15);\n                assert(slice.len() == 6);\n            }\n            assert(slice[4] == 10);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 10);\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_index_set_nested_if_else_if(mut slice: [Field], x: Field, y: Field) {\n    assert(slice[x] == 4);\n    assert(slice[y] == 2);\n    slice[y] = 0;\n    assert(slice[x] == 4);\n    assert(slice[2] == 0);\n    if x as u32 < 10 {\n        slice[x] = slice[x] - 2;\n        // TODO: this panics as we have a load for the slice in flattening\n        if y == 1 {\n            slice[x] = slice[x] + 20;\n        } else {\n            if x == 4 {\n                slice[x] = 5;\n            }\n            assert(slice[4] == 5);\n        }\n    } else {\n        slice[x] = 0;\n    }\n    assert(slice[4] == 5);\n}\n\nfn dynamic_slice_merge_two_ifs(mut slice: [Field], x: Field) {\n    if x as u32 > 10 {\n        assert(slice[x] == 0);\n        slice[x] = 2;\n    } else {\n        assert(slice[x] == 4);\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(10);\n    }\n\n    assert(slice.len() == 6);\n    assert(slice[slice.len() - 1] == 10);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    assert(slice.len() == 7);\n    assert(slice[slice.len() - 1] == 15);\n\n    slice = slice.push_back(20);\n    assert(slice.len() == 8);\n    assert(slice[slice.len() - 1] == 20);\n}\n\nfn dynamic_slice_merge_mutate_between_ifs(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 50;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice[x] = slice[x] - 2;\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 8);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n    assert(slice.len() == 11);\n    assert(slice[x] == 50);\n    assert(slice[slice.len() - 4] == 30);\n    assert(slice[slice.len() - 3] == 15);\n    assert(slice[slice.len() - 2] == 50);\n    assert(slice[slice.len() - 1] == 60);\n}\n\nfn dynamic_slice_merge_push_then_pop(mut slice: [Field], x: Field, y: Field) {\n    if x != y {\n        slice[x] = 5;\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n        assert(slice.len() == 7);\n\n        let (popped_slice, elem) = slice.pop_back();\n        assert(slice.len() == 7);\n        assert(elem == x);\n        slice = popped_slice;\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n    assert(slice.len() == 7);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(elem == 30);\n\n    let (_, elem) = slice.pop_back();\n    assert(elem == y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
