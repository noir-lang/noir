---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "databus"
      },
      {
        "name": "z",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "databus"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _12",
    "private parameters indices : [_0, _1, _2, _3, _4, _5]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BLACKBOX::RANGE [_1]:32 bits []",
    "BLACKBOX::RANGE [_2]:32 bits []",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "BLACKBOX::RANGE [_4]:32 bits []",
    "BLACKBOX::RANGE [_5]:32 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967292 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(7)), Simple(Witness(8))]",
    "BLACKBOX::RANGE [_8]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _7) (-1, _8) 4294967292 ]",
    "EXPR [ (-1, _7) 0 ]",
    "INIT CALLDATA 0 (id: 1, len: 5, witnesses: [_1, _2, _3, _4, _5])",
    "EXPR [ (1, _0) (-1, _9) 1 ]",
    "MEM (id: 1, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _10) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(11))]",
    "BLACKBOX::RANGE [_11]:32 bits []",
    "EXPR [ (1, _10) (1, _11) (-1, _12) 0 ]",
    "BLACKBOX::RANGE [_12]:32 bits []",
    "EXPR [ (1, _6) (-1, _12) 0 ]",
    "INIT RETURNDATA (id: 2, len: 1, witnesses: [_6])",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZLNjoMgFEbf5a5ZeMFqy6sYY1BpQ0LQUGgyMb77XGSY6SyaNN1wRDj342+DWY/xNhh3Xe4guw1Gb6w1t8EukwpmcfR3gyo12IBEBthmnDMuBzjNwH1nULQheK2T9VSHqq/KaxdAumgtg4ey8Zh0X5U7GJSn0YqBdjORCl6N1elrZ3929VrlDf+RedP+6qe3faxKOFb1J77A4ouP8nn7wu+ppybj/98M0sHTjhEzeIYAKQh1xglkzY7rSzt6KG/UaHXSU0B0U6lG3fC1lpHyEla/THqOXqfkp+dAbccF4+c+53f8wgT2e1rqNw==",
  "file_map": {
    "50": {
      "source": "fn main(mut x: u32, y: call_data(0) u32, z: call_data(0) [u32; 4]) -> return_data u32 {\n    let a = z[x];\n    unsafe {\n        a + foo(y)\n    }\n}\n\n// Use an unconstrained function to force the compiler to avoid inlining\nunconstrained fn foo(x: u32) -> u32 {\n    x + 1\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "foo",
    "directive_integer_quotient"
  ]
}
