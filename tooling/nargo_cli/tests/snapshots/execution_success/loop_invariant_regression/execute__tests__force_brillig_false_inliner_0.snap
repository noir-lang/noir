---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _24",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "EXPR [ (1, _0, _1) (-1, _2) 0 ]",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "EXPR [ (1, _0, _2) -12 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -5 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (-5, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) (-5, _5) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 24)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "EXPR [ (1, _1) (-256, _6) (-1, _7) 0 ]",
    "EXPR [ (4294967295, _1, _5) (-1, _8) 0 ]",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(3, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(9)), Simple(Witness(10))]",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "EXPR [ (3, _7) (-256, _9) (-1, _10) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "EXPR [ (1, _7) (-256, _11) (-1, _12) 128 ]",
    "EXPR [ (-6, _7, _11) (3, _7) (768, _11) (-1, _13) 0 ]",
    "EXPR [ (1, _5, _13) (-1, _14) 0 ]",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(11)), (1, Witness(14))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(15)), Simple(Witness(16))]",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "EXPR [ (-1, _11) (1, _14) (-256, _15) (-1, _16) 128 ]",
    "EXPR [ (-1, _5, _15) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(127, Witness(10))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(17)), Simple(Witness(18))]",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "EXPR [ (127, _10) (-256, _17) (-1, _18) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(19)), Simple(Witness(20))]",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "EXPR [ (1, _10) (-256, _19) (-1, _20) 128 ]",
    "EXPR [ (-254, _10, _19) (127, _10) (32512, _19) (-1, _21) 0 ]",
    "EXPR [ (1, _5, _21) (-1, _22) 0 ]",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(19)), (1, Witness(22))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(23)), Simple(Witness(24))]",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "EXPR [ (-1, _19) (1, _22) (-256, _23) (-1, _24) 128 ]",
    "EXPR [ (-1, _5, _23) 0 ]",
    "EXPR [ (1, _5, _18) (-12, _5) 0 ]",
    "EXPR [ (1, _5, _8) (-12, _5) 0 ]",
    "EXPR [ (-1, _0) 2 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 17 }, Call { location: 19 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 4294967295 }, Return, Call { location: 49 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 12 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(4), source: Relative(2) }, Jump { location: 27 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 30 }, Jump { location: 48 }, JumpIf { condition: Relative(6), location: 47 }, Jump { location: 32 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U32, lhs: Direct(32835), rhs: Relative(3) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 40 }, BinaryIntOp { destination: Relative(11), op: Div, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Direct(32835) }, JumpIf { condition: Relative(10), location: 40 }, Call { location: 55 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 44 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(7) }, Mov { destination: Relative(4), source: Relative(2) }, Jump { location: 27 }, Jump { location: 48 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 54 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZXNbqswEEbfxWsW9nj8l1eJoogktEJCJKJQ6SrKu98ZPKa3C6ord8MJge9ge2D8VLfusryf+/Ht/qEOx6e6TP0w9O/n4X5t5/4+0r9PpfkAdDSNApMR1AEaZUEdLMFmYIbL8BkhI2akFUgyJJgMyLAZZMHXq1FlDOd56joewj+DoqE+2qkbZ3UYl2Fo1Gc7LOtNH492XDm3E13VjerGG5GEb/3Q8a9X85XW+1ED2kvagIFN4P7fYKIpBpOqDOBxG0NwVYbkisFqXWPYJgHa7OXdfh5TmQKmVJF3xkremViTt7Hk0VbMH3Qo87e7FUj7ee9KAbw3FfkASfLB+qq8+1Xex7J+fr9+Pz6/1D/sr/+PebvlY00+bPkQa+qP2/vvd79hE/YFKZUXyGjtK0ZgEURg4/cRnOisvfbT94ZNbZU6F6xHaqpUPuRnN8pl+IzAbalRMSNlGC3kRk8LZ0BouZcQUeiEXhiEUZgy130DZONgglB8ID4QH4gPxAfiA/bRi2S10AhBaIUodEIvDMIoFB+KD8WH4kPxofiQffQhIftoXZF9vLLs48/is5369jJ0XAGu0TJeS0HodP7zKFfKHvuY7tfutkwdF+9ro+UCHDE1Dk+5CkfqHy6cXlztvw==",
  "file_map": {
    "50": {
      "source": "// Tests a simple loop where we expect loop invariant instructions\n// to be hoisted to the loop's pre-header block.\nglobal U32_MAX: u32 = 4294967295;\n\nfn main(x: u32, y: u32) {\n    simple_loop(4, x, y);\n    loop_with_predicate(4, x, y);\n    array_read_loop(4, x);\n    //Safety: testing for failing assert under condition\n    unsafe {\n        loop_with_break_under_predicate(4, y, x);\n    }\n}\n\nfn simple_loop(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        let mut z = x * y;\n        z = z * x;\n        assert_eq(z, 12);\n    }\n}\n\nfn loop_with_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 5 {\n            let mut z = U32_MAX * y;\n            assert_eq(((3 * y as i8) * 127), 12);\n            assert_eq(z, 12);\n        }\n    }\n}\n\nfn array_read_loop(upper_bound: u32, x: u32) {\n    let arr = [2; 5];\n    for i in 0..upper_bound {\n        for j in 0..upper_bound {\n            for _ in 0..upper_bound {\n                assert_eq(arr[i], x);\n                assert_eq(arr[j], x);\n            }\n        }\n    }\n}\n\nunconstrained fn loop_with_break_under_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 3 {\n            break;\n        }\n        let mut z = U32_MAX * y;\n        assert_eq(z, 12);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "loop_with_break_under_predicate",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
