---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/7WVQXLDIAxFZWyn6XRZZ58jIAMx7HqVuMFn6QF6iJ6kmy56pcQJmmiIs7L4M4wYw4inbwtXcNPmMt7SvLqMOsV57NnzWR8p6nVCYGfwvEYfrI1DH9HgUfdh9E5bNx48enTenXpvTPTWD2EMgw5oTcTJBTOlxEqOUXMvVGEvFNy11os4XeWajJerRA1C3J+ctykJ3DDjpeAbQcYW5BqjlIctyDUxedjKMYrWPSVVwnXTO9pAmctrzrsX7qNSXtDlJf0NwJP6JfpKiLOf2ejCUwvMXGph/vf9//vzdTzxfdsna5TzNYs7tl7L1YaUvyuTX7/Ao3Zs3mV1Lv1w9UpRvjrFFh6lsjXau834Knk+zFnqhbNI7yl27Bn5eQbPvaelOQoAAA==",
  "debug_symbols": "nZPNjoMgEMffZc4cRAHBV9lsDCo2JAQN1SYb03ffkUhbD/TgZfgYfjD/YWaDwXTrrbV+nO7Q/GzQBeucvbVu6vViJ4+725NAWrZLMAa34MOP1KyD8Qs0fnWOwEO7NR66z9rHcdEBvQUB4wcc8cLROrPPnuRNF3mUSnrAZUFfOD/zNM8zxQ6eKXWB57Q6eE7lFb6SiWdVjv+ivyzqpL/iOZ7necH5wQtBr/AyxS/y+fvC12XKX13KK/rZ6/9FmeNVnlcs5U9xceJ/caV7G04VDxQfIlBGW2HREGAonQCPVkRboxgCMloFDSaIFlgEe3U/dLC6c+bonnH1/UczLX9z8qR2m8PUm2ENZg8j+jCwfw==",
  "file_map": {
    "50": {
      "source": "// Tests a simple loop where we expect loop invariant instructions\n// to be hoisted to the loop's pre-header block.\nglobal U32_MAX: u32 = 4294967295;\n\nfn main(x: u32, y: u32) {\n    simple_loop(4, x, y);\n    loop_with_predicate(4, x, y);\n    array_read_loop(4, x);\n    //Safety: testing for failing assert under condition\n    unsafe {\n        loop_with_break_under_predicate(4, y, x);\n    }\n}\n\nfn simple_loop(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        let mut z = x * y;\n        z = z * x;\n        assert_eq(z, 12);\n    }\n}\n\nfn loop_with_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 5 {\n            let mut z = U32_MAX * y;\n            assert_eq(z, 12);\n        }\n    }\n}\n\nfn array_read_loop(upper_bound: u32, x: u32) {\n    let arr = [2; 5];\n    for i in 0..upper_bound {\n        for j in 0..upper_bound {\n            for _ in 0..upper_bound {\n                assert_eq(arr[i], x);\n                assert_eq(arr[j], x);\n            }\n        }\n    }\n}\n\nunconstrained fn loop_with_break_under_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 3 {\n            break;\n        }\n        let mut z = U32_MAX * y;\n        assert_eq(z, 12);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
