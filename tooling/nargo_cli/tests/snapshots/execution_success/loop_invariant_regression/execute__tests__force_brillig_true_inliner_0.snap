---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 17 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 4294967295 }, Return, Call { location: 208 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 26 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, JumpIf { condition: Relative(7), location: 26 }, Call { location: 214 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 34 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U32, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(4) }, JumpIf { condition: Relative(8), location: 34 }, Call { location: 214 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 39 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(5), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, Cast { destination: Relative(7), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Integer(U32) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 3 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 128 }, Const { destination: Relative(11), bit_size: Field, value: 256 }, Const { destination: Relative(12), bit_size: Field, value: 3 }, Const { destination: Relative(13), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 127 }, Const { destination: Relative(15), bit_size: Field, value: 127 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 12 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(3), source: Relative(7) }, Jump { location: 56 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(18), location: 131 }, Jump { location: 59 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(3), source: Relative(7) }, Jump { location: 77 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(5), location: 106 }, Jump { location: 80 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, Mov { destination: Relative(3), source: Relative(7) }, Jump { location: 84 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(2), location: 87 }, Jump { location: 105 }, JumpIf { condition: Relative(6), location: 104 }, Jump { location: 89 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U32, lhs: Direct(32835), rhs: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 97 }, BinaryIntOp { destination: Relative(10), op: Div, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Direct(32835) }, JumpIf { condition: Relative(9), location: 97 }, Call { location: 214 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 101 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(17) }, Mov { destination: Relative(3), source: Relative(2) }, Jump { location: 84 }, Jump { location: 105 }, Return, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Load { destination: Relative(9), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(1) }, JumpIf { condition: Relative(10), location: 113 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Mov { destination: Relative(5), source: Relative(7) }, Jump { location: 115 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 121 }, Jump { location: 118 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(17) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 77 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(1) }, JumpIf { condition: Relative(10), location: 128 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, Mov { destination: Relative(5), source: Relative(9) }, Jump { location: 115 }, JumpIf { condition: Relative(6), location: 133 }, Jump { location: 205 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Direct(32835), rhs: Relative(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, JumpIf { condition: Relative(19), location: 141 }, BinaryIntOp { destination: Relative(22), op: Div, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Direct(32835) }, JumpIf { condition: Relative(21), location: 141 }, Call { location: 214 }, Cast { destination: Relative(19), source: Relative(5), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U8, lhs: Relative(9), rhs: Relative(19) }, Cast { destination: Relative(19), source: Relative(20), bit_size: Integer(U16) }, Cast { destination: Relative(21), source: Relative(19), bit_size: Integer(U8) }, Cast { destination: Relative(20), source: Relative(21), bit_size: Integer(U16) }, Cast { destination: Relative(19), source: Relative(5), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U8, lhs: Relative(19), rhs: Relative(10) }, Not { destination: Relative(19), source: Relative(21), bit_size: U1 }, Cast { destination: Relative(22), source: Relative(5), bit_size: Field }, Cast { destination: Relative(23), source: Relative(21), bit_size: Field }, BinaryFieldOp { destination: Relative(21), op: Mul, lhs: Relative(23), rhs: Relative(22) }, BinaryFieldOp { destination: Relative(23), op: Sub, lhs: Relative(11), rhs: Relative(22) }, Cast { destination: Relative(22), source: Relative(19), bit_size: Field }, BinaryFieldOp { destination: Relative(24), op: Mul, lhs: Relative(22), rhs: Relative(23) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(21), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(21), op: Mul, lhs: Relative(12), rhs: Relative(22) }, Cast { destination: Relative(22), source: Relative(21), bit_size: Field }, Const { destination: Relative(23), bit_size: Field, value: 255 }, BinaryFieldOp { destination: Relative(24), op: LessThanEquals, lhs: Relative(22), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 162 }, Call { location: 214 }, Cast { destination: Relative(22), source: Relative(21), bit_size: Integer(U8) }, Cast { destination: Relative(21), source: Relative(19), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U8, lhs: Relative(10), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 168 }, Call { location: 217 }, Cast { destination: Relative(19), source: Relative(20), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U8, lhs: Relative(19), rhs: Relative(14) }, Cast { destination: Relative(19), source: Relative(21), bit_size: Integer(U16) }, Cast { destination: Relative(22), source: Relative(19), bit_size: Integer(U8) }, Cast { destination: Relative(21), source: Relative(22), bit_size: Integer(U16) }, Cast { destination: Relative(19), source: Relative(20), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(19), rhs: Relative(10) }, Not { destination: Relative(19), source: Relative(22), bit_size: U1 }, Cast { destination: Relative(23), source: Relative(20), bit_size: Field }, Cast { destination: Relative(20), source: Relative(22), bit_size: Field }, BinaryFieldOp { destination: Relative(22), op: Mul, lhs: Relative(20), rhs: Relative(23) }, BinaryFieldOp { destination: Relative(20), op: Sub, lhs: Relative(11), rhs: Relative(23) }, Cast { destination: Relative(23), source: Relative(19), bit_size: Field }, BinaryFieldOp { destination: Relative(24), op: Mul, lhs: Relative(23), rhs: Relative(20) }, BinaryFieldOp { destination: Relative(20), op: Add, lhs: Relative(22), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(22), op: Mul, lhs: Relative(20), rhs: Relative(15) }, Cast { destination: Relative(20), source: Relative(22), bit_size: Field }, Const { destination: Relative(23), bit_size: Field, value: 255 }, BinaryFieldOp { destination: Relative(24), op: LessThanEquals, lhs: Relative(20), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 189 }, Call { location: 214 }, Cast { destination: Relative(20), source: Relative(22), bit_size: Integer(U8) }, Cast { destination: Relative(22), source: Relative(19), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U8, lhs: Relative(10), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(20), rhs: Relative(19) }, JumpIf { condition: Relative(22), location: 195 }, Call { location: 217 }, Cast { destination: Relative(19), source: Relative(21), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U8, lhs: Relative(19), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 200 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(21) } }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(4) }, JumpIf { condition: Relative(19), location: 204 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, Jump { location: 205 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(17) }, Mov { destination: Relative(3), source: Relative(18) }, Jump { location: 56 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 213 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pZfNbuowEIXfJessPP4Zj3mVq6qiNK2QIkApXOmq4t2vB8+h7SIs3A3ng+R8iRPHwOfwOr1c3p/3h7fjx7D58zm8LPt53r8/z8fd9rw/Huqnn4PTF5Jh48eByi28a0EtfIvQIrZILXjYhBq5hbQotwiuBbXwLUKLaok1UgtukVtIi2rhcYiuRbXkGv4WqRakRt2F3DiwsyRLbxkso2WyZMtsKZbmy+bL5svmy+bL5svap3EQ3b+OSshSt9chiPrSOBRnSZbeMlhGy2TJluqvgy9iWVqScwACaCUrZIAAtFWvFpEDEMAD9MhFQSdCHRrdbj4peEAAROyTAAzIAHj0hnudWnrLGyQAAzJAAMVAb3+DNgFIZ4APCgEQAQnAgAwQQDFIDkAAmBPMCeYEc4I5wZxgTjAzzAwzw8wwM8wMM8PMMDPMOi19nU6k87IBATwgACIgARiQAQKAWWAWmAVmgVlgFpgFZoFZYBaYC8wF5gJzgbnAXGDWJ8AnhQwQQGng9SHwrEAADwgAFfL1Og5Y857PyzTpkvdtEaxL42m7TIfzsDlc5nkc/m7ny22nj9P2cMvzdqlb64SeDq81q/BtP09K1/Gr7dar9cpauZ7vvZ5+9mm9H0u0fiylo590Ybr1E0lPPwj6Maz1H4zfu4zxh7TWT+t9Tsn6zNTRz75YPwfuOX7AzedIPeOP9/vPfq1f1vvC3vrCoacvuH5SuOP8Q8Txg6yeP/kHD4B3bIb65dKn+HqIqC4jfWfB8X4WOfUpCi4lBec67kUpeBbqN3n4rYB7BISnoYSeEZAL92vgYvy1oeeJZsGKxOsr4sMVIf1qRcgeMymvr4gP++Hel55+vvfzz/5Tfbfd7ZcfP/Svalr225d5srdvl8Pu29bzvxO24I/CaTnuptfLMqnp27+F+vrHOxk9hSf90ahv6w9eT/x01cP/Bw==",
  "file_map": {
    "50": {
      "source": "// Tests a simple loop where we expect loop invariant instructions\n// to be hoisted to the loop's pre-header block.\nglobal U32_MAX: u32 = 4294967295;\n\nfn main(x: u32, y: u32) {\n    simple_loop(4, x, y);\n    loop_with_predicate(4, x, y);\n    array_read_loop(4, x);\n    //Safety: testing for failing assert under condition\n    unsafe {\n        loop_with_break_under_predicate(4, y, x);\n    }\n}\n\nfn simple_loop(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        let mut z = x * y;\n        z = z * x;\n        assert_eq(z, 12);\n    }\n}\n\nfn loop_with_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 5 {\n            let mut z = U32_MAX * y;\n            assert_eq(((3 * y as i8) * 127), 12);\n            assert_eq(z, 12);\n        }\n    }\n}\n\nfn array_read_loop(upper_bound: u32, x: u32) {\n    let arr = [2; 5];\n    for i in 0..upper_bound {\n        for j in 0..upper_bound {\n            for _ in 0..upper_bound {\n                assert_eq(arr[i], x);\n                assert_eq(arr[j], x);\n            }\n        }\n    }\n}\n\nunconstrained fn loop_with_break_under_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 3 {\n            break;\n        }\n        let mut z = U32_MAX * y;\n        assert_eq(z, 12);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
