---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "4340310083777494276",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VYv2/TQBg9O3YSx0Tlx8bIwlbZSZo6G1IpAxJiZEACTBwvCAmJgQ0FMTKAxAISEv8quL2PvLx8dhvqS4aeFF3S++6973v3fHe1Z86bZz9VC2zvm80mMQ9sn1ytpS1iJS7z9BzluSayZ+qbjP22fUTzq/FOiwVHxNsmfpZMppFSX4v5jyPAdIA/EvzADX7SszgPl+v4hng7FKfNkZhTiDmlmKFZ3wQQR8bQqzK///dzYFbfb9nvEeG58A/m1Lb+d5T8faitaifLdrlL22Kr5XfgxjX3LV9TftXvriNthDe0eAHk01XyCSn+LtXVt787gBMoOBLfU3j7FIO8PeKtYn9SfKhoGyiYEWG60rar1NhrqFHi71GMeBW1DRUcXgvkxbMgIN4+8aK2jvfIeZNWYUPOEn+f8nS1prcB1xBXpOTbIvdRk0aYT7ibfBLHWk8Ev+8GPx0CJmtXaXwIf8dnJwTdO4oPQor/BJgprY2jfX00pByEA7kHbrinHvEZ0skQ/8Bs7k1trrNHfJIP6yNnk2gXK7neVMZwDXEMeWKF57pjXfT8nRCnzLvs8yfxrwDzkf3u+Pkb856Be7X/H1o8Ji38LbWQ+CeA+ZJiJNcXEPO0htcHPrw78x6z73sr360k/hnFiD/xbuUrOLyXIC/6XzQJKV54m+6tdV4Jamp5bnvXmmt3H9Ya/6/UfClnueZ3mYt+R5/GUGPspsZ/d6wboLVWRwzjGF/YvqrzF2mj7Zna+cM5YDzXXbUDs+4xnMvc6K0BxWA9Ev/G9pGC69pbwiVeQa/h3viW6hhALdqewHujxL8HzHeEKfON2d7XXcCVM22fPkYt6nz8wfa78LHk49LHH22/Tx+zP1EPXBP2Eo7JXPQ933c+Q8w34sZ3zdr5ze+dHPkzucw5ivnws/qF6hqalZ7au446TyKvYKAm/FwIr3Z+a7U0vW+R+K+2d6255k3havKKMdvveRHgHkJ9Z/os26/vODv31Fmuy5XOHbPZAhjH+B/2N+4n0gdXyLM8ztNynJf5UV4Uk3nO61A18WfsgH86maZZlmfz6bycTeavd82/yGZFMisXeZqmoyJZXMT/B9ODdZLJHAAA",
  "debug_symbols": "tdrdqqMwEAfwd/G6F5lkZpL0VZbl0A97EMQW2y4spe++ejClJ0qXQ/q/KaSMPyVmNHFyq/b19vr50XSH47la/7pV7XG3uTTHbmjd7qtq2zdt23x+PP9dmfGHwlf8+bTpxub5sukv1ZoCraq621dra2g4/tC0dbUWc1/NQjnyFMoxPof+XlUUgbg1SJyQuEXiDokzEhckroW4kJtChUKOeyQekHgE4s4gcULiFok7JF6aoeJCwtnluCBxReIeiQckvpih1viEO3mNq8gUqkoZzgaJaynuTMJ5hi93Cz/6XO1rPJCdQgPlfS4GiRMSt0jcIXFG4oLEFYl7JB6QODJDFZmhisxQRWaoIjNUkRmqxePcpTdRYM1wvzhaHKfLceE/OJHoFEv0/UpGnrA8F/OOHjzP+FjKW0rrLrJWMj4YLE9Y3mJ5h+UZywuWVyzvi3mWBz9GfOcDlo9QPhosT1i+dEYWOS1SouRvquiReEDiEYiTMVCdoLqF6u6Nus50huoC1RWqF69ANKY5ZcifMUTFYyakR1iMPNPljTrNdIXqHqoHqB6RujVQnaA6dLxbB9UZqgtUV6S+XEb5yUfakL5d67z+u1xHeZvuoDpDdYHqCtU9VA9QvbSc4m0qvnmbF9+ouJ7yWieobqE6w/T70Pqz6ZvNtq2n/S6Ha7d72v5y+Xuqs50wp/64q/fXvh73xDxthxlvIA2TShL7NR0Ym+KGpgznGc71Dw==",
  "file_map": {
    "50": {
      "source": "// Tests a simple loop where we expect loop invariant instructions\n// to be hoisted to the loop's pre-header block.\nglobal U32_MAX: u32 = 4294967295;\n\nfn main(x: u32, y: u32) {\n    simple_loop(4, x, y);\n    loop_with_predicate(4, x, y);\n    array_read_loop(4, x);\n    //Safety: testing for failing assert under condition\n    unsafe {\n        loop_with_break_under_predicate(4, y, x);\n    }\n}\n\nfn simple_loop(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        let mut z = x * y;\n        z = z * x;\n        assert_eq(z, 12);\n    }\n}\n\nfn loop_with_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 5 {\n            let mut z = U32_MAX * y;\n            assert_eq(z, 12);\n        }\n    }\n}\n\nfn array_read_loop(upper_bound: u32, x: u32) {\n    let arr = [2; 5];\n    for i in 0..upper_bound {\n        for j in 0..upper_bound {\n            for _ in 0..upper_bound {\n                assert_eq(arr[i], x);\n                assert_eq(arr[j], x);\n            }\n        }\n    }\n}\n\nunconstrained fn loop_with_break_under_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 3 {\n            break;\n        }\n        let mut z = U32_MAX * y;\n        assert_eq(z, 12);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
