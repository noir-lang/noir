---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VYTW/TQBBdO97EjonKx40jF26V3biuuSGVckBCHDkgAcaVERISNyTEJRIHkLiAxA8GtzvKy8vYbaiXHlgp2iR++97sm/Gsk8Ccj8C9uhG5OTTbQzAP3ZxdbeQjcmU+4ww8xblhcmD6h1z75eaE1nfXJyNuOCHdMfmrrCgTZX8jxr9MgNMD/4HwR374s5njebTa5DekOyGctkYwJ4A5IczCbDYB5JFrWKuyPv7z2jPr97fc+4T4fNQPxjS2/3eU+EPYWzeOV+Nqt26kzsvvoI05D53eUHzd56knb0TXOr4I4pkq8VjC36V9xe7zBHgihUfwM0U3Jgzqzki3w/4kvFW8jRTOhDh9eTtV9jgb2KPg7xFGahW9tQoP5wJ18SyISDcmXfTWc49shryyAzEL/j7F6Sunt4HXkFaixDui9uGQRxiP/TfxZJ69LoQ/9sOfL4CTves83ofv8d6x4PtEqQNL+E/AmVNuPPX1gwXFIBqoPfejXQakZ8gnQ/pzs92bxsxzQHoSD/sjZ5N4lyqx3lSuYQ7xGuqkis7/znXR/XdMmrLusvef4F8D52P33vP9t+Segb06/AsvnpAX4Y5eCP4pcL4ijMT6EjDPenRD0MNnZ+4x1/3cys9Wgn9OGKlPfLYKFR7uJaiL9S+eWMKL7tBza1+tRD17eeFm355rzz7sNf6u1OpSznKt3mUt1jvWaWqG+4/WywV/Q8Gn5FM39sxmvnAta2Oe5oTphiX8WzcnCq/vPImW+I55wz7zjvYxh71o9xf3GcF/AM73xCnrjdm9RqbAy+fD2DUhWj5r4qObr7MmONfoB+aa84LXZC3WEJ/DnwHzjbTxP1DtXOH/Q1JPPl2mv/P5i/gvtK+FWfup/Qbvq0nUFQ70xBJedLVzRdvL0P8Agv/qZt+ea7UpWkO1Yszu/SMB3n3Y35k/q/H3d1Sd19RZrKu1zxOzPSK4jvgf7jP2E5mjK8TZHtV5u6zb+rA+PS2amvPQDanP1IN+WZR5VdVVUzbtg6J5c5H+b2GQPgjhGgAA",
  "debug_symbols": "tdrRiusgEAbgd/E6F46Oo/ZVDoclbdMlENKStgcOpe++yRJL14RdFvvfFCyTL0GcqBlvat9sr+9vbX84ntXmz011x119aY/92LrdK7Ud2q5r39+e/1Z6+qHwGX8+1f3UPF/q4aI2FKhSTb9XG6NpvP7Qdo3aOH2vFqEceQ7lGJ9D/1aKIhA3GokTEjdI3CJxRuIOiUsh7sjOoY5CjnskHpB4BOJWI3FC4gaJWyRemqHOhoSzzXGHxAWJeyQekPhqhhrtE27d97g4N4eKUIazRuJSiludcF7g693Cjz4X8z0eyMyhgfI+dxqJExI3SNwicUbiDokLEvdIPCBxZIYKMkMFmaGCzFBBZqggM1SKx7lNM1FgyXC/Olosp8ex4QecyMkcS/T1SSaesDwX85YePC/4WMobSvsuMsZlfNBYnrC8wfIWyzOWd1hesLwv5tk9+CniKx+wfITyUWN5wvKlK7LIaZMSXT5TRY/EAxKPL8TzOZa0huoE1Q1UL959SExrm6AXevGQCSmVYuRcJ3qhTgvdQHUL1Rna7w6qC1T3UB063tfLJ7/5aBXStzxZ1sPW6ycv0x1UF6juoXqA6hGpWw3VqVD3JhUjvAkL3UB1C9UZqgtMv4+tf/XQ1tuumev/h2u/ezoOcPl/arKTAafhuGv216GZzgg8HQ+YBh/ZWBHz58t3ao5Lb2I/3me81wc=",
  "file_map": {
    "50": {
      "source": "// Tests a simple loop where we expect loop invariant instructions\n// to be hoisted to the loop's pre-header block.\nglobal U32_MAX: u32 = 4294967295;\n\nfn main(x: u32, y: u32) {\n    simple_loop(4, x, y);\n    loop_with_predicate(4, x, y);\n    array_read_loop(4, x);\n    //Safety: testing for failing assert under condition\n    unsafe {\n        loop_with_break_under_predicate(4, y, x);\n    }\n}\n\nfn simple_loop(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        let mut z = x * y;\n        z = z * x;\n        assert_eq(z, 12);\n    }\n}\n\nfn loop_with_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 5 {\n            let mut z = U32_MAX * y;\n            assert_eq(z, 12);\n        }\n    }\n}\n\nfn array_read_loop(upper_bound: u32, x: u32) {\n    let arr = [2; 5];\n    for i in 0..upper_bound {\n        for j in 0..upper_bound {\n            for _ in 0..upper_bound {\n                assert_eq(arr[i], x);\n                assert_eq(arr[j], x);\n            }\n        }\n    }\n}\n\nunconstrained fn loop_with_break_under_predicate(upper_bound: u32, x: u32, y: u32) {\n    for _ in 0..upper_bound {\n        if x == 3 {\n            break;\n        }\n        let mut z = U32_MAX * y;\n        assert_eq(z, 12);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
