---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "boolean"
              }
            },
            {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "boolean"
              }
            },
            {
              "kind": "string",
              "length": 2
            },
            {
              "kind": "tuple",
              "fields": [
                {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                },
                {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              ]
            },
            {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "tuple",
              "fields": [
                {
                  "kind": "field"
                },
                {
                  "kind": "string",
                  "length": 0
                },
                {
                  "kind": "boolean"
                },
                {
                  "kind": "boolean"
                }
              ]
            },
            {
              "kind": "tuple",
              "fields": [
                {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                },
                {
                  "kind": "string",
                  "length": 2
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 16
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _16",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15]",
    "public parameters indices : []",
    "return value indices : [_16]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }]), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }), Array([]), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }])], outputs: [Simple(Witness(16))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32853 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 16 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(14), offset_address: Relative(15) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U1) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U1) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U1) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U1) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U8) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U8) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U16) }, Cast { destination: Direct(32844), source: Direct(32844), bit_size: Integer(U16) }, Cast { destination: Direct(32845), source: Direct(32845), bit_size: Integer(U16) }, Cast { destination: Direct(32847), source: Direct(32847), bit_size: Integer(U1) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U1) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U16) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U8) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(16) }, Mov { destination: Direct(32773), source: Relative(15) }, Call { location: 94 }, Mov { destination: Relative(2), source: Relative(14) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(16) }, Mov { destination: Direct(32773), source: Relative(15) }, Call { location: 94 }, Mov { destination: Relative(3), source: Relative(14) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 32841 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Mov { destination: Direct(32772), source: Relative(16) }, Mov { destination: Direct(32773), source: Relative(15) }, Call { location: 94 }, Mov { destination: Relative(4), source: Relative(14) }, Mov { destination: Relative(5), source: Direct(32843) }, Mov { destination: Relative(6), source: Direct(32844) }, Mov { destination: Relative(7), source: Direct(32845) }, Mov { destination: Relative(8), source: Direct(32846) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 32847 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(16) }, Mov { destination: Direct(32773), source: Relative(15) }, Call { location: 94 }, Mov { destination: Relative(9), source: Relative(14) }, Mov { destination: Relative(10), source: Direct(32847) }, Mov { destination: Relative(11), source: Direct(32848) }, Mov { destination: Relative(12), source: Direct(32849) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 32850 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(13) }, Mov { destination: Direct(32772), source: Relative(16) }, Mov { destination: Direct(32773), source: Relative(15) }, Call { location: 94 }, Mov { destination: Relative(13), source: Relative(14) }, Call { location: 105 }, Call { location: 106 }, Mov { destination: Direct(32852), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32852 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 104 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 97 }, Return, Return, Call { location: 128 }, JumpIf { condition: Relative(10), location: 122 }, Jump { location: 109 }, JumpIf { condition: Relative(1), location: 114 }, Jump { location: 111 }, Const { destination: Relative(1), bit_size: Integer(U16), value: 37995 }, Mov { destination: Relative(2), source: Relative(1) }, Jump { location: 120 }, Const { destination: Relative(1), bit_size: Integer(U16), value: 64485 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(6), rhs: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U16, lhs: Relative(4), rhs: Relative(1) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(6), rhs: Relative(5) }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 120 }, Mov { destination: Relative(14), source: Relative(2) }, Jump { location: 124 }, Mov { destination: Relative(14), source: Relative(5) }, Jump { location: 124 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(7), rhs: Relative(14) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U16, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 133 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "jZDNqsMgEIXfZdYu/In33uZVSggmmRRBTLB6oQTfvWNr+rModOOnczxn4Gww4ZBOvfXzcob2uMEQrHP21LtlNNEunqYb8HII0UArGFFX/lT+3ilJl4W6knSZM4M9q48BsUS9hNPK1QT0EVqfnGPwb1y6fTqvxt8YTSCVM0A/ESlwtg7LLbOnm3+2yoOsZsX1w66/9gu9L1eKv/k7epnRhre6ckkK1gwO63NOfnxR42Xdlb3uNSwjTilgSXp2rqigQ8MEbzoqlEZHIf+YUKrLZfkV",
  "file_map": {
    "50": {
      "source": "fn main(\n    a: bool,\n    b: ([bool; 2], [bool; 2], str<2>, (u16, u16), u16),\n    c: ((Field, str<0>, bool, bool), (u16, str<2>)),\n) -> pub u16 {\n    b.4\n        % if c.0.2 {\n            b.3.0\n        } else {\n            if (!a) {\n                37995\n            } else {\n                (b.3.1 % 64485)\n            }\n        }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
