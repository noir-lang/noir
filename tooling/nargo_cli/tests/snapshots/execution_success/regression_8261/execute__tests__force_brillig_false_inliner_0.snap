---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "boolean"
              }
            },
            {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "boolean"
              }
            },
            {
              "kind": "string",
              "length": 2
            },
            {
              "kind": "tuple",
              "fields": [
                {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                },
                {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              ]
            },
            {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "tuple",
              "fields": [
                {
                  "kind": "field"
                },
                {
                  "kind": "boolean"
                },
                {
                  "kind": "boolean"
                }
              ]
            },
            {
              "kind": "tuple",
              "fields": [
                {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                },
                {
                  "kind": "string",
                  "length": 2
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 16
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _28",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15]",
    "public parameters indices : []",
    "return value indices : [_16]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BLACKBOX::RANGE [(_2, 1)] []",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 16)] []",
    "BLACKBOX::RANGE [(_8, 16)] []",
    "BLACKBOX::RANGE [(_9, 16)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 16)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _12, _0) (1, _0) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 64485 })], outputs: [Simple(Witness(17)), Simple(Witness(18))]",
    "BLACKBOX::RANGE [(_17, 1)] []",
    "BLACKBOX::RANGE [(_18, 16)] []",
    "EXPR [ (-1, _0, _12) (1, _0) (1, _18) (-1, _19) 1050 ]",
    "EXPR [ (-1, _0, _12) (1, _0) (-1, _20) 0 ]",
    "EXPR [ (1, _19, _20) (-1, _21) 0 ]",
    "BLACKBOX::RANGE [(_21, 16)] []",
    "EXPR [ (1, _8, _20) (-64485, _17, _20) (-1, _18, _20) 0 ]",
    "EXPR [ (-1, _12) (-1, _22) 1 ]",
    "EXPR [ (37995, _0, _12) (1, _18, _20) (-37995, _0) (-37995, _12) (-1, _23) 37995 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(12), Witness(7)), (1, Witness(22), Witness(23))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(24))]",
    "EXPR [ (1, _7, _12) (1, _22, _23) (-1, _25) 0 ]",
    "EXPR [ (1, _24, _25) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 })], outputs: [Simple(Witness(26)), Simple(Witness(27))]",
    "BLACKBOX::RANGE [(_26, 16)] []",
    "BLACKBOX::RANGE [(_27, 16)] []",
    "EXPR [ (1, _25) (-1, _27) (-1, _28) -1 ]",
    "BLACKBOX::RANGE [(_28, 16)] []",
    "EXPR [ (-1, _25, _26) (1, _9) (-1, _27) 0 ]",
    "EXPR [ (1, _16) (-1, _27) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "jdHBboMwDAbgd/E5B2Jogb7KNKEApooUBZQmlSbUd5+JYWsPlXr6SMxvsLzCSH26dtZP8w0uXyv0wTpnr52bBxPt7Pl2fSg4jl0MRHwFT3VOLSaQj3DxyTkFd+NSfum2GJ+NJnC1UEB+ZLnhZB1tTw/1ny7eR7Gp9jC29V/89HFeV7jnS8SX/DefzGDDy8SgT5xRoM9CLTRCm8FC0AIKpVAJ3IW/i2ehFhqhzZSFoAUUuMv2l3cTrOkd7UuYkh+edhJ/lqNybG0J80BjCrRNk2s83y8=",
  "file_map": {
    "50": {
      "source": "fn main(\n    a: bool,\n    b: ([bool; 2], [bool; 2], str<2>, (u16, u16), u16),\n    c: ((Field, bool, bool), (u16, str<2>)),\n) -> pub u16 {\n    b.4\n        % if c.0.2 {\n            b.3.0\n        } else {\n            if (!a) {\n                37995\n            } else {\n                (b.3.1 % 64485)\n            }\n        }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
