---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "array",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "i",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _21",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "INIT (id: 0, len: 2, witnesses: [_0, _1])",
    "EXPR [ (1, _2) (-1, _3) -1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _3) 0 ], value: EXPR [ (1, _4) 0 ]) ",
    "EXPR [ (1, _4) -5 ]",
    "MEM (id: 0, read at: EXPR [ (1, _2) 0 ], value: EXPR [ (1, _5) 0 ]) ",
    "EXPR [ (1, _5) -10 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 4294967294 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (1, _2) (-4294967296, _6) (-1, _7) 4294967294 ]",
    "EXPR [ (-1, _6) 0 ]",
    "EXPR [ (-1, _8) 2 ]",
    "MEM (id: 0, write EXPR [ (1, _8) 0 ] at: EXPR [ (1, _2) 0 ]) ",
    "EXPR [ (-1, _9) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _10) 0 ]) ",
    "EXPR [ (1, _10) -5 ]",
    "MEM (id: 0, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _11) 0 ]) ",
    "EXPR [ (-1, _12) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _12) 0 ], value: EXPR [ (1, _13) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _14) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _12) 0 ], value: EXPR [ (1, _15) 0 ]) ",
    "INIT (id: 1, len: 4, witnesses: [_11, _13, _14, _15])",
    "EXPR [ (2, _2) (-1, _16) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _16) 0 ], value: EXPR [ (1, _17) 0 ]) ",
    "EXPR [ (1, _16) (-1, _18) 1 ]",
    "MEM (id: 1, read at: EXPR [ (1, _18) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "EXPR [ (1, _17) -5 ]",
    "EXPR [ (-1, _20) 5 ]",
    "INIT (id: 2, len: 2, witnesses: [_20, _19])",
    "MEM (id: 2, read at: EXPR [ (1, _2) 0 ], value: EXPR [ (1, _21) 0 ]) ",
    "EXPR [ (1, _21) -2 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZTBjoMgEED/Zc4cHFRAf2WzaailDQlBQ3WTTeO/76Bjtz1sstELTxjeiCPwgIs7T7eTj9f+Du3HA87Jh+Bvp9B3dvR9pNHHLGDrnsbkHA3BS5yswSYXR2jjFIKALxumZdJ9sHHhaBNFCwEuXoiU8OqDy0+z+LWLv1WF7Cr1lOt/23W92fqIrYsdttFsN/Uhu9lhIxrWEXf5hX76e1aPevvlaORBf8/7ZVmxL6vyoK8O+nvqL5XafG2O+Qbf/E/q2c6nt3MOSIUWIGm6gBLaUkAFLX1CTZIARedHgF5as7TN0mJBR4OAK0inXYflCkrQEOq8mYiKqZmG2ayUBROZklkyK2bOR4uUOR8tU2qmYeZ81Zwrk7w9B8fX2HWK3cutNn4PW2S794bUd+4yJZcrs8SoVj8=",
  "file_map": {
    "50": {
      "source": "fn main(mut array: [Field; 2], i: u32) {\n    assert_eq(array[i - 1], 5);\n    assert_eq(array[i], 10);\n\n    array[i] = 2;\n\n    let array2 = [array, array];\n\n    assert_eq(array2[0][0], 5);\n    assert_eq(array2[0][i], 2);\n    assert_eq(array2[i][0], 5);\n    assert_eq(array2[i][i], 2);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
