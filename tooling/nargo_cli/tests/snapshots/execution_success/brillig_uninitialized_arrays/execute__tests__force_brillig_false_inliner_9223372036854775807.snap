---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _22",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Array([Witness(3), Witness(4)])]",
    "INIT (id: 0, len: 2, witnesses: [_3, _4])",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_5, 222)] []",
    "EXPR [ (1, _0) (-4294967296, _5) (-1, _6) 0 ]",
    "EXPR [ (-1, _5) (-1, _7) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_7, 222)] []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(5))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(8))]",
    "EXPR [ (-1, _5, _8) (5096253676302562286669017222071363378443840053029366383258766538131, _8) (1, _9) -1 ]",
    "EXPR [ (-1, _5, _9) (5096253676302562286669017222071363378443840053029366383258766538131, _9) 0 ]",
    "EXPR [ (1, _6, _9) (1, _9, _9) (268435454, _9) (-1, _10) 0 ]",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 4294967294 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (1, _6) (-4294967296, _11) (-1, _12) 4294967294 ]",
    "EXPR [ (-1, _11) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _6) 0 ], value: EXPR [ (1, _13) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 222)] []",
    "EXPR [ (1, _1) (-4294967296, _14) (-1, _15) 0 ]",
    "EXPR [ (-1, _14) (-1, _16) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_16, 222)] []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(14))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(17))]",
    "EXPR [ (-1, _14, _17) (5096253676302562286669017222071363378443840053029366383258766538131, _17) (1, _18) -1 ]",
    "EXPR [ (-1, _14, _18) (5096253676302562286669017222071363378443840053029366383258766538131, _18) 0 ]",
    "EXPR [ (1, _15, _18) (1, _18, _18) (268435454, _18) (-1, _19) 0 ]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 4294967294 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_21, 32)] []",
    "EXPR [ (1, _15) (-4294967296, _20) (-1, _21) 4294967294 ]",
    "EXPR [ (-1, _20) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _15) 0 ], value: EXPR [ (1, _22) 0 ]) ",
    "EXPR [ (1, _2) (-1, _13) (-1, _22) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 20 }, Call { location: 21 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 33 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 44 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(4) }, Store { destination_pointer: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(3) }, Return, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 43 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 36 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 49 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZPdisMgEIXfxetcOI7mp69SSrGpLYKYYJOFpeTdd3SadmHp7pKb8yUx5+iMehdnd5qvRx8vw03s9ndxSj4Efz2GobeTHyJ9vQuZRSmxg0ooZGiGYdSMhtEyugIkNyxLJdbI45Scy4nf5qCZR5tcnMQuziFU4sOGufx0G20snGyiUVkJF89ECrz44PLTUr3c8r1VqfphVqZ72s2//SCbhx+U2eJHs/oNvvPjL+tHta5fyy3+V/0atviNfPav3eLX+u/+45b9O9Cb7X36cWqpYVCUzi5NjkV1UVO0LtoUbYt2RUEygMF2YD9wAHACUATtK1AGLQ9aRlegJAMYioEMzTCMmsEpilMUpyCnIKU0S25P8vYUXK4xd2GO/VoyvU6f4zqyXuUxDb07z8nl9rzuMy1jj1hpPHC5e9oe3R2W3M4v",
  "file_map": {
    "50": {
      "source": "fn main(x: Field, y: Field) -> pub Field {\n    // Safety: testing context\n    unsafe {\n        let notes = create_notes(x, y);\n        sum_x(notes, x, y)\n    }\n}\n\nfn sum_x(notes: [Field; 2], x: Field, y: Field) -> Field {\n    notes[x as u32] + notes[y as u32]\n}\n\nunconstrained fn create_notes(x: Field, y: Field) -> [Field; 2] {\n    [x, y]\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "create_notes",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
