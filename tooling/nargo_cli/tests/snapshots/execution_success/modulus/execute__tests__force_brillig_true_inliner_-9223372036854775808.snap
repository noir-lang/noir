---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "bn254_modulus_be_bytes",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "bn254_modulus_be_bits",
        "type": {
          "kind": "array",
          "length": 254,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 1
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn main(bn254_modulus_be_bytes: [u8; 32], bn254_modulus_be_bits: [u1; 254]) {\n    let modulus_size = std::field::modulus_num_bits();\n    // NOTE: The constraints used in this circuit will only work when testing nargo with the plonk bn254 backend\n    assert(modulus_size == 254);\n\n    assert_reverse(\n        std::field::modulus_be_bytes(),\n        std::field::modulus_le_bytes(),\n    );\n\n    let modulus_be_byte_array = std::field::modulus_be_bytes();\n    for i in 0..32 {\n        assert(modulus_be_byte_array[i] == bn254_modulus_be_bytes[i]);\n    }\n    let modulus_le_byte_array = std::field::modulus_le_bytes();\n    for i in 0..32 {\n        assert(modulus_le_byte_array[i] == bn254_modulus_be_bytes[31 - i]);\n    }\n\n    let modulus_be_bits = std::field::modulus_be_bits();\n    for i in 0..254 {\n        assert(modulus_be_bits[i] == bn254_modulus_be_bits[i]);\n    }\n    let modulus_le_bits = std::field::modulus_le_bits();\n    for i in 0..254 {\n        assert(modulus_le_bits[i] == bn254_modulus_be_bits[253 - i]);\n    }\n}\n\nfn assert_reverse(forwards: [u8], backwards: [u8]) {\n    for i in 0..32 {\n        assert_eq(forwards[i], backwards[31 - i]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
