---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _8",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ 2 ], EXPR [ 2 ], EXPR [ (1, _0) 0 ]], outputs: [_1]",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "EXPR [ (1, _0) (-1, _2) 1 ]",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "EXPR [ (1, _1) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ 3 ], EXPR [ 3 ], EXPR [ (1, _0) 0 ]], outputs: [_3]",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "EXPR [ (-1, _1) (1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ 4 ], EXPR [ 4 ], EXPR [ (1, _0) 0 ]], outputs: [_4]",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "EXPR [ (1, _0) (-1, _5) -1 ]",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "EXPR [ (1, _4) (-1, _5) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ 2 ], EXPR [ 2 ], EXPR [ (1, _0) 0 ]], outputs: [_6]",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "EXPR [ (-1, _1) (1, _6) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ 4 ], EXPR [ 4 ], EXPR [ (1, _0) 0 ]], outputs: [_7]",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (-1, _4) (1, _7) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_8]",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "EXPR [ (-1, _1) (1, _8) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 54 }, Const { destination: Relative(5), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(6), location: 46 }, Jump { location: 23 }, Const { destination: Relative(6), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 38 }, Jump { location: 27 }, Const { destination: Relative(6), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 32 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(6), location: 36 }, Call { location: 60 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 44 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 42 }, Call { location: 63 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 44 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 52 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 50 }, Call { location: 63 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 52 }, Mov { destination: Relative(1), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 59 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 54 }, Const { destination: Relative(5), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(6), location: 46 }, Jump { location: 23 }, Const { destination: Relative(6), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 38 }, Jump { location: 27 }, Const { destination: Relative(6), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 32 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(6), location: 36 }, Call { location: 60 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 44 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 42 }, Call { location: 63 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 44 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 52 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 50 }, Call { location: 63 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 52 }, Mov { destination: Relative(1), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 59 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tZbBjuogFIbfhXUXcIAD+CrGmKqdSZOmmo5OcmN893voD864cNNmNv2s8NEfKDm9q1N3uH3u+/Hj/KU227s6TP0w9J/74Xxsr/15lH/vSueLiWpjGmXSDLKAAwKALoQuVgMGILUhgQUc4AHxrCDNcBowAKuNEwQgAtLTPSRMDcYIxgjGCMYIxgjGCMYIxgjGCBYQLCBYQLCAYBHBIoJFBIsIlhAsIVhCsCTBaA4mPbwEC0AE0gySsfxDetaF3l+nrsvWr5WX/bi0Uzde1Wa8DUOjvtvhNnf6urTjzGs7SatuVDeehDLgRz90+dej+bH1e5UtF5ldeOr+1Tfv/eCrH9gs8JONxU/OLvA5pfp87d75+u/8GF3xY/LvfF65frxy/fjv5m+cLb7hRT7X/CbYdc9f5idTfDJhnU+8wCdX3x9iv8Tnun8U3LrnL/MTFd+6tM73cYFvQz0/ztp1vqMFvjeh+J7SOt++zn8nd+2xn15rca6mei4wGbkKy/vnAClaRlZTyo6RQxGAXJNli3NNzuVHF+ZxctWkwjySJDF5KDmRxhfmwRKKGGlUsZkpHxjUMZJnkinMZT7vw3c79e1h6HLoPK3beKxzkNvrv0ttqV8cl+l87E63qcvz/fXZIdetd41PO6Tesm6Yds/q/76dnu1kG4q1nVJjze6RF/g/",
  "file_map": {
    "50": {
      "source": "struct MyStruct {\n    operation: unconstrained fn(u32) -> u32,\n}\n\nfn main(x: u32) {\n    // Safety: testing context\n    unsafe {\n        assert(wrapper(increment, x) == x + 1);\n        assert(wrapper(increment_acir, x) == x + 1);\n        assert(wrapper(decrement, x) == x - 1);\n        assert(wrapper_with_struct(MyStruct { operation: increment }, x) == x + 1);\n        assert(wrapper_with_struct(MyStruct { operation: decrement }, x) == x - 1);\n        // https://github.com/noir-lang/noir/issues/1975\n        assert(increment(x) == x + 1);\n    }\n}\n\nunconstrained fn wrapper(func: unconstrained fn(u32) -> u32, param: u32) -> u32 {\n    func(param)\n}\n\nunconstrained fn increment(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn decrement(x: u32) -> u32 {\n    x - 1\n}\n\nunconstrained fn wrapper_with_struct(my_struct: MyStruct, param: u32) -> u32 {\n    let func = my_struct.operation;\n    func(param)\n}\n\nfn increment_acir(x: u32) -> u32 {\n    x + 1\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "wrapper",
    "wrapper_with_struct",
    "increment"
  ]
}
