---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _8",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(1))]",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "EXPR [ (1, _0) (-1, _2) 1 ]",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "EXPR [ (1, _1) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 3 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "EXPR [ (-1, _1) (1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "EXPR [ (1, _0) (-1, _5) -1 ]",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "EXPR [ (1, _4) (-1, _5) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "EXPR [ (-1, _1) (1, _6) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (-1, _4) (1, _7) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(8))]",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "EXPR [ (-1, _1) (1, _8) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 53 }, Const { destination: Relative(4), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(5), location: 45 }, Jump { location: 22 }, Const { destination: Relative(6), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 37 }, Jump { location: 26 }, Const { destination: Relative(6), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 31 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 35 }, Call { location: 59 }, Mov { destination: Relative(5), source: Relative(1) }, Jump { location: 43 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 41 }, Call { location: 62 }, Mov { destination: Relative(5), source: Relative(1) }, Jump { location: 43 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 51 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 49 }, Call { location: 62 }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 51 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 58 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 53 }, Const { destination: Relative(4), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(5), location: 45 }, Jump { location: 22 }, Const { destination: Relative(6), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 37 }, Jump { location: 26 }, Const { destination: Relative(6), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 31 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 35 }, Call { location: 59 }, Mov { destination: Relative(5), source: Relative(1) }, Jump { location: 43 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 41 }, Call { location: 62 }, Mov { destination: Relative(5), source: Relative(1) }, Jump { location: 43 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 51 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 49 }, Call { location: 62 }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 51 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 58 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tZbRjqsgEIbfhWsvZIABfJWmaWzrbkyMbVzd5KTpu58ZBrrbC280e+NfCx9+gGR8qGt3Xj5P/fhx+1LN4aHOUz8M/edpuF3aub+N9O9D1XzRXjW6UjqkAJAwEighXSB3iSlMLaFVAxQgYSSsBHGGIkjEFLaWcKqxFCjhJainfZJMEUMRQxFDEUMRQxFDEUMRQxFDEfMi5kXMi5gXsSBiQcSCiAURiyIWRSyKWCQxSGLU5Krk58SPI6YAGsQ9qWdZ6NM8dR1Tv1ae9uPeTt04q2ZchqFS3+2wpE5f93ZMObcTtdaV6sYrJQ340Q8d/3pWP3S9jqLBDKP1L9y983qd967wHvUGPpqQ+WjNBh5jLM+v7Rpf/x0fgs18iG6Nx53rhzvXD/9u/tqazGvcxGPx197se/42PurMg/b7eMANPNjy/gC6LTyW/QNv9z1/Gx8h88bGfbwLG3jjy/mxxuzjLWzgnfaZdxD38eZ9/ke6ay/99F6LqVrpOhUYDi6/9P5ZCapImlaTizEdCi/BxZi2mIsxl586J4/DVRNy8khkonkoOpHa5eTBohQxqKWKpYx8YKSOAT0TdE6u77wP3+3Ut+ehY2me1jJeyhzodv53Ly3li+M+3S7ddZk6nu+vzw66HpypXDiK9cHFCvXxVf3X2+HVDqaCVzvEylA7L/B/",
  "file_map": {
    "50": {
      "source": "struct MyStruct {\n    operation: unconstrained fn(u32) -> u32,\n}\n\nfn main(x: u32) {\n    // Safety: testing context\n    unsafe {\n        assert(wrapper(increment, x) == x + 1);\n        assert(wrapper(increment_acir, x) == x + 1);\n        assert(wrapper(decrement, x) == x - 1);\n        assert(wrapper_with_struct(MyStruct { operation: increment }, x) == x + 1);\n        assert(wrapper_with_struct(MyStruct { operation: decrement }, x) == x - 1);\n        // https://github.com/noir-lang/noir/issues/1975\n        assert(increment(x) == x + 1);\n    }\n}\n\nunconstrained fn wrapper(func: unconstrained fn(u32) -> u32, param: u32) -> u32 {\n    func(param)\n}\n\nunconstrained fn increment(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn decrement(x: u32) -> u32 {\n    x - 1\n}\n\nunconstrained fn wrapper_with_struct(my_struct: MyStruct, param: u32) -> u32 {\n    let func = my_struct.operation;\n    func(param)\n}\n\nfn increment_acir(x: u32) -> u32 {\n    x + 1\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "wrapper",
    "wrapper_with_struct",
    "increment"
  ]
}
