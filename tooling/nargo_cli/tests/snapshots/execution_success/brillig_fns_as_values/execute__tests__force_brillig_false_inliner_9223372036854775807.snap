---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _8",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BRILLIG CALL func 0: inputs: [EXPR [ 2 ], EXPR [ 2 ], EXPR [ (1, _0) 0 ]], outputs: [_1]",
    "BLACKBOX::RANGE [_1]:32 bits []",
    "EXPR [ (1, _0) (-1, _2) 1 ]",
    "BLACKBOX::RANGE [_2]:32 bits []",
    "EXPR [ (1, _1) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ 3 ], EXPR [ 4 ], EXPR [ (1, _0) 0 ]], outputs: [_3]",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "EXPR [ (-1, _1) (1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ 5 ], EXPR [ 5 ], EXPR [ (1, _0) 0 ]], outputs: [_4]",
    "BLACKBOX::RANGE [_4]:32 bits []",
    "EXPR [ (1, _0) (-1, _5) -1 ]",
    "BLACKBOX::RANGE [_5]:32 bits []",
    "EXPR [ (1, _4) (-1, _5) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ 2 ], EXPR [ 2 ], EXPR [ (1, _0) 0 ]], outputs: [_6]",
    "BLACKBOX::RANGE [_6]:32 bits []",
    "EXPR [ (-1, _1) (1, _6) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ 5 ], EXPR [ 5 ], EXPR [ (1, _0) 0 ]], outputs: [_7]",
    "BLACKBOX::RANGE [_7]:32 bits []",
    "EXPR [ (-1, _4) (1, _7) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_8]",
    "BLACKBOX::RANGE [_8]:32 bits []",
    "EXPR [ (-1, _1) (1, _8) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 66 }, Const { destination: Relative(5), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(6), location: 58 }, Jump { location: 23 }, Const { destination: Relative(6), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 50 }, Jump { location: 27 }, Const { destination: Relative(7), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 42 }, Jump { location: 31 }, Const { destination: Relative(7), bit_size: Field, value: 5 }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 36 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 40 }, Call { location: 72 }, Mov { destination: Relative(6), source: Relative(2) }, Jump { location: 48 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 46 }, Call { location: 75 }, Mov { destination: Relative(6), source: Relative(2) }, Jump { location: 48 }, Mov { destination: Relative(1), source: Relative(6) }, Jump { location: 56 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 54 }, Call { location: 75 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 56 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 64 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 62 }, Call { location: 75 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 64 }, Mov { destination: Relative(1), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 71 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 66 }, Const { destination: Relative(5), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(6), location: 58 }, Jump { location: 23 }, Const { destination: Relative(6), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 50 }, Jump { location: 27 }, Const { destination: Relative(7), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 42 }, Jump { location: 31 }, Const { destination: Relative(7), bit_size: Field, value: 5 }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 36 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 40 }, Call { location: 72 }, Mov { destination: Relative(6), source: Relative(2) }, Jump { location: 48 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 46 }, Call { location: 75 }, Mov { destination: Relative(6), source: Relative(2) }, Jump { location: 48 }, Mov { destination: Relative(1), source: Relative(6) }, Jump { location: 56 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 54 }, Call { location: 75 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 56 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 64 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 62 }, Call { location: 75 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 64 }, Mov { destination: Relative(1), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 71 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
