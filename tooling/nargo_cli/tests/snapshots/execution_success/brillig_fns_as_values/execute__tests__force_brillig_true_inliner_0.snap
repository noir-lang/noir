---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/71UsY7CMAxNj/bucicYgAEWkJDYHZqSsjHwI6Gl39FPR5VsNVgpIDXBi53k5fk5dpuI3hL0KVsLD+aMHsaZCsgFXqHPjDB79BL9l3M+CVisZHlD8pegC+mpL6D+XCJnzPchzgj88IM8l7bn57UIxxOO3+nOpxi7c0aYXzyneIaxZHdi9D9if2Dh0U+5/rHWNas11qwk4rFnAuMhfbRPP7fvATzxZQy/FH0/twOcyZsaMo8GjnE1EH7laNhh3L07ffdp+6jjjPswwkwJQHomba/LfXfB8mcMv8H1n1Mj+XSEzsZY1eS2sYWta13ZOePvzJ3P0Pl1YU1ljVInrW5aFZ/OfyjL4+lwBW3qqql1/ir/HUrBFxvtBwAA",
  "debug_symbols": "pZJNjoQgEEbvwpqF/Dp6FWMMKnZICBpaJ5kY7z6FYrcu6E1veEDxqlh8K+p1uzwa44bxicpqRa031ppHY8dOzWZ0cLuiLCxEoJJhROSB/MDPgWIHhYcSQA7QAwywbRidLZvZax06XmbA5El57WZUusVajH6VXfZHz0m5nbPyUM0w0q4HQsPBWB12G37bWVolnEWZSP7Sxd0naV8yGX3J85RPP/hFEf08S87/8H/KefSpFCmff/l/kfZzcfq5JDe/hpPqjL+lZgudvFGt1fE4LK67VOe/6aycqZv82Ol+8Tp0ukQP1ooKzLIasgbpqhjHTNZbGP0P",
  "file_map": {
    "50": {
      "source": "struct MyStruct {\n    operation: unconstrained fn(u32) -> u32,\n}\n\nfn main(x: u32) {\n    // Safety: testing context\n    unsafe {\n        assert(wrapper(increment, x) == x + 1);\n        assert(wrapper(increment_acir, x) == x + 1);\n        assert(wrapper(decrement, x) == x - 1);\n        assert(wrapper_with_struct(MyStruct { operation: increment }, x) == x + 1);\n        assert(wrapper_with_struct(MyStruct { operation: decrement }, x) == x - 1);\n        // https://github.com/noir-lang/noir/issues/1975\n        assert(increment(x) == x + 1);\n    }\n}\n\nunconstrained fn wrapper(func: unconstrained fn(u32) -> u32, param: u32) -> u32 {\n    func(param)\n}\n\nunconstrained fn increment(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn decrement(x: u32) -> u32 {\n    x - 1\n}\n\nunconstrained fn wrapper_with_struct(my_struct: MyStruct, param: u32) -> u32 {\n    let func = my_struct.operation;\n    func(param)\n}\n\nfn increment_acir(x: u32) -> u32 {\n    x + 1\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
