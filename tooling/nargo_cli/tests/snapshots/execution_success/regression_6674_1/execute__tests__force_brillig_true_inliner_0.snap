---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VYT2vUQBSfNMnuZlPpoh9DkGQ36W5vRa2Cn8J024J3L140ePMmKILgwU8gCB7EizdBwe/kTp1f89u3b9PKZqrFgTCZmTfv996b92eSwDQtcH1kNmhg8tP1ieu3aD1cPPtunG3W8kTgdsl/lhXTRNGvQ/knieMZ+OGfgb8n+2d9x+d+3fBnXYA7WDwpvY9M4x++9Mf5+dT/RovO8J07tb+zte0u8Tem+9g68CP/Gf97fvgXqfO1J2bZ13A+Hdoqu0byG/IFxo2MFz3LQOAZkoPXgD8UsnZ9roHAgzzSPjgH2C5WZB0paxzLvMY4sYJzFXnBNmzLYE0PHDkncaQfMk7YIQ7zQg6UZ90FjmY3xFyP9u27Ptus5dAhUPSzeDdJHvugRsam8QPei/wXC/rKNDxvuXcNW+YZT3F94TyDuaHxerc5yzOhkEfapy3PYO//nmd2FN6RWAuVfZ5rWyZ1jEhHLY9tKTqyLWIxd9v19p7wjPas8yutfo0U24UttpPxGnu2XV+xXdxiuz6t4Z1th7kHpjvbafkjUeTp0D4z5IOBWW1YS4RehnojdOTGclv+z4mvpJOY7CvJP2qLLUV+H7YILt8W40DgQSepN/AR4wNFViP2xQptT6yB9qFpbPbBvaeEx/pHLbLIXMTnKO9hQzFOFDm1OjKkdx7znYd9S955QP/INDp/dO/wk7BuMKA75IvqZX333Xy2WSutHJ9IDmmjuF7WO6W1UKGXtXtboU+JBjYbCXotN/UVXmzzg3qZHvt7Cj3ziwX9Y9db2h9CPq7JQ7EWKrzbZA8U2bW80Cc9cPf26RfT2e/aeipr3dhI5j3GjwX9UzfmuEEfbSDnybTKTybVSVVWR0fFvLou+NsGH0w94FfTyWw+LubTw3JSTXbPxef/Mxe5K13Ve+YL1/u6K/n8fmdM4PA/NMSmjb+XYg9sx3WA98o6APrXpuH5yr2nRv8fwt/ebwR+rODzecq6DPp3hP92jU5mjU4yV2nfVGyrHbPqS9L2vRY9bJN2BP1713M9bcu52ncj6AcKfdsdpEdr2KvVcmD+jVq+9H1TX1xfzT7afZHrqYyvtrtVW63UvvfZF6T/sb9jL8dK5zWgzMaT2bgox8WkzKu9y65B83L3cF6UVXac2+H4PPwd2KRu1tk/beu7MeqCpOc8wvSfQbt4vrh3xECs4Fm67y10f5rTo3p5LqlX6cN6lR7Yw3pVRqyltMaxY9u2G7O9mBfkiAX9NzfGmQxoD/aPFPyBwF+SW5mT36+pQp8q9PZ8voKf61n3rv9vnmIK/jwnZYPv+IirRUhN59U0z/eK/LjIy/Pi6hfKQsZLXSAAAA==",
  "debug_symbols": "pZbNbuowEIXfJWsW/h3bfZWqqlKaVpGigFK40lXFu9+ZHE8oi0RX6YbvhOCPsT2GfDfv3dv187UfP05fzdPzd/M29cPQf74Op2N76U8jv/vdGHmxqXlyh8ZmoMxwBrCAAzwQgAgQAIuDxcHiYfFssQwHeCAAESAgARkoMwIPCAz+SGQkIANlRjSABRzggQBEAJYIS4QlwkKwECwEC8FCsBAsBAvBQrAQLAmWBEuCJcGSYEmwJLYQIwEZKDOyASzgALYkRgAiQEACMlBmFLZkhgUcwJbCCEAEZOV5r0quLKA1rLBegtUg+xgleA1Bg+wmSSANSUPWUGqwRoPVIOYkwWsIGqIG0pA0iNlwkD4rQlfpK0NlrKTKVJkrpTIJwWiwGqTn5Tuk05yVIIdBFkg6Cu8kDVlDqUE6y8naSW8hOA3qkQ5DiBpIQ9KQNZQapNsQxOxut0OjR/z1MnWdnPAfZ55/Cc7t1I2X5mm8DsOh+dMO1/lDX+d2nHlpJ77Lc+3GdyYLP/qhk3Q73Eeb9aE8N1dH86T8IoiPBrtuIBeqgLxbG79ZQShLBWXV4NcNOeoUcvR7KkhFp8Ax7jEUp3tgS8w7DM4YXw3OhH0Gimrgw/lrQ9yxE2XphUKrFdiNElK0VZBodRHsRjemZSNSNHsE/Gu4tKPJtGsS/1VD+H0NGwoXdCEd+V2CrJNwZdeh8n6Zg98oIW8oQsiqCKHsU9yPdlg/2puKaJcqot1XRfRLFdHnfYplQzk+TuSFr9pjPz08L97ENfXt29DVy4/rePxx9/L3rHf0efM8nY7d+3XqxHR/6OSXZ8vt4Ix9kWcCueR/SutILq1cpnCwiV5uUsw/",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
