---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZvW7TUBS+juMkjls1gmdgtxO7abdKUJAYGdnctJV4A0YzsrOwgMTGhgRCQmLgCZCQGBALGxJIvAO95Z76y5cTNyW+QCWOFF3b99zz893zY98EpqbAjV2zBomQH26M3diB+fDkt+fu0/Uoi0lvm/J30nwaK/61aP8kdjIDP/JTke8J/7Tv5Nyqavnoi+gdnPwSuB6ZOj58+S/759P/qw0+S+xcr/ztraUbIN+Y9nNr34/9Z/Jv+pGfJy7WHpv5WJP9aRGrdBPsNxALqLdrvPhZBKTPgB04J/qHZGvb+xqQPrGH8ZF9EOwixdaRMoe5jHOoJ1L0XEZZW0aPHUuxsq7N+iJ+9Jy8ruIH2tYhfrw2bg0+u+ZGm6NPYc2y2Ok2YBcq9mwq64IlozGLOaPp0fahKfd/Vw/Kkv4henot6sG9wr5l7/uwbs+N6XqUiQ+B4p+1ZQL2YJxFpo4DXCu9IyL+B6aWue2uNd1coz3VxJVrtDwbGn/vRSnU6JDsYXyaarSs/V+jF2V3aS5U1nl+L0jZR6zfWh3rKD4iFpxjt92o1W8trrTeP1KwCxuw43z9272PsVu1990x7WEXrIgdx13PM3YDBbueWY7dAObkGrGTZ3dNe9hpcRcr9rSIz67UUj5bsCRzQ/LLwGjIRyS0247PQC7zsU6MFdG/ZZbHmGeczuJIcMI4Qp1iW4f4GeOInt0zNU4cR9ynl/VF7f2Ta5Snd4oLxxHGOpMWRyHgc5E4wljhOGrCKSbde+4+XZMCsgXjiHVa6phF7IbgZ0TP7gNOPmq55zPCMeODtvL7kiVtL3Et8kYKb5/mhLdyo8XxvbtOQJ/2zSlzXINwDveYv53Y7lixU/tW4vo8BJ+4Rlni7xThf2hqnz+4a8mxsKp1iO9ntbCa93fPPU/Xo8La8RHsWIj9at7vBOZChZ/jZ0PhT4BHMBsRP+8NYoKyEPP9ap5f1veM3kfwWxP5H7nR8n4n+/A9ekhzoSK7yfZAsV2rqRH4Id/LPuNiuvOrhp7aWtUYcc9A/RHxP3H3mDcydtew83haZseT8rgsysPDfFZeIfmWJAYTD/rL6WRnNs5n04NiUk62z9WP59Gr9MTL+m343I2+eqLPMzfUKXrwPwPJTZt/L2iNYId9ANdyHxD+V6aW+dJdJ0Y/w8TzstekXzsvw/3smHn9wv8W9L9Z4pNZ4hPXKu0cBLHS+jlj32vwwxLjKPzv3Ij9VGT2FT+0sx7hHyj8fcW3LbP4fiBr/7VejhhwL2/yV8MnVvixn3J+ae9hWu71SY/WKzEWOP4w3rFXSq603gOKdDzZGefFOJ8UWbn7p3vQrNg+mOVFmR5l9nZ8nv4twaSq5zE+LfXdvfQF5sc6gvyfhPfk99ldSw5Eij7L962B76I1vVvNP4urRf6wWuQX3cNq0UaZS2AOc8fShrtHvFCW2BER/1d3L3sygDWyfqToH5D+ObuVZ/ztnyj8icJv9+eLyHMj+t72fxKnOkk+PmPbJHZ85NVJSk1n5TTLdvPsKM+K8/LqJ55VNIdNJQAA",
  "debug_symbols": "1ZvdTuMwEIXfJde5sMf2eIZXWa1QgYAqVS0qZaVV1XffZNWEbt0f9WwHJTeoAX9zJsnnGBKyrV6ap8+3x/nydfVRPfzYVovV82wzXy3bre2urp7W88Vi/vZ4+O3KdV98/jv+43227DY/NrP1pnrwTFRXzfKl+xhDW+F1vmiqh+R2dTGYKe7HcqDDoT/ryotteTUtT862vLctT7blg235aFs+2ZZn2/K2s5ZsZy3ZztpgO2vDrbO2YwhgAsBEgEkAwwCTAUYARm9nogMYwIMIeBABDyLgQQQ8iIAHEfAgnTnWUQdG6fKUltTXl1SUP324svZXgfZjOmYSwDDAZIARgNHbGXYA4wGGACYADOABAx4w4AEDHjDgAQMeZMCDDHiQAQ8y4EEGPMiABxnwIAMeZMCDDHgggAcCeCCABwJ4IIAHAngggAcCeCCABwJ4oIAHCnigpz1Qcj2jSY6ZADARYBLAMMBkgBGA0dsZ7xwCeQQiBAoIFBEoIRAj0EkfyLmwh8jFEhIEUgDyDoE8AhECBQSKCJQQiBEIMcIjRnjECEKMIMQIOmMEpx5qpSmggEARgdJ1KBUQI1BGIP3vv8F1uK2mfGVoTn4/NLNcGTpcD3P383+7PnczcORd+0l2TSPtul1JhxaccNF3mGjf8Vv7Pnfqb+87TbRvnmjfeaR9U+ynAnEoupZJdq1T7Dq6SXbtJ9k1TbLrMMmux7pCkvRDScuux7o+Xu56rKvj5a5HuzZe7Hq0a+PFrke7Nl7qOhmujV39Mw8qQxjqB77y7yrtdU76wTFqkRDNE5J5ApsnZPMEMU9Q64Qzj3rvmeDNE8g8wXxO53vMh69na7F4tublDkcp+WEfki/2Qe5w1Uhh2IcUiju+Iub7oNYJ6swTvHnCPVwaftFvPxa2ajBPiOYJ5vNB2TwhmyeIeYIaJ5Bz5gnePIHME4Jpwq7d+jVbz2dPi2b/nszr5/L54LWZze/35ugNmvf16rl5+Vw33bs0X6/RdOeTPNUUQmdQt9nm1T5Jt9mdi/bpWk1O2tQ2+Q8=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
