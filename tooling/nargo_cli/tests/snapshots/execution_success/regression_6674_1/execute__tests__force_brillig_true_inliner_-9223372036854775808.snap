---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZzW7TQBBeu3Z+mlYJ9EXsxG7SW6US4MJDuGkrwVP4AZC4cUXiHTghgYSEOPAEnDlxR0LigOi2O82XzxM3Id7SSh0pWnt3dv52Zjw7CcwcAjdGZgMQInvuoeveQ1jfOv8duvdkM0i7xLdJ+pMkm3QV/RqUf9R1NAM/9BOh78n+SdvReVrO6aMuwrdz/uvB8wMz9w9f+sv5+dR/r0Zn8Z2j0t/ZWngE9I1pPramfuS/ov/Y0fch+xM/smfWl60fn8BZox80qEuyS35lgE8XdPOgZx4QP0O8DPHfNl7jLQ2In8jD9pFnsV2kyDpQ1gJ6jhQ+kcLnLtIS26AtgyWjMdVz1/ggDp9B2CAfpCX5lc+6CT6a3STmYlhr0Mf3RY+WqYKstYk3rnVgjc8A6yXUjWGL3lFfS/8F0GU8lrUub3FcHrr3ZDNYOW8J/5vKW1rc1uWtWJF1oKxxfogVPrHC5y7S6hu9ZsS1LWWfZ59LWMfIVHMzyhYqOqItYpqbutHG30vST/se4hzbdVXbYS3rMedd2a6l2C42y23XgrWWYjuZe2aasx3nCLRPy499xpz3EeryfqDga7ld5LY0XgFdxmOe6CudW2oL7VvgwxbhzdtiGBA/0Yn1Fv4S421FVkP7YlO1s9zVYsKdudHSeuOee2Zeb0Rl8/qPJ5d540JnkIvPFPnHhP/cvW+D/jJGG8h5Ni7Ss1FxVuTFyUk2Kx4SfQsh2Em7S/qqjbi2QODaE89Yqz25XumQzMasHneir6XxFugynsC9ne7tJHBvp0WZjfFnJ5uvms6XxXg0mQ2z2fg4HxWj/bXypXzT8Psr+zz3x67qVrEh1q1aHR2aqo/hnTCmuddu1OpWvDfW3SW1mp/rek/33kzryQhod1yUkUHzXfx/4R3QZTwBL76bJ8PRZJjlw2yUp8XBv3zrb0sviXPOqr2kdXMO9pK+AV3GY1kxbkRu3z3wm8rb6/bjZM7S+A50GU+Afc93/5ftgLlpWl6O1m7vaY/sk1qe98p/OnwH+WjmND+45x7gXNd7E5l2ia6FI5D3E8kbK/JquZb7OV9A3s9mkTfm4wjwxFZ9o+cNlKtVI5cFtqPgf3Wj9ZVfRBPvgnX9O8HX7qVavumbahzJXvFpubMhT5/3Sxv7VobfIAfbIC5X11ezT1fB13LuwFRzbovW8PzZxlrfFX1hme/jXvR9rf7S/ivR/DSkNe6NGEUP1tmC9CK0+oZ75aGiT53dNDsI715D+tfFKZ7Xsjj94UaMUy1WRK7/ESsLPdlyUW8tlyD+urmEz3XZnYj9TLP5lGTFHFzXl+b6/acbrSyDYFE+zbfqesw+atdZvn88y/IiOU3t6/C62rUvdijn6+hrFtruXe5CjI/fQ8T/I7hATPw5VvhZvH4NXrBkvKChzEXl4ly3rOJvlVV84b1dVmWUtR6sYRxY2HHvaC+kJXLEhL/jCMiZdGCP7B8o/DvEf0FuZY7/S+gp+D0F355P7DaJ36LuTf+/esGT6OMcyya+4yOuzkNqPCvGaXqQpadZml8XV38BGKLzzYkpAAA=",
  "debug_symbols": "tdpdauMwFAXgvfg5D7o/upK6lWEY0jYdAiEtaTswlO597KFxS6y2nAN+CXHwJwffI8VS9DLc7q6ff//aH+/uH4erHy/D4f5m+7S/P45HL6+b4fq0Pxz2v399/HhI04vU/+c/PmyP0+Hj0/b0NFxJqG6G3fF2eus2tnC3P+yGq5xeN4uTQ/3t3DD9eOrPzSBt1eY1rdu8rNu8rtu8rdu8r9t8Xrf5WLf5sm7z6/ZaXbfX2rq91tbttYb22skYYZwwmTBBmEKYSpiGG0+E+SQy3mbTLnPgShgjjBMmEyYIUwhTCdPPQWnnbjq+zRcmJ8IIYZQwRhgnTCZMEKYQphKGyEEQOQgiB0HkIIgcBJGDIHIQRA6CyEEQOQgiB4XIQSFyUIgcFCIHhchBIXJQiBwUIgeFyEHp56BpOpuW64WpiTBCGCWMEcYJkwnTzYGmZG9Gky9MIUwlTMNNS4QRwihhrG8in43I5TNSc8JkwsT35rKftkKYihtJ3Qu1eTrXYrFClSpOGkwk4URwojgxnDhOMk4CJ3j1Ba++4NVXvPqKV1/x6itefcWrr3j1Fa++4tVXvPqKV9/w6htefcOrb3j1Da++4dU3vPqGV9/w6rsTP0qeGRQMKgxifmi9ESgnBgmD+g/fZvMik4UtkDHIGZQZFAwqBOovS5Qsb6ZEXRDHScZJ4KTgpOKkwaS/HvE1EZx0O0KZJ3pl+v/jghhOHCcZJ4GTgpOKkwaTT1YH3Ou5X7q3BTIGOYP6w4a/L8b4YjFG+rPjcVidUbZFQPvT1nHUn79elsXXaw1H44ybQcIgZVC/uNllRp4XyBmUGRR4cbU/Hf8OVQY1AklikDBIGWQMcgbBY54KPOZpfxb8Nenf7BTz40uqsUDKIGOQM6gyqBHok40W3yDmlhtzy/vTT52HIV08mWp/+vk1yTgJnBScVJw0mPS3Q2g9dzptSyI4UZwYThwnGSOv49Gf7Wm/vT7s3jZP3j0fbz7spXz6+7C72Fb5cLq/2d0+n3bTBsv3vZXTndecNlpkemiZDiWljaQ8HU43WXLbSMh41fHK/wA=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
