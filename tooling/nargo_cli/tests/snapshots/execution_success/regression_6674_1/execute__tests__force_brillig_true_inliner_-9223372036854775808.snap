---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1azY7jRBAux3GcTBglAnHeJ0CKE3syc0Ej7c4CEuLI3ZudeQKOIFnwEFyQeBZuXJF4B25ckUBCTM92jT9/LnsS4t4VKCVFbXeX6+fr6iq7O5HUFPl2LEeQCvncX8z8/QjG4/vftb9fHUfZjPQOKf9ylW9nhn8D2r+ZeZlRGPkrlR8I/1Xq5XxS1fLRF9U7vf/N4XopdXyE8l/nL6T/H/T4rLHzvAo3t45eePkSQPZNGNsf1+3L4W3P5j7GvpFmjI3DxEBx7mUm0qbI6IsNHrXN2f2dvz43+ATGOO4mNIYxn9JYDGNTf72QNk4qXzFMYGzIWI7Ih7GXzzrVthHx47X4Z7DvmW+drz+Qf1jwYqNPcVxKG3PlOzeeizpa1cN9rMeaB573IfRYuYtjaAg9nIMdzaQdjwPG1YX6gbEh5GMKunk+pzDGc4DvHugbk7Xetc/J/xHkMh/bas174BpX7DPfqP9Mgr7TZJG0YzOWNj4cy7Fh65LGHL2oaj4ei42+/7IszfkYO7oGFtKNW+Ca2lsPWKf6ekg9eOlbqx4ciquV1yzseL1OAmOXGthNpBs7zIN6jdhp3xcyHHacI7qw47hLA2M3NbBLpRs7rBN6jdhp35cyHHZ99XQaBp8rrn1IOnZGfgm0Qj4iod2u/QnkMh/rxFhR/QvpjrHAOD3GkeKEcWS9U4yk/U6BGCfUdys1ThxHXKe76iLXBStHBXovOziOjnm/OiSOMFY4jvpwmpHua3+/OpIisgXjiHU6GkkbuzPwM6G+rwCnELk88P7WmvFBW0fkjyNrLvFZ5E2k7bPuVyTE+7VvHY6/+Ou5wPqvhvd/e/kmPh58Brt4PaD+hPi/9fcYL9qOj7Dzbltmd5vyrizK16/zXfk+yXc0Apxwv+b0rfNIp2+dAWVZ3zpvqd495nH9dhkbfqBtI+LHa0cJ9X3vWyuPW7GDfYfsB1m4WntFuuft1vbQuaXcbi5363y3fVVsys3FQbnlXe4F814UYm3tRTH2/K4q0vRZyXofwv3lX0Eu8ymdcDrhpHTCqWmzSDicOF/9n2vWz4BNiJoV+F0xt858lDge2UYmK3bw7Pw3kMt8SkFqbbFaby7XebHON0VWXv2bWhvozPDgsx1e87iuec1b39b7zpv66+R/GNVymY9txXWjdgde428tb6JvTE/t3zzbA8OuvNm3ZxP67EIx3ffsAtcJzkdCfb8DNiH2bKx3/aijFbHXxyF7jGzDtb9fHUe5lX9kOPmZ9d1zU71p3Zr5g3zWudc9Gq5NEYwj/19Sy/zTX8/hGcx/cY9NVr16Dvb+Tbakhr0YvyOyV/njqJYZRU3d6O8E/FKsFtLOKxw70yfsYhyVP/UD7l43zpQf96H5vEekPU/WfiPWDD5DxVyoz2o+0704zvuOxjA2ZN539mxobhrnDdX+/lr4zA1+az9/SfyIlZU7ZqQnNfRgfHfFPj6LsW/VECu2dCwxfNIx66yVdYu017DuMff938g6A0xoLDb09f1vbD6Q/1Zcq4x3EdeN/wFUTV+s+EF+juupwY+5iueg69uRYyKm5x3dkK2K4cTgR3lcPz6CvPdZ1LTPioO+8+UQ3xi74uLVLi/K1W3mbtdPfWMsFIeqHsdYc5T6e333Yn6sXci/hdp1BXH0wGvoc3yf9vBFHe2DDKNvXDX7ZlWbP67a/Kr7rGrbqGNzGMN14Og9f494oSy1IyH+Gy9A52QKz+jzS0P/lPQ37Db6+Px3bvDPDX43Px/7hzRu0fehz2oedJJ87GPbNHZCrKv7JbXdldssu8qz2zwrnlpX/wB6GKH6DTIAAA==",
  "debug_symbols": "ndvRTuMwEAXQf8lzH2zPeGbMr6xWqEBBlaqCCqy0Qvz7pisaUOO0uvcFEdRDm9ybJk6cj+Fhc/f+dLvdPz6/Dje/Pobd8/36bfu8H5c+PlfD3WG7222fbn/+eUjHH9n/v/71Zb0/Lr6+rQ9vw022UlbDZv9w/FVl/A+P291muKnp8/dqyEGYhpuSCJMJUwgjhFHCVMIYYYgeFKIHheiBED0QogdC9ECIHgjRAyF6IEQPhOiBED0QogdK9ECJHuhCD7RNppVzI4RRwlTCGGGcMEGYhpva74E3PRlv9dxkwhTCCGGUMJUwRhgnTBCm4caIHhjRAyN6YEQPjOiBET0wogdG9MCIHhjRAyd64EQPnOiBEz1wogdO9MCJHjjRAyd64EQPguhBED0IogdB9CCIHgTRgyB6EEQPot+DVtLJtBrnpuGmJcJkwhTCCGGUMJUwRhgnDNGDRvQgp8SgzKDCoG4XSkryhUrSOVIGVQYZg5xBwaBGoJwYlBlUGMQ0IjONyEwjMtOIzDQiLzTC6gmNG3iGGoFKYlC+juoMFQYJgfoXsqycjs0mszXqX8e6TBQnFSeGE8dJ4KTBpH8B6zLJOMHTVzx9xdNXPH3F01c8fcXTVzz9iqdf8fQrnn7/OkqbSLM5yTgpOBGcKE4qTgwnjpPASYOJ4+k7nr7j6TuevuPpO56+4+k7nr7j6TuefuDpB55+4OkHnn7g6QeefuDpB55+4OkHnn7D0294+k2Jc9hWGWQMcgYFgxqOSkoMygzqX8QQme7Fic3naAiDlEGVQcYgJ1B/7O41fxm3mBHFScWJ4cRxEjhpMOmP1i+TjJPujuDTxTwfX3dOBCeKk4oTw4njJHDSYLIwQUc1TvulapshYZAyqDLIGOQMCgY1Ai1M1LmCMoOYRizMbdHve1c6u3dVFiaQVJlQldkXycLMjpqnj1fz7OMtTIW4jBbmQlxBmUGFQf2dsGqekM42+cJ8iCuoMsiIcBemRFxBwaBGoIVZEVcQ0/KFeRFXkDBIGYQfmxw/NvUH0pdJf2Mnm04zU9gMFQYJg5RBwaBGoP7YtUz7eZmfovfHrpdJwYngRHFScWI46Y+N49TqcWVnJHDSUCILo+KLJOOkYORzXPqzPmzXd7vN16MXj+/7+x9PYrz9fdmcPZTxcni+3zy8HzbHxzO+n8w4rqAkX0mJ38fb3eNiLnWVJR0Xj+tSUluN4/jxXcd3/gc=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
