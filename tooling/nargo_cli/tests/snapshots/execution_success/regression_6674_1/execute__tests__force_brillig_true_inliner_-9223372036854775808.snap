---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZzW7TQBBeJ978NKAE+iJ2YjfprVIpcOEh3LSV4Cn8AEjcuCLxDpyQQEhIHHgCzpy4IyFxQHTbnebL54mbEm/Viq4Urdc7Oz/fzoxnN5FZtMj3sdmgCZNt/9D34xbMt09/e36cbNbSPsltkv8syWZ9xb4G9Z/0Pc8oDP9E+AfCP+l6Pk/LBX+0ReT2Tn8DeH5gFv4Ryn7Zv5D2b9fYLL6zX4bbW9ceAX9jmo+tgzD6X/B/7PmH0P1JGN0z58vOj49gr9EPGrQluU9+ZUBOH2wLYGcekTxDsgzJ3zJB4y2NSJ7ow/jIs2AXK7qOlLmInmNFTqzIuY28BBvEMlrRG1Pdd00O0vAetBqUg7wkv/JeNyFHw01izsJcgz6+I3Z0TLXJXJdk41wP5ngPsF5C27i1aYz2Ov4vgC/Tsa51eYvjcs+Pk83a2nlL5F9X3tLiti5vWUXXkTLH+cEqcqwi5zbyGhq9ZsS5trIusM8lbGNsqrkZdWspNiIWlt4d+N7F30uyT/se4jvGdV3ssJYNmPMusOso2FmzGrsOzHUU7OTdM9McdpwjEJ9OGHymnPex1eX9SKHXcrvo7Xi8Ar5MxzLRV3o3FAvtWxACi9b1YzGOSJ7YxHaLfInxrqKroXXWVHGWs5ol2rnvHa83/nlgFvVGXDZv/3R2njfObAa9eE9RviX65368BfZLH2+g58m0SE8mxUmRF0dH2bx4SPxdawFO2lkyVG3EtQU2rj1xj7Xak+uVHulszPpxJ/Y6Hm+BL9NJu8PpDidpdzgt62xMOJxcvmo6XxbTyWw+zubTw3xSTHaulC/lm4bfX1kX+H7som4VDLFu1erolqn6GJ4JLb177XutbsVzY91ZUqv5ua4PdO7NtDsZadoZF3Xkpvku/r/wDvgynbQgvpsn48lsnOXjbJKnxe6/fOtvyl0S55x175KumnPwLukb8GU61hXjRvQOfQd+XXn7qvdx8s7x+A58mU4a+17o+1/GAXPTQXneO9ze0xpZJ7U8r5X/dPgM8tEseH7wzwOQj3rvg/xPJD9W5Gu5k3P1F5D/2eg2mRU2CR7aWTICvoLV0Oi1Cq6xNXa4xjgK/VffO1/5RTw7ih3a/w5C31XotVgZmmoelLXi03JmQ5khz5cu9h0Gv0EPxsCW69ur4aOd27V8MTLVfGFpDvefMdbundEX2P/422jMcqxo9Zfmi9q+8p53FHtl3KUx2iF3EVp9w9gg7h2aayvy6nBYVX/GNTZaxUaOKYxT/NZwnAr9D99jnP7PscJ7vupMhGPkhZgfkK4YA3X30vxN+Ol7p8soWtYPfYt9UrtjDlG7zvOdw3mWF8lx6objy2rXoeBQLubR11zr+rGchZgev59I/0dogZn4s1XkObphDV20oj/jobyLy+V3/bJK3y6r9CJ7q6zqKHMDmMM4cO2eHyNeyEv0sER/zzOQPenBGlk/UuT3SP6S3so7/i9hoNAPFHq3P9YvEr9F25v+f/VMJvHHd6yb+E6IuDoNqem8mKbpbpYeZ2l+WVz9BUjfiNeJKQAA",
  "debug_symbols": "pZZNTuNAEEbv4rUXXVX9y1VGCIVgUKQoiUwy0gjl7tPlr8rAgll4NrznhH5qOxXHH8PL9Hx7ezqcXs/vw8Ovj+F5PhyPh7en43m/ux7Op/7qxxD0D9XhgceB2gIOAAEMCBCBBGSgAKgwKoKKoCK9Qh0CRCABGShABdqCGIBekQ4GBIhAAjJQgAr0ShyHFAACGBAgAgnIQAEqgEpGJaOSUcmoZFQyKhmVjEpGJaNSUCmoFFQKKgWVgkpBpaBSUCm9ksahBoAABgSIQAJ6JXcUoAJtQQsAAQz0SumIQAJ6pXYUoC6g0A+bshobSMFIRjaKMRqTMRutR9Yj67H12HpsPbYeW4+tx9Zj67H12HpiPbGeWE+sJ9YT64n1xHpiPZ1AvQ46gguzsRjtOukYKnUOF5JRvxVBRVyiS3LJLsVER46ySnRJLtmluFSXZqIDCCEX3UZREZfoklyyS3GpLs1Ex5BIRVyii65abjH6lqhoMKo0vMIhuJALu+iqpBJdkot1WIcRUl2aic4jhFzYRVyii50Xk50X6/hBdHlVYRdxiS7VpZnotEF8ufjy5X7YVKJLcskuxaW6NBO9O3JQIRd2EZfoovfscL+Pg/8APF3nadL7/5dfhP47cdnN0+k6PJxux+M4/N4db8s/vV92p4XX3dzf7cnp9NLZg6+H46R2Hz9Xh5+XUma21X2GZQ2k7wX6uZA5WiAL/7T+nzuIbd1B21QozbfQNW0pNPZrSC3VDYX+jREr9C/GtkJOXuh36f8ubLkObf0sW970SYisn6Vk2VKIsXohxrap8DkNcds0JFr3kGjTHpKse0hSNxUirYW45SxK8kDJW3ZQ1q9ESWHLGYS8zkKoecs8r5eAN80SVz8Dbt/XP/aj3f4wf3v+vmtpPuyej5Mdvt5O+y/vXv9c/B1/fr/M5/30cpsnLX0+xPc/vziFkQs96rNYP6QQRgpJD0kPUxsp0+NdN/MX",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
