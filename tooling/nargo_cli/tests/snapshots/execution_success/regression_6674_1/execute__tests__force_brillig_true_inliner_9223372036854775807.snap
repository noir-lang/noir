---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91aP4/TSBQfr+0k3sRxdPcJ7hvEib1Zui2uuvLK67yBlU666sqrjHTVtYeQkCj4BAgJiYJPQElPQwMSEhIFoqFiZ5mHf/vyi+OwnhUw0mrG8968P795b/5lA9OUwNWRuUIRISPXSNz3AdDD878T9z2/WskTpbdP+cfzokiIfz3av0yczMCP/LnI94T/fOjk/Fo38tEX0Ts6/xtDe2Ka+PDlv8yfT/9/bvF57Hx9qXwVuunRjhR8M2AL6o38YFAGSp8BO5Am+g+VrX2vCYHSJ/ZofGQeBLuY2DojNIwlpKGemOj5HmVlhseOLQkZ12duiR8DJy8ifqBtB4of28aNwb5fXG1z9DWM2RY7UQt2IbEnJeOCLbUxmznD9LB5aMv9ffXInA6UnhP3Pb9iYXgNlB/DHvyYKVkB8XHkx8cvew6eHXqSnYvsQ+V73/LHfrDJZY5xPmX+bb2Efszz2DR5iGNHQEf+ZyDzyLW77JGe1rLOe6Tov649ku0RbXvkkNjalmuB2czpkPR1ydtvVVZGZEeKxvbWhMj0sX/KWTsiPqJtB4of28Y0OSZ9v7ma7Z/7nj0OiD0MO332mHjGLiXYTVqwS4EmbcRO+n43/WEXmm7Y6bhLPWM3NZvYpS3YTYEmbcRO+v4w/WH3tXE39YxdRrCbtmCXAU3aiJ30nZr+sGNxl5JxVz3DsXlg5wg5s9g9/0/ox/Wu6zlC+B+CzL9cu0t8fK9r+t+u9r0uIU2vS77vkww7Npf7YveP2Y5dSLALW7DT71W29HnPY3Okz3rbcus29CN2+57R74DMf107I+N1fHg6E8+1PxgfofJZsNSxg/mg/f3P1Sw+9Lzpvrb4CFqwixR2nt5BF21rBJtL9q6k9wwZFxPeRNGE939XW4zfuLaNXfbGh/fOu0ov2y/iFtuE/z7IvKf4d2EjOcbyLwa5t107M3yvQZ2THX7o3BT+B6629LdKZkr8YHcm4Z8SfnYOzMzmeitjhT+sG5rolFiIgNbn3d1i8A7s0BjEdXd/GT4Z4Z8qHltmih+xYut5qmSwuy7Ggo4/pMlYzBX2JoA59UjpZ7E4VDxCR/4nIPNxB5+65hT6JOdFFoM679MdfuicEv6nrmY5xWIGzxr7xsxQ+YOxIGNZTuHvcrZEQPOdU5fufHV3fxk+M8KfKR5jmryZAS1VNJx/nZcTogdjQccf0mQs5gq7W+i3JP3mgTScZ/2OPlXfyJson4dmu8/yjfGPNun4F/7nrsb4ZzEovv/oMajXbhaDgcIEZSHmY8Uv4wem/d1Kr1EvXG2xiYPL9uH5a6psZ3e9NtsDYvuuc4/8NuAzLlbHn+8BF7bWDUZ45zJKf6z4X7lv/RuNYHjylXaerar8bFmdVWV182axrn5S8m3B/z3oW3+1Wh6vF8V6dVouq+XR9esv54vl8aIoF8WyzKsb161/XR6drouymt/K7edil37J9UHd0HGds2XovuWuqflFXqz43wvv+d8H1/5yLqk39Vm+KNjOF2ypL2SQvqi+3JfUm/xhvckvug/rTRuFNgYarsG2TNw34oWyxI5Y8QdOgMzJCMbI+BnRP1L6L9lN+nAP0LJC0if8dn4+ijxXo+99//Z3oVPJxz5tm8SOj7w6T6nVulrl+Y0iv1Xk5a68+gQg6rkVtSgAAA==",
  "debug_symbols": "1ZzRaupAEIbfJdde7M7Ozs72VQ6l2NYWQbRYe+BQ+u4nkSYVo5H8sOnkppi63/oZ/52JJOazel49frw+rLcvu/fq7s9ntdk9LQ/r3bbe+vxaVI/79Wazfn04/Xflmj8+HMe/vy23zeb7Ybk/VHdeiBbVavvcPORQz/Cy3qyqu+i+Fr3BQvw9VgKdDr1fVJ7LTh/LTi9lp09lp9ey0+ei05MrO70vOz2Vnb7sqqWyq5bKrloqu2pp7KptGAWYPJ4JDmA8wBDABIBhgIkAIwAD5CAAOQhADhjIAQM5YCAHDOSAgRzEK++Hc8dkGi4DGtv5Nfamv6yUcls56ofxnIkAIwCTAEYBJo9nxAGMBxgCmAAwQA4EyIEAORAgBwLkQIAcJCAHCchBAnKQgBwkIAcJyEECcpCAHCQgBwnIgQI5UCAHCuRAgRwokAMFcqBADhTIgQI5UCAHGchBBnKQL+cgk2uZHHX4sMCH0B1DBLnxVcIzazuYOZ/bBFM2bMommrIRUzbJlI2assmWbLxztnS8LR1T5di7yWvOT6/iXq/ybuzCOkIZgLxDII9AhEABgRiBIgJdbA7kXPiGyPGEKb58YuH3dNSWTjalc/lEx+/peFs6ZEsn2NJhWzrRlo6tqkyT153BY4swdmUdoYBAjEARgQSBEgIpAmUAYodAV6q4xBaqj8N6ECFQQCC+DfUCyxGBBIDi1C05+q5wRN8rHHHqphNDVzhi6GUriq29k2zpqC2dbEpHJl9Z7Dsd7i108bZ0yJaOrbojbEsn2tIRWzrJlo7a0smmdJKzpeNt6Ux95me4haapT28M7x0lU3tHgy0dtqUTbelMvrIGj3c02dJRWzq26k52tnS8LR2ypRNs6bAtnWhLR2zpJEs6dOVyjjGXlefu1yVZbgxNsS3JSW68ydTtkNQ8f2btZ2lNs7QORq29k07BqfS8eabecVLvax/9eG+ZqXeaqbca9abuuJuk9yvAK1dzGbf2bpbWfpbWNEvrMEtrnqW11Q5J2g6l3Le22h+Hra12x2Frs71x0NpsbxyyJrO9cdC6YG+8/6q3/i736+XjZvV9y5qXj+3TyR1sDv/eVmc3s3nb755Wzx/7VXNbm5872jR7l+rv+yTuvrkavtmsX5goN5v++GxYUIj1q9av/B8=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
