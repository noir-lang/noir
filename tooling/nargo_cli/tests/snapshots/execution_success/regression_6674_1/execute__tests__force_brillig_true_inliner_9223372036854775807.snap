---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VavW4bRxDe092Rd0eeyCRPkCfI8c9SOhUpU6ZMc6aiKnWAVLkuXYBUaRMECJDCT2AYMODCT+DGBgwYcGG4cWfArqyVd8RPH4dLStyV4QWIvduZnZ9vZ2b3VkrMqiWuz8weTYS8d33p+gOgp+e/E/fe7NcmJekNKf+4mc9Lxb+A9s9KJzOJI78R+ZHwb/pOznfdSj76InqL898AnodmFR+x/Jf1i+n/Vx6fB87XJ+Sr0E1AO2rwzYAtqDeLg8EiIX0G7ECa6K/I1tA1ISF9Yg/jI+sg2OWKrWOFhrGENNSTK3o+R1kjo8eObaUyL2RuiR89Jy9T/EDbDogfn42bg2Nfu97m6DOYsyl2Mg92qWJPrcxLNvTGrOcM6qkVf/aV1Q8gS+KjAB6Oj5JoJ+692bPJWlVOHsYH6izAZuTHZ9tyGvvG9Vp8FOYqPjzmi4+C8MF5J2GwmYvevkdvP7zeSUSfpqVZX7NAsmeSEwOQzfvnEMY/xf4p+iuyNdb+OSR7GB+uJ7Vi61ih8T5VK3pqRY8mqx9QVhFQVkU03D8Fw8hn08sagPsh1+0e6Ua7ijh2ees26uwBztep29+7XqvbuH+mypivbvc82PGaVpGxGyrYVR7ssHYNFexk7AcTDrvBjthx3EWqsw3nNWI39GCHeV0r2MnYjyYcdjeNuzoydodmHbvag90h0OQZsZOxUxMOu5vG3WFk7EYKdoce7EZAk2fETsZ+NuGw0+Iu5LeHtifxOoyIduLem/3a5dl0HEf+5V3bF+R/KPtlHRBzwcri+QuM2598I+dmtfY49wDoyH8fZP7qnkfEo61bLxKuYrecDTB/UKfYdmDWzxL4PZLT2G+u1/LnuncoqWLPSKFx3Y59h6Jhp63ldbH73WzGLlWwSz3Y8feMbb57zZvWHm0dtuXWHzC+T279AzL/dM8jZf4tfSM0vFYYH/ydJlgyhrg2OY395XotPnjdeMwXH4kHu4ywi3TPPPXViIR0oq34LYhzcV6u8PaJJrx/u95i/Nw9W6y0e23Z+2z8/Ut6eyBfqxFsm/D/DzL/I/5t2EiOafmXg1zJP985jmvdJj84N4X/nuvt+wuSWSp+aOco4a8U/lLxTbs/lblyrk67FU10iqwMaCHvpKw9L8EOxiDvdvdXw0e7W6qIx7Yx8SNWWj0vSYZ2/sVY4PhDmszFXNmWUw9I/7ZY5JwS/kcg8yHxh8opOS9qMdgjneUWPzinhP+x67Wc0mJGu0PfNWY4pzAWZK6WU3gvblsGtNg5deUeq9vdXw0f7b5ySDy2afeVJdFw/Tkvtb997JpTMhdzJSbuR8cfzzgXtjr5EsPcMqAj/1P3jjhIn+1h59lROzmbtWftoj09nS/bL0m+bfi/BKH1t0ez4+V0vjy6u5i1szu3r3/RTGfH0/liOp8tJu23t61/ubhzdzlftM1PE/s63ab/8nugW9GxjtjWd+9yjmZ+rJPI/0p4z3+v3bPkZ67os3zvPHzJhv5ChjKWdVfHym6dP+3W+UV31a3bKLQB0LDG2TZ074gXyhI7cuJ/695lTQqYI/PHiv6C9F+xWxnDGsuyUmVM+O36vBF5rkffQ/+97kInyccxtk1ix8b1BzxcfB4FKAAA",
  "debug_symbols": "1ZzdTuMwEIXfJde9sMee8QyvslqhAgVVqgoqZaUV4t03qdqASEnVIyU7vkEN9ed+lGOf/kR5bx5Wd29Pt+vt4/Nrc/Prvdk83y/36+dte/T+sWjuduvNZv10+/XXTeh+xHQY//qy3HaHr/vlbt/cRCFaNKvtQ3czp3aGx/Vm1dxw+FgMBgvl41hJ9HXo70UT87TT87TTy7TTl2mn12mnt0mnpzDt9HHa6Wna6addtTTtqqVpVy1Nu2rp2lXbMQowdj2TAsBEgCGASQCTAYYBRgAGyEECcpCAHGQgB/mHHGTrGaPxZWP9sjG5MLRQOA4t3f1jQynH41CSgTTVKJ1qlM41SnON0lKjdKlRWmuUtlml+WRSRMeHxiC9QlD5ps2hTu0aW5FrbEWusRW5xlbkGluRa2xFrrEVucZWZKtQWkKN0jU2otTYiFJjI0qNjSg1NqLU2IjithH1NJRsIO22Ecek3TbiiHQ534jFTiLtTf7ORIAhgEkAkwGGAUYApgCMAoxdzyiQAwVyoEAOFMiBAjlQIAcK5ECBHCiQAwVyYEAODMiBATkwIAcG5MCAHBiQAwNyYEAODMhBDAGBIgKdj4L1BReNL32kmFJfskkufNccc9bT4JxtoJN86WRfOuxLR3zpFF866kvHXOnE4Esn+tLxtSvH2aP82Vl52Fl07T/rABECJQTKCMQIJAhUEEgR6OyWQyGk0zvikGdM8fnTxf6fTvSlQ750ki+d7EuHfemIL53iS0d96fjalfPs+87oa4t87co6QIJABYEUgQyAOCBQRCBCoIRAP+ziwieofeU9gBiBBIHKZWgQWFYEMgCSuSuZY79xcBxsHDJ36XDqNw5Og2yJuXp2SvClE33pkC+d2VdW/511e3Ow0Ev2pcO+dHztO6X40lFfOuZKR4MvnehLh3zpJF862ZfO3N8njFeozf2J+fizY+zr2RFfOsWXjvrSmX1ljb3eoRB86URfOq72HZr9/IkLOtmXDvvSEV86xZeO+tIxVzqznz8xovPRHv1Z7tbLu83qeAmmx7ft/ZcrMu3/vqy+XZzpZfd8v3p42626yzR9XqGp+7OIdEHZui48HMa0oKjdYTzcSwui3D5q+8j/AA==",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
