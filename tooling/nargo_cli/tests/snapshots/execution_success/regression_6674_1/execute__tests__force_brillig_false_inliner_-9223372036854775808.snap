---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZzW7TQBAeJ3Z+GlACvIid2E24IUGBCw9hUirBU/gBkLhxReIdOCGBkJA48AScOXFHQuKA6LY7zZfPEzel3qoVXSlae3d2fr6dGc9uIlm1yPexnKMpkzv+YejfOzDfPfzd8+/p+Vo2JLlt8l+k+WJo2Nei/rOh5xmF4Z8q/0D4p33P53G14o+2qNzB4W8Ez7dk5R+h7Nf9C2n/nQab1XfuV+H21rUHwF+k/djaC6P/Cf+Hnn8I3R+F0T13vuz8eB/2Gv2gRVvSm+RXAnKGYFsAO4uI5AnJEpK/I0HjLYtInurD+OizYhcbuk6MuYieY0NObMi5irwUG8Qy2tCL1PfdkoM0vAedFuUgL82vvNdtyLFw05hLYK5FH99VO3pSbzrXJ9k4N4A53gOsl9A2bl16R3sd/xfAl+lY16a8xXF5z7+n52tb5y2Vf1F5y4rbpryVGLpOjDnOD4khJzHkXEVeY7FrRpzrGusC+1zKNsZSz82oW8ewEbFIaGzP9y7+XpJ91vcQxxjXbbHDWjZgzjvBrmdgl8hm7How1zOw07En0h52nCMQn14YfOac97E15f3IoLdyu+rteLwCvkzHMtFXBpcUC+tbEAKLzsVjMY1IntrEdqt8jfG+oavQukTqOOtZLSHape8drzf+eSSreiOu2rd/vjjOG0c2g168pyg/Ifrn/n0H7Nc+PoeeB/MyO5iVB2VR7u/ny/I28XetAzhZZ8lQtRHXFti49sQ9tmpPrlcGpLPI9nGn9joeb4Ev02m7xukaJ23XOK3rLBIOJ5ev2s6X5Xy2WE7z5fxpMStnu2fKl/pNw++vrgt8P3ZStyqGWLdadXRH6j6GZ8KExl773qpb8dzYdJa0an6u6wOde3PrTkabdcZFHblZvov/L7wDvkynLYjvFul0tpjmxTSfFVl591++9ZflLolzzrZ3SWfNOXiX9A34Mh3rinGjeoe+A7+ovH3W+zgdczy+A1+m08a+F/r+l3HA3LRXHfcOt/e0RtdpLc9r9T8dPoN8lBXPD/55BPJR7/sg/xPJjw35Vu7kXP0F5H8W2ybZYJPiYZ0lI+CrWI3FrlVwTdJgh2uMo9J/9b3zlV/Es2fYYf3voPR9g96KlbHU86CuVZ/WMxvKDHm+dLHvMPgNejAGSbW9vRY+1rndyhcTqeeLhOZw/xlj694ZfYH9j7+NIuuxYtVfli+yrszTNb1TGMvp/tGEDercoznEvU9zXUPPJhxGW9jf5NfsA6orxinixXGq9D98j3H6P8cKx8OmMxH7p4X5HumKMdB0L83fhJ++d7pMonX9tvVX5R2idl0Wu0+XeVGmzzL3Oj2tdh0rDtVqHn3Ntb5/17MQ0+P3E+n/KC0wU39ODHmObtxAF23oj3gYY3G1Pjas6vTdqk6vsnequo46N4I5jAPXbvh3xAt5qR4J0d/wDHRPBrBG108M+QOSv6a3Mcb/JYwM+pFB7/Yn8YvUb9H2tv9fPZJJ/HGMdVPfCRFXhyE1X5bzLLubZ8/yrDgtrv4CS0pPUokpAAA=",
  "debug_symbols": "pZZNTuNAEEbv4rUXXVX9y1VGCIVgUKQoiUwy0gjl7tPlr8rAgll4NrznhH7qOGXHH8PL9Hx7ezqcXs/vw8Ovj+F5PhyPh7en43m/ux7Op/7qxxD0D9XhgceB2gIOAAEMCBCBBGSgAKgwKoKKoCK9Qh0CRCABGShABdqCGIBekQ4GBIhAAjJQgAr0ShyHFAACGBAgAgnIQAEqgEpGJaOSUcmoZFQyKhmVjEpGJaNSUCmoFFQKKgWVgkpBpaBSUCm9ksahBoAABgSIQAJ6JXcUoAJtQQsAAQz0SumIQAJ6pXYUoC6g0A+bshobSMFIRjaKMRqTMRutR9Yj67H12HpsPbYeW4+tx9Zj67H12HpiPbGeWE+sJ9YT64n1xHpiPZ1APQ86gguzsRjtPOkYKnUOF5JRr4qgIi7RJblkl2KiI0dZJbokl+xSXKpLM9EBhJCLbqOoiEt0SS7ZpbhUl2aiY0ikIi7RRVcttxh9S1Q0GFUaXuEQXMiFXXRVUokuycU6rMMIqS7NROcRQi7sIi7RxT4X6/RR1TtgcCEXdhGX6FJdfLn4cvHl4suX+2FTiS7JJbsUl+rSTPTuyEGFXNhFXKKL3rPD/T4O/gPwdJ2nSe//X34R+u/EZTdPp+vwcLodj+Pwe3e8Lf/0ftmdFl53c3+3J6fTS2cPvh6Ok9p9/Fwdfl5KmdlW9xmWNZC+F+jnQuZogSz80/p/7iC2dQdtU6E030LXtKXQ2M8htVQ3FPoVI1boF8a2Qk5e6Hfp/y5sOQ9t/S5b3vRNiKzfpWTZUoixeiHGtqnwOQ1x2zQkWveQaNMekqx7SFI3FSKthbjlU5TkgZK37KCsl0RJYcsnCHmdhVDzlnleTwFvmiWu/gm4fV//2I92+8P87fn7rqX5sHs+Tnb4ejvtv7x7/XPxd/z5/TKf99PLbZ609PkQ3//84hRGLvSoz2L9kEIYKSQ9JD1MbaRMj3fdzF8=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
