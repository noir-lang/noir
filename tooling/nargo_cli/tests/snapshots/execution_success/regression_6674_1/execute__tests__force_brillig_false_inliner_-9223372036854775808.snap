---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZzW7TQBAeJ3Z+GlACvIid2E24IUGBCw9hUirBU/gBkLhxReIdOCGBkJA48AScOXFHQuKA6LY7zZfPEzel3qpFXSnaeHd2fr6dGc+uI1m1yPexnKMpkzv+z9A/d2C+e/i755/T87VsSHLb5L9I88XQsK9F/WdDzzMKwz9V/oHwT/uez+NqxR9tUbmDw98I/t+SlX+Esl/3L6T9dxpsVt+5X4XbW9ceAH+R9mNrL4z+J/wfev4hdH8URvfc+bLz433Ya/SDFm1Jb5JfCcgZgm0B7CwikickS0j+jgSNtywieaoP46P/FbvY0HVizEX0PzbkxIacq8hLsUEsow29SH3fLTlIw3vQaVEO8tL8ynvdhhwLN425BOZa9PFdtaMn9aZzfZKNcwOY4z3Aeglt49alZ7TX8X8BfJmOdW3KWxyX9/xzer62dd5S+ReVt6y4bcpbiaHrxJjj/JAYchJDzlXkNRa7ZsS5rrEusM+lbGMs9dyMunUMGxGLhMb2fO/i7yXZZ70PcYxx3RY7rGUD5rwT7HoGdolsxq4Hcz0DOx17Iu1hxzkC8emFwWfOeR9bU96PDHort6vejscr4Mt0LBN9ZXBJsbDeBSGw6Fw8FtOI5KlNbLfK1xjvG7oKrUukjrOe1RKiXfre8Xrj/49kVW/EVfv2zxfHeePIZtCL9xTlJ0T/3D/vgP3ax+fQ82BeZgez8qAsyv39fFneJv6udQAn6ywZqjbi2gIb1564x1btyfXKgHQW2T7u1F7H4y3wZTpt1zhd46TtGqd1nUXC4eTyVdv5spzPFstpvpw/LWblbPdM+VLfafj+1XWB78dO6lbFEOtWq47uSN3H8EyY0Nhr31t1K54bm86SVs3PdX2gc29u3clos864qCM3y3fx+8I74Mt02oL4bpFOZ4tpXkzzWZGVd//lXX9Z7pI452x7l3TWnIN3Sd+AL9Oxrhg3qnfoO/CLyttnvY/TMcfjO/BlOm3se6HvfxkHzE171XHvcHtPa3Sd1vK8Vr/p8Bnko6x4fvD/RyAf9b4P8j+R/NiQb+VOztVfQP5nsW2SDTYpHtZZMgK+itVY7FoF1yQNdrjGOCr9V987X/lFPHuGHdZ3B6XvG/RWrIylngd1rfq0ntlQZsjzpYt9h8Fv0IMxSKrt7bXwsc7tVr6YSD1fJDSH+88YW/fO6Avsf/xuFFmPFav+snyRdWWerumdwlhO948mbFDnHs0h7n2a6xp6NuEw2sL+Ds013YmrrhiniA/HqdL/8D3GqRUrKvt/jxX+PrLpTMT+aWG+R7oqhj1pvtPnXPrT906XSbSu37b+qrxD1K7LYvfpMi/K9FnmHqen1a5jxaFazaOvudb3z3oWYnp8fyL9H6UFZurPiSHP0Y0b6KIN/REPYyyu1seGVZ2+W9XpVfZOVddR50Ywh3Hg2g3/jHghL9UjIfobnoHuyQDW6PqJIX9A8tf0Nsb4W8LIoB8Z9G5/Er9I/RZtb/v76pFM4o9jrJv6Toi4Ogyp+bKcZ9ndPHuWZ8VpcfUX9p9j0YkpAAA=",
  "debug_symbols": "pZZNTuNAEEbv4rUXXVX9y1VGCIVgUKQoiUwy0gjl7tPlr8rAgll4NrznhH7qOGXHH8PL9Hx7ezqcXs/vw8Ovj+F5PhyPh7en43m/ux7Op/7qxxD0D9XhgceB2gIOAAEMCBCBBGSgAKgwKoKKoCK9Qh0CRCABGShABdqCGIBekQ4GBIhAAjJQgAr0ShyHFAACGBAgAgnIQAEqgEpGJaOSUcmoZFQyKhmVjEpGJaNSUCmoFFQKKgWVgkpBpaBSUCm9ksahBoAABgSIQAJ6JXcUoAJtQQsAAQz0SumIQAJ6pXYUoC6g0A+bshobSMFIRjaKMRqTMRutR9Yj67H12HpsPbYeW4+tx9Zj67H12HpiPbGeWE+sJ9YT64n1xHpiPZ1APQ86gguzsRjtPOkYKnUOF5JRr4qgIi7RJblkl2KiI0dZJbokl+xSXKpLM9EBhJCLbqOoiEt0SS7ZpbhUl2aiY0ikIi7RRVcttxh9S1Q0GFUaXuEQXMiFXXRVUokuycU6rMMIqS7NROcRQi7sIi7RxT4X6/RR1TtgcCEXdhGX6FJdfLn4cvHl4suX+2FTiS7JJbsUl+rSTPTuyEGFXNhFXKKL3rPD/T4O/gPwdJ2nSe//X34R+u/EZTdPp+vwcLodj+Pwe3e8Lf/0ftmdFl53c3+3J6fTS2cPvh6Ok9p9/Fwdfl5KmdlW9xmWNZC+F+jnQuZogSz80/p/7iC2dQdtU6E030LXtKXQ2M8htVQ3FPoVI1boF8a2Qk5e6Hfp/y5sOQ9t/S5b3vRNiKzfpWTZUoixeiHGtqnwOQ1x2zQkWveQaNMekqx7SFI3FSKthbjlU5TkgZK37KCsl0RJYcsnCHmdhVDzlnleTwFvmiWu/gm4fV//2I92+8P87fn7rqX5sHs+Tnb4ejvtv7x7/XPxd/z5/TKf99PLbZ609PkQ3//84hRGLvSoz2L9kEIYKSQ9JD1MbaRMj3fdzF8=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
