---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1YzWrbQBAe2Vrbihts2heRLMl2Di2G5EUUJ4ZC36G69tgHKBR6KL30VmihD1evuxONP43lJN4tFDwgVqsZzc+3M7MrRdRQ5MaYTiBW8tuNiRt7gt/fXis3T0+jLAG7PvUv06JIlPg8+p8nTmcURn/K+gPhnw6dnpu60S9jYbuj7TUW95fU5Eeo+Hn9Qsb/qiNmzp3rmh7Ik91s7HB8cwBHj7bSS4iLhJ1EYBoA3zICewS2COxfUND1ziKwx/4gPnzP2MWKr1OFF8F9rNiJFTv/oy7GRmIZHRiJ2uuu2ZEyuAY9D3YS0tdz5ebpiTSldv7GEEfsIY6udQm8J5Uch6E2MW8AtiVvKHi4xiPBk7Eh9WEu47U6boRelGOakI6T5PUU/YF7Zoo1GlNTo1p99KiNl8wxA89KgdMG4pM11tUXp9S9bwbs4TO2axRfNX8mCj7yXfkeYmWJ938Dsq/daHF86+7H1Jwb4tp//Ivl3/zYxSz8wnqQ9g3IX7v5hYifRNyrZ/q5WVTZJq82VVnd3RXr6iXot9QTOGnnn0B9+ck9C/e4x/YsrWczaT2L47U63gm9KMd0xumME9MZp32ficLhZPuV735ZLfLlelasF7dlXuXzo/3Su/0yneXLWVHOirzMqqvn9Gsj3vGYN3PMDUlabmDeyNzAvEnAZ6LH5w3Ha/W/F3pRDn2V9cV+h/72/le199RzOj+zOj4IvSjHhLmnneci4BnFd+Zp3yY8H8Jc5h+fA7WzL/uiff8Z4PUVe5eKzoHn+BPS41+5eXoaFRHExOdS9GfQ4Q/58ycz4M9HN1osP1ODuyU+G0tcQ57jt1RaP74IPzDfjLCLudlX5PFbdaTIy5rGvNT208A96uF/nPY/yij+IBaDA/KsD3PgkxttrL8gfq32uv7nhNiT1+X8dl2UVXqf2ens2J48YRzqhi9z2dLQzfk/AsqzPgPyX1l2e31z91wvRrFn5X52yEUHxp0O5Vlc7z9L6rZ8v27Ls+2Luu0j88aCJ+vM0gs3l3hJXeyHAfkfbs5rMhLv8PtTxf4I7O/5rTyTuYi6+sozlrfr8531uVHG7ruudzZBv3yGvnHuhKirbUkt1tUiy66K7L7IymN19QfIzOBdWR0AAA==",
  "debug_symbols": "pZXLjuIwEEX/Jess7PKz+JUWQgFCK1IUUBpGGiH+fcq5LrpZMIv0hnONuUdOYpN7c+z3t8/dMJ3OX83m497s52Ech8/deD501+E8ybf3xpQP65sNtY0NQAQSkAFeQAawAAEOgIVgIVgIFhKLFfACZwALEOAADwQgAgkQixPwAm8ACxDgAA8EQCxekIAM8IJgAAsQ4AAPiCUIIpAAsUQBL4gGkFFqm2QACxDgAA8EIAIJyAAsGZYMS4Ylw5JhybBkWDIsGZYMC8PCsDAsDAvDwrAwLAwLw8KwWGMqZZyF1lTaSqp0lb4yVMbKVCl6LmSwbKyFtpIqXaWvDJW1T7Xvan/ZU6YE0uA0eA1ZA9dQthKC1r3Wvda91sumsraEqCFpyBq4hrK9EKyGYl5Om9PgNQQNUUPSUMz0eLSNHt/dde77cnp/nGc55Zdu7qdrs5lu49g2f7rxtvzo69JNC6/dLLNyHf10FIrwNIx9SY/2u23eV20kqm0bvXsKwqvBvjdE8lUQHb3r/3cFnp8r4FWGxLoEiWGFgUwM1UCy+X9tWLMGft5HjmtWkIKt/RTzmj7pNkrBrHkKJj6fo8lxzT30egUU3Zp+1isgfu1vZdQdhvnlbfkopnno9mNfh6fbdPgxe/170Rl9217m86E/3ua+mL5fufLxYaNrbfbb8rcqw0htTGVgy5wJrTVp+yhL+Qc=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
