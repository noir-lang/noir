---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2ZTZPSQBCGJxA+wsfCsi4XKT25egwJa/CWg7v7O+IiVV4sy/Kmh+gvl+j00PQOIJXuJbjTValkMp2nOzOdZOD11Npqeu+Tts1SvQ9Lmrdi1EVjxDMhbiQ0JpkBFhPhPc5ETHfF4YnxCBPhqXX17jO42V96H5DzUJkpS5LhNEBcbv48nM0Dcn/M+ccBYgrwZwGZP2Z+2NKc9/kmX5G4deJHr8E+N8jnBvlg9i3yud3ic4d87ohPHx3TfGDMJGp2VVPXwnMS98k4KHSfELshE3vmkXhKbdaDIvE7SrT+px6JB/nQ8YG57oNPvs6H9vn5w/uAvgbqg/ltr7YJ8rPVFvi9Rsdv9DHMmeQ7TqreC7uw5I9jFdbKlTEYjzo6B+MK49zG/qQvQH1+vhmno9s+ioNZkEeD+F/p9kDvm+gauH5oid8k8Tfytpyj4xJY/AOLf3O1vdTHXb0VNfQDrlEPn7NiS3U7LGXJB9s7jY8fRbb3Fh//rcm/KcN/B/yWDP8j8NsyfLOOCET4cQb8jkx9mnVWV4Zvxqcnwzf135eZ3wT4ZyL86B74A5n8DX8owzdrtnMZvvkGj0T4san/C5n6XMC65plaG11zXqLzfOuL6eJf15wQv0NylVpzXpJ86PjgdWXRN7bkOrT00W/42BJnbIljY/mMrAYjq8nIajGy2owszrEPKppXh5HVZWT1GFlVrdU+I4uzJs4qmteAkTVkZFW1Jjifx3NGVlXfqyNGFqzjbL/rC0v1PixpkKtvybVmyRX8bf+32dY+PeT75eunz98UMRwY4PiY/sFME5iQ6+tbuJSP2/U9/RMLq3g4oHj8fDN+qs+HJSyZ/52cP/eu+Q1ll/181I/9f+o2/kjD3i+R5zLJpss4W2bX2WIxu89GhF9YDY0T5HHiYlFy4mJR/BTFov9YCIqOKATFHomnlBOCih+Pz5GfrbbA7wodgygkLAQlTgha+28Tgl7pdpWFoBf6GAtB3+EaZV/TpLodljInBO3hOyFopzkhaA/fCUG783dC0E6LIycEOSHICUHlWU4IOozlhKDj1aoTgg5jOSHoeM+jE4IOYzkhiCS2LQEOIai2p/9UhSC9O7oQ9Bswa7WhODcAAA==",
  "debug_symbols": "zZrLaipBFEX/pcc96FPd5+WvXC7BRyc0iIqPCxfx39NKTEhohb1HmVlaqy1Za+KhztWqX5zeXobN6/ZQzf6cq/V2OT8O2824OlfN7a3Dbr65rg7H+f5YzaTp6qrfrMZX4pe6eh3WfTXT5lJPbG3jvrdx+dxcyuVvXcnk00t7J1p7/vRI+diapf327HGx2A/r9fD28vP3nKtu+nufHrUrBNMSTEcwSjBGME4wQTCJM9oQDNGBEh0o0YESHSjRgRIdKNGBEh0o0YERHRjRgREdGNGBER0Y0YERHRjRgREdGNGBEx040YETHTjRgRMdONGBEx040YETHTjRQRAdBNFBEB0E0UEQHQTRQRAdBNFBEB0E0UESHSTRQRIdJNFBEh0k0UESHSTRQRIdJNGBNA0DCQMVBmoZqGMgZSBjIGegYCCmCGGKEKYIYYoQpghhihCmCGGKEKYIYYqQySK88w/Go/mJlAZHBEcKhlxu45JxeDF5useTkPrBuOMpUWCihYkOJhQmDCYcJgImEiUUdq6wc4WdK+xcYecKO1fYucLOFXausHODnRvs3GDnBjs32LnBzg12brBzg50b7Nxh5w47d9i5w84ddu6wc4edO+zcYecOOw/YecDOA3YesPOAnQfsPGDnATsP2HnAzhN2nrDzhJ0n7Dxh5wk7T9h5ws4Tdp6w8weDh+eI4EjBkRZHOhxRHDEccRwJHMHtC25fcPuC2xfcvuD2BbcvuH3B7U8PFZ7+c/+dI4XLuPo33w/zxbq/XnW4fnjaLO83H8bl8f/u/sn9bsRuv132q9O+v96S+LogcU2iRN3GLfZxIaWrpeTnEOK2wevWvza044YYTzGe5B0=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "fn main() {\n    let _xs: Vec<Field> = Vec::new();\n    let _option: Option<Field> = Option::none();\n\n    print(\"42\\n\");\n    println(\"42\");\n}\n\nmod a {\n    // We don't want to give an error due to re-importing elements that are already in the prelude.\n    use std::collections::vec::Vec;\n    use std::option::Option;\n\n    fn main() {\n        let _xs = Vec::new();\n        let _option = Option::none();\n\n        print(\"42\\n\");\n        println(\"42\");\n    }\n}\n\nmod b {\n    fn main() {\n        let _xs = Vec::new();\n        let _option = Option::none();\n\n        print(\"42\\n\");\n        println(\"42\");\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "print_unconstrained",
    "print_unconstrained"
  ]
}
