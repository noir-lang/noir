---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/92ZbW7TQBCG14kdcCCSBX8rzuDUDgn/IuGQ70/gAKYhEn8QQhwgJ+BsHIla8tjb6aRN6neExUiRY4/7zOx6ZveN65jSnPzomgpGkD/50c+PDcvfvP0M8/OwmnV9FhfJH4S9ni+MD5h/5OdMR4cfEl9p/sNnOefzseTbY6G4z28/L6zvb0xZH1rjp+enOf7XD4yZauf9sfQZ8LPNLDnenXsM//qa+CMd/g3xP6jwoyL/sQ4/Jf5Ehf82Jv5Uh1+sbTMdfp/4cx3+gPgLHf474i91+F+Iv9LhF/211uF/Jf5Ghd8v+nerw4+Iv9PhF/37UYdf1M8nHf4+26+zvXqU86S9GriextJejeOHaceU+7+xYthjc63rQJ0QOyyesfKwfRS/zXJF62aHxaN8+PzQs6C584RcA8HHa8QT4nhCnEDwcX3wVBbXZoq6MO6Y+/NL1hFyJo1IvhbLi75za7JzrrnnVkx+H8+nIfh9o1qH0bl9QdfaRvW5FX3RZPnw+eF94Qq5BoKP94XUf64QJxB81BfSumyAc6JcAxf1ij1OqVcabA4Mm1/b7DFlvfLb4vL7yLI9kfZd93iXM8yvhxWsPwhDitfM+Z65n7sd32P3z/LzNsuf5nj4xDwP/bR7iNJD2kv3+/gmfcX4mTWseZK0g11DQO0QSTXE1zC7hnD1292fu4Z51nNR1Brdh/ZJaW2R+oj+NmC+zLiebQlxWkIciZUAWUsgawFkrYGsCZCVAFnjmua1BbJ2QNYGyKprrc6ArATIGgFZyLxWQNYUyKprTSD7cQ5kJUAWal0ljYHKi79zOvf30qXa5KV174+f377/Msy44HOMnFjzRAJXjEc/xCUhafOlGKf8VwKLC+R/93LqfAH7P7ycyowL2CovpxIgawlkLYCsNZA1AbISIGtc07y2QNYOyNoAWXWt1RmQlQBZIyALmdcKyJoCWXWtCWQ/zoGsBMhCrquofwRlxgWspDUuFbCSNqksYN1HEkAI2MYj/lMC9i/vFyO6PygAAA==",
  "debug_symbols": "pdXLbuJAEIXhd/Gahbv6Ul28ShQhAyayZBnkwEgjxLtPt88hySxAUbLhx5j6wGC3r82+317eNsN0OL4365drs52HcRzeNuNx152H41RevTZtffCuWbtV4wXxSEAikhBFMmJLQotACVAClFAUXxKRhCiSEVsSW6QoUiKIRwISkYQokhFbkooSSxwiiEcCEpGE6BItW7lEkYzYktwiDhHEIwGJCJQMJUPJUAyKQTEoBsWgGBSDYlAMikFxbcs6VljPBjayiVU2s/QcPUfP0XP0HD1Hz9Fz9Bw9R0/oCT2hJ/SEntATekJP6Ak9T8/T8/Q8PU/P0/P0PL16qmqtofVkXVrmU21gI5tYZTNraD1NlzpWWHqRXqQX6UV6kV6kl+gleoleopfoJXqJXqKX6CV6Sk/pKT2lp/SUntJTekpP6WV6mV6ml+llepleppfpZXqZntEzekbP6Bk9o2f0jJ7RM3jStqxjhfVsWP5vqdfD0uLp7bZq7svg5jz3fV0Fv6yLZbU8dXM/nZv1dBnHVfOnGy/Lm95P3bT03M1lb7tq+mlfWsDDMPb12W31Od0+Hs2es6Yfw/Hb0+U653i5Eh/Ny7N5n+9Aq+5DEPn2N5D7AZRr7tE3CE+O39z9BxD/g8//7bwG5bzm9ifH/+QXfC1b3W6Y/7vX3qo1D9127Ll5uEy7L3vPf0/3Pfd79Wk+7vr9Ze6r9HnDrov2S7KVhtdb/bR/",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "fn main() {\n    let _xs: Vec<Field> = Vec::new();\n    let _option: Option<Field> = Option::none();\n\n    print(\"42\\n\");\n    println(\"42\");\n}\n\nmod a {\n    // We don't want to give an error due to re-importing elements that are already in the prelude.\n    use std::collections::vec::Vec;\n    use std::option::Option;\n\n    fn main() {\n        let _xs = Vec::new();\n        let _option = Option::none();\n\n        print(\"42\\n\");\n        println(\"42\");\n    }\n}\n\nmod b {\n    fn main() {\n        let _xs = Vec::new();\n        let _option = Option::none();\n\n        print(\"42\\n\");\n        println(\"42\");\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
