---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2364549065372372629": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut"
      },
      "4717959987348973079": {
        "error_kind": "string",
        "string": "the original should not be mutated by copy_mut, only borrow_mut_two"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "15646392865860948187": {
        "error_kind": "string",
        "string": "the copy should have the expected content"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n        assert_eq(\n            refcount_1,\n            2,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\",\n        );\n\n        assert_eq(\n            refcount_2,\n            refcount_1 + 3,\n            \"after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
