---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _37",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6]",
    "public parameters indices : [_7]",
    "return value indices : []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) -3 ]], outputs: [_8]",
    "EXPR [ (1, _7, _8) (-3, _8) (1, _9) -1 ]",
    "EXPR [ (1, _7, _9) (-3, _9) 0 ]",
    "EXPR [ (1, _7, _9) (-2, _9) (-1, _10) 0 ]",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "EXPR [ (1, _7, _9) (-3, _9) (-1, _11) 0 ]",
    "BLACKBOX::RANGE [(_11, 32)] []",
    "EXPR [ (1, _7, _9) (-1, _9) (-1, _12) 0 ]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (-1, _13) 0 ]",
    "EXPR [ (-1, _14) 1 ]",
    "EXPR [ (-1, _15) 2 ]",
    "EXPR [ (-1, _16) 3 ]",
    "EXPR [ (-1, _17) 4 ]",
    "EXPR [ (-1, _18) 5 ]",
    "INIT (id: 1, len: 20, witnesses: [_13, _14, _15, _0, _1, _2, _3, _4, _5, _6, _16, _17, _18, _0, _1, _2, _3, _4, _5, _6])",
    "EXPR [ (10, _9, _10) (7, _9, _11) (1, _9, _12) (4, _9) (-1, _19) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _19) 0 ], value: EXPR [ (1, _20) 0 ]) ",
    "EXPR [ (-1, _9, _20) (5000, _9) (1, _20) (-1, _21) 0 ]",
    "MEM (id: 1, write EXPR [ (1, _21) 0 ] at: EXPR [ (1, _19) 0 ]) ",
    "EXPR [ (-1, _22) 6 ]",
    "EXPR [ (-1, _23) 7 ]",
    "EXPR [ (-1, _24) 8 ]",
    "EXPR [ (-1, _25) 9 ]",
    "EXPR [ (-1, _26) 10 ]",
    "EXPR [ (-1, _27) 11 ]",
    "EXPR [ (-1, _28) 12 ]",
    "EXPR [ (-1, _29) 13 ]",
    "EXPR [ (-1, _30) 14 ]",
    "EXPR [ (-1, _31) 15 ]",
    "EXPR [ (-1, _32) 16 ]",
    "EXPR [ (-1, _33) 17 ]",
    "EXPR [ (-1, _34) 18 ]",
    "EXPR [ (-1, _35) 19 ]",
    "EXPR [ (-1, _36) 20 ]",
    "MEM (id: 1, read at: EXPR [ (1, _32) 0 ], value: EXPR [ (1, _37) 0 ]) ",
    "EXPR [ (-1, _3, _9) (1, _9, _37) (1, _3) -5000 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZPdjoMgEEbfZa65sDOCP6+y2TTU0oaEoKHaZGP67jsy2u1usknjzXwCngMizHB2p+l69PHS36D9mOGUfAj+egx9Z0ffR+6dHwq25nFMznEXvIwzNdjk4ghtnEJQcLdhyi/dBhtzjjbxaKHAxTMnCy8+uOXpoX7o4n+01GaFS109cf02r6lZeV3qPbypN76iPXy9fbyud81fP9fflHv4Zlu/KXAHb0y18tUf/pNbtvPp14mBA7SoAHOlXEtoSYHO1fBvVFDlWrNGQZProeCZOA4SKEESpYSWMBKVRC3R5ECxoFhQLCgWFAuKBcWCYkGxoFhILCQWEguJhcRCYiGxEFuWo3m3ydtTcOvNuUyxe7lI49ewjWxXbUh9585TcssW5jHe1G8=",
  "file_map": {
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\n// 7 values\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\n// 10 values\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 1],\n}\n\nfn main(mut x: [Foo; 1], y: pub u32) {\n    // if y == 3 {\n    //     x[y - 3].b[y - 1] = 5000;\n    // }\n    // assert(x[y - 3].b[y - 1] == 5000);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 3].b[y - 1] = 5000;\n    }\n\n    // println(foo_parents[1].foos[0].b[2]);\n    assert(foo_parents[1].foos[0].b[2] == 5000);\n}\n\n// fn main(mut x: [Foo; 1], y: pub Field) {\n//     let mut foo_parents = [0; 20];\n//     foo_parents = [\n//         0, 1, 2, x[0].a, x[0].b[0], x[0].b[1], x[0].b[2], x[0].bar.inner[0], x[0].bar.inner[1], x[0].bar.inner[2],\n//         3, 4, 5, x[0].a, x[0].b[0], x[0].b[1], x[0].b[2], x[0].bar.inner[0], x[0].bar.inner[1], x[0].bar.inner[2]\n//     ];\n\n//     let index_foo_parent = ((y - 2) * 10);\n//     // Add 3 to skip `array` in FooParent\n//     let index_foos = index_foo_parent + 3;\n//     // Add 1 to skip `a` in Foo.\n//     let index_foo_b = index_foos + 3;\n//     if y == 3 {\n//         foo_parents[index_foo_b] = 5000;\n//     } else {\n//         foo_parents[index_foo_b] = 1000;\n//     }\n//     assert(foo_parents[16] == 5000);\n// }\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
