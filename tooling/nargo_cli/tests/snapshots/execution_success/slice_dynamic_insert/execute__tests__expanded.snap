---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(x: u32, array: [Field; 5]) {
    insert(x, array);
    insert_dynamic_array(x, array);
}

fn insert(x: u32, array: [Field; 5]) {
    let mut slice: [Field] = array.as_slice();
    assert(x == 5_u32);
    slice = slice.insert(x - 2_u32, 10_Field);
    assert(slice.len() == 6_u32);
    let expected: [Field] = &[1_Field, 2_Field, 3_Field, 10_Field, 4_Field, 5_Field];
    for i in 0_u32..6_u32 {
        assert(slice[i] == expected[i]);
    }
}

fn insert_dynamic_array(x: u32, array: [Field; 5]) {
    let mut value_to_insert: [Field; 5] = array;
    {
        let i_4435: u32 = x - 1_u32;
        value_to_insert[i_4435] = 10_Field;
    };
    let mut slice: [[Field; 5]] = &[array, array, array];
    slice = slice.insert(x - 3_u32, value_to_insert);
    assert(slice.len() == 4_u32);
    let expected: [[Field; 5]] = &[
        [1_Field, 2_Field, 3_Field, 4_Field, 5_Field],
        [1_Field, 2_Field, 3_Field, 4_Field, 5_Field],
        [1_Field, 2_Field, 3_Field, 4_Field, 10_Field],
        [1_Field, 2_Field, 3_Field, 4_Field, 5_Field],
    ];
    for i in 0_u32..3_u32 {
        for j in 0_u32..5_u32 {
            assert(slice[i][j] == expected[i][j]);
        }
    }
}
