---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
