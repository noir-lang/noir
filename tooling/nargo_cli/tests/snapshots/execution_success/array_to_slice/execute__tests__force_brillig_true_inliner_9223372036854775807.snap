---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZnRbts4EEX/xc95EMkZDtlfWRRFmrpFgCAJ3GSBRZF/Xw5Hx/Y+2MjKL7lHcXhCixxpZP/Z/dh/f//17fH558vv3Ze//uy+Hx6fnh5/fXt6ebh/e3x5Hr/9s1v8R9Ldl3S3SzXCIlpEn5GXiBSRI0qERIQlhyWHJYclh6WEpYSlDEseUSIkQiNqhEW0iD5DlogUMSxlRImQCI2oERYxLDKiz9AlIkXkiBIhERpRI4ZFR7SIPqMuESkiRwxLHSERGlEjLKJF9Bm2RKSIHBEWC4sNSxtRIyyiRfQZbYlIETliWPoIidCIGmERLaLP6EuEr9EyMq9Z1pQ1dc26pq3Z1uyRaVmABGSgAAIoUAEDGoA5YU5uzg4ZKIAAClTAgAb0FeZun4A5Y86YM+aMee784mBAA/oKswImJCADBWC4b/QkDgnwP64OBRBAgQoY0IC+gm/+ZA4JyEABBFCgAga4uTn0FbwgAhLg5u5QAAEUqIABDegreJFkX24vk4AMFACPl0SeVzGfjzokIAMFEECBChjQgL5Cx9wxe61k3wleLAECKFABAxrQA7KXTEACMlAAARSogAENwOwlk4tDAtwsDgUQQIEKGNCAvoKXTEACMGfMXjJZHRRwc3UwoAF9BS+ZgARkoAACKIC5YJ43EXPoK8wbyQQ3N4cMFEAABSpgQAP6Cl5fAZgVs9dX7g4CKOC3q8XBgAb0Fby+ii+l11dABgoggAIVMKABfQXDbJgNs2E2zIbZMBtmw2yYvQaLbzavwQA3+5bwGgwQQIEKGNAAN/v+8RoMSEAGCiCAAhUwoAGruSwLkIAMFEAABSpgQAPcXL35WYAEZKAAbjYHBSpgQAP6Cl6DAW7uDhkogAAKVMCABvQVvAYDMBfMBXPBXDAXzAVzwew1KIt3fQuQgAwUQAAFMAtmwSzMWZmzMmdlzsqclTkrc57Nnv8Lr8GABjDnypwrc67MuWKumCvmypwrc67MuTJnY87GnI05G2fDOBvG2TDmbMzZmLMxZ69B8abbazAgA26eXbYAbi4OFTCgAW4Wb8oXIAFu9j3vNRgggJt9h3sNBhjQADeb9/kLkAA3N4cCCODm7lABA9oKs2OcsLYQkjJQAAGGUCdUwIAG+FPAfAhZot+QefubkAGNdk7oD4X+UOgPhf5Q6A+F/lDoD4X+ULzQAjAXzLSO4oXmHaN4oU2gmRSaSZnN5IQCCKBABdwsHx93O54fv70d9nt/fDx7oByPma/3h/3z2+7L8/vT093u7/un9/lHv1/vn2e+3R/Gq+Pk7Z9/jBzCn49Pe6ePu9Po5fJQ8bM6B49zfByunx9v/HOxtGG8+k6c41U3jfdbWIwX2TK+KuO3zb8dx/d60/ia+qXxdnn86BBZgNEjnjaAfnYC5s3SHG+1bHgDZiygtbZlfGcBW7q4ACldFownPN5BGpfPTYp8Mmybg7II4ynsppN47STore/gimA8lhT2UTqvhG2G863wecOn9vJ1g+jRoHmToZwM52v52aVs/ngUSylbLqjn4+228bZsGd+ox77obePzlutB954pxm+6Hp2Nb1suyOMjtmMtLzndath0UxqfuLGI44O1i7eFcu2KJHZUSLdNCk0U9MBts9BFT4plm6IcL22qG9+IyVGx8XSe+oR0pVG4ruhHRV0ubovSrihqOp6Lmk8Kqf9DIcd9UetyUXHtjdR8UuRtK1JzPinazYoi2xR6UmjZpvDHJRRyu2Lb7qzH/mHgxtNp5aToNyuabOpCxqd2p7uv3NwBXLp/a7rWi5VjQ1vPx38dB/cPj4f/fOf34aLD4/33p/16+PP9+eHs1bd/XnmF7wxfDy8P+x/vh72bTl8cjh9/Sc130srX8eGZH40rhuZlHBU/GndW6TKOZBzpeHBTq1/9Oxx/cXSgouqHaR7Wcdi+fvi0/wU=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
