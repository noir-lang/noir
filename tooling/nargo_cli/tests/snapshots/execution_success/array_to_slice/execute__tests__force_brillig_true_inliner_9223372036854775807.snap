---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91bv48jSRWutrtttz0ee2Z3Z3YzBBKxZ+z5kTEB9weQkJyE5J29TZDIICLohIQAiQgJIQguAekkAkSCSEAgQcQFiJgMcTkiIOF6rp7n689f1/Ssqzy6K8nq7qrX733vR7360eXMfVYy/6tL7q89t12M5sZfF7uVs4i8FilxZolwboDifebaDf9l75XSNZ1Ut/cjKlwKTLH4Xy9Wl6XQLyL+ZQk8E/A/N/55Gv6Loefz9arJ35HcqWt2XnzH2rAjv+fbRr7d7g/9fUn8UvgdMcW22zOB32RNvK4fZk1dc7BPJBxnxruIz3sTe4P4vDf9Zhif98LicQS8zU8mt0wTFxcqt/apDuWPCWvs/JqRPMPD9rHYNduNBda5aBvAPbahnLGQo3gVEXnlEXlZjM7cduyYDUvxXsx8Y3pMPL9c6IHYekSP93UpqO6r/lrr86vs/p222CkDthsJPFPxXtZyNTlc1yMMqBuPI+aPA6q/8c+L3crKZNrYVrTgMvmG55D0ioTnrCA8NvurffERjUNGE03+8oNr49mv7vXDvlGXvErii4tazq+9jhZnM9CxALn1bw5tfUGPc4b6dyTo50Bj/p4TPdra2jB3oEx8Llz73KIU8uty46+LHQvrnAt8KL8g+q8RzmN4J2Y+PCb9UZayUUzZiXVbdo07k69i/jG5FWWN3bavU8xHlG6qD6o+hTZo43X0SF6laEvh01DuQfkzoetsP1g3OcDiKxd2RWw9t90fjkHPguq+4a9qrqHsg3XsS5WTpuK9x/QHJQf9wGvYRHlgs7Z7lob/Jo89T8N/OQWejnSp1w3vQz3OY3Euhe8+h3ak/3l2z/Nbvm5GNGrMsrbXrunPVOOGGrPm+5G9Mv4v0vDvPGaZfF5nsl3wary4jcesRGuv4JgVWkN+kccstLXJnwawKj0GEW1SROSVR+TFewdPOZ5b3+s6nmOusPu6FFT3fX/9vI7nz0jOi4hy0Iam28xt68r7SCfQliIWTj0/jIUTgbVH9Hhfl4LqfuivKhZmZDuuC+0jGd1Dc4ofOS2zbU5xQHoY/Q9gTvFjXzcTuObUhj59QViMFm2O+1Mj0hFzzK5xGBqLcF5kuJ4LXAXR/9RfcY/pIf/8jGSPhOyQf4z+e+CfX/i6mXj/iN63tg/9tXTbPk095xsF8JaEK9GcZsX277vwnCbx/HQZyhFqDr/rfjLKGhOvyLqdhXQL7aNjLkEbvEsuVbye0qdo67Z8hPR9oZvac55TWw5tM2orqm2b1P3hzzRujR/Ab7lS9Wde3+Aal2mn1Ga0v/fX0m37MnWuQlldbHEQyRZFiy3+SLaY7tEWU5Kd6MzHRUby2mzdJ1uPBVZ+LgRtTm1G+1fS9yniLvE4eNk1R43J1lOB1dF7haAdUpvRfrwffaWteTxINA6uEvfZZdccZfKn5BO2C16NV5vtxsQr1RxC6Yb4Q+cY0AZtvLqeidjTPHXj0zKgN8p/7PmVLKJNYp45iXkWxvbZZgKn2bAUclPsOxgWXAMXwoY9osd75+7zp9V94q9q3yEXtssDthsKPAnP8K2VfhybeA7zTo/qvm0Iun+c3dMhj7rkVVOXp+izKnd2zdt8zkLFeMIzixcJzyxepvbJvsbeifChmpfGWL+brH2t35VuofU7ngPjWFe8Jo/kVYq2p5hPmfxpAKvSoxfRJoOIvPibTWjek8j2m/Fys48h9EBsPbfdv3ENyGuRme9Iarx87FxDrZPantHnA5IxaKHDsUOdt8T3nrfoewL64l71nfzq/n3TRY2laM/cv/OUe2jo6y57aLh+N5up72G81kX78h5Iopy74FjE+C+FHj233Vcx9njf4yuB+B8I22Edx/9U4An1JaTnvcOBwB/idSBwqbj2KqY+i3tW2/MT6jfqLK76pjvwbSomeQ2D8wDeK0IbpohJ9R2P/V6XntAD9eXvaatATGbwXl/Uhfb7M7pXuQFjkvdwM4E/xEuNFSom0W91yaEtdUzit1WOSTy7yDF5TPq32ekIdOO+nCImzZZt/wvhmMT4aPRPqnsvYkweCTyZ6za+8V636v8ZvYe81JkTFZPot7rkVRPDja9f7FYenSdjxCTnyVTnHDOyJcbkXGDtue34aPRPqvvmnvJkBvKNF57F5W8qRv8+4PuI8IXOvdf3PB9QOYWf1f9F+JuO0a490VP+PyNkXzwP02bfN8K+Kf9P/Gm5ygifc9p/3P9wrxXfZf2Zttei+7dJ30T/b5P+OyDsyn+h79lG/539++86I3zOdfMfr0OdoC0E7bBF9++Svom+IUv/mayJ02fZeM6S6AziZk2L5yzVnOWEbH0i6Pk8u3P6rO0J6XaaWDeFFePslHQ7FfRsf9TtheDFuhbCDm1nEjF2R4JXl3OEI6EDxjf/X60vZKozgmrMVP9dD9mez1bXRZ3ZPKE2pe/MbfuH7XoawICY1RwUY7UuedXEfuPrF7sVOQd9CRiLqtn2Ctp4DvoK9A+dc34Juim/3MTRbcGx0Hbmnc85o08xjgqq+wmMYbuec34p8Kg9kFNqw5hDHm0YuvZFexfPU4f+TxXaQ8zo+V3wjAGP/WcsZd+4uv4sfu6wev6Fa47/juQXRP9LzwDtYNd8B5xvr9Znb5frt+uL9Zs3q9s1j/N1sfiaJJC/vlpe356vbq9eXyzXy8u9y7+9uHx9u7pYLz44qx/PH5K/ieXqvh1zbV2G/tlyBNPjXBzpf+MZ1HH5W8ijd7RCXk33pwBd1nK94yHq8qpZV1bb9P1qm95kj6ttjNY2gbaC5Bz4Z7QX8jIcBdH/wTMwn4zgHXt/LuSPSH4Dt6jD+QDz6os6o6/98zvqt6h77G/KdzKJP9YxNoudiduOXdQNfY5jeF3Q5uxzjJ8ccNXF7Is+R16GoyD6v5HPUTd7fy7ko11YlpLPPld9oRT0tV3/Anbd/F8I3ycshg1tUQjeBdH/HfLFPygP5EJeTfdvT7f5LglYIsbjedd4MvkzQW/3ibEuQ1iHAquy8WNz7bBq1j2Ua4cku2uuzUnOu+baf30Ocu0/KdfmIDtmrsV+hH28ET8gu02PvtBD2XfSgdckwKsM8Bp35BWSjVhz4m/xM2jhXxL91D9jfA4FHo7P/0AuHPSaNMbzv0Dzvw7zK8N0iG2CHtdfTG+61jILT2j5bAZyUuQzhRtjweTHmDuarH3Nc2L4JMTrsCMvsyf6t74/3o+vz1mHntP9zORvzq6nwbOJvVkVtqnJjxF7Jmtfsad0C8Ue0nPsKV6zjrzMnirepmlssOS87lpsgPLxGfO6Wldwzv5Sr8lH2QvHMJ6jzaFtTG1H0HZAeI+rbbzIa0Z4jwmvjb0q5udC/iHJR1lKPo/LR4L+SNDXsfKKbDoQ76J/zab1XOf/wGURhnldAAA=",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
