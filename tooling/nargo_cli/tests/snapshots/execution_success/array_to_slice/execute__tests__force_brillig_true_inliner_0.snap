---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
