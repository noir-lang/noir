---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
