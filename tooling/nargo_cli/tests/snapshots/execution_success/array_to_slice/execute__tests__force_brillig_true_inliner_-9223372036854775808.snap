---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "nd3bbhRJFoXhd/G1LzJixz5Ev0prhICmW5YsaAE90gjx7lMGquxxnuZfN8iF/dmuXLvysCoz/e3ujw/v/vnrzcPHPz99ufvt9293j5/ev/368Onj5dG37/d37z4/PD4+/PXm5X/fLU//WP/x9V/+fvvx6eGXr28/f737zVrc3334+MfTR3nxfz48frj7zZfv/7q/M8NiYOFYBBaJRWExN8WYV3H5sv8VY8GiYdGxMCwGFo5FYJFYbGeeN1ErManwBYuGRcfCsBhYOBaBRWKBM/fNzEdvv8To/ZWIBYuGRcfCsBhYOBaBRWJRWODME2eeOPPEmed25rlcRbbXYmDhWAQWiUVhMamoBYvNzH3kL+G+Eh0Lw2JgsZm527iKMV6LwCKxKCwmFXPBomHRsdjOPPwqVpM4BxaORWCRWBQWk4q2LJw0TjonxsngxDkJTrazrxuZsSLFycSkLZw0TjonxsngxDkJTnj6jaffNtOPpf8i0eZr0hdOGiedE+NkcOKcBCcn6W+R4mRiYgsnjZPOiXEyOHFOghOevvH0jac/ePqDpz94+oOnP3j6g6c/ePqDp79d3IXZlax2kNt2c3dItqu7Y9I46ZwYJ4MT5yQ4SU54+s7TD55+8PS3a7zwa4UQkStinAxOnJPgJDkpTiYmeZb+BmmcdE6Mk8GJcxKcJCfFycSkePrF0y+efvH0i6dfPP3i6RdPv3j6xdOfPP3tji/q2szH7CvSOTFOBifOSXCSnBQnk5K+3fUdk8ZJ58Q4GZw4J8HJdvqzfpFsviLFycRku+s7Jo2TzolxMjg5SX+LBCfJSXEyMekLJ42TzolxMjjh6Xeefufpd55+5+kbT994+sbTN56+8fSNp7/d9WW/nkyTY1mR5KQ4mZhsd33HpHHSOTFOBifOCU9/8PQHT3/w9J2n7zx95+k7T3+768txPZU1w1bEOQlOkpPiZGKy3fUdk8bJWfobxDgZnDgnwUlyUpxMTHLhpHHC00+efvL0k6efPP3k6SdPP3n6xdMvnn7x9Le7vszrWXlZtSKDE+ckOElOipOJyXbXd0waJ50Tnv7k6U+e/uTpT57+5OlPnL4tCyeNk87JdvrzegZotbYigxPnJDhJToqTicl213dMTtLfIp0T42Rw4pwEJ8lJcTIx6QsnPP3O0+88/c7T7zz9ztPvPP3O0+88fePpG09/u+urfj1IrNFXxDgZnDgnwUlyUpxMTLa7vmPSOOHpD57+4OkPnv7g6Q+e/uDpD56+n6a/vmS9cXKWfi4rYpwMTpyT4CQ5KU4mJrFw0jjh6QdPf7vrq7ruwc7FV8Q5iRPSV8cv213fMSlOJibbXd8xaZx0ToyTwYlzwtNPnv521zfH9ZqRuerHbLvrOyTbXd8LUrEijZPOiXEyOHFOgpPkpDiZmEye/uTpb3d9bVmuZxu3pa8OFLbbvjM0FOSnaHWWum13fmcoFVQKmttoXi8hac3W9+JZFNQU1BVkChoKcgVtT0SzuKGcK5QKKgVNAW33gWeoKagLaPtIp92uYmjxes9tbB/pHJPGSefEOBmcOCfBSXJSnPD0g6e/faTTbm9TNmsr0jkxTgYnzklwkpwUJskXcvKFnHwhJ1/IyRdy8oWcwkKemGwfUPQW12tFent5o4ufpgmmC8YEMwTjggnBpGDq1Lx88/WnmdzMRTBNMNtz0Nt1nd57X14bE8wQjAsmBJOCKcFMbHzpgtlZbuY383JD/dOk8HNKMMIy2N6N7n08Px/vr00TTBeMCWYIxgUTgtmZA4/n2RmvTQlmctMXwfwfc/DytXC/+trM6+ozX3YzP79756+0boIZgsH7K97x/opvv+19TBonnRPjZHDinAQnyQk+IHTDB4Q+Fk4aJ50T42Rw4pwEJ8kJT5+XQc7LIOdlkPMyyHkZ5LwMcl4GOS+DnJdBzssg52WQ8wLFeYHivEBxXqA4L1A8+LYy+bYy+baSNzvOmx3nzY7zZseTv16Sv16Sv16Sv16Kry2Lry2Lry2Lry2Lry2Lry2Lp188/eLpF09/8vQnT3/y9CdPf/L0J09/8vQnT3/y9CdOPxa8tozFOQlOkpPiBG8roy2cNE46J8YJT7/x9BtPv/H0G369ROOvl75w0jjpnBgngxPnJDhJTnj6nadvPH3j6RtP33j6xtM3nr7x9I2nzzul4J1S8E4peKcUvFMK3inFTg/z/Mehms1lhaaAdrqYE9QU1BVkChoKcgWFglJBykS4MhGhTEQoExHKRIQyEaFMRCgTwXun4L1T8N4peO8UvHcK3jsF752C907Bz/UJ3tUE72qi+NMv/vSLH0oUP5QovpCLD3/x4S8+/JMP/+TDP3n6k6c/efq8eAlevAQvXoIXL8GLl1wWThonnRPjBB9K5M6hd/fr5Sat5+trmnLn4PsENQV1BZmChoJcQaGgVFApSJkIUybClIkwZSJMmQhTJsKUiTBlIkyZCFMmwva2qe22VVleXzqSY1FQU1BXkCloKMgVFApKBZWClIlwZSJcmQhXJsKViXBlIlyZCFcmYq+A6HlDFitUCpoC2isgjlFTUFeQKWgoyBUUClImYqeEMK8b8tXs7dQQx2iniDhBOxPh44ZiWaGuIDtHq13snRNhTpArKBS0MxFlN1RjhUpBU0B1XlLW6jlVU5BQUmaZgoaCXEHbOY28XfU7Zq7QFNBOi3KCmoK6gkxBQ0GuoFBQKkiZiClMRC2LgpqCuoJMQUNBrqBQUCpop2drt9Wyr/4cau2csHOMdk7ZOUFNQV1BpqC9zs2f0bJCrqBQUCqoFDQFtHsazyHamQi7bQndV1O+dyrPMTIFDQW5gkJBqaBS0BTQ3qk9x0iZCFMmwpSJMGUiTJkIUybClIkwZSL2TvbJ2wGKr25CU3un+xyjpqCuIFPQzkTE83ov2wq5gkJBqaBS0BTQ3mVlx2hnIp7vORXLWKGuIFPQUJArKBSUCioFTQHt3XfoGCkTsdMkxu2eqZcPV+u9nSbxBA0F+Q7qz6hWKBSUp8jWS68UNAW00ySeoO2JiOe3x8JthbqCTEE7EzHqGa2fkysoztFqo7bTJJ6gUtAU0E6TGLe76V8+XE35TpN4grqCdibidnOJy4fr5zQU5AqKU7Qqb2vnnK8TVAqaHM1RClJ+ki8KagrqCjIF7cxem89bjWc04idyBYWCUkGloCmgnT2WE9QUpOS0t3UfzzsfL94eu6IS0N7m8/DX29t8HiNlQaQysKkMbCoDm8rApjKwpQxsKQNbykSUMhGlTEQpE1HKRJQyEaW8CPc2n4do5y2/E9QU1BVkChoKcgWFgvBq+fvl0b/ffn54++7xw5eLefrkPx/ff3349PHXw6//+fv6mXefHx4fH/568/fnT+8//PHP5w9vHj+9f/rc3fLrn9/H5fBzjLz8Mk+Z/LhLelu6Xx4/Le5c8j7b02eflmPNdj9HXB79eOdntHE/2nx62H58p+V+9H75DS+/5X8B",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
