---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
