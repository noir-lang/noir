---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
