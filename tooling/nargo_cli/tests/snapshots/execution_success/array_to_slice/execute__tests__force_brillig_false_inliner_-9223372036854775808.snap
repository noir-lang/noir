---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1cyXLbMAylKGdx0ixNnKVb6rbp3syIlhf5lkt/ore4sS/9zfa/ajSEw9JKDtVDJxgTMx4qkgM94gHkk2gpMzd2Mf989dst31qzbJlvL31bNDOH8DW7se81cJv6drwRxoK3cw5IHrTdCEAuGLCyGPb701Fv6kp3VfTGk2pQ9AeTYeUqN6gG172qLKdVvxqNJ+NRMXb9cupmg3Fv5n3Z5r5K76vIhYiME64pTovjopDE2cLhLCVxruFw9iRxrhtsDUrh3MDhLHjsaQUt8UWx2DDLhu7LJqov87PUTUZGgNOHOMGxSWHcNECMLQ8wM8tmBYPbNFkzYBDCvrclO98GB6AdAEf5Fa5csapAjsRSGLeQGLUSta4A43YiqnBrCjA+SkQVrqUA4w4SI1/Bs1KmcZVKlrJhx++zpl7UwEAIBUrDPLYrgFEc6L8Ko+mfmxxurDWhNMy3e0ZJQu2hEmpuWhNKgy7YN0oSah+QUOGlm8aE0qBfHhslCYUESjqLkqoV4KXpZC3axyZxz4R9NS2OAxyuK2vql9uQ/ZbIDaAvsUI7QGL8n2ujiDuSXhlcG3xy1a6NHvq2wwHhKyva0Y0AoNdGw4A1XRs9NLiRoiNEJHq95tDgq1kC5xEO50AS5zEO5zD39ZIHWCkOx2bZ0LMmoK4WMTkBcmeDeISG6vddeVE0M8jAziaF8QSJUZiolb51doomSlCHrjRRTxJROu4dPk1E6bgn9ywRpeNe13MkRhIS/Es2MhpXqWQpG+hEp2bZ0Mr+Ba5D/fh+GDjxxFQsMAZ6xJFGFathzj1DEyVYUSutYl8monRUVDcRpUPFvkpE6VCxrxNROlTfGyRGUnz80AwZTYDd+YfKljKCTnbmj1lze1kiQKqYlAcuqOhRiBqlvIb57BxNlGBFrbSUf5uI0iHl3yWidAx97xNROqT8h0SUDin/MRGlQ55/QmIkaR6+pICUCk2CNL5S6VJW0AnP/XFrbq/PBIgVu+4C/kBMj5wXJGql5fxnAYziQBs+8jTSmlAa5t4vRiihbAT0Ab26A9pprcmpQW9cGCWj3YWBjXaT8BH1rAZzuM8G2/li3/7ut58/fgWHFg9lxMf4/zd9y6+G2QrOhXjpm7ce+9+W8V/UvfBqK9jejo5x/+sWabI7/rZRe993s3v87tQcY5/8hE2Il/vRjtqjwC8wlo79d2T813J1FGx3on6G8b4EYWB/XDt1F442OsbfjWsmw+NzMZa85lxsfz2V5Y3j+RsPlCfMAlQAAA==",
  "debug_symbols": "zZndisIwEIXfpdde5GdmkvgqyyJVqxRKlaoLi/juW8VWTQolkCxz1zTz5Rwy6blIr8W2Wl/2q7rdHU7F8utaNIdNea4PbT+6FuLx6nQs2/vodC67c7FEMIuiarf9E8rbotjVTdU/i9v3opCxgIoFdCwAk4CGAQDwAIwFKBYwsYCNBVwsIEU0Md1rwoEwweFQ0cRkt62iJ2FB+QREExhNUDRhogk7RxifcDOEEf63N9lza4eeO4E+IWcIZX1isucO1ECQ9gk9Q1jyicmeSyHEE5FCBbmDs0xw4tVk36XUwxZLadw7swiLUQynXaIMGmJyC9jcAi6BgIFR4LP4Hv8it4DMLaByC+gEAvRqcpDKGnILYG4Byi1gcguk+JLdKEACZopJurFYvYqBHm7cf7uBcWUi4bkBwcqNZOVGsXKjWbkBVm6QlRvilDdgWO2NZeWGVRYjqyxGVlmMrLIYWWUxAqe8QVZZjMTKDassRlZZjKyymFhlMbHKYmKVxZQgi0mpV6D513IEaQV0cCeeIDEJ7CiAgQAlFvCvUShBrpHRo0BwT0M2rYD93KJ+sO7qpqn3q/d/Ov3rn7Kry3VTPYe7S7t5mz3/HoeZgT92h021vXTVfaXHXL/8Hw==",
  "file_map": {
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
