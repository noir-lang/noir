---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "1998584279744703196": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14990209321349310352": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "15764276373176857197": {
        "error_kind": "string",
        "string": "Stack too deep"
      },
      "16431471497789672479": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _256",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159, _160, _161, _162, _163, _164, _165, _166, _167, _168, _169, _170, _171, _172, _173, _174, _175, _176, _177, _178, _179, _180, _181, _182, _183, _184, _185, _186, _187, _188, _189, _190, _191, _192, _193, _194, _195, _196, _197, _198, _199, _200, _201, _202, _203, _204, _205, _206, _207, _208, _209, _210, _211, _212, _213, _214, _215, _216, _217, _218, _219, _220, _221, _222, _223, _224, _225, _226, _227, _228, _229, _230, _231, _232, _233, _234, _235, _236, _237, _238, _239, _240, _241, _242, _243, _244, _245, _246, _247, _248, _249, _250, _251, _252, _253, _254, _255]",
    "public parameters indices : []",
    "return value indices : [_256]",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ], EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ], EXPR [ (1, _19) 0 ], EXPR [ (1, _20) 0 ], EXPR [ (1, _21) 0 ], EXPR [ (1, _22) 0 ], EXPR [ (1, _23) 0 ], EXPR [ (1, _24) 0 ], EXPR [ (1, _25) 0 ], EXPR [ (1, _26) 0 ], EXPR [ (1, _27) 0 ], EXPR [ (1, _28) 0 ], EXPR [ (1, _29) 0 ], EXPR [ (1, _30) 0 ], EXPR [ (1, _31) 0 ], EXPR [ (1, _32) 0 ], EXPR [ (1, _33) 0 ], EXPR [ (1, _34) 0 ], EXPR [ (1, _35) 0 ], EXPR [ (1, _36) 0 ], EXPR [ (1, _37) 0 ], EXPR [ (1, _38) 0 ], EXPR [ (1, _39) 0 ], EXPR [ (1, _40) 0 ], EXPR [ (1, _41) 0 ], EXPR [ (1, _42) 0 ], EXPR [ (1, _43) 0 ], EXPR [ (1, _44) 0 ], EXPR [ (1, _45) 0 ], EXPR [ (1, _46) 0 ], EXPR [ (1, _47) 0 ], EXPR [ (1, _48) 0 ], EXPR [ (1, _49) 0 ], EXPR [ (1, _50) 0 ], EXPR [ (1, _51) 0 ], EXPR [ (1, _52) 0 ], EXPR [ (1, _53) 0 ], EXPR [ (1, _54) 0 ], EXPR [ (1, _55) 0 ], EXPR [ (1, _56) 0 ], EXPR [ (1, _57) 0 ], EXPR [ (1, _58) 0 ], EXPR [ (1, _59) 0 ], EXPR [ (1, _60) 0 ], EXPR [ (1, _61) 0 ], EXPR [ (1, _62) 0 ], EXPR [ (1, _63) 0 ], EXPR [ (1, _64) 0 ], EXPR [ (1, _65) 0 ], EXPR [ (1, _66) 0 ], EXPR [ (1, _67) 0 ], EXPR [ (1, _68) 0 ], EXPR [ (1, _69) 0 ], EXPR [ (1, _70) 0 ], EXPR [ (1, _71) 0 ], EXPR [ (1, _72) 0 ], EXPR [ (1, _73) 0 ], EXPR [ (1, _74) 0 ], EXPR [ (1, _75) 0 ], EXPR [ (1, _76) 0 ], EXPR [ (1, _77) 0 ], EXPR [ (1, _78) 0 ], EXPR [ (1, _79) 0 ], EXPR [ (1, _80) 0 ], EXPR [ (1, _81) 0 ], EXPR [ (1, _82) 0 ], EXPR [ (1, _83) 0 ], EXPR [ (1, _84) 0 ], EXPR [ (1, _85) 0 ], EXPR [ (1, _86) 0 ], EXPR [ (1, _87) 0 ], EXPR [ (1, _88) 0 ], EXPR [ (1, _89) 0 ], EXPR [ (1, _90) 0 ], EXPR [ (1, _91) 0 ], EXPR [ (1, _92) 0 ], EXPR [ (1, _93) 0 ], EXPR [ (1, _94) 0 ], EXPR [ (1, _95) 0 ], EXPR [ (1, _96) 0 ], EXPR [ (1, _97) 0 ], EXPR [ (1, _98) 0 ], EXPR [ (1, _99) 0 ], EXPR [ (1, _100) 0 ], EXPR [ (1, _101) 0 ], EXPR [ (1, _102) 0 ], EXPR [ (1, _103) 0 ], EXPR [ (1, _104) 0 ], EXPR [ (1, _105) 0 ], EXPR [ (1, _106) 0 ], EXPR [ (1, _107) 0 ], EXPR [ (1, _108) 0 ], EXPR [ (1, _109) 0 ], EXPR [ (1, _110) 0 ], EXPR [ (1, _111) 0 ], EXPR [ (1, _112) 0 ], EXPR [ (1, _113) 0 ], EXPR [ (1, _114) 0 ], EXPR [ (1, _115) 0 ], EXPR [ (1, _116) 0 ], EXPR [ (1, _117) 0 ], EXPR [ (1, _118) 0 ], EXPR [ (1, _119) 0 ], EXPR [ (1, _120) 0 ], EXPR [ (1, _121) 0 ], EXPR [ (1, _122) 0 ], EXPR [ (1, _123) 0 ], EXPR [ (1, _124) 0 ], EXPR [ (1, _125) 0 ], EXPR [ (1, _126) 0 ], EXPR [ (1, _127) 0 ], EXPR [ (1, _128) 0 ], EXPR [ (1, _129) 0 ], EXPR [ (1, _130) 0 ], EXPR [ (1, _131) 0 ], EXPR [ (1, _132) 0 ], EXPR [ (1, _133) 0 ], EXPR [ (1, _134) 0 ], EXPR [ (1, _135) 0 ], EXPR [ (1, _136) 0 ], EXPR [ (1, _137) 0 ], EXPR [ (1, _138) 0 ], EXPR [ (1, _139) 0 ], EXPR [ (1, _140) 0 ], EXPR [ (1, _141) 0 ], EXPR [ (1, _142) 0 ], EXPR [ (1, _143) 0 ], EXPR [ (1, _144) 0 ], EXPR [ (1, _145) 0 ], EXPR [ (1, _146) 0 ], EXPR [ (1, _147) 0 ], EXPR [ (1, _148) 0 ], EXPR [ (1, _149) 0 ], EXPR [ (1, _150) 0 ], EXPR [ (1, _151) 0 ], EXPR [ (1, _152) 0 ], EXPR [ (1, _153) 0 ], EXPR [ (1, _154) 0 ], EXPR [ (1, _155) 0 ], EXPR [ (1, _156) 0 ], EXPR [ (1, _157) 0 ], EXPR [ (1, _158) 0 ], EXPR [ (1, _159) 0 ], EXPR [ (1, _160) 0 ], EXPR [ (1, _161) 0 ], EXPR [ (1, _162) 0 ], EXPR [ (1, _163) 0 ], EXPR [ (1, _164) 0 ], EXPR [ (1, _165) 0 ], EXPR [ (1, _166) 0 ], EXPR [ (1, _167) 0 ], EXPR [ (1, _168) 0 ], EXPR [ (1, _169) 0 ], EXPR [ (1, _170) 0 ], EXPR [ (1, _171) 0 ], EXPR [ (1, _172) 0 ], EXPR [ (1, _173) 0 ], EXPR [ (1, _174) 0 ], EXPR [ (1, _175) 0 ], EXPR [ (1, _176) 0 ], EXPR [ (1, _177) 0 ], EXPR [ (1, _178) 0 ], EXPR [ (1, _179) 0 ], EXPR [ (1, _180) 0 ], EXPR [ (1, _181) 0 ], EXPR [ (1, _182) 0 ], EXPR [ (1, _183) 0 ], EXPR [ (1, _184) 0 ], EXPR [ (1, _185) 0 ], EXPR [ (1, _186) 0 ], EXPR [ (1, _187) 0 ], EXPR [ (1, _188) 0 ], EXPR [ (1, _189) 0 ], EXPR [ (1, _190) 0 ], EXPR [ (1, _191) 0 ], EXPR [ (1, _192) 0 ], EXPR [ (1, _193) 0 ], EXPR [ (1, _194) 0 ], EXPR [ (1, _195) 0 ], EXPR [ (1, _196) 0 ], EXPR [ (1, _197) 0 ], EXPR [ (1, _198) 0 ], EXPR [ (1, _199) 0 ], EXPR [ (1, _200) 0 ], EXPR [ (1, _201) 0 ], EXPR [ (1, _202) 0 ], EXPR [ (1, _203) 0 ], EXPR [ (1, _204) 0 ], EXPR [ (1, _205) 0 ], EXPR [ (1, _206) 0 ], EXPR [ (1, _207) 0 ], EXPR [ (1, _208) 0 ], EXPR [ (1, _209) 0 ], EXPR [ (1, _210) 0 ], EXPR [ (1, _211) 0 ], EXPR [ (1, _212) 0 ], EXPR [ (1, _213) 0 ], EXPR [ (1, _214) 0 ], EXPR [ (1, _215) 0 ], EXPR [ (1, _216) 0 ], EXPR [ (1, _217) 0 ], EXPR [ (1, _218) 0 ], EXPR [ (1, _219) 0 ], EXPR [ (1, _220) 0 ], EXPR [ (1, _221) 0 ], EXPR [ (1, _222) 0 ], EXPR [ (1, _223) 0 ], EXPR [ (1, _224) 0 ], EXPR [ (1, _225) 0 ], EXPR [ (1, _226) 0 ], EXPR [ (1, _227) 0 ], EXPR [ (1, _228) 0 ], EXPR [ (1, _229) 0 ], EXPR [ (1, _230) 0 ], EXPR [ (1, _231) 0 ], EXPR [ (1, _232) 0 ], EXPR [ (1, _233) 0 ], EXPR [ (1, _234) 0 ], EXPR [ (1, _235) 0 ], EXPR [ (1, _236) 0 ], EXPR [ (1, _237) 0 ], EXPR [ (1, _238) 0 ], EXPR [ (1, _239) 0 ], EXPR [ (1, _240) 0 ], EXPR [ (1, _241) 0 ], EXPR [ (1, _242) 0 ], EXPR [ (1, _243) 0 ], EXPR [ (1, _244) 0 ], EXPR [ (1, _245) 0 ], EXPR [ (1, _246) 0 ], EXPR [ (1, _247) 0 ], EXPR [ (1, _248) 0 ], EXPR [ (1, _249) 0 ], EXPR [ (1, _250) 0 ], EXPR [ (1, _251) 0 ], EXPR [ (1, _252) 0 ], EXPR [ (1, _253) 0 ], EXPR [ (1, _254) 0 ], EXPR [ (1, _255) 0 ]]], outputs: [_256]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 33093 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 256 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 256 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 257 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(4) }, Mov { destination: Direct(32773), source: Relative(3) }, Call { location: 24 }, Mov { destination: Relative(1), source: Relative(2) }, Call { location: 35 }, Call { location: 37 }, Mov { destination: Direct(33092), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 33092 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 34 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 27 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 256 }, Return, Call { location: 182 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 0 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 8193 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 8192 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Mov { destination: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 52 }, Store { destination_pointer: Relative(7), source: Relative(3) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Jump { location: 47 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 32 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 8192 }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 62 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(9), location: 140 }, Jump { location: 65 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 8192 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BlackBox(Blake2s { message: HeapVector { pointer: Relative(6), size: Relative(9) }, output: HeapArray { pointer: Relative(10), size: 32 } }), Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(6), bit_size: Field, value: 1 }, Store { destination_pointer: Relative(2), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(9), bit_size: Field, value: 0 }, Store { destination_pointer: Relative(6), source: Relative(9) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 15 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 30 }, Const { destination: Relative(12), bit_size: Field, value: 256 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 14 }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 91 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(9) }, JumpIf { condition: Relative(4), location: 107 }, Jump { location: 94 }, Load { destination: Relative(1), source_pointer: Relative(10) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 16 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(4) }, Load { destination: Relative(5), source_pointer: Relative(7) }, Cast { destination: Relative(3), source: Relative(5), bit_size: Field }, Load { destination: Relative(4), source_pointer: Relative(2) }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(3), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(3), op: Add, lhs: Relative(1), rhs: Relative(2) }, Store { destination_pointer: Relative(10), source: Relative(3) }, Load { destination: Relative(1), source_pointer: Relative(6) }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(1), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(1), op: Add, lhs: Relative(3), rhs: Relative(2) }, Return, Load { destination: Relative(4), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Relative(1) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(5) }, JumpIf { condition: Relative(15), location: 112 }, Call { location: 188 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Cast { destination: Relative(14), source: Relative(15), bit_size: Field }, Load { destination: Relative(15), source_pointer: Relative(2) }, BinaryFieldOp { destination: Relative(16), op: Mul, lhs: Relative(14), rhs: Relative(15) }, BinaryFieldOp { destination: Relative(14), op: Add, lhs: Relative(4), rhs: Relative(16) }, Store { destination_pointer: Relative(10), source: Relative(14) }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(15), rhs: Relative(12) }, Store { destination_pointer: Relative(2), source: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U32, lhs: Relative(13), rhs: Relative(1) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, JumpIf { condition: Relative(16), location: 127 }, Call { location: 191 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(5) }, JumpIf { condition: Relative(16), location: 130 }, Call { location: 188 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, Cast { destination: Relative(15), source: Relative(16), bit_size: Field }, BinaryFieldOp { destination: Relative(16), op: Mul, lhs: Relative(15), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Add, lhs: Relative(14), rhs: Relative(16) }, Store { destination_pointer: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(8) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 91 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Const { destination: Relative(12), bit_size: Integer(U1), value: 0 }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 32 }, BlackBox(ToRadix { input: Relative(10), radix: Direct(32835), output_pointer: Relative(13), num_limbs: Relative(14), output_bits: Relative(12) }), BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, Mov { destination: Relative(9), source: Relative(4) }, Jump { location: 154 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(12), location: 160 }, Jump { location: 157 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 62 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 164 }, Call { location: 194 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 171 }, Call { location: 188 }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 8193 }, Call { location: 197 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(17), source: Relative(13) }, Store { destination_pointer: Relative(3), source: Relative(15) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Mov { destination: Relative(9), source: Relative(12) }, Jump { location: 154 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 187 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15764276373176857197 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16431471497789672479 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1998584279744703196 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14990209321349310352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 201 }, Jump { location: 203 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 217 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 215 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 208 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
