---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdbqNADIXfhetcjO358fRVVlGVprSKhJKIJiutqrz72hjT9oLsanKT8xE4hzF4GPjsXvuX6/vz4fh2+uiefn12L+NhGA7vz8Npv7scTkf597ML+kPcPcGmozpJDCZggiZkEk2SSTYpJpYSLSVZSrKUZCnJUpKlJEvJ8ieKSBiJSFgSYZM6SQkmYIImZBJNJKyIZJNiwiaSwpuOgwmYoImkVJFokiapOtwgqiOUIVYtVMZYy6w8q9Yqg4YQHLTeqKARSYEcooOmZgWNLQps54OggTIqgOAADuiggVUhOiQHCUTNgeIgyQgKkowyZMDgIMmoY0Z0IAdJRq0Ck0N2KA7sUGeg4KDJWimhAzlostZOmqy1U7ZrDFQceAZtQdSStQkNyEFyaDomOWSH4sAOdQZtSgNwkGTSq6HNSFp74qkPIeshWk1GB3KIDmrSsqbmnaA4sEOdQZvYABzQTqWdPGmcNc2aZy2zzkPTflbVhqbbbdP5lH6+jH2vM/rbHJeZf96N/fHSPR2vw7Dpfu+G63TQx3l3nPSyG2WvtEt/fBWVwLfD0CvdNl/usG6tnGZz5bzY03/7ZW54AIRCLQkYsidgwpYE0t61BMqwlhDXEwrxHFBKaPFX9zPxmj+v+zH6LcQILf6M7i/Y4q/up9DiJ31QmR+pwZ/A60+xtPirN0AO6TE/xCY/Lf7a4ufykD+T378cQ4sf80P+CO6P2HL/YuDFz4/5qe38fv1jxCY/POZPy/XLTfNnuX+JsGn+8eKnx/yx7fzl3/P/3goAsKxC8oLxaEJaXQmx3plEdemCXOGrDOAfEXRnFIzRH0Qsz/S1iLurKZZlNV1fi+5eCa7LlajQtKJ/G0NqS0jL3UD+mbCVrd3+MP74Grpp1njYvQz9vPl2Pe6/7b38Ofse/5o6j6d9/3ode036+qSSn18g6zlC3cqXlWzJ2wXFrb7j6y6mDTDrJkxH4gZq3N50YH8B",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
