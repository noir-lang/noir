---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9WdB5gbxRXHR3eS7qQr0p0pBlOMjeng1Z3OdyYFY5zeSG8kIF9JIwmk98iQnpCQXkgIJglpJCGVFEgMJCQhDVJJSCG9996A9zf7rKenkbA/a/m+/35632p3Z9/8ZnZ2dnZn5r1cSJfc9t/2Jd/a1Vrrhju2IV0nu7fU+qgryYoxR8A4QMA4SMCYJ2AsEDAWCRiHCBiHCRhLBIxlAsYRAsZRAsYxAsZxAsYKAWOVgHGCgHGSgHEZAeMeBIx7EjDuRcC4NwHjcgLGfQgY9yVgXEHAuB8B4/4EjAcQMB5IwLiSgPEgAsZVBIyrCRgPJmBcQ8B4CAHjoQSMhxEwHk7AeAQB45EEjEcRMB5NwHgMAeNaAsaEgLFGwDhFwDhNwFgnYJwhYFxHwDhLwDhHwLiegPFYAsbbEDDeloDxdgSMtydgPI6AcQMB4/EEjBsJGE8gYNxEwHgHAsY7EjDeiYDxzgSMdyFgvCsB490IGO9OwHgPAsZ7EjDei4DxRALGexMw3oeA8b4EjPcjYLw/AeMDCBgfSMD4IALGBxMwPoSA8aEEjCcRMD6MgPHhBIwnEzCeQsDYIGDcTMA4T8C4QMC4SMC4RMD4CALGRxIwPoqA8dEEjI8hYDyVgPGxBIyPI2B8PAHjaQSMpxMwPoGA8YkEjE8iYHwyAeNTCBifSsD4NALGpxMwPoOA8ZkEjM8iYHw2AeNzCBifS8DYJGDcQsB4BgHjmQSMzyNgfD4B4wsIGF9IwPgiAsYXEzC+hIDxpQSMLyNgPIuA8eUEjK8gYDybgPGVBIyvImB8NQHjawgYX0vA+DoCxtcTML6BgPGNBIxvImA8h4DxzQSMbyFgPJeA8a0EjOcRMG4lYDyfgPFtBIxvJ2B8BwHjBQSM7yRgfBcB47sJGN9DwPheAsYLCRjfR8D4fgLGDxAwXkTA+EECxg8RMH6YgPEjBIwfJWD8GAHjxQSMHydg/AQB4ycJGD9FwHgJAeOlBIyfJmD8DAHjNgLGywgYLydgvIKA8bMEjJ8jYLySgPHzBIxfIGD8IgHjVQSMXyJg/DIB41cIGL9KwPg1AsarCRivIWD8OgHjNwgYv0nA+C0Cxm8TMH6HgPFaAsbvEjB+j4DxOgLG7xMw/oCA8YcEjD8iYLyegPHHBIw/IWD8KQHjzwgYf07A+AsCxl8SMP6KgPHXBIy/IWD8LQHj7wgYf0/A+AcCxj8SMP6JgPHPBIx/IWD8KwHj3wgY/07A+A8Cxn8SMP6LgPHfBIz/IWD8LwHj/wgY/0/AeAMB4419ZFS2NtCQa983IDIokhcpiBRFhkSGRUoiZZERkVGRMZFxkYpIVWRCZFJkmcgeInuK7CWyt8hykX1E9hVZIbKfyP4iB4gcKLJS5CCRVSKrRQ4WWSNyiMihIoeJHC5yhMiRIkeJHC1yjMhaZI5ITWRKZFqkLjIjsk5kVmROZL3IsSJwcg8n8nDSDifo6mT8eJGNInDyDCfKcFIMJ8BwsgsntnASCyescHIKJ6Jw0gknmHAyeaIInCTCCSGc/MGJHpzUwQkcnKzBiRmchMEJF5xcwYkUnDTBCRKcDJ0i0hDZLAInL3CiAiclcAICJxtwYgEnEXDCACcHcCIAI/0wgg8j86eJwEg6jJDDyDeMaMNINYxAw8gyjBjDSDCM8MLILYzIwkgrjKDCyGhTZIvIGSIw8ggjijBSCCOAMLIHI3YwEgcjbDByBiNiMNIFI1gwMnW2CIwkwQgRjPzAiA6M1MAIDIyswIgJjITACAeMXMCIBIw0wAgCjAycJ7JV5HwRTPLGJGpMUsYkYEyyxSRWTBLFJExMcsQkQkzSwyQ4TDK7SASTpDAJCZN8MIkGk1QwCQSTLDCJAZMEMAgfg9wxiByDtDEIGoOMt4lcJnK5CAZ5YhAlBiliECAG2WEQGwaJYRAWBjlhEBEG6WAQDAaZXC2CQRIYhIBOfnSio5MancDoZEUnJjoJ0QmHTi50IqGTBp0g6GS4XgQfyfERGh958REVHynxERAf2fARCx+J8BEGHznwEQEv6XgJxksmXuLwkoSXEDTy0YhGIxWNQDSy0IhBIwEPYTzk8BBBJY1KEJWMLt3qhZAyYyml6wFzHHXGhnQ72b2lVnLx9lP/XK0+UwrtS5/5p0uhVZf2XX8tSUpGZwb8yVCqZ1Ozpd+nRctBLmR0nZJ6PdN0Sj6OubQFkxaNO59N3LWciy+4dAYXfzlkWKaSm3lsfMrj80f/j2mYZosn547lm53p0GOFZns6sKCNsdyE82VrwIRbbf6vcbo3belkyvKelDqlnvE9WVsWut+HmsahZtix6LFBs0/zXPNp2IZ3x0rmWL7ZHk853c6beKwu5Si48KvS7Uq6Lppz9PxqJP6ii7+NO7LP5pHXNRjZp+HR1l2R/kcbV58TJzRb+vpZ/yAOlN+LlSl0Xtdc6F+9rveUvcf9/VEI/U/rVLLz9d2OMhMyrH9NfVdwPD5/Blz+FLPJnyTn9FueYiR/9FoORY6pruF0u2B02fBFk0Yb3v7X8+2+mXRdjej0ZXcodKbH7rP33lqXtkETLtdlHUJnObJ6qxEuvb6ZPuOTVjutkIn+qSTrMlkKndc39C9/aqp/OJv8r/n2nb3WyLPjzP5caNX39n6xbR99DhRc+LOMzo3p/0ro/rzuVb6zvKZyVXe6Htb4yyHbdk2vei/W7tT8KWXAY+vhcoRnMMIzEVr1p71mlk91rUzXvd47drV+8+UlhP5dm2roLMNFl4ZiH9NQ6n8akmrofm00DeU+pKHqdNl4siyzsiyp/pFM9NcWVf9o6PP1Md8yxrLJm8XYe6R9Bpxk9ttj9hmQi1zTggt/qtF5cvq/Ejlfy0e2bY9a0qv9FWsLKattqwz1OM+2myuRtPi6TbcHejCEEH8u5iJ6YvfboOOJPc+68cTKh48/RNhVz0iI50PZ6Rl3evx9m3P/9V3Zlkero2CO2/Cnp2u0rS51OvUdO4TezzYNPxEJXzVhlKfiGOy5MfaK0Rs715ehquHrpcse0+18RE+sDHU7byDCN+r0xNqZlQirfRZ5nZpPYy6M/a/8xRCvo3Z8Y3Phm+kaZWJbF522nFmuQhedZxqdvpzFyk2vcjYZCT9hwihPJXSWwUl3nmW35d3vi11Xf//77fGInlg7w5Y5ryd23fQ9aFefWSM99GoabfjRSHhbB2l4zWd7f+i5vk2g8W1I18luLmORtOVc3Nm0GXb+HUnjL0fyMIt3pDHH4/PHt6fHs8mfBPekrzux2O+k9tpYDlte7PkDofO9z9Y7Wh5sG9reE+c4vRqPrc9KEb0FF36r0Xmu02nfT2Ks/v61x0pGr353qITOPPHfz2LXPPaOoeHHTTyx8P7ZoOEvSNdIwxVOZyXCECt3/lliw1cizLFnY7VL3PY62rJVdOnR8Bea9OhzKdZnZeszLHlzrJ/fv8FxpeHw+Vpotqe7Vx5i2dU2mqa96sLb/I99K624eGLPDlsG/T1gj+m59n7NMt9n51qDnvSaaznyS94ct+EvSbftPaTr/G5wLs02akvTjaXGTGNhoT7fmHT6sdh3i37HPz+zbvN8faaRLNawOXVrxz81N7du/dTmpD67ML+0UJ++teOXpM/ON2ZrtfX12mK9NnNL8cf6LG09gkX7PW2/qA2v+gou/FUaNtw8rgiL7ye38SHcdT3C5bqst+uI7Ms32/fF+kttP7KG39H+aXYy6rERc8zWcVhG022bX1aXchRc+GvTbb0mtu9Xz69G4h928bdxR/b5fuSRSPiRSHhcn2tUX7q2ae9323B7nE6/3efZtOygXN8E7tHO/EXOAAA=",
  "debug_symbols": "zZrhTuMwDIDfpb/3I47txOFVTic0oKBJ04bGOOmEePdrp6VMTbspOTXzH0Qhn/u1zpy081fz0j59vj1udq/7j+bh11ez3T+vj5v9rjv6+l41T4fNdrt5e7z8c2P6Hyin8R/v611/+HFcH47NQxBeNe3upf/NdfzrZts2D2y+f68aDLkEmWwCsgmbTWA2QdkEZxMum/DZRHbOKTvnnJ1zzs45Z+ecs3PO2Tnn7Jy7SSswFBEwHsfM5DwBa1xkLNsxMzlTAC1FBh1cMqtksEc5j/XejMPLsuHDouG9WTY8LBveLhselw1Py4bn/w8fYnhBuT7UkjkPtQRjE6fGxKsxETUmoaqJs9HEjyu1GDUmoMbEqjHBqiYhmqBJTEiNCWsxCVXnCVqIJna8RwtV7wlDrGxMfmxSdd3hEMM6w2MTr8ZE1JiEO5kAjUzAGD0qUFcFB5WQqFQtKSz+igrqUSE9KlUrrcO4+jgyiUrVUuusu6IiWlZCMFVLHEG8K2THSyGA0aMCelSsHpWqJY6MDCqSqJAeFdaj4u6kgulc8XpUpK5KXA6JbKJSt9oamFexRo9K3WrLQ4lzyXJorR4V1KNSd0M5bJ0Y07nCelScHhWvR0X0qAQ1Kmj0qNR9fAcZVJK6glaPCupRoTuppCszVn5R6mdflHYn0vLOFtDrURE1KtOtQd2j9NAsAZS8S5zuDroFYQlENyF21y/fhWEX6wL83ACQicFiKeZAuu+sLgefdFiXjtOl43XpiC6doEpnuqPsfjqgS2e6wlkb17ruQS95kcMz1UHCcA0BEkjyO8/AQcGZ3O1r4hTCEohKIC6BZvr2eJg2VlLIl0BSAoUCaKZ17gYEJZAtmHszzWs3ICqBuARyJZAvgUo+uTNNUdehmf6lK9B3d/Rnfdisn7btuWn99XP3fNHDfvz73o7a2d8P++f25fPQ9o3tPz3t/cmh225aCJ1Mn/1un4rUi53+JbgCkf4QTiPtCgJ1Bp3FPw==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
