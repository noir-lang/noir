---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZdNbuMwDIXv4rUXIinqp1cpgiJN3UGAIAnSZIBBkbsPaYpuu8hgIG/yvtR+z5REqfHn8Da93n697I/vp4/h6flzeL3sD4f9r5fDabe97k9H+evnEPQj4vAE4xDJJJqwSTLJJsWkzsLBBEwshS2FLYUthS2FLYUthS0liQFF5BYSkVuiSDGps+RgAiZoQibiY5FsUkzEl8ahBBMwQRMyiSZsIilZRHxlHCrOtVS5VkWSSTYpJlp8GAcIwQEc0IEcogM72Ggh5KalaTWF0BSaYlNqGk1Rk2dgh+SQHYpDbUDBARy05qhADtGBHZJDdigNouagAjqQQ3Rgh+SQHUoDXTBgBXBAB3LQwKTADskhO2hgVqgNanDQe2SNcV64qiDPwqCADuQgz0JQYAd5FqKC5CApFIfaQBcPo4Ims0JsDwXNSQrJITsUB82RUhGDAzhohZqD5KAV6ii0AUhr1gYw0N7SmrUBDGoDbQDSUWgDGKADOUQHdkgOmqwj1QYwqA2iJuvYtSVIxz63hFY4t8QMOhv1fh8HP4terpdp0qPo2+EkR9Z5e5mO1+HpeDscxuH39nCbb/o4b4+zXrcXuSpjnY5vohL4vj9MSvfxyx0eW2vhZq4lLXb+b7/sbA+QrUw9CdJRnoCMPQmkvWYJlKAnAWAZhezXtQncNZOoDd7mgUpXDaUuNdSueUBeRoEF1o6CexJSDdASUoW8JED5kQDwOKLIBmsRBRM+ivhHEZlKC8g5dAwiV/eXrqWUU6T55Rjp8Sd0f+7ZUljdT6HHT+hrSNhzKDD4+DnmHn/1BkiB1/khdvlp8dcef8mr/Il8/VLs6d+EaZU/gvsj9qxfDGXxl3V+6nu+z3+M2OWHdX5e5i917Z9l/Ziwa/+VxU/r/LHv+fnB/t/It+1uf/nxFnfXpMt++3qY2tf323H37er1z9mv+Fvg+XLaTW+3y6RJX6+C8vEMnEfIZTMO8oPtWX5cUNzoq4leksLkf5x+hflaHjHWzV0L+ws=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
