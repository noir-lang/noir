---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdrbattAEAbgd9G1L3ZmdvaQVymlOIkSDMYOjlMoIe9eKVhq0E5k/qG+CVbQx2j1r/Zg67177O/fnn/tDk/H1+7ux3u3Pz5sz7vjYTh6/9h096fdfr97/vX1310Y/0T+PP/1ZXsYD1/P29O5u6tFN11/eBw/pcE/7fZ9d6fh4+emiwKLCAuFRYJFhkWBRUWFBlgQLODMFc5c4cwVzlzhzBXOXOHMFc48mXeXQpwIhSxLY7adOKTJsPLSmK0n4TgZSbQ0xWEqbnJwGHIYdhhxGDsfojlTinFpssMUh6lXjS77aAkOQw7DDiMOEx1GHeab55Tz/JxKWZpv8il1rlOX/a0yPh5UddS53h5tTHaY4jAVNxTsjs06h8qlReRB7EHiQdGD1IMc09Awm3lQ8aDqQBQ8iDyIPUg8KDoQmyhLuZicQ0MUJwknGScFJxUmEnBCOGGcCE7w9AVPX/D0BU9f8PQFTz/a6deJlGamp0g4YZwITiJOFCcJJ2YuqQa6mFQpz4gG35xcOE4r98KJv548VrC34P+1At28At+8gty8Qrx5Bb15hXTzChms8ImKB1UHSsGDyIPYg8SDogPZmxOO4WI4LhfXbG9N1gnhhHFi3rWhc04kc0MiThQnCSfm88N1IhJaUnBSYUJmW4SnTiYsDTGrKE1RasxLwmYf0zoNOSloQwgnjBO5Qig2JOJEbSIzqQ0xc9GSV0jGScGJPT7L1MdSXK5Y2d6vJE4rROBuae8kIk1VIjfd0t5JrJOEk4wTM5cYykxKQypM7J3EOqErRJq22DuJdSI2mbpljM04Zu8k4jxZWkRxYqevc5Sp6Zb2D4DrpODEHpPnR0ylaYu9AVknhBPGieAk4kRxYo/JVGbS5GKvm9dJwUm9QtqebK+YlfL3k7i9Xl6d9+3V8joRjHwMR7+3p932ft9f3kN4ejs8fHkt4fznpV+8ofByOj70j2+nfnxX4d9rCuM9oSwbqnG4lPFChh/fZPz8+W0tDXdn+J5/PBxvBae04VSGKxiu4i8=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
