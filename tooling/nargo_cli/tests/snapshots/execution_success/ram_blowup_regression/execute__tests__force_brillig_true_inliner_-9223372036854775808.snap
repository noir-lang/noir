---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZdNbuMwDIXv4rUXIinqp1cpgiJN3UGAIAnSZIBBkbsPaYpuu8hgIG/yvtR+z5REqfHn8Da93n697I/vp4/h6flzeL3sD4f9r5fDabe97k9H+evnEPQj4vAE4xDJJJqwSTLJJsWkzsLBBEwshS2FLYUthS2FLYUthS0liQFF5BYSkVuiSDGps+RgAiZoQibiY5FsUkzEl8ahBBMwQRMyiSZsIilZRHxlHCrOtVS5VkWSSTYpJlp8GAcIwQEc0IEcogM72Ggh5KalaTWF0BSaYlNqGk1Rk2dgh+SQHYpDbUDBARy05qhADtGBHZJDdigNouagAjqQQ3Rgh+SQHUoDXTBgBXBAB3LQwKTADskhO2hgVqgNanDQe2SNcV64qiDPwqCADuQgz0JQYAd5FqKC5CApFIfaQBcPo4Ims0JsDwXNSQrJITsUB82RUhGDAzhohZqD5KAV6ii0AUhr1gYw0N7SmrUBDGoDbQDSUWgDGKADOUQHdkgOmqwj1QYwqA2iJuvYtSVIxz63hFY4t8QMOhv1fh8HP4terpdp0qPo2+EkR9Z5e5mO1+HpeDscxuH39nCbb/o4b4+zXrcXuSpjnY5vohL4vj9MSvfxyx0eW2vhZq4lLXb+b7/sbA+QrUw9CdJRnoCMPQmkvWYJlKAnAWAZhezXtQncNZOoDd7mgUpXDaUuNVRYWwP3JfAyD1h6ElIN0BJShbwkQPmRAPA4osgGaxEFEz6K+EcRmUoLyDl0DCJX95eupZRTpPnlGOnxJ3R/7tlSWN1PocdP6GtI2HMoMPj4OeYef/UGSIHX+SF2+Wnx1x5/yav8iXz9Uuzp34RplT+C+yP2rF8MZfGXdX7qe77Pf4zY5Yd1fl7mL3Xtn2X9mLBr/5XFT+v8se/5+cH+38i37W5/+fEWd9eky377epja1/fbcfft6vXP2a/4W+D5ctpNb7fLpElfr4Ly8QycR8hlMw7yg+1ZflxQ3OiriV6SwuS/pH6F+VoeMdbNXQv7Cw==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
