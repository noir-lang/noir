---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/92dB5gkRRXHa3bC7szs7czdEQ6OcNwRjjwzO7szh6IL3HGKCSOKoswms54BzDqHYlYwZ4RTVIxnREERMGdQzAkxYM6imOD9l66dN29qdhe2+4M//e37env69atfVVdXV7+ufpVy0ZKa+5tbMp2fOmu/YfZNROvK8pZqjLYqSTGmCBgHCBjTBIwZAsYsAWOOgHGQgHGIgDFPwFggYCwSMA4TMK4gYBwhYCwRMJYJGFcSMK4iYFxNwLgLAeOuBIy7ETDuTsC4hoBxDwLGPQkY1xIw7kXAuDcB4z4EjPsSMK4jYNyPgHE9AeMGAsb9CRgPIGA8kIDxIALGjQSMBxMwHkLAeCgB42EEjIcTMB5BwHgkAWOFgLFKwFgjYBwlYKwTMI4RMI4TMDYIGJsEjJsIGI8iYLwDAeMdCRiPJmC8EwHjnQkYJwgYjyFgPJaA8TgCxs0EjFsIGI8nYNxKwHgXAsa7EjCeQMB4NwLGuxMw3oOA8Z4EjPciYDyRgPHeBIz3IWC8LwHj/QgY70/A+AACxpMIGB9IwPggAsaTCRgfTMD4EALGUwgYH0rA+DACxlMJGFsEjJMEjFMEjNMEjDMEjLMEjA8nYHwEAeMjCRgfRcD4aALGxxAwPpaA8XEEjI8nYNxGwPgEAsYnEjA+iYDxyQSMpxEwnk7A+BQCxqcSMD6NgPHpBIzPIGB8JgHjswgYn03A+BwCxjYB43YCxjMIGJ9LwPg8AsYzCRifT8D4AgLGFxIwvoiA8cUEjC8hYHwpAePLCBhfTsB4FgHj2QSMryBgfCUB46sIGF9NwPgaAsbXEjC+joDx9QSMbyBgfCMB45sIGN9MwPgWAsZzCBjfSsB4LgHjeQSMOwgY30bA+HYCxvMJGN9BwPhOAsZ3ETBeQMD4bgLG9xAwvpeA8X0EjO8nYPwAAeNOAsYPEjB+iIDxwwSMHyFg/CgB48cIGC8kYPw4AeMnCBgvImC8mIDxkwSMnyJgvISA8dMEjJcSMF5GwHg5AeNnCBg/S8D4OQLGzxMwfoGA8YsEjF8iYPwyAeNXCBi/SsD4NQLGrxMwfoOA8QoCxisJGL9JwPgtAsarCBi/TcD4HQLG7xIwfo+A8fsEjD8gYPwhAeOPCBh/TMD4EwLGnxIwXk3A+DMCxmsIGH9OwPgLAsZfEjD+ioDxWgLGXxMw/oaA8bcEjL8jYPw9AeMfCBj/SMD4JwLGPxMw/oWA8a8EjH8jYPw7AeM/CBivI2D8JwHjvwgYrydg/DcB438IGP9LwPg/Asb/EzDeECOjZ+sCdanu3wZE0iIZkaxITmRQZEgkL1IQKYoMi6wQGREpiZRFVoqsElktsovIriK7iewuskZkD5E9RdaK7CWyt8g+IvuKrBPZT2S9yAaR/UUOEDlQ5CCRjSIHixwicqjIYSKHixwhciQKR6QqUhMZFamLjImMizREmiKbRI4SwST3mEQek7RjEnQ/yfgxIseKYJJnTKKMSYoxCTAm2cUktpgkFpOwYpJTTCKKSToxCSYmmTxRBJMkYhJCTPKHSfQwSR0mgcMka5jEDJOEYRIuTHKFSaQwSRMmQcIkQ6eKtEQmRTDJCyZRwSQlmAQEk2xgEgtMEoFJGDDJASYRQJB+BMFHkPltIgiSjiDkCPKNINoIUo0g0AiyjCDGCBKMILwIcosgsgjSiiCoCDLaFtkucoYIgjwiiCKCFCIIIILsIYgdgsQhCBuCnCGIGIJ0IQgWgkydLYIgSQhChCA/CKKDIDUIAoMgKwhigiAhCMKBIBcIIoEgDQiCgCAD54qcJ7JDBB954yNqfKSMj4DxkS0+YsVHovgIEx854iNCfKSHj+DwkdlOEXwkhY+Q8JEPPqLBRyr4CAQfWeAjBnwkgEH4GOSOQeQYpI1B0BhkfKnIZSKXi2CQJwZRYpAiBgFikB0GsWGQGAZhYZATBhFhkA4GwWCQyRUiGCSBQQh4yY+X6HhJjZfAeMmKl5h4SYiXcHjJhZdIeEmDlyB4yXC1CJzkcELDyQsnKpyUcALCyQYnFpxEcMLAyQEnAh7S8RCMh0w8xOEhCQ8h6OSjE41OKjqB6GShE4NOAm7CuMnhJoJGGo0gGhm/9GsXsOSjf/LR9oDajzZjItquLG+p5k26cdpvVuvNvOteYuYfzbtOWxq7/Wqlklc2E+CvDEZ2trY79m1efD1IuYTOU6XeSDSfUo4rTN6cyotPO5NM2tWUSc+ZfDqTfsElWKcqN/Ho9DyPLR///wqv0+7wpMy+TLs3H35ftt2dDyzoY6xRerZuDSi9Der/jcb21u29TElek9KmNBK+JqurXf/r0OdxsO3mF78vrX7zZe7LaUjrm315tS/T7k6nEG1nVDralufIGv310XYpWufUMf74ciD9nEm/izvwmy4jaysd+M3ro6+7NvoffVx/nziu3bEXdzuOZXMS9isd+1uSsT9/nz4+Efu1Cs4Bru9t/py53nqfirG8fJuj20DbfmRd/HmtVZZ+P5i/plyC9yd1P8gaHls+A6Z8csmUTyVl7GueXKB8/LkcDOzztoai7ayypfVzKo9aX//vj9e/NaN1OWDT1t1B15sf/Ztum2omb2mll+qzdq63Hmm75QBXxqSj7/+b2x2eo113Xvxxujz1sb4dzRr9E1zH5kT0f8m5YN8SS8L32nqoHXCmTGxdcq67fP2SNtu2v3O6smv1bJr6vmbreaifVFT7QtdNqD4sVC9zgTRKrrc8/LF5F67/E9F2ZXlL0+ddX4u2zPKBMlvqefLcsH+Wsmv1bJq6nHT6msH72ew14u+loTq4OdoH+ycZu55VX3uZgN2s0T/FdWyebGwu9iywxbDqOpRRdn07UXKLt4dDgTSzAbteP6/SCenrNl7rT0Zr7N9hbBYCDPr6sddKMaBfCDCXXG+d8MeGnqf0dYQlo/bF2fdAGZyvOGwZZNtLz2+ofIYD+kWl489R2ejrsgrdpwomnVCbpeuwra+6Lvlj9bWVZLk3mh2HvD/n/tq1S0bt1/qnRdu6HJzK28Qt5JxttKqzo63Z1lhrero+1Vpl7GPR9xjdR1+KTyWZ+3ZtyX3otCo3224l0YdOG56UC5dlkj4n3YcO9elDPp6VrtP3DfUPta110TrUb7P5S8pvae9bGZU/e59xKm+ZQN6c6+2nnhmtUd8vNvZsnet3jsuut87Z6yOhZ7ox23fVS6jvYv0ozuRRL5ob5XOJsmv1bJq6rvj0l/Lsj2UiWleWudxqvuCb0W7dVn3BSfpG0HKhHfLXjS4j7ZcLtUm6vtye26VzonVS7dJiz5hx9z/qY63GVKtRrW6qV2fq1bHF+h8hf7LuR2PxPmnts9b63l7W6F/gdd1N7519eczptnvTg95FC+il+qznbAR+y7S7fwv5srWP3+v7tAvtXka/r6j2ZU06w9G2Li9ty3Nkjf6F0bY/J9ov748vB9IfMul3cQd+s/emYkC/GNDH+dnp7UVrnfe429G5NI19/Ztl83Unieuq1RhtTtXqU43JsdHW6Pgt6tfH4XO091Pn4ivzpfgzMzHmIRt/Hipl1/+eZvtpy8lD2fX2+bJ98hfztTGbrG+wOuPtD5n8x8Rf9fb1WJJYbKvxHYVkyn5mMb/+lSpdiPfVhPz6uo5kjf41rmPzquj/UuB4X/+SrXPV+X5YyMeYCuQn5K8cWuA47X8q9cmLC2wPLMDgXG+fzZaftxO6nlOGJ+Sj7ccTOsc2fRdg93YW6zd6Ju0LtOzDxq49H7a/Ot/nUvra/2j94F7/2miN85tOddscUccv5d1JKaA/onQ8T8kw6GMtu9brd6ytXyOKbyFbtozsOfF2QvWr33EDAb6FfLlFky/Nan3+Ns+2rbTnw/PrdwRaZ74faPSvi9aoE7k+dULXM12mtp55/euVTVvPQvVmoXpWDuiXlI7nKbneOlg2x+ky1fXd/hY6r0Wja7eHA3ZCfRxd56ydm/v+yR+r72dx96enxsYnp+RhtTJTxWZtsf503OnXms3xTbXJSr0xPTU7XR9dLP0bAcERoAwx1AAA",
  "debug_symbols": "tdrdattAEAXgd9G1L3ZmZ/Ynr1JKcRInGIwdHKdQQt69krHUoB3LnKG+CVHij5F0RtpdS5/d8+bx4/XXdv9yeO8efnx2u8PT+rQ97Putz69V93jc7nbb11/f/9yF4YfQ+fPvb+v9sPl+Wh9P3UMtuuo2++fht9T7l+1u0z1o+Pq56oRhEWEhsFBYJFhkWBRYVFRogAWcucKZK5y5wpkrnLnCmSucucKZJzMPCjISCjnOjXm2iEMaDSvPjXm+KLKMJiaam+Qw2WGKw1Tc5OAw5DB2PkRTpiQyN+owyWHyTaPzHs3FYSpuSnAYchh2mOgwV65TztN1GsvcXMmn1KlOnfdbDfj9oEZHndvHo41Rh0kOkx3G7mvWKVMujam4oRA8iPBUKbAHRQ8SD1IPSh6UPah4UHUgMlGO5WJyDnPCASeEE8ZJxIngRHGScJJxUnCCpx/x9COefsTTj3j6EU8/2unXkZRmIO3nZTjJOCk4qTCRgBPCiZlLqoEuJlXKE6LeNx8uLOPEuHDi7x8+V9C7V0h3r5DvXqHcvUK9dwX7m4n/WoHuXoHBCmcUPUg8SD0oeVD2oOJB1YGq2Qks4WJYmsl1ZZxEnAhOzFD75hxJbuaS9nJpmWScFJyYYXIdSQxzwvZKaZkQTswdizw2WeT5V25MZsMojVGq5IaYDaN1vOWkoA0RnChO0g1C0pCMk2KTOJHaEDMXLfk6sVdFy4RwYo8EceyxJKEh9jjAaYEkuC3t9YrQWEW4aUt7vbJMKkzs9coyMXORUCZSGsI4iTiRGyS2x6I4STYZ21KkuY/Z6xWZBkuLFJzY6esUZWra0l6vLBPCiX1Pni4xjc2x2I8jl4ngRHGScJJxUnBi35OpTKTJxZ77LxPCCd8gbSfbc3OlfH0Qt2fmi+O+PS9fJgkjX/3W7/Vxu37cbS6P+V8+9k/fnvqf/rxtZi8AvB0PT5vnj+NmeBXg31sAQ1iUdEUl9bsynKH+2VaUYQJ3/hfxiigPm0NGw4SPk/R70O/FXw==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
