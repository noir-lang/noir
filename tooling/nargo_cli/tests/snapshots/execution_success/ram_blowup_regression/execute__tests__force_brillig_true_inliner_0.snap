---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdbuJADIXfJddcjO358fRVVqiiNK2QIkAprLSqePe14zhtL8KuhhvOF5JzMp54GPLZvfYv1/fnw/Ht9NE9/frsXsbDMBzen4fTfnc5nI7y7WcX9IO4e4JNR3WSGEzABE3IJJokk2xSTCwlWkqylGQpyVKSpSRLSZaS5UsUkTASkbAkwiZ1khJMwARNyCSaSFgRySbFhE0khTcdBxMwQRNJqSLRJE1SdbhBVEcoQ6xaqIyxlll5Vq1VBg0hOGi9UUEjkgI5RAdNzQoaWxTY7gdBA2VUAMEBHNBBA6tCdEgOEoiaA8VBkhEUJBllyIDBQZJRx4zoQA6SjFoFJofsUBzYoc5AwUGTtVJCB3LQZK2dNFlrp2xzDFQceAZtQdSStQkNyEFyaLomOWSH4sAOdQZtSgNwkGTS2dBmJK098dSHkPUSrSajAzlEBzVpWVPzTlAc2KHOoE1sAA5ot9JOnjTOmmbNs5ZZ56FpP6tqQ9Pttul8ST9fxr7XFf1tjcvKP+/G/njpno7XYdh0v3fDdbro47w7TnrZjXJW2qU/vopK4Nth6JVumy93WLdWTrO5cl7s6b/9sjY8AEKhlgQM2RMwYUsCae9aAmVYS4jrCYV4DigltPir+5l4zZ/X/Rj9EWKEFn9G9xds8Vf3U2jxk/5QmR+pwZ/A60+xtPirN0AO6TE/xCY/Lf7a4ufykD+TP78cQ4sf80P+CO6P2PL8YuDFz4/5qe3+Pv8xYpMfHvOnZf5y0/pZnl8ibFp/vPjpMX9su3/59/q/twMALLuQ/MF4NCGt7oRY7yyiunRBrvBVBvCPCLozCsboP0Qsv+lrEXd3UyzLbrq+F92dCa7LTFRo2tHTMpfIbQnfqkg/E7ZytNsfxh9vQzfNGg+7l6GfD9+ux/23s5c/Zz/jb1Pn8bTvX69jr0lfr1Ty8QtkP0eoW3mzkiP5d0Fxq//x9RTTBpj1EKYrcQM1bm86sL8=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
