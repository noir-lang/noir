---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _13",
    "private parameters indices : [_0, _1, _2, _3, _4]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BLACKBOX::RANGE [_1]:32 bits []",
    "BLACKBOX::RANGE [_2]:32 bits []",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "BLACKBOX::RANGE [_4]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 4294967301 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [_5]:1 bits []",
    "BLACKBOX::RANGE [_6]:32 bits []",
    "EXPR [ (-1, _0) (-4294967296, _5) (-1, _6) 4294967301 ]",
    "EXPR [ (-1, _1, _5) (1, _1) (-1, _5) (-1, _7) 1 ]",
    "BLACKBOX::RANGE [_7]:32 bits []",
    "EXPR [ (-1, _0, _5) (-1, _1, _5) (1, _0) (1, _1) (-1, _5) (-1, _8) 1 ]",
    "BLACKBOX::RANGE [_8]:32 bits []",
    "EXPR [ (1, _1, _5) (1, _5) (-1, _9) 0 ]",
    "BLACKBOX::RANGE [_9]:32 bits []",
    "EXPR [ (1, _0, _5) (2, _5) (-1, _10) 0 ]",
    "BLACKBOX::RANGE [_10]:32 bits []",
    "EXPR [ (1, _0, _5) (1, _1, _5) (3, _5) (-1, _11) 0 ]",
    "BLACKBOX::RANGE [_11]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (1, Witness(1)), (2, Witness(5))], q_c: 4294947297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [_13]:32 bits []",
    "EXPR [ (1, _0) (1, _1) (2, _5) (-4294967296, _12) (-1, _13) 4294947297 ]",
    "EXPR [ (-1, _12) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "tZTNjoQgDMffpWcPlA91fJXNZsIoTkgIGkY32RjffauiO3Mg2biZS/9A+ZW2ASZozG28X61vuwdUHxPcgnXO3q+uq/VgO0+r05zBPr0OwRhagic/Ub0Oxg9Q+dG5DL60G9dNj177VQcdyMsyML4hpYCtdWYZzdkvzdIoIkYYMT9w9XdeXnY+Vymep3kl8sgryf7JyzP5C3Xkf0nxKs1LsTdfSn7ifI4y8lwk6y/eVz8X/Di/OMMzdvBlikf2xgaqYk+gEC/8J810bcPLkwNF6WSQr7ZYbbnaCyWQAbJNECrqK/JNBFQlidyEItCdx3yTJQbhWEalOEgt5SwqRuWLzksdweqbM/H9t6Ovn76D4bvfPfuH0YeuNs0YzFLH6qPKfgA=",
  "file_map": {
    "50": {
      "source": "fn main(a: u32, mut c: [u32; 4]) {\n    // Regression for issue #661:\n    let mut c_661: [u32; 1] = [0];\n    if a > 5 {\n        c_661 = issue_661_foo(issue_661_bar(c), a);\n    } else {\n        c_661 = issue_661_foo(issue_661_bar(c), a + 2);\n    }\n    assert(c_661[0] < 20000);\n}\n\nfn test5(a: u32) {\n    if a > 1 {\n        let q = a / 2;\n        assert(q == 2);\n    }\n}\n\nfn issue_661_foo(array: [u32; 4], b: u32) -> [u32; 1] {\n    [array[0] + b]\n}\n\nfn issue_661_bar(a: [u32; 4]) -> [u32; 4] {\n    let mut b: [u32; 4] = [0; 4];\n    b[0] = a[0] + 1;\n    b\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
