---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "4717959987348973079": {
        "error_kind": "string",
        "string": "the original should not be mutated by copy_mut, only borrow_mut_two"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "15646392865860948187": {
        "error_kind": "string",
        "string": "the copy should have the expected content"
      },
      "16406258251777617968": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to arra_refcount after, and once within copy_mut"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n        assert_eq(refcount_1, 2, \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\");\n\n        assert_eq(refcount_2, refcount_1 + 3, \"after refcount_1 we clone once in passing array to copy_mut, once to arra_refcount after, and once within copy_mut\");\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
