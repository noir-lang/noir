---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbhs7DEX/xessRhQpSv2Vh4fCSZzCgOEEblLgIei/P2nE4zSLdDHe+B7b4TFHFmcmft89Hu7ffnw/np+ef+6+/fO+u78cT6fjj++n54f96/H53F99/3234+n318vh0F/a/fF+r3rZXw7n192389vpdLf7tT+9rX/082V/XvN1f+nvLne7w/mxZxc+HU+HQb/vPqqXr0tFlhLVIlKuAvtsSF8bVC0EavW2es8b6q3kqDdPN9ZvOX5rLGCRZUN98Wt929J/MaG+bKl35fi9+Jb6plFfF9lQX6/91037py3sn5a27J/qzue3Ld9fWq4NpEW2rEBrcpsgpYVjSGnTIvSqaw9J2yZD0avBNx2FSMMgeVMPct3LSTZtpk89WLvVUL78Lv56Ss7tekpW32RwLgmiS9tgyL0sDFlTudUgaZMh29Wgy80G22Swj6Mo5VaDb1uH+nEU1W81tHyzYdOOsutcZMu6zaAfhk3fpqV8q6Gkq8E3raRp+8rwb3+2fzhePt0k7rxP8d2uro9tfUzLjDRDZuQZOsNmlBnTkbqkL0Bqa8gyI83olv4VS56hM2xGt/SbFPEZdUZbI3dLv/jkNENm5Bnd0g8224wyw2fUcaHo2WbqEpkiJTJHaqRFlnGC7emRNbLNtNmXzb5M1g+1PGP2ZbMvK9NoHhmdWXRWorMSnZXorERnRecnFouMzkp0Voav79zSZvrw9VX1FCmROXL4+sq6RZZIj6yRbWZdIlOkRA5f7Rn91Vi5Gv1Vn59Xa2Sb2aK/Fr4WvpYjo78W/bXor0V/Lfpr0V+/QZqNpGVs2LEBl7FldUAGFDCgAGPz2oAKtIB1EFZIgAAZUMCAAmBOmBNmwSyYBbNgFsyCWTCPUZFx7GNYxAe0gDEwExIgQAYUMKAADmDOmBWzYlbMilkxK2bFrJgVs2I2zIbZMBtmw2yYDfOYLBkbYIzWuAykMVsrjOGakAABMqCAAQVwAHPB7Jgds2N2zI7ZMTtmxzzGLS8DxmkzjbPoAiRAgAwoYEABHKgA5oa5YR7DN27N05i+CQoYUAAHKtAmyJjBCQkQIAMKGFAAByqAOWFOmMcM5vXKMsw6QAEDCuBABVrAeoFaIQECYBbMglkwC2bBLJjHDOb1apcAATKggAEFcKACLUAxK2bFrJgVs2JWzIpZMStmw2yYDbNhNsyG2TAbZsM8ZjCPC/mYwewDEiBABhQwoAAOVKAFOGbH7Jgds2N2zI7ZMTtmx1wxV8wVc8VcMVfMFXPFXDGvMzj+Zfy1vxz396dD/ED39HZ++OP3utf/XniHX/ReLs8Ph8e3y2Hctq3v9Ru5/wE=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
