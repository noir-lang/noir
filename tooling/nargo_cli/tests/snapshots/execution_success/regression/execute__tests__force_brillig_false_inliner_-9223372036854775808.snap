---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 174",
    "private parameters indices : [0, 1, 2, 3, 4, 5, 6, 7]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_6, 16)] []",
    "BLACKBOX::RANGE [(_7, 16)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(8)), Simple(Witness(9))]",
    "BLACKBOX::RANGE [(_8, 222)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _8) (-1, _10) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_10, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (-1, _8, _11) (5096253676302562286669017222071363378443840053029366383258766538131, _11) (1, _12) -1 ]",
    "EXPR [ (-1, _8, _12) (5096253676302562286669017222071363378443840053029366383258766538131, _12) 0 ]",
    "EXPR [ (-1, _9, _12) (4026531840, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967301 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _14) (-1, _15) 4294967301 ]",
    "EXPR [ (-1, _14) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 4)] []",
    "BLACKBOX::RANGE [(_17, 4)] []",
    "EXPR [ (1, _0) (-16, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 7)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "EXPR [ (1, _16) (-2, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_20, 4)] []",
    "BLACKBOX::RANGE [(_21, 4)] []",
    "EXPR [ (1, _0) (-16, _20) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _22) (-1, _23) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _22, _19) (1, _19) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 4)] []",
    "BLACKBOX::RANGE [(_25, 5)] []",
    "EXPR [ (-1, _19, _22) (1, _19) (1, _25) (-1, _26) 15 ]",
    "BLACKBOX::RANGE [(_26, 5)] []",
    "EXPR [ (16, _24) (1, _25) (-1, _27) 0 ]",
    "EXPR [ (-1, _19, _22) (1, _19) (-1, _28) 0 ]",
    "EXPR [ (1, _1, _28) (-1, _27, _28) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(29)), Simple(Witness(30))]",
    "BLACKBOX::RANGE [(_29, 4)] []",
    "BLACKBOX::RANGE [(_30, 4)] []",
    "EXPR [ (1, _1) (-16, _29) (-1, _30) 0 ]",
    "EXPR [ (-1, _28) (-1, _31) 1 ]",
    "EXPR [ (1, _19, _21) (-1, _32) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(33)), Simple(Witness(34))]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _33) (-1, _34) 4294967298 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _33, _19) (1, _19) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(35)), Simple(Witness(36))]",
    "BLACKBOX::RANGE [(_35, 4)] []",
    "BLACKBOX::RANGE [(_36, 5)] []",
    "EXPR [ (-1, _19, _33) (1, _19) (1, _36) (-1, _37) 15 ]",
    "BLACKBOX::RANGE [(_37, 5)] []",
    "EXPR [ (16, _35) (1, _36) (-1, _38) 0 ]",
    "EXPR [ (-1, _19, _33) (1, _19) (-1, _39) 0 ]",
    "EXPR [ (1, _2, _39) (-1, _38, _39) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [(_40, 4)] []",
    "BLACKBOX::RANGE [(_41, 4)] []",
    "EXPR [ (1, _2) (-16, _40) (-1, _41) 0 ]",
    "EXPR [ (-1, _9, _19) (1, _9) (1, _19) (-1, _42) -1 ]",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(43)), Simple(Witness(44))]",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _43) (-1, _44) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _19) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(45)), Simple(Witness(46))]",
    "BLACKBOX::RANGE [(_45, 4)] []",
    "BLACKBOX::RANGE [(_46, 5)] []",
    "EXPR [ (-1, _19) (1, _46) (-1, _47) 16 ]",
    "BLACKBOX::RANGE [(_47, 5)] []",
    "EXPR [ (-1, _1, _19) (16, _19, _45) (1, _19, _46) (1, _1) (-16, _45) (-1, _46) 0 ]",
    "EXPR [ (1, _19, _43) (-1, _19) (-1, _43) (-1, _48) 1 ]",
    "EXPR [ (-1, _19, _43) (1, _19) (1, _43) (-1, _49) 0 ]",
    "EXPR [ (1, _21, _28) (1, _31, _32) (-1, _50) 0 ]",
    "EXPR [ (1, _24, _28) (-1, _51) 0 ]",
    "EXPR [ (1, _28, _30) (-1, _52) 0 ]",
    "EXPR [ (1, _35, _39) (-1, _53) 0 ]",
    "EXPR [ (1, _39, _41) (-1, _54) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(55)), Simple(Witness(56))]",
    "BLACKBOX::RANGE [(_55, 1)] []",
    "BLACKBOX::RANGE [(_56, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _55) (-1, _56) 4294967298 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _19) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(57)), Simple(Witness(58))]",
    "BLACKBOX::RANGE [(_57, 4)] []",
    "BLACKBOX::RANGE [(_58, 5)] []",
    "EXPR [ (-1, _19) (1, _58) (-1, _59) 16 ]",
    "BLACKBOX::RANGE [(_59, 5)] []",
    "EXPR [ (-1, _2, _19) (16, _19, _57) (1, _19, _58) (1, _2) (-16, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _19, _55) (-1, _19) (-1, _55) (-1, _60) 1 ]",
    "EXPR [ (-1, _19, _55) (1, _19) (1, _55) (-1, _61) 0 ]",
    "EXPR [ (1, _49, _52) (-1, _62) 0 ]",
    "EXPR [ (1, _49, _53) (-1, _63) 0 ]",
    "EXPR [ (2, _5) (1, _19) -7 ]",
    "EXPR [ (1, _45, _48) (1, _49, _50) -15 ]",
    "EXPR [ (1, _30, _48) (1, _49, _51) -1 ]",
    "EXPR [ (1, _57, _60) (1, _61, _62) -12 ]",
    "EXPR [ (1, _41, _60) (1, _61, _63) -11 ]",
    "EXPR [ (1, _49, _54) -8 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(64)), Simple(Witness(65))]",
    "BLACKBOX::RANGE [(_64, 1)] []",
    "BLACKBOX::RANGE [(_65, 15)] []",
    "EXPR [ (1, _6) (-32768, _64) (-1, _65) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(64))], linear_combinations: [(1, Witness(6)), (65536, Witness(64))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 13 })], outputs: [Simple(Witness(66)), Simple(Witness(67))]",
    "BLACKBOX::RANGE [(_66, 12)] []",
    "BLACKBOX::RANGE [(_67, 4)] []",
    "EXPR [ (1, _67) (-1, _68) 3 ]",
    "BLACKBOX::RANGE [(_68, 4)] []",
    "EXPR [ (-2, _6, _64) (1, _6) (65536, _64) (-13, _66) (-1, _67) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(66))], q_c: 0 })], outputs: [Simple(Witness(69))]",
    "EXPR [ (1, _66, _69) (1, _70) -1 ]",
    "EXPR [ (1, _66, _70) 0 ]",
    "EXPR [ (2, _64, _66) (-65536, _64) (-1, _66) (-1, _71) 65536 ]",
    "EXPR [ (-1, _70) (-1, _72) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(67))], q_c: 0 })], outputs: [Simple(Witness(73))]",
    "EXPR [ (1, _67, _73) (1, _74) -1 ]",
    "EXPR [ (1, _67, _74) 0 ]",
    "EXPR [ (-2, _64, _67) (65536, _64) (1, _67) (-1, _75) 0 ]",
    "EXPR [ (-1, _74) (-1, _76) 1 ]",
    "EXPR [ (1, _75, _76) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(77)), Simple(Witness(78))]",
    "BLACKBOX::RANGE [(_77, 1)] []",
    "BLACKBOX::RANGE [(_78, 15)] []",
    "EXPR [ (1, _7) (-32768, _77) (-1, _78) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(79)), Simple(Witness(80))]",
    "BLACKBOX::RANGE [(_79, 1)] []",
    "BLACKBOX::RANGE [(_80, 15)] []",
    "EXPR [ (1, _6) (-32768, _79) (-1, _80) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(7), Witness(77))], linear_combinations: [(1, Witness(7)), (65536, Witness(77))], q_c: 0 })], outputs: [Simple(Witness(81))]",
    "EXPR [ (-2, _7, _77) (1, _7) (65536, _77) (-1, _82) 0 ]",
    "EXPR [ (1, _81, _82) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(79))], linear_combinations: [(1, Witness(6)), (65536, Witness(79))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(82))], q_c: 0 })], outputs: [Simple(Witness(83)), Simple(Witness(84))]",
    "BLACKBOX::RANGE [(_83, 15)] []",
    "BLACKBOX::RANGE [(_84, 15)] []",
    "EXPR [ (1, _82) (-1, _84) (-1, _85) -1 ]",
    "BLACKBOX::RANGE [(_85, 15)] []",
    "EXPR [ (-2, _6, _79) (-1, _82, _83) (1, _6) (65536, _79) (-1, _84) 0 ]",
    "EXPR [ (-1, _83) (-1, _86) 32768 ]",
    "EXPR [ (-2, _77, _79) (1, _77) (1, _79) (-1, _87) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(83))], q_c: 0 })], outputs: [Simple(Witness(88))]",
    "EXPR [ (1, _83, _88) (1, _89) -1 ]",
    "EXPR [ (1, _83, _89) 0 ]",
    "EXPR [ (2, _86, _87) (1, _83) (-1, _90) 0 ]",
    "EXPR [ (-1, _89) (-1, _91) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(84))], q_c: 0 })], outputs: [Simple(Witness(92))]",
    "EXPR [ (1, _84, _92) (1, _93) -1 ]",
    "EXPR [ (1, _84, _93) 0 ]",
    "EXPR [ (-2, _79, _84) (65536, _79) (1, _84) (-1, _94) 0 ]",
    "EXPR [ (-1, _93) (-1, _95) 1 ]",
    "EXPR [ (1, _94, _95) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(96)), Simple(Witness(97))]",
    "BLACKBOX::RANGE [(_96, 1)] []",
    "BLACKBOX::RANGE [(_97, 15)] []",
    "EXPR [ (1, _6) (-32768, _96) (-1, _97) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(96))], linear_combinations: [(1, Witness(6)), (65536, Witness(96))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 11 })], outputs: [Simple(Witness(98)), Simple(Witness(99))]",
    "BLACKBOX::RANGE [(_98, 12)] []",
    "BLACKBOX::RANGE [(_99, 4)] []",
    "EXPR [ (1, _99) (-1, _100) 5 ]",
    "BLACKBOX::RANGE [(_100, 4)] []",
    "EXPR [ (-2, _6, _96) (1, _6) (65536, _96) (-11, _98) (-1, _99) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 })], outputs: [Simple(Witness(101))]",
    "EXPR [ (1, _98, _101) (1, _102) -1 ]",
    "EXPR [ (1, _98, _102) 0 ]",
    "EXPR [ (2, _96, _98) (-65536, _96) (-1, _98) (-1, _103) 65536 ]",
    "EXPR [ (-1, _102) (-1, _104) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(99))], q_c: 0 })], outputs: [Simple(Witness(105))]",
    "EXPR [ (1, _99, _105) (1, _106) -1 ]",
    "EXPR [ (1, _99, _106) 0 ]",
    "EXPR [ (-2, _96, _99) (65536, _96) (1, _99) (-1, _107) 0 ]",
    "EXPR [ (-1, _106) (-1, _108) 1 ]",
    "EXPR [ (1, _107, _108) -4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(6))], q_c: 65536 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(109)), Simple(Witness(110))]",
    "BLACKBOX::RANGE [(_109, 2)] []",
    "BLACKBOX::RANGE [(_110, 16)] []",
    "EXPR [ (-1, _6) (-65536, _109) (-1, _110) 65536 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(111)), Simple(Witness(112))]",
    "BLACKBOX::RANGE [(_111, 1)] []",
    "BLACKBOX::RANGE [(_112, 16)] []",
    "EXPR [ (1, _6) (-65536, _111) (-1, _112) 32768 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(113)), Simple(Witness(114))]",
    "BLACKBOX::RANGE [(_113, 1)] []",
    "BLACKBOX::RANGE [(_114, 16)] []",
    "EXPR [ (1, _110) (-65536, _113) (-1, _114) 32768 ]",
    "EXPR [ (-1, _111, _113) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(115)), Simple(Witness(116))]",
    "BLACKBOX::RANGE [(_115, 1)] []",
    "BLACKBOX::RANGE [(_116, 15)] []",
    "EXPR [ (1, _110) (-32768, _115) (-1, _116) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(110), Witness(115))], linear_combinations: [(1, Witness(110)), (65536, Witness(115))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 11 })], outputs: [Simple(Witness(117)), Simple(Witness(118))]",
    "BLACKBOX::RANGE [(_117, 12)] []",
    "BLACKBOX::RANGE [(_118, 4)] []",
    "EXPR [ (1, _118) (-1, _119) 5 ]",
    "BLACKBOX::RANGE [(_119, 4)] []",
    "EXPR [ (-2, _110, _115) (1, _110) (65536, _115) (-11, _117) (-1, _118) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 })], outputs: [Simple(Witness(120))]",
    "EXPR [ (1, _117, _120) (1, _121) -1 ]",
    "EXPR [ (1, _117, _121) 0 ]",
    "EXPR [ (2, _115, _117) (-65536, _115) (-1, _117) (-1, _122) 65536 ]",
    "EXPR [ (-1, _121) (-1, _123) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(118))], q_c: 0 })], outputs: [Simple(Witness(124))]",
    "EXPR [ (1, _118, _124) (1, _125) -1 ]",
    "EXPR [ (1, _118, _125) 0 ]",
    "EXPR [ (-2, _115, _118) (65536, _115) (1, _118) (-1, _126) 0 ]",
    "EXPR [ (-1, _125) (-1, _127) 1 ]",
    "EXPR [ (1, _126, _127) -65532 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 2 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(128)), Simple(Witness(129))]",
    "BLACKBOX::RANGE [(_128, 1)] []",
    "BLACKBOX::RANGE [(_129, 16)] []",
    "EXPR [ (1, _7) (-65536, _128) (-1, _129) 2 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(130)), Simple(Witness(131))]",
    "BLACKBOX::RANGE [(_130, 1)] []",
    "BLACKBOX::RANGE [(_131, 16)] []",
    "EXPR [ (1, _7) (-65536, _130) (-1, _131) 32768 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(132)), Simple(Witness(133))]",
    "BLACKBOX::RANGE [(_132, 1)] []",
    "BLACKBOX::RANGE [(_133, 16)] []",
    "EXPR [ (1, _129) (-65536, _132) (-1, _133) 32768 ]",
    "EXPR [ (1, _130) (-1, _132) (-1, _134) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 })], outputs: [Simple(Witness(135))]",
    "EXPR [ (1, _134, _135) (1, _136) -1 ]",
    "EXPR [ (1, _134, _136) 0 ]",
    "EXPR [ (-1, _130, _136) (1, _130) (1, _136) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(137)), Simple(Witness(138))]",
    "BLACKBOX::RANGE [(_137, 1)] []",
    "BLACKBOX::RANGE [(_138, 15)] []",
    "EXPR [ (1, _129) (-32768, _137) (-1, _138) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(139)), Simple(Witness(140))]",
    "BLACKBOX::RANGE [(_139, 1)] []",
    "BLACKBOX::RANGE [(_140, 15)] []",
    "EXPR [ (1, _6) (-32768, _139) (-1, _140) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(129), Witness(137))], linear_combinations: [(1, Witness(129)), (65536, Witness(137))], q_c: 0 })], outputs: [Simple(Witness(141))]",
    "EXPR [ (-2, _129, _137) (1, _129) (65536, _137) (-1, _142) 0 ]",
    "EXPR [ (1, _141, _142) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(139))], linear_combinations: [(1, Witness(6)), (65536, Witness(139))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 0 })], outputs: [Simple(Witness(143)), Simple(Witness(144))]",
    "BLACKBOX::RANGE [(_143, 15)] []",
    "BLACKBOX::RANGE [(_144, 15)] []",
    "EXPR [ (1, _142) (-1, _144) (-1, _145) -1 ]",
    "BLACKBOX::RANGE [(_145, 15)] []",
    "EXPR [ (-2, _6, _139) (-1, _142, _143) (1, _6) (65536, _139) (-1, _144) 0 ]",
    "EXPR [ (-1, _143) (-1, _146) 32768 ]",
    "EXPR [ (-2, _137, _139) (1, _137) (1, _139) (-1, _147) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: 0 })], outputs: [Simple(Witness(148))]",
    "EXPR [ (1, _143, _148) (1, _149) -1 ]",
    "EXPR [ (1, _143, _149) 0 ]",
    "EXPR [ (2, _146, _147) (1, _143) (-1, _150) 0 ]",
    "EXPR [ (-1, _149) (-1, _151) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: 0 })], outputs: [Simple(Witness(152))]",
    "EXPR [ (1, _144, _152) (1, _153) -1 ]",
    "EXPR [ (1, _144, _153) 0 ]",
    "EXPR [ (-2, _139, _144) (65536, _139) (1, _144) (-1, _154) 0 ]",
    "EXPR [ (-1, _153) (-1, _155) 1 ]",
    "EXPR [ (-1, _154, _155) 4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(156)), Simple(Witness(157))]",
    "BLACKBOX::RANGE [(_156, 1)] []",
    "BLACKBOX::RANGE [(_157, 15)] []",
    "EXPR [ (1, _129) (-32768, _156) (-1, _157) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(158)), Simple(Witness(159))]",
    "BLACKBOX::RANGE [(_158, 1)] []",
    "BLACKBOX::RANGE [(_159, 15)] []",
    "EXPR [ (1, _110) (-32768, _158) (-1, _159) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(129), Witness(156))], linear_combinations: [(1, Witness(129)), (65536, Witness(156))], q_c: 0 })], outputs: [Simple(Witness(160))]",
    "EXPR [ (-2, _129, _156) (1, _129) (65536, _156) (-1, _161) 0 ]",
    "EXPR [ (1, _160, _161) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(110), Witness(158))], linear_combinations: [(1, Witness(110)), (65536, Witness(158))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: 0 })], outputs: [Simple(Witness(162)), Simple(Witness(163))]",
    "BLACKBOX::RANGE [(_162, 15)] []",
    "BLACKBOX::RANGE [(_163, 15)] []",
    "EXPR [ (1, _161) (-1, _163) (-1, _164) -1 ]",
    "BLACKBOX::RANGE [(_164, 15)] []",
    "EXPR [ (-2, _110, _158) (-1, _161, _162) (1, _110) (65536, _158) (-1, _163) 0 ]",
    "EXPR [ (-1, _162) (-1, _165) 32768 ]",
    "EXPR [ (-2, _156, _158) (1, _156) (1, _158) (-1, _166) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: 0 })], outputs: [Simple(Witness(167))]",
    "EXPR [ (1, _162, _167) (1, _168) -1 ]",
    "EXPR [ (1, _162, _168) 0 ]",
    "EXPR [ (2, _165, _166) (1, _162) (-1, _169) 0 ]",
    "EXPR [ (-1, _168) (-1, _170) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: 0 })], outputs: [Simple(Witness(171))]",
    "EXPR [ (1, _163, _171) (1, _172) -1 ]",
    "EXPR [ (1, _163, _172) 0 ]",
    "EXPR [ (-2, _158, _163) (65536, _158) (1, _163) (-1, _173) 0 ]",
    "EXPR [ (-1, _172) (-1, _174) 1 ]",
    "EXPR [ (-1, _173, _174) 65532 ]",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    ""
  ],
  "debug_symbols": "tZzLTiNJEEX/xWsW+YjIyORXRqMWD9OyZBlkYKQR6n8f07INclHtnuO+O8pV58bmRN2ihHlb3C9vX79/W20eHp8X13+9LdaPdzcvq8fN7uhtET8/en662bwfPb/cbF8W16WkdrVYbu7ffyztx9XiYbVeLq49/biaXGzm+2vN++dL/75adGn6kKbnpI3P2viija/aeNPGuza+aeO1O5v/6NJGPY0f0viStPFZG3/51nqr+2s92ml81cabNt618ZdvrY/Dta2k0/jQxndt/JDG18u3tsUxfuTT+KyNL9r4qo2/fGvDDmsVLU7jXRvftPGhjb98a7uX/bV9UuV1SOMtaeOzNr5o46s23rTxro2/fGtHOjxGjXz6GGWhje/a+CGNd23XurZrvUhvyF618dqudW3XepPeFDy08dqudW3XNm3XNm3XNm3XNm3XNpPekJtr47Vd27Rd2y7f2pyO+TmVcjpgiAfE5Zs7RvlFfhbnF3F+Fedfvr05pzgMyBNFw9UDmnpAqAd09YAhHtCTekBWDyjqAfUPDGh2HBCnm9y1Pdy1v/N2bQ/30N5GexfnD23+ENfwUO/vUO/vqOoB6iYe6iYe6iYe6iYe6iYe6ibePW2LeyanmV2u4zjBYgLN7GekA2RpTKBKICOQE6gR6EuH6+7KPVQttwnUCTQA9PXf9ZyDMoEKgSqBjEBOoEYgYkQmRmRiRCFGFGJEIUYUYkQhRhRiRCFGlPNGlDyBZoyofoQsTaABoJoIlAlUCFQJZARyAjUCBYGIEZUYYcQII0YYMcKIEUaMMGKEESOMGGHECCNGODHCiRFOjHBihBMjnBjhxAj/DSN8As0Y4R9V0yb95ANALREoE6gQqBLICOQEagQKAhEjGjEiiBFBjAhiRBAjghgRxIggRgQxIs4bEZPH0Zgxon/cjfrkLUFPBMoEKgSqBDICOYEagYJAnUDEiEGMGMSIcd6IMf26RiWQEcgJ1AgUBOoEGv8fKikRKBOoEKgSyAjkBGoECgJ1AhEjMjEiEyPybxgxJtDXRng51qdXm0BGICdQI1AQqBNoAGjmneUZKBOoEIgYUYgRhRhRiBGFGFGIEYUYUeeMsA/IJ1AmUCFQJZARyAnUCBQE6gQaADJihBEjjBhhxAgjRhgxwogRRowwYoQRI5wY4cQIJ0Y4McKJEU6McGKEEyOcGDHzztJz/QU0887SWz5C02+pz7yzPAMVAlUCGYGcQI1AQaBOoAGgIEYEMSKIEUGMCGJEECOCGBHEiCBGBDGiEyM6MaITIzoxohMjOjGiEyM6MaITI2beWbqNOWh3cLtdrder798+/yup3cf/3GxXN7fr5f7w4XVz9+nsy79PhzMH/mn7eLe8f90u35N+ntvF/wc=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
