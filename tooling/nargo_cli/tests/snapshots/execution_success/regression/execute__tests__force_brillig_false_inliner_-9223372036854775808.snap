---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbhs7DEX/xessRhQpSv2Vh4fCSZzCgOEEblLgIei/P2nE4zSLdDHe+B7b4TFHFmcmft89Hu7ffnw/np+ef+6+/fO+u78cT6fjj++n54f96/H53F99/3234+n318vh0F/a/fF+r3rZXw7n192389vpdLf7tT+9rX/082V/XvN1f+nvLne7w/mxZxc+HU+HQb/vPqqXr0tFlhLVIlKuAvtsSF8bVC0EavW2es8b6q3kqDdPN9ZvOX5rLGCRZUN98Wt929J/MaG+bKl35fi9+Jb6plFfF9lQX6/91037py3sn5a27J/qzue3Ld9fWq4NpEW2rEBrcpsgpYVjSGnTIvSqaw9J2yZD0avBNx2FSMMgeVMPct3LSTZtpk89WLvVUL78Lv56Ss7tekpW32RwLgmiS9tgyL0sDFlTudUgaZMh29Wgy80G22Swj6Mo5VaDb1uH+nEU1W81tHyzYdOOsutcZMu6zaAfhk3fpqV8q6Gkq8E3raRp+8rwb3+2fzhePt0k7rxP8d2uro9tfUzLjDRDZuQZOsNmlBnTkbqkL0Bqa8gyI83olv4VS56hM2xGt/SbFPEZdUZbI3dLv/jkNENm5Bnd0g8224wyw2fUcaHo2WbqEpkiJTJHaqRFlnGC7emRNbLNtNmXzb5M1g+1PGP2ZbMvK9NoHhmdWXRWorMSnZXorERnRecnFouMzkp0Voav79zSZvrw9VX1FCmROXL4+sq6RZZIj6yRbWZdIlOkRA5f7Rn91Vi5Gv1Vn59Xa2Sb2aK/Fr4WvpYjo78W/bXor0V/Lfpr0V+/QZqNpGVs2LEBl7FldUAGFDCgAGPz2oAKtIB1EFZIgAAZUMCAAmBOmBNmwSyYBbNgFsyCWTCPUZFx7GNYxAe0gDEwExIgQAYUMKAADmDOmBWzYlbMilkxK2bFrJgVs2I2zIbZMBtmw2yYDfOYLBkbYIzWuAykMVsrjOGakAABMqCAAQVwAHPB7Jgds2N2zI7ZMTtmxzzGLS8DxmkzjbPoAiRAgAwoYEABHKgA5oa5YR7DN27N05i+CQoYUAAHKtAmyJjBCQkQIAMKGFAAByqAOWFOmMcM5vXKMsw6QAEDCuBABVrAeoFaIQECYBbMglkwC2bBLJjHDOb1apcAATKggAEFcKACLUAxK2bFrJgVs2JWzIpZMStmw2yYDbNhNsyG2TAbZsM8ZjCPC/mYwewDEiBABhQwoAAOVKAFOGbH7Jgds2N2zI7ZMTtmx1wxV8wVc8VcMVfMFXPFXDGvMzj+Zfy1vxz396dD/ED39HZ++OP3utf/XniHX/ReLs8Ph8e3y2Hctq3v9Ru5/wE=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
