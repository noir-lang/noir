---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZxbTiNJEEX34m8+8hUZGWxlNGrxMC1LyCADI41Q731MyzbIReGeY+4f5cpzA4kTGUXK9uvidnn98vPHan338LS4/Ot1cf9wc/W8elhvr14X/vulp8er9dvV0/PV5nlxWUrqF4vl+vbtx9J/XSzuVvfLxaWlXxeTxa3Zbm2z8XHp3xeLIU0PaXpO2visjS/a+KqNb9p408Z3bby2Z/O3Nq3X4/iQxpekjc/a+PO71nrdrTXvx/FVG9+08aaNP79rLfZre0nH8a6NH9r4kMbX87u2+yE+8nF81sYXbXzVxp/ftd72beXdj+NNG9+18a6NP79rh5Xd2jEZ5TWk8S1p47M2vmjjqza+aeNNG39+10baP0ZFPn6Maq6NH9r4kMabdtaadtZakW7IVrXx2llr2llrXbopmGvjtbPWtLO2a2dt187arp21XTtre5NuyN208dpZ27Wztg/pltZDGu9JG5+18ed3bU6Hv21OpRwXqOoC39C5Ub7IN3F+F+e7OP/87s05+b5AnmwPHuICI6kLZHWBoi5Q1QWauoCpC3R1Af+GAr0dCvhxJw/t/7xD+/QcSfrbR9Zuo1HE+VWcLx7Doe7fUPdvuLqAehKHehJvn/TkFbK8QpFXqPIKTTxrcprp5xqHCs0n0EyPetpDLcUEcgINAgWA5t6D9DX0qcV1u3IH1Zb7BCoEqgRqBDICdQI5gQaBAkCfv7/lFESMKMSIQowoxIhCjCjEiEKMKMSIQoyoxIh62oiSJ9CMEdUOUEsTqBKoEcgI1AnkBBoECgC1RKBMIGJEI0Y0YkQjRjRiRCNGNGJEI0YYMcKIEUaMMGKEESOMGGHECCNGGDHCiBGdGNH/wAibQDNG2Puo6ZP51CuBGoGMQJ1ATqBBoACQJwJlAhEjnBjhxAgnRjgxwokRToxwYsQgRgxixDhthE8eR8eMEeN9NxqTU4LRCGQE6gRyAg0CBYAiESgTqBCIGBHEiCBGxGkjYvpxGSfQIFD8f6ikRKBMoEKgSqBGICNQJ5ATaBCIGJGJEZkYkYkRmRiRiRGZGJH/wIiYQJ8bYeUwPq22CTQIFACaObM8AWUCFQJVAjUCGYE6gYgRhRhRiBGVGFGJEZUYUYkRdc6I9g7ZBDICdQI5gQaBAkAtESgTqBCoEogY0YgRjRjRiBGNGNGIEUaMMGKEESOMGGHECCNGGDHCiBFGjDBiRCdGdGJEJ0bMnFlarl9BM0b0fICm3xIwc2Z5AuoEcgINAgWAZs4sT0CZQIVAlUDECCdGODHCiRFOjHBixCBGDGLEIEYMYsQgRgxixCBGDGLEIEYMYkQQI4IYEcSImTNLazEHbS+uN6v7+9XPHx+/ymv78j9Xm9XV9f1yd3n3sr75cPf538f9nT3/uHm4Wd6+bJZvSb/vbeP/Aw==",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
