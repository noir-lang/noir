---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
