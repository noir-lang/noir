---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "9166088691658183098",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
