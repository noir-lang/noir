---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
