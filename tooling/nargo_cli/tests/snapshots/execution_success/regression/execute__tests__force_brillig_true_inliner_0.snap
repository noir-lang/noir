---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
