---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
