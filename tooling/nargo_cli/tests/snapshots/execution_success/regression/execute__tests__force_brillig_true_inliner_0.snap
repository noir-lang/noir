---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
