---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbhs7DEX/xessRhQpiv2Vh4fASZzCgOEEblygCPrvFYe8k2aRLuSN77EdHlNjcWbi993T4eH6/f54fn75sfv23/vu4XI8nY7f708vj/u348t5vPr++26Hp/dvl8NhvLT76/1R9bq/HM5vu2/n6+l0t/u5P13XP/rxuj+v+ba/jHeXu93h/DRyCJ+Pp4PT77uP6uXrUqKlZTURtU0gnw3lawOzpICl31avdaJeWs160XJj/cz6xXAAGy0T9U23epvpvwmhvs3UK2P92nSm3jjr+0IT9X3rv0/tH1uwf6zM7J+uis+3me+vLFsDZaGZI2BGtwlKWbCGUqYOwqjaeihsU4bGm0GnVkFkMFCd6oG2vVxoajN96kHsVkP78rv45ym52nZKZp0yKC4JxItNGOooS0Pl0m41UJkyVNkMvNxskCmDfKyitVsNOncc+scqut5qsHqzYWpHyTYXVSrPGfjDMPVtSqm3GlrZDDp1JIXtK8P/49n+8Xj5dJO40zHFd7u+Ptr6WJaIEkERNYIjJKJFhKMMyTgAxdagJaJEDMv4iqlGcIREDMu4SSGN6BG2Rh2WcfGpJYIiasSwjMVWiWgRGtH9QjHSInnJLJmUWTM5UzKbn2BHambPtEiJviT6Elo/VGpE9CXRl7QwimZmZ5KdteysZWctO2vZWeP4xCaZ2VnLzpr7xs5tFqnuG0dVSyZl1kz3jSOrktkyNbNnWmRfMksmZdZM9/WR2V/P9fbsr/f43G6Rlv1Z9mfps/RZ9mfZn2V/lv1Z9mfZ37hBAhQARUtl8U3rW3LxbcsOAmgABXSAj4H4ACyAAiBABTBAAA2ggA6AmWAmmAlmgplgJpgJZoKZYPZxIV+7DwypQwEQoAIYIIAGUEAHWALDzDAzzAwzw8wwM8wMM8PMMAvMArPALDALzAKzwCwwC8w+W+QbwIfLLwzFpyuAABXAAAE0gAI6wBIUZoVZYVaYFWaFWWFWmBVmhdkHri4OfuosDgSoAAYIoAEU0AGW4KMXALPBbDD7+PnNevH5C2gABXSABZDPYEABEKACGCCABlBAB8BcYC4wF5gLzD6Ddb3WuJkdGkABHWAJ6wVqhQIgQAUwAGaCmWAmmAnmCnOF2Wewrte/CmCAABpAAR1gCT6DAQUAM8PMMDPMDDPDzDAzzAKzwCwwC8wCs8AsMAvMArPA3GD2Gax+afcZrOpQAQwQQAMooAMswWcwoABgVpgVZoVZYVaYFWaFucPcYe4wd5g7zB3mDnOHucPcYTaY1xn0fyJ/7i/H/cPpkD/ZPV/Pj3/9gvf26xXv4De+18vL4+Hpejn4jdz63ri1+wM=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
