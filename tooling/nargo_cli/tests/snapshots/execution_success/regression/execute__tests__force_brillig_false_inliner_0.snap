---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbttKDEX/xessxOGQQ/ZXHh4KJ3EKA4YTuEmBh6D//oYaXqVZpIvRJvfYMo+pkSgpfj88nu7ffnw/X5+efx6+/fN+uL+dL5fzj++X54fj6/n52t99/313wMvvr7fTqb91+GN7r3o53k7X18O369vlcnf4dby8rR/6+XK8rvl6vPWty93hdH3s2YVP58sp6PfdR/XydWkpi2Z1KUU3gXw20NeGWiUFVWxffeOJelHOemm0s35m/8WxgFqWiXptW73VffU+s/8qBfU6U98q1q9pm6n3mvW2lIl62/q3qfPPF5x/TjPnn7WG7/eZ40/L1gAtZWYF3Ms+AS3VN8PUSUC0YBWIppaRSOtmaFN7QbytA1WfMZSyrUPhOcM2DVSmTsdPPcjuvdAvj8Vfbwrs202htilDw02p1MUnDNzL0sCVdK+h0JSBZTPUZbdBpgzysReqew1tbh3sYy+s7TU47zZMnVGyzQUL1zlD/TBMHU0h3mtQ2gxtaiWl+leGf/ur48P59ukx9dD6FN8dbP3r619aRtCIMoJH1BEyQkcMB3VJXwDyNcoygkZ0Sz/EhUfUETKiW/pjTmkjbISvwd1iPWhEGcEjatzSekqmZrZMi4tkTx9Zl0zKLJmcWTMlM3y999oyLdNHyuhNRm9SxrcKZ2Z3kt2JDqu0zOxOsjvN7jS70+xOszut41tVMrM7ze40fH011Ue28PUVbJRZMjkzfL3vJpma2TIt00fakkmZ4evnmnFmzZTM9Fn6zPL9XD3P/XXK19mfZ39eMyUzfZ4+z/48++uPWgACFAADsklaBKCABjB8GOYYiHXTOhISEEOhAQyoAAEoIMajBRjAE2JIBhCgABhQAQJQAMwF5gIzw8wwM8wMM8PMMDPMMUMl9j2GKC6tFFO0QozRAAIUAAMqQAAKaACYK8wCs8AsMAvMArPALDALzAKzwKwwK8wKs8KsMCvMCnPMGC8BcYmjAE+IMRtAgAJgQAUIQAENAHOD2WA2mA1mg9lgNpgNZoM5Bo/Xy3OY1wv0AiBAATCgAgSggAYwQJrLsgAIEOYawIAKEIACGsAAnhAzOIAAMBPMBDPBTDATzAQzwVxgLjDHDMajXYkZ5LgZxQwOEIACGsAAnhAzOIAABQAzw8wwM8wMM8PMMMcMcgsgQAEwoAIEoIAGMIAnCMwCs8AsMAvMArPALDALzAKzwqwwK8wKs8KsMCvMCrPCvM6gxYNDmD2AAAXAgAoQgAIawACeYDAbzAazwWwwG8wGs8FsMBvMDrPD7DA7zA6zw+wwO8wOc8zg+m/Mr+PtfLy/nPJHyKe368Mfv0m+/veCLfjV8uX2/HB6fLud4sFw3dYfFf8H",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
