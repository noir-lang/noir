---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
