---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
