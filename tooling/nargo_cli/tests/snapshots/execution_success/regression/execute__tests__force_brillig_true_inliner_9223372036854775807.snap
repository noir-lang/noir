---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvRbty2EoDhd/G1LzRDcmaYVymCwk3dwoDhBG5ygIMi7344on6tc4BdpDR6U/6pV5+1XFG7K8F/3/3++Nu3P399evnj8193H375++6316fn56c/f33+/Onh69Pnl/F//77b8j/V7z7o/V2NOfR9aNscZA46hzKHOod296GMwebgc4g59H2wbQ4yB51DmUOdw1RsKHUMPoeYQ98H3+Ygc9A5DKWNoc6hzcHm4HOIOfR9iG0OMgedw1RiKjGVmEpMJaYSU+lT6UOxMegcyhyG4mNocxhKH4PPIebQ90G2wciWIYQS45EiGf0I2Qghxm8SzcgHl4x88JgW0XRaRiEqMXZMLMMIJ9LxjHRyD8tGCKFEypGRB0Luc2mEEU7kYZX7XPoRdSOEUKIQlUg5n2k1wokgUs5J2A/aPYRQohCVaIQdU5eH8IwgmNU8kGcIoUQhcsf2CKIfkUfwjNyxfC3yKJ5RiEo0wggnguhH5FE9AzmQAzmQAzmQAzmQA7kjd+SO3JE7ckfuyB25I/dD1m0jhFCiEJVohBFOBJHyOIw1V8oMIZQoRCUaYQSOHq+p5tpRz2hEPjgycjd6Rp7ytow8Wsa4L50c5Rj1GMsx1mNsx2jHmKfQPYLoR+SamSFEnkw1oxB5Qi0ZjchTcz6NXDMzgkg55y7XzAwhUs5ZyDUzoxKNMMKJIPoR+8l/DyGQDdmQDdmQDdmQczmVfA1yOc0QQolCVKIRRjgRBHIgB3IgB3IgB3IgB3Ig53IqeZTkcpohRL6R5XGTy2lGJRphhBNB9BllUyK3kozcn8hwIojcahwtJZfKDCGUKEQlGmGEE0EgK7IiK7IiK7IiK7IiK7IiF+SCXJALckEuyAW5IBfkglyRK3JFrsgVuSJX5IpckStyQ27IDbkhN+SG3JAbckNuyIZsyIZsyIZsyIZsyIZsyI7syI7syI7syI7syI7syIEcyIEcyIEcyIEcyIEcyB25I3fkjtyRO/K+vmqGE0H0GTXfrmYIoUQhUm4ZjUjZMpwIoh+xr8E9hFCiEJVoBLIgC7IgK7IiK7IiK7IiK7IiK7IiF+SCXJALckEuyAW5IBfkglyRK3JFrsgVuSJX5IpckStyQ27IDbkhN+SG3JAbckNuyIZsyIZsyIZsyIZsyIZsyI7syI7syI7syI68r0HPCKIfsa/BPYRQohCVYPN9WUVGPrhkFKISjTDCiSD6jLYvq54hhBKFqEQjjHAiiH6EIAuyIAuyIAuyIAuyIAuyIiuyIiuyIiuyIiuyIityQS7IBbkgF+SCXJALckEuyBW5IlfkilyRK3JFrsgVuSI35IbckBtyQ27IDbkhN+SGbMiGbMiGbMiGbMiGbMi5rJrkVYqNECKvBOTljP2Kwh6VaIQRTgTRjwic/SrCfikkt9oynAgit6p5nWQjhFCiEJVohBFOBHHItm2EEEoUohKNMMKJIJAFWZAFWZAFWZAFWZBzfbWW0Y/I9TVDCCVStoxKNMIIJ4LoR+T6miGEEsgFuSAX5IJckAtyRa7IFbkiV+SKXJErckWuyA0511fzDCUKUYmUI8MIJ4LoR+T6miGEEoWoBLIhG7IhG7IjO7IjO7IjO7IjO7IjO3IgB3IgB/J+Ha9nNMIIJ4IYsm15lXEjhFCiEJVohBFOBHHIvm1EypKhRCEq0QgjnAiiH5FrcAayIAuyIAuyIAuyIAuyIiuyIiuyIiuyIiuyIucaNM0rthshhBKFSLlkNMIIJ4LoR+QanCGEEoVArsi5Bi0vJecanBFEPyLX4AwhlChEJRqB3JAbckM2ZEM2ZEM2ZEM2ZEM2ZEN2ZEd2ZEfONWj7pfJGGOFEypbRj8g1OEMIJQpRiUYY4QRyIHfkjtyRO3JH7sgduSN35H7IsW2EEEoUohKNSNkznAiiH7G//WlGgpFRiEok2DOMcGKALhl9fmCI/e1vDyHylkL+ilxoM4xwIp39wf2IXGgzhND56T32D5N7VKIRRjgRRD9i/zC5x3HNKnJZec1ohBG5h/vdlSD6EbmsPOdw/+iYk7B/dNyjEOnk78ol4zljuWRmCDG2ityNXDKRs5FLZkYjjBj7EynnkomcllwykbuaS2aGEEoUohKNSHm/U+REEP2IXDIzhFAi5TzYcsnMaIQRKedE5ZKZ0Y/IJRM5P7lkZihRiEo0wggnEozv3+/vuDf469fXx8e8NfjmZuG4hfjl4fXx5evdh5dvz8/3d/95eP62P+ivLw8v+/j14XX8dLwajy+/j3GAfzw9P2Z9v79svV3fVMdF/mNrHRfaT6D9KMh1YVy1OYBx2WZh+5rXbub2Ld63vZeV7c/9H19nF7Zv+cY2t3d55/Yr89/yK9WxvV/bPq5vP+55HduP+1grv7+z/fgusbD9uDHLCzjuyK7sQXdmsHtd2b7r+3ZApJzCuDW6NAntMgm2No21XwRZehabn89CytI+9HYRrr8U/+LROO7ln8DWl6Zh88tE9rXDIT/vHdPgiwdUvxxQK2dFO+fRlmbBGke0LR1MLkzB+MKyMgOq5wyMe7JLQi2nsPTO8sM+tP5ewa4uqZvvz+eRMO6M+5Lgcgq+KFz2IdqSEH4KfW0ezlPLuNkvK0LZykXoS0LnoNZxa2ltJreLcHUfyntPkDeBfh4P0uPNTP4D4XzL1+3tZ8afngY7P/OMXDokXTk/6bjMcE3IM8D1tbmdZ2kVv/Isbgq1nG9343bb0k40P4lxzXqJsHytJmHXP3zcJi5vWHb9Q+iN16Ns54luLLOlBe7mp3D9La/dICTOj/LSr3+AuUn81OK4LbxzcZRxYmAixo3nlRfjraCyJJxHdhk3id8ttCWhXZ6F2XsFX5uHuDyL8PcKS+98Pwor71ulXRbnuKO5JtSLsPRqNinvFUxOwZdmstX+E8Kt1a3b5XLJ9vYU8w8E8cv5oS0Jb/fh2hnGt3/1rc/Og1LGzZy1N53L96wb31FufRD5uVfjtvAzr8bP78PVV8NuCI33b42Vb91+fs/x65+lbm1/fqodl+kXto/zq2Isfc2Kup3bXz29hfx71wxCOQbGRft3bm9L258TUFZewH5eQOtLl20izgMgVr7lhp/P//9OBR/Hvx4+Pb3+8Ccw31N6fXr47fnx+Ocf314+vfnp1/9+4Sf8Cc2X18+fHn//9vqY0uXvaMZ/fuljBfcSH+/vxhX4X0q5r+Vj/ilH/mjT+755/lP2R8r9mKGP33PH/gc=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
