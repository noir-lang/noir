---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
