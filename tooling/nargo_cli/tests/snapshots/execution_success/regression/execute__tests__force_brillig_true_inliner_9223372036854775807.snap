---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
