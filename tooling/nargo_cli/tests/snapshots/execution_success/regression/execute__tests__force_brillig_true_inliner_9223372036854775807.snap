---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
