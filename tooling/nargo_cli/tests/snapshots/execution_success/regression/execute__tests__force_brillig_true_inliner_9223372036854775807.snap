---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
