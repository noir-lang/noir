---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbhs7DEX/xesshpQoiv2Vh4fASZzCgOEEblygCPrvFYe8k2aRLuRN7okdHlOy6Jn4ffd0eLh+vz+en19+7L799757uBxPp+P3+9PL4/7t+HIej77/vtvh1/u3y+EwHtr99fyoet1fDue33bfz9XS62/3cn67rH/143Z/XfNtfxrPL3e5wfho5hM/H08Hp991H9fJ1KfPSspqZ2yaQzwb62lCrpKBKv61ey0S9tJL1onRj/cz6xbCBjZeJ+qZbvc3034RR32bqtWL92nSm3mrW94Un6vvWf586P7bg/BjNnJ+uite3mfePlq0BWnhmB8z4NgHRgjUQTW3CqNp6oGpThlY3g06tgtlg4DLVA29nmXjqMH3qQexWQ/vyvfjnR3Kx7SO56pRBcUngutiEoYyyNJRK7VYD05ShyGaoy80GmTLIxypau9Wgc/vQP1bR9VaDlZsNUydKtrkoUuqcoX4Ypt5NoXKrodFm0KmdlGpfGf4fv+0fj5dPN4k7HVN8t+vrT1t/0hJBERxRImqERLSIcNCQjA0gW4OXCIoYlvEWc4moERIxLOMmhTWiR9gaZVjGxadQBEeUiGEZiy0S0SI0ovuFYqRF1iWTMjmzZNZMyWz+ATtSM3umRUr0JdGX8PqiUiKiL4m+pIVRNDM7k+ysZWctO2vZWcvOWo1XbJKZnbXsrLlvnNxmkeq+satKmZxZMt03dlYls2VqZs+0yL5kUiZnlsz0dff1kdlfz/X23Llu8fqW/Vn2Z9mfpc/SZ9mfZX+W/Vn2Z9nfuEECEIABBVCjOVr84PohXfzoVgcFdIAlrIOwgo+CODCgACpAAA2ggA6wBB+OAJgZZoaZYWaYGWaGmWFmmAvMPjLsa/ehYXUogAoQQAMooAMswUcogAAwV5grzBXmCnOFucJcYRaYBWaBWWAWmAVmgVlgFpgF5gazTxf7AfDx8ksF+XwFVIAAGkABHWAJPmYBBIBZYVaYFWaFWWFWmBXmDnOH2UeuLA7DXMihAgTQAAroAEvw0QsgAANgNpgNZh9Av30nn8CADrAA9hkMIAADCqACBNAACugAmAlmgplgJpgJZoLZZ7CsVx83V4cOsIT1ArUCARhQABUggAaAmWFmmAvMBeYCc4HZZ7CsV0QBNIACOsASfAYDCMCAAoC5wlxhrjBXmCvMArPALDALzAKzwCwwC8wCs8DcYG4wN5h9Botf7H0GizoIoAEU0AGW4DMYQAAGFADMCrPCrDArzApzh7nD3GHuMHeYO8wd5g5zh7nDbDAbzAbzOoP+b+XP/eW4fzgd8ku85+v58a/v9N5+veIZfOv3enl5PDxdLwe/tVufGzd7fwA=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
