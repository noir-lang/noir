---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbttKDEX/xessxOGQM+yvPDwUTuIUBgwncJMCD0H//Q1FXqVZpIvRJvfECo85I9FS/H54PN2//fh+vj49/zx8++f9cH87Xy7nH98vzw/H1/Pzdbz6/vvugF+/v95Op/HS4Y/jo+rleDtdXw/frm+Xy93h1/Hytv7Rz5fjdc3X420cXe4Op+vjyCF8Ol9OTr/vPqqXr0tLWTSrSym6CeSzgb421CopqNL31TeeqBflrJdGO+tn1i+GDdSyTNRr2+p73VdvM+tXKajXmfpWsX9N20y91azvS5mo71v/fer6swXXn9HM9ddbw/vbzPmnZWuAljKzA2Zln4CWapth6iIgWrALRFPbSKR1M7SpVRBv+0DVZgylbPtQeM6wTQOVqcvxUw+yexX65bn4602Bbbsp1DZlaLgplbrYhIFHWRq4ku41FJoysGyGuuw2yJRBPlahutfQ5vahf6yit70G492GqStKtrlg4TpnqB+GqbMpxHsNSpuhTe2kVPvK8O/47fhwvn16TD20McV3h77+tPUnLREUUSI4okZIhEaEg4ZkbADZGmWJoIhhGae4cESNkIhhGY85pUX0CFuDh6WPoIgSwRHVb2kjJVMzW2b3D8mRFlmXTMosmZxZMyXTfaP32jJ7pkVK9CbRm5R4V+HM7E6yO9GwSsvM7iS70+xOszvN7jS70xrvqpKZ3Wl2pz3eRy2yLZmU6b6x240z3Td2uEmmZrZM9411NYvsSyZllkzOrJmS6b5xLfaW2TMt0tJn6bOSr3Osx/JsWK7Xsj/L/qxnWuR41AoRLQQoAAZUgAAU0ADZKC3ZKflABBAAZoLZByMO+WiIgw+HN7aOxwodYAk+JAE+bM2hABhQAQJQQAN0gCX44ATAzDAzzAwzw8wwM8wMM8NcYfY5Kr52HyT/+CWfpIAKEIACGqADLMEHKoAAMAvMArPALDALzAKzwKwwK8wKs8KsMCvMCrPCrDArzA1mnzNeHIaZyYEBFSAABTRAB1iCD1wAAWDuMHeYO8wd5g5zh7nDbDAbzD58/oBNPn28fohXgAAU0AAdYAHFZzCAAAXAgAoQgJurQwN0gCX4DAYQoAAYUAECgJlgJpgJ5gJzgbnAXGAuMBeYfQb98a/4DLLfsHwGAyzBZzCAAAXAgAoQgAJgZpgZ5gpzhbnCXGH2GeTmIAAFNEAHWILPYAABCoABMAvMArPALDALzAqzwqwwK8wKs8KsMCvMCrPC3GBuMDeY1xnsDm42BwEooAE6wBLWGVyBAAXAAJg7zB3mDnOHucNsMBvMBrPBbDAbzAazwWwwW5p5WQAEKIBhXv/V+XW8nY/3l1N+Ufn0dn3443vL1/9ecATfbL7cnh9Oj2+3kz88rsfG4+T/",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
