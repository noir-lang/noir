---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1dXYgkVxW+VdXV038z07ubrMnqQ6IiojFUz/TM9CRR2phNskk2v5vNo87M7iiIIBKCD0EK/AEJ6kPQPImIiE/6pOJTCD6ID4KCT6IvQXwQkQgmKEHRvbt1ur/++tTtnu17e3qzfaGp6rqnvnPuOeee+1tVkbmWVq78ouK8Qkd7PTWjSWj7xTGbLXU8YmWhZIxuABnjG0DG5AaQsRJAxhBypjeInNUbRM6VQHKaGgltK6qtCNbRrBGtglZMeZKCPllE5XrxP4Z8jxWrUye+PvF72VavrpTPo/ybdTPacHnG7wl+NQx+Jr7wZD7Ex7II34To+J4IaJ4CmqdKaJ4GmqdLaJ4BmmdKaC4AzYUSmotAcxFoYqB5DmieI5o6YBrj3UezwDbeWjXjnSspi/BeCcN7OyJ+xgx1jnnCv2GC1qdORPxEHtaPxLtVocmH8kSUV8nHyyF5KeSJfW2MvhPo2LdSyhNZbHo2H81LIO8i5VUgT3za8r4L5LinOA/s44M4FqgdyU4p8iMvm1byoT5EbwlcS0F/V/WD9JRXh7xKPsqnUfyvAB/EEjlSov9w8X+9OFbhHrm/rfCvEv8RuZVrrJe6Ql9X6K3/vr84b5ph3+AT+RDPn007meA/APjG+PMZwT8L+FEA/AeD6GeI/1AY/Qz6Zg+HkX+Afw7wKwHwHwkj/4bgP5oH8Z+u4D8WRv4twT8fRP/D+vt4EPk3BvhPBNF/L7MxzraR54oAGLiv1JN2G8dwkiQPx0sR5TUgj2M8poT+Y5ks7yfiIS7TsTzYT6tTHvZnRTbuZ9jUL47ZbGmLy54qckSUJ7TnSL5ANs5OAq5ReHF/T+ubSjxeN+4+D5a9DOsRwsL7q6STQOOTTZG15pAV+a8reqvNR9auyFo/oqw1yOM67MKySeL/ulI2rnOuMV49jE6mHuMJ/3mN8SbpNSbdNRRZ20peROcNhU9D4aNhxR6xVjxi1TxicRxh/fWL/9ls6VAbY3rE72ixxSP+gdb2eMTfr5fY1hN+j/soxozHIPSL44hBwr9hgsbEjqveoH44BjUVWdtKHtehpsKnqfDRsGKPWFWPWCsesbh/EGgeao/bEkyajXmurwV5vDZiqPyYsEy2rB9JhrhMx/KgL4lsKeV9uTiGnsfT+scx8Q7Tfuz3wrYfvUNtrcgf/nbg9unydtj26TBw+3RpT+sHe7TvptbGedTPwH+aYfAH+mkFwd+/LPirQfA3B/65FgS/O6hf60HwOxuC3w6DP/DPE0Hwd7qCfzKMfXcF/1QY/Qz6r7eYYeL+661w3eNcZicifsbo/Vfh3yBZQ/VfbyV5WD/cfz2tyNpW8rgNP63wOa3w0bBij1ipR6yqR6wVj1g1j1j1BS1jwyNW0yNWyyPWqkesNY9Y6x6x2h6xTnjCsonXnGaR6+SCynXKo1xn8yXWEmuJ5QOL+6I29YtjNlPqDPrwt5mh3B739OxKP/F2M54k7wzwvoXy3g152BfnpM2PSZls/+f8EebHMCaeobx3QZ7Itk6yI0bYcUSWRVRW2YPGPEW22IzbW85tSunaX4uj1eF/k+E9iGmMe6ygtTW3kH5Qd5E3/ex2V5UyRsT7drh+HGM84d8wIevicIx3O8nD+uEx3hlF1rYpr7sR5SGfMwofDSvyiBV7xEo9YlU9Yq14xKp5xKovaBkbHrGaHrFaHrFWPWKtecRa94jV9oh1whOWTTwum0Wukwsq1ymPcp3Nl1hLrJsXK+w6+9HHYacpD8dh2D/lpI3DcJ+CPKR01H0KIhvvU7ivOFmkfQrGG99O6R5nHIdGlCe0HyfdBNp/qeomNfOwS2ebx+yYrsc/77hO/2R7CGal+LF/yDMwbLNHlzYbS5Ns9r452Uyem2GbPXuT24znxmzCNpLTJHt+4Jjr4KeW9hyzJz7zxmlR7FlWPz+7QPbk/oMP3oeHh5vaXi5f+DtXGIjsMgeTmuFccov0ieVdDSCPTSLPGuEzzwTkRfm/UBjCzsE9X5zz83iIb+lecNAlCt28bFKfYJNowWzC/VWR/0WwyZdI140Sm+QOukihk+tSLxOQEe3JOE3QoVzH+cg6lUnovwJl+toc/ALtkBI+8+S5bJmPjoGeafA8VvBxfcP1HFDI8lZAnliRPyX6b5BdQr17R2sfWEfL+D1d/H4Z6tW3p4zfr0wZv19ZsPhdWTCbVMgmIv93wSbfmzJ+f99BV1Ho5h2/fwhl+tENHr8rRD9t/J41vv54geIrl9kH7ytVeStk3cRYUQMdu+Kl9mxECB9dJ3zmyfFb5P8p1KufUwzAOjp4N9KV3y8cdIlCNy+bNCbYJF4wm/Bcssj/KtjkNdJ1s8Qmv3TQxQodxyqM32hPXlNvgQ7luhbvU6L/FZTp13PwC7RDlfCZJ8dXaY8wfjMG0mvtA8bvFTNa3mqY8nZZfmwftHdkcF/ut2QX7pf1/ciptg+1KXQakTw2ud7jlxi9fUbchHTAtotL9OHLbr1s6Kda/1N714qWx8/+l+GlCh7rPFZwmR/maS8SR3run/6xMILlfze871aLmf3ifzZDmtRG8D4YlKcdQJ4MbH6C8JlnRDoU+V+HePpnR+wXfEv3FwddpNDNyyatCTaJF8wm3G6L/H8Dm/yddL1aYpM3HHSxQscxHttttCfP862BDuU6js1aVCah/yeU6a05+AXaYYXwmWdZPMJ2mzGQflIbUzej5Q00ZjmYtt1mvxP6/5BdAr1bRW23WUdpAB1dSRusIwM60tof7T15WGfYN1juRNFlhWgiuo7xq6x/jHmT2nnNL8wEufD+WCm7Rq/h1xR69rtawcDSdqgdDzG2mjRXp4135xWruH1gnjz+FvnXCh3a+NouzrU5OMG3dCcddIlCNy+bNCfYJF0wm6RkE5H/NrDJGdJ1q8Qm73HQpQqdqx3X2mWhH7wHG65r4/WU6O+AMr13Dn6BdtDaceTJ7TjGLy0+8nhOi8s4huN4KnnYzuKYnOOd0H+Q9HYc7ypdlPWpiORZtLVskf9u8PuM6mjZ+tSGgy5S6BZlfSpdMJtwfBX5e2CTexxtGdrkPgddqtBxbAi9PtWHMt0/B79AO2jxT1u3FHptfapsDodjqTZO4vlTyStbn+K+kNA/THqr0D19T3rT4qvwwu8rVHL//Hd61+xmk3zbIjXje/eQf0r0jxd6Qt/FcvSvU87Dnb3O4ebe4d7W3qVL3YM91pNNMegJ39G+bsZ9hduIUPYUXrgumpTwlDKwn+P7iXnd9CKMc/jZa7RbolwTfbXNeL1J6D5trC90jM0yaxgJnU9jo1BrwtyvQBtVFZm1fh+O/bmd3wtsI8bCOovfieDYqY2tkfcDuV6ez1AsPI61GO1bR+wvYfrAnamf2efvVyVB5HF/v0rzpbB26wzqk/bu/pqiH22tvuy95anR5794/QnbH3zvLq9VvFAopU2YNp3NR2WoK+XBazgn/nnqE6JtopKj4PI1jgFl64FlOkcs/k6Eaywq/5tGj1ey3z/sO06H/tRUyuXqL7dAf4yh0fN7CBi/Rfy1bwNEROOSz+XHgsPjk9egL//VkvEEYmM7jN9swrataoZ2RRoeIwn916E9uxue22D/eDAf4r9EsiK2FqvkGyTc3/kWlP+bcP7vI+CzrrBspkSeh0vkeRlkeHUKGZDPYyWY3wH9diujmFoM0mIFx02kR3/jb5JgH6FBedPEZ1mfsIm/sYX0Ug8xtqCvcmwJ837gzth8QWL0WMH816G8jKHR8/wU46+X6Ad9B20p39fjsf4PFN/RvleJa2M2VSDPZ1/JyrFDMQLfz5/mo+XG578ShZ79e02hR93z9xLQRmwTrW6hzjl+yv1V424TeC3+J461qTDv2R76+cAXzHi90/iLvtDPVx303MYxPr8jRouRaAf2c6H/2ZR+znNmFcgL7ecj4/Z8tNwtyNPaavZzrV5o34Vom8l1QFuvwPaL23LuK7xE4z/uN/WL/9lMaeizDSo3y8b8m6BDzS+ZXpsjRHzBm2bMGWZ/w/RjTuE/rzGnFjO1MedRv6fFNrneb03ZdDZfYi2xllhLrOmwXPMsizBPjXubp5mn1vZj2MRzC/8IPE+tfYNe+tRW/jdjnSf2DfFeHj8L/f9gTP4vZY5A+0Yq72HAsvWLYzZb2jBUBm0/iOgxof/2nL8BHJnRPiNi471GwcJ7UQZtrk/TP97P+o+LE6vzD5EfafMsEVxjGbX+hbYfRquXdcrD+1z7c7X5C54v4n1tLCuPFaUPWTbXVrZ23yyIca6NMaedn13OoUw3h3IKdO4aW+JzozZVIO9mm0OZ1xoAz8FznWf+q1BmzY+YftJYkH1Si5Gu+Quhv3NKHzvO+QuMJexjWj9L6w+wzpHeNRZEG1UpT+uXaW2N1mfR+h7cL2HcN6FfdC7W75H7tKMx42N1m7jPhFgP5deO2ry8YCzKvgh8No/t49oXsQN1gPubrv0jwgt1FynyTFqTureEZ9maVNl6TR/6Ox8rzrU+Ju7j0uxa9uyDMdP1lbS1X9cYBm1YmwIrdvDW+mk1B29t3yLzxve3ufpuVUUm7VlSrmdavNf8TlsH1OZIcS71XvBt3of2TqzLFwLXZc2f2QcZu6wOufbr10uu94v/2UxpY2xvTKroSfNx3D9ozHgdfSAfxRP6Txa2OM7n77T1EPb7MHuRpv++ivBvmHFbhJg31+KrVifC2m0jc8VvbV+KNo/PbYdr3IW4MdHjudyP1z5XGM7nPKCNfZ9ORsuGtolKjoLL1ziWoW74GQjUeb84ZjMmQ2UVHWKs5LkGoX0D+jHPU9wINK5Tn8/jtkorj9C/CDJ/kWSOvOt3IxMf0dpMbR+jyGDp/0DtIvqj0OG3N7gNwDkkjb5MRzm0zR0a42n7EutmvF4eR0wW/g1FHyFicpPkYf3wWmZLkVUbv5btS0Q+LYVPW8njOLfEWmItsZZYS6wl1hJrifVOw9LGUdIn0+YSo+JcG7eEmE+Tfh/OpzUUWY861v2NYz7NNaclvFB3kSKPNieDezF+V8ITx/R47+P5aDmE/k8wPvu9Y25c7FtXsPvFMZstdVgH8l+bN9bGeRHlac9D4DjPtY9WW3OqA8bbpCvXO5i0vQiu534mrYuzLYX+dWXN0lXXI7jGc7WT9jPzsyfaPgJtvRT38dhUgTyfY1htvXTkOcN8sn60+ahp9SP21fZ781jU9QyaFks033G9swzjhVa3ed7ruNc4RLajrnG85YjJ6Osu/2+bcT1yXNHWlLR4gXOYb1PMQf0nhIG+hmuSvt/ZsLez2TvY6B7s7G9t7m1uH+mdDcv19SHP612TaxQFPq719bWKzrNsfZ3bHaE/VRlinijOl+vrN/f6+hr4NscMtKF8v685Be35Elqhk/I3oIyCr8UNlN3++sX/bKbUHXu3Eq6ZaHE/Jfq7QHfnK7o+sLwh2oaNXm97d2M/6+5cOji81N2c1Db45t/d2ts52NvpdHa7ncvdzta8+R9sbe8fXBEiu9y5qo5J/AffU8iH+djvtWml+C/tCNMLXkr090J8/SjtRUwVfpbuMQddVHK8iqFcq+Sj1+r5OH2Sj9ML70Y+LqPkNSEvJT6t4j/qC7FEjpToz0EbZFMN7pH72wr/GvEfkVu5hvGWsRLlGvYH7y9kHKwJAm/fa2dXeRI+XmPZxHeC1Kvd7cPdzc39zubupcu7ne1J9er/HFq65YW8AAA=",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
