---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
