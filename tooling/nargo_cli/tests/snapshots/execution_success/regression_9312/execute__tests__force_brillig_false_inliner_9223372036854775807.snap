---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _18",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1, _2, _3, _4]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "EXPR [ (-20, _0) (-1, _5) 30 ]",
    "EXPR [ (-20, _0) (-1, _6) 40 ]",
    "EXPR [ (-50, _0) (-1, _7) 50 ]",
    "INIT (id: 0, len: 3, witnesses: [_5, _6, _7])",
    "EXPR [ (-1, _0) (-1, _8) 2 ]",
    "MEM (id: 0, read at: EXPR [ (1, _8) 0 ], value: EXPR [ (1, _9) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _0) 0 ]], outputs: [_10]",
    "EXPR [ (-1, _0, _10) (1, _11) -1 ]",
    "EXPR [ (-1, _0, _11) 0 ]",
    "EXPR [ (-1, _0) (-1, _12) 4 ]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (-1, _13) 60 ]",
    "INIT (id: 2, len: 4, witnesses: [_5, _6, _7, _13])",
    "EXPR [ (-1, _0) (-1, _14) 3 ]",
    "MEM (id: 2, write EXPR [ (1, _13) 0 ] at: EXPR [ (1, _14) 0 ]) ",
    "EXPR [ (-1, _15) 2 ]",
    "MEM (id: 2, read at: EXPR [ (1, _15) 0 ], value: EXPR [ (1, _16) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _12) 4294967298 ], EXPR [ 4294967296 ]], outputs: [_17, _18]",
    "BLACKBOX::RANGE [(_18, 32)] []",
    "EXPR [ (-1, _12) (-4294967296, _17) (-1, _18) 4294967298 ]",
    "EXPR [ (-1, _17) 0 ]",
    "EXPR [ (1, _1) (-1, _8) 0 ]",
    "EXPR [ (1, _2) (-1, _9) 0 ]",
    "EXPR [ (1, _3) (-1, _12) 0 ]",
    "EXPR [ (-1, _7, _11) (1, _11, _16) (1, _4) (-1, _16) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZHRboQgEEX/ZZ55EFBX91eaxqDihoSgYaFJY/z3jjNLu/vQpOnLPcJ472SYHWY75tvgwrLe4fq2wxid9+42+HUyya0Bb/dDQDkOKVqLV/BUR9dmog0JriF7L+DD+Ew/3TcTiMlErFYCbJiRGLg4b8+vQ/y4q9+tUncPs6z7b3vzd3/bFv+l+4dfydJfydf+73gyk4svLwYSGwlQpJq0Jm1IW9ILhgnoSHtSWTEkQzE0o2Y0jJbBGRJDNKInqIqBKfo4R4rOjN4+NrnkMD0tNn1upVJWv8V1snOO9hyJajjkFw==",
  "file_map": {
    "50": {
      "source": "fn main(a: bool) -> pub ((u32, Field), (u32, Field)) {\n    let s0: [Field] = if a { &[10, 20] } else { &[30, 40, 50] };\n    let (s1, f) = s0.pop_back();\n    let s2 = s0.push_back(60);\n    ((s1.len(), f), (s2.len(), s2[2]))\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
