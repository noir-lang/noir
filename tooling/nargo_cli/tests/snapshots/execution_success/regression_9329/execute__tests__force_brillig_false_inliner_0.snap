---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "signed",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _20",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "EXPR [ (1, _1) (-256, _3) (-1, _4) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "EXPR [ (1, _1) (-256, _5) (-1, _6) 128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(7)), Simple(Witness(8))]",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "EXPR [ (1, _4) (-256, _7) (-1, _8) 128 ]",
    "EXPR [ (1, _5) (-1, _7) (-1, _9) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(10))]",
    "EXPR [ (1, _9, _10) (1, _11) -1 ]",
    "EXPR [ (1, _9, _11) 0 ]",
    "EXPR [ (-1, _5, _11) (1, _5) (1, _11) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "EXPR [ (1, _1) (-256, _12) (-1, _13) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 1)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "EXPR [ (1, _1) (-256, _14) (-1, _15) 128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 1)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "EXPR [ (1, _13) (-256, _16) (-1, _17) 128 ]",
    "EXPR [ (1, _14) (-1, _16) (-1, _18) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 })], outputs: [Simple(Witness(19))]",
    "EXPR [ (1, _18, _19) (1, _20) -1 ]",
    "EXPR [ (1, _18, _20) 0 ]",
    "EXPR [ (-1, _14, _20) (1, _14) (1, _20) -1 ]",
    "EXPR [ (1, _2) (-1, _13) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZLBioMwEIbfZc4enEnbXX2VZZGosQRClNQsLOK7N+ZX2h566eUfk/H7IMMs1Js2Xhvrh/FG9c9CbbDO2Wvjxk7PdvTpdlkLOo7NHIxJV/TUT9Skg/Ez1T46V9CfdjH/dJu0z3XWIXXLgozvU03CwTqzfa3Fgy7fo1xedpj5gZ8/4k8f8FV14KV6wX/TSXc2vAyMhGopSOU85TznvOT8yvmds8rJJQqjAGfwDAHDwFAwHAwJwyKwCCwCi8AisAgsAovAIrAILAoWBYvanwKLgkVtlnWbVrC6dWZfkiH67mln5v/p6BxbNYWxM30MZhtX7qUB3gE=",
  "file_map": {
    "50": {
      "source": "fn main(mut b: [i8; 2]) -> pub i8 {\n    b[{\n        let d = 1;\n        for _ in 0..2 {\n            b[0] = b[1] + d;\n        }\n        0\n    }]\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
