---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/82YS27CMBCGHWIeJrwKnIATmASadMeiF0mhSF20qmgPwNFLVI9jLIdN/pEyUmTy4JuZ3+NM5EjUFplRihZGkB8zKjP2nPvx7TiYc93Otsrzi+QXerdTgfyA8WfKMCMeviY+k/56aDiv15rv5kJ+R7cjcX5PRF0fXPnT/HHmv3qQc2Jy/XyQawSLJX8L5Yrjp6ly9MPzn238kof/Qvw+D/+d+AMevq3lIQs/K4k/4qlP+65TPPrkxB/z8PfET3j0sfM74eHb9Ttl4adH4s944rfzO+eZ34L4CxZ+ZvlPPPqcpoa3FLVRryHfK+c6rg+mWeT5E+K+TwjP/9iLFf1dGHn+KB5fH+qVpN06EOsicM/v4euAn3XAT4jVA7JiIEsCWX0gawBkIbUfdjSuEZCFrAkFZCHrawxkIWu1q+sxAbKQ2iPrCxnXBMhCviemHY1rBmQh1xBybSPX0BzI6mp/XABZ9D0e2p+p7GBG3c62vPszhQ7tzwDj1xSvDGgd+qau3nPUZ74vH1+/wjMX5AovGoSi5zfec3EDz2dHDdc3gf9VC5IaiLze+zqY67qF5cW/oJXFht8XdS6uSee++/zFnLvNiUbZIs5zXm7PWXku9+XptDuWS49fmbvJ+QfdxBTKRhgAAA==",
  "debug_symbols": "zds9asNAEEDhu2ytYv9nx1cJIcj22giEZGQ5EIzvHikYYuIqTfIaoRWj5VVfN1ezr9vL8a0bDuPZbF6uph937dyNw3K63hqznbq+745vj5+NXR8ufM2fT+2wHs9zO81mE0pj6rA3mxSWvw9dX5dXe2ueBou6+6T671HvfzP62hgXERUJUZERFYKoKIgKJVR4i6hwiAqPqEDY6RF2eoSdHmGnR9jpEXZ6hJ0BYWdA2BkQdgaEnQFhZ0DYGRB2BoSdAWFnQNgZEXZGhJ0RYWdE2BkRdkaEnRFhZ0TYGRF2RoSdCWFnQtiZEHYmhJ0JYWdC2JkQdiaEnQlhZ0LYmRF2ZoSdGWFnRtiZEXZmhJ0ZYWdG2JkRdmaEnYKwUxB2CsJOQdgpCDsFYacg7BSEnYKwUxB2FoSdBWFnQdhZEHYWhJ0FYWdB2FkQdhaEnQVhpyLsVISdirBTEXYqwk5F2KkIOxVhpyLsVISdziLwdBahp7MIPp39Mz8lyn1Uin3KiIyMxMjIjAz5/4zbcnpvp67d9vW+7HG4DLuH3Y/541R/rIGcpnFX95eprgshD7sgK0DOauNcXC5eLv8E",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "fn main() {\n    let x: i8 = -128;\n    std::println(x);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
