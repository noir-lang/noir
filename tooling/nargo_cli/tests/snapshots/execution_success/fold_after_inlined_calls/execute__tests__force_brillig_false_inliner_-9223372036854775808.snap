---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/62PXQqAQAiE+71HR9BVW33rKi1t9z9CLQgFUQ/VB8OgD+PYVAeNe72rdS8Mu3qf6+rKZTe5wzewBHd3R254Kjj91OucRTAy5xgyEs4QLKkASxoVFUVlCUqUlTVasgiGTBlXMVo97M2PhQ26Wz5GuQEAAA==",
  "debug_symbols": "zZDPCoMwDMbfJeceqsPBfJUhUmuUQmlLbQdD+u5LxW7uMNhhh53y58svJN8KIw5x7pWZ7ALtdYXBK63V3GsrRVDWUHdNDErZB49ILTjoRDnh0QRoTdSawU3ouA0tTpgtBuFJ5QzQjBRp4aQ05iyxF80/o1Vz2uGquTzxhviOKiGVf7sYKhpMeZ1XYtC4fzFFIw9PhbsrSnnbeStxjB7zuk3LB/6pKTUvcM3PX5jCf2dKlx4=",
  "file_map": {
    "50": {
      "source": "fn main(x: u32) {\n    // We want to call a foldable function after a call to a function that is set to be inlined\n    assert(increment(x) == x + 1);\n    foo(x);\n}\n\n#[fold]\nfn foo(x: u32) {\n    assert(x == 1);\n}\n\nfn increment(x: u32) -> u32 {\n    x + 1\n}\n",
      "path": ""
    }
  },
  "names": [
    "main",
    "foo"
  ],
  "brillig_names": []
}
