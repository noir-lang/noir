---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "1Z3bjhtH0oTfRde6qMpDZZVf5ccPwwetIUCQDNleYGH43XdGEmmv2M3GhBgzwRtBB4YiAUZmV3XX1/Pnq5/f/PjHL9+/ff+vD7+9+u7//nz17sNPP/z+9sP7hz/9+dfrVz9+fPvu3dtfvv/nX79qj7/M8enzv/36w/vHP/72+w8ff3/1Xdhor1+9ef/z42/nePgf/vX23ZtX32X76/9fv5oFaCagWU/XrAZoOqAxQOOAJgBNAhogBwvIwQJysIAc9NYQUUdEhogcEQUiSkS0EwevsyjXhagQ0URECxD1hog6IjJE5IgoEFEiIiQRHUlERxLRkUQYkghDEmFIIgxJhCGJMCQRhiTCkEQYkgjbScTKk8h7+6fo9cWH5+pfPrvMzx81e8pHH0vxplNK1ynFdEpxnVJCp5TUKWXolFI6pUydUnSmbehM29CZtqEzbUNn2obOtA2daRs60zZ0pm3oTNvQmbapM21TZ9qmzrRNnWmbOtM2daZt6kzb1Jm2qTNtU2faDp1pO3Sm7dCZtkNn2g6daTt0pu3QmbZDZ9oOnWk7dKZt6Uzb0pm2pTNtS2fals60LZ1pWzrTtnSmbelM29KZtlNn2k6daTt1pu3UmbZTZ9pOnWk7dabt1Jm2U2faTp1pu3Sm7dKZtktn2i6dabt0pu3SmbZLZ9ounWm7dKbtkpm21mSmrTWZaWtNZtpak5m21mSmrTWZaWtNZtpak5m21mSmrTWdadt1pm3XmbZdZ9p2nWnbdaZt15m2XWfadp1p23WmbdeZtqYzbU1n2prOtDWdaWs609Z0pq3pTFvTmbamM211WDLTYclMhyUzHZbMdFgy02HJTIclMx2WzHRYMtNhyUyHJTMdlsx0WDLTYclMhyUzHZbMdFgy02HJTIclMx2WzHRYMtNhyUyHJTMdlsx0WDLTYclMhyUzHZbMdFgy02HJTIclMx2WzHRYMtNhyUyHJTMdlsx0WDLTYclMhyUzHZbMdFgy02HJTIclMx2WzHRYMtNhyUyHJTMdlsx0WDLTYclMhyUzHZbMdFgy02HJTIclMx2WzHRYMtNhyUyHJTMdlsx0WDLTYclMhyUzHZbMdFgy02HJTIclMx2WzHRYMtNhyUyHJXMdlsx1WDLXYclchyXzJjNtXYclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdVgy12HJXIclcx2WzHVYMtdhyVyHJXMdlsx1WDLXYclchyVzHZbMdViy0GHJQoclCx2WLHRYsmgy0zZ0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJQsdlix0WLLQYclChyULHZYsdFiy0GHJQoclCx2WLHRYstBhyUKHJUsdlix1WLLUYclShyXLJjNtU4clSx2WLHVYstRhyVKHJUsdlix1WLLUYclShyVLHZYsdViy1GHJUoclSx2WLHVYstRhyVKHJUsdlix1WLLUYclShyVLHZYsdViy1GHJUoclSx2WLHVYstRhyVKHJUsdlix1WLLUYclShyVLHZYsdViy1GHJUoclSx2WLHVYstRhyVKHJUsdlix1WLLUYclShyVLHZYsdViy1GHJUoclSx2WLHVYstRhyVKHJUsdlix1WLLUYclShyVLHZYsdViy1GHJUoclSx2WLHVYstRhyfJ5WbKK+vLRmu3rUp6XJbteStcpxXRKcZ1SQqeU7WnrNs6lzPXPUj6JBiIqRDQR0QJEO3TSgagjou2eiDqLstmFyBFRIKJERAMRFSKaiGgB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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "struct Match {\n    succeeded: bool,\n    match_ends: u32,\n    leftover: [u8],\n}\n\nimpl Match {\n    fn empty(leftover: [u8]) -> Self {\n        Match { succeeded: true, match_ends: 0, leftover }\n    }\n}\n\nimpl Eq for Match {\n    fn eq(self, other: Self) -> bool {\n        (self.succeeded == other.succeeded) & (self.match_ends == other.match_ends)\n        // (self.leftover == other.leftover)\n    }\n}\n\n// TODO: load match into str<N> and assert that it's the correct length\n// impl<N> From<Match> for str<N>\n\ntrait Regex {\n    fn find_match(self, input: [u8]) -> Match;\n}\n\n// Empty\nimpl Regex for () {\n    fn find_match(_self: Self, input: [u8]) -> Match {\n        Match::empty(input)\n    }\n}\n\n// Exact\nimpl<let N: u32> Regex for str<N> {\n    fn find_match(self, input: [u8]) -> Match {\n        let mut leftover = input;\n        let mut matches_input = true;\n        let self_as_bytes = self.as_bytes();\n        for c in self_as_bytes {\n            if leftover.len() != 0 {\n                let (first_elem, popped_slice) = leftover.pop_front();\n                leftover = popped_slice;\n                matches_input &= first_elem == c;\n            } else {\n                matches_input = false;\n            }\n        }\n        if matches_input {\n            Match { succeeded: true, match_ends: self_as_bytes.len(), leftover }\n        } else {\n            Match { succeeded: false, match_ends: 0, leftover: input }\n        }\n    }\n}\n\n// And\nimpl<T, U> Regex for (T, U)\nwhere\n    T: Regex,\n    U: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let lhs_result = self.0.find_match(input);\n        if lhs_result.succeeded {\n            let rhs_result = self.1.find_match(lhs_result.leftover);\n            if rhs_result.succeeded {\n                Match {\n                    succeeded: true,\n                    match_ends: lhs_result.match_ends + rhs_result.match_ends,\n                    leftover: rhs_result.leftover,\n                }\n            } else {\n                Match { succeeded: false, match_ends: 0, leftover: input }\n            }\n        } else {\n            Match { succeeded: false, match_ends: 0, leftover: input }\n        }\n    }\n}\n\n// N T's: (T, (T, (T, T)))\nstruct Repeated<T, let N: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32> Regex for Repeated<T, N>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let mut result = Match::empty(input);\n        for _ in 0..N {\n            if result.succeeded {\n                let next_result = self.inner.find_match(result.leftover);\n                result = Match {\n                    succeeded: next_result.succeeded,\n                    match_ends: result.match_ends + next_result.match_ends,\n                    leftover: next_result.leftover,\n                };\n            }\n        }\n        result\n    }\n}\n\nstruct Or<T, U> {\n    lhs: T,\n    rhs: U,\n}\n\nimpl<T, U> Regex for Or<T, U>\nwhere\n    T: Regex,\n    U: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let lhs_result = self.lhs.find_match(input);\n        if lhs_result.succeeded {\n            lhs_result\n        } else {\n            self.rhs.find_match(input)\n        }\n    }\n}\n\nstruct Question<T> {\n    inner: T,\n}\n\nimpl<T> Regex for Question<T>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        Or { lhs: self.inner, rhs: () }.find_match(input)\n    }\n}\n\n// 0 <= num_matches <= N\nstruct Star<T, let N: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32> Regex for Star<T, N>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let regex: Repeated<_, N> = Repeated { inner: Question { inner: self.inner } };\n        regex.find_match(input)\n    }\n}\n\n// 0 < num_matches <= N\nstruct Plus<T, let N: u32, let N_PRED: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32, let N_PRED: u32> Regex for Plus<T, N, N_PRED>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        std::static_assert(N_PRED + 1 == N, \"N - 1 != N_PRED\");\n        let star: Star<T, N_PRED> = Star { inner: self.inner };\n        (self.inner, star).find_match(input)\n    }\n}\n\nfn main() {\n    // gr(a|e)y\n    let graey_regex = (\"gr\", (Or { lhs: \"a\", rhs: \"e\" }, \"y\"));\n\n    // NOTE: leftover ignored in Eq: Match\n    let result = graey_regex.find_match(\"gray\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 4, leftover: &[] });\n\n    // NOTE: leftover ignored in Eq: Match\n    let result = graey_regex.find_match(\"grey\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 4, leftover: &[] });\n\n    // colou?r\n    let colour_regex = (\"colo\", (Question { inner: \"u\" }, \"r\"));\n\n    let result = colour_regex.find_match(\"color\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n\n    let result = colour_regex.find_match(\"colour\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 6, leftover: &[] });\n\n    // parse the empty string three times\n    // EMPTY{3}\n    let three_empties_regex: Repeated<(), 3> = Repeated { inner: () };\n\n    let result = three_empties_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 0, leftover: &[] });\n\n    // 1{0}\n    let zero_ones_regex: Repeated<str<1>, 0> = Repeated { inner: \"1\" };\n\n    let result = zero_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 0, leftover: &[] });\n\n    // 1{1}\n    let one_ones_regex: Repeated<str<1>, 1> = Repeated { inner: \"1\" };\n\n    let result = one_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 1, leftover: &[] });\n\n    // 1{2}\n    let two_ones_regex: Repeated<str<1>, 2> = Repeated { inner: \"1\" };\n\n    let result = two_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n\n    // 1{3}\n    let three_ones_regex: Repeated<str<1>, 3> = Repeated { inner: \"1\" };\n\n    let result = three_ones_regex.find_match(\"1111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 3, leftover: &[] });\n    // TODO(https://github.com/noir-lang/noir/issues/6285): re-enable these cases and complete the test using array_regex below\n    //\n    // // 1*\n    // let ones_regex: Star<str<1>, 5> = Star { inner: \"1\" };\n    //\n    // let result = ones_regex.find_match(\"11000\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n    //\n    // let result = ones_regex.find_match(\"11\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n    //\n    // let result = ones_regex.find_match(\"111111\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    //\n    // // 1+\n    // let nonempty_ones_regex: Plus<str<1>, 5, 4> = Plus { inner: \"1\" };\n    //\n    // let result = nonempty_ones_regex.find_match(\"111111\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    // // 2^n-1 in binary: 1+0\n    // let pred_pow_two_regex = (nonempty_ones_regex, \"0\");\n    //\n    // let result = pred_pow_two_regex.find_match(\"1110\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 3, leftover: &[] });\n    //\n    // // (0|1)*\n    // let binary_regex: Star<Or<str<1>, str<1>>, 5> = Star { inner: Or { lhs: \"0\", rhs: \"1\" } };\n    //\n    // let result = binary_regex.find_match(\"110100\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    // // even numbers in binary: 1(0|1)*0\n    // let even_binary_regex = (\"1\", (binary_regex, \"0\"));\n    //\n    // let result = even_binary_regex.find_match(\"1111110\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 6, leftover: &[] });\n    // 2-letter capitalized words: [A-Z][a-z]\n    // numbers: \\d+\n    // [0-9]+\n    // words: \\w+\n    // [a-Z]+\n    // adapted URL parser: (https?:\\/\\/)?([\\da-z.\\-]+)\\.([a-z.]+)([\\/\\w \\.\\-]*)*\\/?\n    // // panics (at compile time) when input string is too short\n    // let foo_regex = (\n    //     \"colo\",\n    //     (\n    //         Question {\n    //             inner: \"u\",\n    //         },\n    //         \"r\"\n    //     )\n    // );\n    //\n    // let result = foo_regex.find_match(\"colo\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match {\n    //     succeeded: true,\n    //     match_ends: 4,\n    //     leftover: &[],\n    // });\n}\n\n// TODO\n// array_regex execution_success test:\n// use to complete test once https://github.com/noir-lang/noir/issues/6285 is resolved\n//\n// // offset <= len <= N\n// struct Bvec<T, let N: u32> {\n//     inner: [T; N],\n//\n//     // elements at indices < offset are zero\n//     offset: u32,\n//\n//     // elements at indices >= len are zero\n//     len: u32,\n// }\n//\n// impl<T, let N: u32> Eq for Bvec<T, N> where T: Eq {\n//     fn eq(self, other: Self) -> bool {\n//         (self.inner == other.inner) &\n//             (self.offset == other.offset) &\n//             (self.len == other.len)\n//     }\n// }\n//\n// impl<T, let N: u32> Bvec<T, N> {\n//     fn empty() -> Self {\n//         Self { inner: [std::mem::zeroed(); N], offset: 0, len: 0 }\n//     }\n//\n//     fn new(array: [T; N]) -> Self {\n//         let mut result = Bvec::empty();\n//         for x in array {\n//             result = result.push(x);\n//         }\n//         result\n//     }\n//\n//     // pushing when len == N is a no-op\n//     fn push(self, x: T) -> Self {\n//         let mut inner = self.inner;\n//         let mut len = self.len;\n//         if self.len < N {\n//             inner[self.len] = x;\n//             len += 1;\n//         }\n//\n//         Self { inner, offset: self.offset, len }\n//     }\n//\n//     fn pop_front(self) -> (T, Self) {\n//         assert(self.offset <= self.inner.len());\n//         assert(self.len != 0);\n//\n//         let first_elem = self.inner[self.offset];\n//         let popped_slice = Self { inner: self.inner, offset: self.offset + 1, len: self.len - 1 };\n//\n//         (first_elem, popped_slice)\n//     }\n// }\n//\n// struct Match<let N: u32> {\n//     succeeded: bool,\n//     match_ends: u32,\n//     leftover: Bvec<u8, N>,\n// }\n//\n// impl<let N: u32> Match<N> {\n//     fn empty(leftover: Bvec<u8, N>) -> Self {\n//         Match { succeeded: true, match_ends: 0, leftover }\n//     }\n//\n//     fn failed(leftover: Bvec<u8, N>) -> Self {\n//         Match { succeeded: false, match_ends: 0, leftover }\n//     }\n// }\n//\n// impl<let N: u32> Eq for Match<N> {\n//     fn eq(self, other: Self) -> bool {\n//         (self.succeeded == other.succeeded) &\n//             (self.match_ends == other.match_ends) &\n//             (self.leftover == other.leftover)\n//     }\n// }\n//\n// // TODO: load match into str<N> and assert that it's the correct length\n// // impl<N> From<Match> for str<N>\n//\n// trait Regex {\n//     // Perform a match without backtracking\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N>;\n// }\n//\n// // Empty\n// impl Regex for () {\n//     fn find_match<let N: u32>(_self: Self, input: Bvec<u8, N>) -> Match<N> {\n//         Match::empty(input)\n//     }\n// }\n//\n// // Exact\n// impl<let M: u32> Regex for str<M> {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut leftover = input;\n//         let mut matches_input = true;\n//         let self_as_bytes = self.as_bytes();\n//         for c in self_as_bytes {\n//             if leftover.len != 0 {\n//                 let (first_elem, popped_slice) = leftover.pop_front();\n//                 leftover = popped_slice;\n//                 matches_input &= first_elem == c;\n//             } else {\n//                 matches_input = false;\n//             }\n//         }\n//         if matches_input {\n//             Match {\n//                 succeeded: true,\n//                 match_ends: self_as_bytes.len(),\n//                 leftover,\n//             }\n//         } else {\n//             Match {\n//                 succeeded: false,\n//                 match_ends: 0,\n//                 leftover: input,\n//             }\n//         }\n//     }\n// }\n//\n// // And\n// impl<T, U> Regex for (T, U) where T: Regex, U: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let lhs_result = self.0.find_match(input);\n//         if lhs_result.succeeded {\n//             let rhs_result = self.1.find_match(lhs_result.leftover);\n//             if rhs_result.succeeded {\n//                 Match {\n//                     succeeded: true,\n//                     match_ends: lhs_result.match_ends + rhs_result.match_ends,\n//                     leftover: rhs_result.leftover,\n//                 }\n//             } else {\n//                 Match {\n//                     succeeded: false,\n//                     match_ends: 0,\n//                     leftover: input,\n//                 }\n//             }\n//         } else {\n//             Match {\n//                 succeeded: false,\n//                 match_ends: 0,\n//                 leftover: input,\n//             }\n//         }\n//     }\n// }\n//\n// // N T's: (T, (T, (T, T)))\n// struct Repeated<T, let N: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32> Regex for Repeated<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut result = Match::empty(input);\n//         for _ in 0..M {\n//             if result.succeeded {\n//                 let next_result = self.inner.find_match(result.leftover);\n//                 result = Match {\n//                     succeeded: next_result.succeeded,\n//                     match_ends: result.match_ends + next_result.match_ends,\n//                     leftover: next_result.leftover,\n//                 };\n//             }\n//         }\n//         result\n//     }\n// }\n//\n// struct Or<T, U> {\n//     lhs: T,\n//     rhs: U,\n// }\n//\n// impl<T, U> Regex for Or<T, U> where T: Regex, U: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let lhs_result = self.lhs.find_match(input);\n//         if lhs_result.succeeded {\n//             lhs_result\n//         } else {\n//             self.rhs.find_match(input)\n//         }\n//     }\n// }\n//\n// struct Question<T> {\n//     inner: T,\n// }\n//\n// impl<T> Regex for Question<T> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         Or {\n//             lhs: self.inner,\n//             rhs: (),\n//         }.find_match(input)\n//     }\n// }\n//\n// // 0 <= num_matches <= N\n// struct Star<T, let N: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32> Regex for Star<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let regex: Repeated<_, M> = Repeated {\n//             inner: Question { inner: self.inner },\n//         };\n//         regex.find_match(input)\n//     }\n// }\n//\n// // 0 < num_matches <= N\n// struct Plus<T, let N: u32, let N_PRED: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32, let M_PRED: u32> Regex for Plus<T, M, M_PRED> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         std::static_assert(M_PRED + 1 == M, \"M - 1 != M_PRED\");\n//         let star: Star<T, M_PRED> = Star { inner: self.inner };\n//         (\n//             self.inner,\n//             star\n//         ).find_match(input)\n//     }\n// }\n//\n// // Repeated is to (,) as AnyOf is to Or\n// struct AnyOf<T, let N: u32> {\n//     inner: [T; N],\n// }\n//\n// impl<T, let M: u32> Regex for AnyOf<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut result = Match::failed(input);\n//         for i in 0..M {\n//             if !result.succeeded {\n//                 result = self.inner[i].find_match(result.leftover);\n//             }\n//         }\n//         result\n//     }\n// }\n//\n// fn reverse_array<T, let N: u32>(input: [T; N]) -> [T; N] {\n//     let mut output = [std::mem::zeroed(); N];\n//     for i in 0..N {\n//         output[i] = input[N - (i + 1)];\n//     }\n//     output\n// }\n//\n// fn main() {\n//     assert_eq(reverse_array([1, 2, 3, 4]), [4, 3, 2, 1]);\n//\n//     let mut xs: Bvec<u8, 3> = Bvec::empty();\n//\n//     xs = xs.push(0);\n//     assert_eq(xs, Bvec { inner: [0, 0, 0], offset: 0, len: 1 });\n//\n//     xs = xs.push(1);\n//     assert_eq(xs, Bvec { inner: [0, 1, 0], offset: 0, len: 2 });\n//\n//     xs = xs.push(2);\n//     assert_eq(xs, Bvec { inner: [0, 1, 2], offset: 0, len: 3 });\n//\n//     xs = xs.push(3);\n//     assert_eq(xs, Bvec { inner: [0, 1, 2], offset: 0, len: 3 });\n//\n//     let ys = Bvec::new([0, 1, 2]);\n//     assert_eq(xs, ys);\n//\n//     // test that pop_front gives all contents, in order,\n//     // followed by std::mem::zeroed()\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 0);\n//\n//     xs = new_xs;\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 1);\n//\n//     xs = new_xs;\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 2);\n//\n//     xs = new_xs;\n//     println(xs);\n//     if xs.len != 0 {\n//         let (x, _new_xs) = xs.pop_front();\n//         assert_eq(x, std::mem::zeroed());\n//     }\n//\n//     assert_eq(new_xs, Bvec { inner: [0, 1, 2], offset: 3, len: 0 });\n//\n//     // gr(a|e)y\n//     let graey_regex = (\"gr\", (Or { lhs: \"a\", rhs: \"e\" }, \"y\"));\n//\n//     let result = graey_regex.find_match(Bvec::new(\"gray\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = graey_regex.find_match(Bvec::new(\"grey\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // colou?r\n//     let colour_regex = (\"colo\", (Question { inner: \"u\" }, \"r\"));\n//\n//     let result = colour_regex.find_match(Bvec::new(\"color\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = colour_regex.find_match(Bvec::new(\"colour\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 6);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // parse the empty string three times\n//     // EMPTY{3}\n//     let three_empties_regex: Repeated<(), 3> = Repeated { inner: () };\n//\n//     let result = three_empties_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 3);\n//\n//     // 1{0}\n//     let zero_ones_regex: Repeated<str<1>, 0> = Repeated { inner: \"1\" };\n//\n//     let result = zero_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 3);\n//\n//     // 1{1}\n//     let one_ones_regex: Repeated<str<1>, 1> = Repeated { inner: \"1\" };\n//\n//     let result = one_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 1);\n//     assert_eq(result.leftover.len, 2);\n//\n//     // 1{2}\n//     let two_ones_regex: Repeated<str<1>, 2> = Repeated { inner: \"1\" };\n//\n//     let result = two_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1{3}\n//     let three_ones_regex: Repeated<str<1>, 3> = Repeated { inner: \"1\" };\n//\n//     let result = three_ones_regex.find_match(Bvec::new(\"1111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 3);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1*\n//     let ones_regex: Star<str<1>, 5> = Star { inner: \"1\" };\n//\n//     let result = ones_regex.find_match(Bvec::new(\"11000\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 3);\n//\n//     let result = ones_regex.find_match(Bvec::new(\"11\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = ones_regex.find_match(Bvec::new(\"111111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1+\n//     let nonempty_ones_regex: Plus<str<1>, 5, 4> = Plus { inner: \"1\" };\n//\n//     let result = nonempty_ones_regex.find_match(Bvec::new(\"111111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 2^n-1 in binary: 1+0\n//     let pred_pow_two_regex = (nonempty_ones_regex, \"0\");\n//\n//     let result = pred_pow_two_regex.find_match(Bvec::new(\"1110\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // (0|1)*\n//     let binary_regex: Star<Or<str<1>, str<1>>, 5> = Star { inner: Or { lhs: \"0\", rhs: \"1\" } };\n//\n//     let result = binary_regex.find_match(Bvec::new(\"110100\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // even numbers in binary: 1(0|1)*0\n//     let even_binary_regex = (\"1\", (binary_regex, \"0\"));\n//\n//     let result = even_binary_regex.find_match(Bvec::new(\"1111110\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 7);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // digit: \\d+\n//     // [0-9]\n//     let digit_regex = AnyOf {\n//         inner: [\n//             \"0\",\n//             \"1\",\n//             \"2\",\n//             \"3\",\n//             \"4\",\n//             \"5\",\n//             \"6\",\n//             \"7\",\n//             \"8\",\n//             \"9\"\n//         ]\n//     };\n//\n//     let result = digit_regex.find_match(Bvec::new(\"157196345823795\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 1);\n//     assert_eq(result.leftover.len, 14);\n//\n//     let result = digit_regex.find_match(Bvec::new(\"hi\".as_bytes()));\n//     println(result);\n//     assert(!result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 2);\n//\n//     // digits: \\d+\n//     // [0-9]+\n//     let digits_regex: Plus<AnyOf<str<1>, 10>, 32, 31> = Plus { inner: digit_regex };\n//\n//     let result = digits_regex.find_match(Bvec::new(\"123456789012345\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 15);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = digits_regex.find_match(Bvec::new(\"123456789012345 then words\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 15);\n//     assert_eq(result.leftover.len, 11);\n//\n//     // multiples of 10\n//     // apply to a reversed input string (because there isn't backtracking)\n//     // 0\\d+\n//     let backwards_mult_of_10_regex = (\"0\", digits_regex);\n//\n//     let result = backwards_mult_of_10_regex.find_match(Bvec::new(reverse_array(\"1230\".as_bytes())));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let ten_pow_16: str<17> = \"10000000000000000\";\n//     let result = backwards_mult_of_10_regex.find_match(Bvec::new(reverse_array(ten_pow_16.as_bytes())));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 17);\n//     assert_eq(result.leftover.len, 0);\n//     // adapted URL parser: (https?:\\/\\/)?([\\da-c.\\-]+)\\.([a-c.]+)([\\/\\w \\.\\-]*)*\\/?\n// }\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
