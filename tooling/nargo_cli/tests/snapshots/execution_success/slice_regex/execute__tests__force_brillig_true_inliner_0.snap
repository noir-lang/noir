---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "struct Match {\n    succeeded: bool,\n    match_ends: u32,\n    leftover: [u8],\n}\n\nimpl Match {\n    fn empty(leftover: [u8]) -> Self {\n        Match { succeeded: true, match_ends: 0, leftover }\n    }\n}\n\nimpl Eq for Match {\n    fn eq(self, other: Self) -> bool {\n        (self.succeeded == other.succeeded) & (self.match_ends == other.match_ends)\n        // (self.leftover == other.leftover)\n    }\n}\n\n// TODO: load match into str<N> and assert that it's the correct length\n// impl<N> From<Match> for str<N>\n\ntrait Regex {\n    fn find_match(self, input: [u8]) -> Match;\n}\n\n// Empty\nimpl Regex for () {\n    fn find_match(_self: Self, input: [u8]) -> Match {\n        Match::empty(input)\n    }\n}\n\n// Exact\nimpl<let N: u32> Regex for str<N> {\n    fn find_match(self, input: [u8]) -> Match {\n        let mut leftover = input;\n        let mut matches_input = true;\n        let self_as_bytes = self.as_bytes();\n        for c in self_as_bytes {\n            if leftover.len() != 0 {\n                let (first_elem, popped_slice) = leftover.pop_front();\n                leftover = popped_slice;\n                matches_input &= first_elem == c;\n            } else {\n                matches_input = false;\n            }\n        }\n        if matches_input {\n            Match { succeeded: true, match_ends: self_as_bytes.len(), leftover }\n        } else {\n            Match { succeeded: false, match_ends: 0, leftover: input }\n        }\n    }\n}\n\n// And\nimpl<T, U> Regex for (T, U)\nwhere\n    T: Regex,\n    U: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let lhs_result = self.0.find_match(input);\n        if lhs_result.succeeded {\n            let rhs_result = self.1.find_match(lhs_result.leftover);\n            if rhs_result.succeeded {\n                Match {\n                    succeeded: true,\n                    match_ends: lhs_result.match_ends + rhs_result.match_ends,\n                    leftover: rhs_result.leftover,\n                }\n            } else {\n                Match { succeeded: false, match_ends: 0, leftover: input }\n            }\n        } else {\n            Match { succeeded: false, match_ends: 0, leftover: input }\n        }\n    }\n}\n\n// N T's: (T, (T, (T, T)))\nstruct Repeated<T, let N: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32> Regex for Repeated<T, N>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let mut result = Match::empty(input);\n        for _ in 0..N {\n            if result.succeeded {\n                let next_result = self.inner.find_match(result.leftover);\n                result = Match {\n                    succeeded: next_result.succeeded,\n                    match_ends: result.match_ends + next_result.match_ends,\n                    leftover: next_result.leftover,\n                };\n            }\n        }\n        result\n    }\n}\n\nstruct Or<T, U> {\n    lhs: T,\n    rhs: U,\n}\n\nimpl<T, U> Regex for Or<T, U>\nwhere\n    T: Regex,\n    U: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let lhs_result = self.lhs.find_match(input);\n        if lhs_result.succeeded {\n            lhs_result\n        } else {\n            self.rhs.find_match(input)\n        }\n    }\n}\n\nstruct Question<T> {\n    inner: T,\n}\n\nimpl<T> Regex for Question<T>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        Or { lhs: self.inner, rhs: () }.find_match(input)\n    }\n}\n\n// 0 <= num_matches <= N\nstruct Star<T, let N: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32> Regex for Star<T, N>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let regex: Repeated<_, N> = Repeated { inner: Question { inner: self.inner } };\n        regex.find_match(input)\n    }\n}\n\n// 0 < num_matches <= N\nstruct Plus<T, let N: u32, let N_PRED: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32, let N_PRED: u32> Regex for Plus<T, N, N_PRED>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        std::static_assert(N_PRED + 1 == N, \"N - 1 != N_PRED\");\n        let star: Star<T, N_PRED> = Star { inner: self.inner };\n        (self.inner, star).find_match(input)\n    }\n}\n\nfn main() {\n    // gr(a|e)y\n    let graey_regex = (\"gr\", (Or { lhs: \"a\", rhs: \"e\" }, \"y\"));\n\n    // NOTE: leftover ignored in Eq: Match\n    let result = graey_regex.find_match(\"gray\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 4, leftover: &[] });\n\n    // NOTE: leftover ignored in Eq: Match\n    let result = graey_regex.find_match(\"grey\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 4, leftover: &[] });\n\n    // colou?r\n    let colour_regex = (\"colo\", (Question { inner: \"u\" }, \"r\"));\n\n    let result = colour_regex.find_match(\"color\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n\n    let result = colour_regex.find_match(\"colour\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 6, leftover: &[] });\n\n    // parse the empty string three times\n    // EMPTY{3}\n    let three_empties_regex: Repeated<(), 3> = Repeated { inner: () };\n\n    let result = three_empties_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 0, leftover: &[] });\n\n    // 1{0}\n    let zero_ones_regex: Repeated<str<1>, 0> = Repeated { inner: \"1\" };\n\n    let result = zero_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 0, leftover: &[] });\n\n    // 1{1}\n    let one_ones_regex: Repeated<str<1>, 1> = Repeated { inner: \"1\" };\n\n    let result = one_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 1, leftover: &[] });\n\n    // 1{2}\n    let two_ones_regex: Repeated<str<1>, 2> = Repeated { inner: \"1\" };\n\n    let result = two_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n\n    // 1{3}\n    let three_ones_regex: Repeated<str<1>, 3> = Repeated { inner: \"1\" };\n\n    let result = three_ones_regex.find_match(\"1111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 3, leftover: &[] });\n    // TODO(https://github.com/noir-lang/noir/issues/6285): re-enable these cases and complete the test using array_regex below\n    //\n    // // 1*\n    // let ones_regex: Star<str<1>, 5> = Star { inner: \"1\" };\n    //\n    // let result = ones_regex.find_match(\"11000\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n    //\n    // let result = ones_regex.find_match(\"11\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n    //\n    // let result = ones_regex.find_match(\"111111\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    //\n    // // 1+\n    // let nonempty_ones_regex: Plus<str<1>, 5, 4> = Plus { inner: \"1\" };\n    //\n    // let result = nonempty_ones_regex.find_match(\"111111\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    // // 2^n-1 in binary: 1+0\n    // let pred_pow_two_regex = (nonempty_ones_regex, \"0\");\n    //\n    // let result = pred_pow_two_regex.find_match(\"1110\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 3, leftover: &[] });\n    //\n    // // (0|1)*\n    // let binary_regex: Star<Or<str<1>, str<1>>, 5> = Star { inner: Or { lhs: \"0\", rhs: \"1\" } };\n    //\n    // let result = binary_regex.find_match(\"110100\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    // // even numbers in binary: 1(0|1)*0\n    // let even_binary_regex = (\"1\", (binary_regex, \"0\"));\n    //\n    // let result = even_binary_regex.find_match(\"1111110\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 6, leftover: &[] });\n    // 2-letter capitalized words: [A-Z][a-z]\n    // numbers: \\d+\n    // [0-9]+\n    // words: \\w+\n    // [a-Z]+\n    // adapted URL parser: (https?:\\/\\/)?([\\da-z.\\-]+)\\.([a-z.]+)([\\/\\w \\.\\-]*)*\\/?\n    // // panics (at compile time) when input string is too short\n    // let foo_regex = (\n    //     \"colo\",\n    //     (\n    //         Question {\n    //             inner: \"u\",\n    //         },\n    //         \"r\"\n    //     )\n    // );\n    //\n    // let result = foo_regex.find_match(\"colo\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match {\n    //     succeeded: true,\n    //     match_ends: 4,\n    //     leftover: &[],\n    // });\n}\n\n// TODO\n// array_regex execution_success test:\n// use to complete test once https://github.com/noir-lang/noir/issues/6285 is resolved\n//\n// // offset <= len <= N\n// struct Bvec<T, let N: u32> {\n//     inner: [T; N],\n//\n//     // elements at indices < offset are zero\n//     offset: u32,\n//\n//     // elements at indices >= len are zero\n//     len: u32,\n// }\n//\n// impl<T, let N: u32> Eq for Bvec<T, N> where T: Eq {\n//     fn eq(self, other: Self) -> bool {\n//         (self.inner == other.inner) &\n//             (self.offset == other.offset) &\n//             (self.len == other.len)\n//     }\n// }\n//\n// impl<T, let N: u32> Bvec<T, N> {\n//     fn empty() -> Self {\n//         Self { inner: [std::mem::zeroed(); N], offset: 0, len: 0 }\n//     }\n//\n//     fn new(array: [T; N]) -> Self {\n//         let mut result = Bvec::empty();\n//         for x in array {\n//             result = result.push(x);\n//         }\n//         result\n//     }\n//\n//     // pushing when len == N is a no-op\n//     fn push(self, x: T) -> Self {\n//         let mut inner = self.inner;\n//         let mut len = self.len;\n//         if self.len < N {\n//             inner[self.len] = x;\n//             len += 1;\n//         }\n//\n//         Self { inner, offset: self.offset, len }\n//     }\n//\n//     fn pop_front(self) -> (T, Self) {\n//         assert(self.offset <= self.inner.len());\n//         assert(self.len != 0);\n//\n//         let first_elem = self.inner[self.offset];\n//         let popped_slice = Self { inner: self.inner, offset: self.offset + 1, len: self.len - 1 };\n//\n//         (first_elem, popped_slice)\n//     }\n// }\n//\n// struct Match<let N: u32> {\n//     succeeded: bool,\n//     match_ends: u32,\n//     leftover: Bvec<u8, N>,\n// }\n//\n// impl<let N: u32> Match<N> {\n//     fn empty(leftover: Bvec<u8, N>) -> Self {\n//         Match { succeeded: true, match_ends: 0, leftover }\n//     }\n//\n//     fn failed(leftover: Bvec<u8, N>) -> Self {\n//         Match { succeeded: false, match_ends: 0, leftover }\n//     }\n// }\n//\n// impl<let N: u32> Eq for Match<N> {\n//     fn eq(self, other: Self) -> bool {\n//         (self.succeeded == other.succeeded) &\n//             (self.match_ends == other.match_ends) &\n//             (self.leftover == other.leftover)\n//     }\n// }\n//\n// // TODO: load match into str<N> and assert that it's the correct length\n// // impl<N> From<Match> for str<N>\n//\n// trait Regex {\n//     // Perform a match without backtracking\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N>;\n// }\n//\n// // Empty\n// impl Regex for () {\n//     fn find_match<let N: u32>(_self: Self, input: Bvec<u8, N>) -> Match<N> {\n//         Match::empty(input)\n//     }\n// }\n//\n// // Exact\n// impl<let M: u32> Regex for str<M> {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut leftover = input;\n//         let mut matches_input = true;\n//         let self_as_bytes = self.as_bytes();\n//         for c in self_as_bytes {\n//             if leftover.len != 0 {\n//                 let (first_elem, popped_slice) = leftover.pop_front();\n//                 leftover = popped_slice;\n//                 matches_input &= first_elem == c;\n//             } else {\n//                 matches_input = false;\n//             }\n//         }\n//         if matches_input {\n//             Match {\n//                 succeeded: true,\n//                 match_ends: self_as_bytes.len(),\n//                 leftover,\n//             }\n//         } else {\n//             Match {\n//                 succeeded: false,\n//                 match_ends: 0,\n//                 leftover: input,\n//             }\n//         }\n//     }\n// }\n//\n// // And\n// impl<T, U> Regex for (T, U) where T: Regex, U: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let lhs_result = self.0.find_match(input);\n//         if lhs_result.succeeded {\n//             let rhs_result = self.1.find_match(lhs_result.leftover);\n//             if rhs_result.succeeded {\n//                 Match {\n//                     succeeded: true,\n//                     match_ends: lhs_result.match_ends + rhs_result.match_ends,\n//                     leftover: rhs_result.leftover,\n//                 }\n//             } else {\n//                 Match {\n//                     succeeded: false,\n//                     match_ends: 0,\n//                     leftover: input,\n//                 }\n//             }\n//         } else {\n//             Match {\n//                 succeeded: false,\n//                 match_ends: 0,\n//                 leftover: input,\n//             }\n//         }\n//     }\n// }\n//\n// // N T's: (T, (T, (T, T)))\n// struct Repeated<T, let N: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32> Regex for Repeated<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut result = Match::empty(input);\n//         for _ in 0..M {\n//             if result.succeeded {\n//                 let next_result = self.inner.find_match(result.leftover);\n//                 result = Match {\n//                     succeeded: next_result.succeeded,\n//                     match_ends: result.match_ends + next_result.match_ends,\n//                     leftover: next_result.leftover,\n//                 };\n//             }\n//         }\n//         result\n//     }\n// }\n//\n// struct Or<T, U> {\n//     lhs: T,\n//     rhs: U,\n// }\n//\n// impl<T, U> Regex for Or<T, U> where T: Regex, U: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let lhs_result = self.lhs.find_match(input);\n//         if lhs_result.succeeded {\n//             lhs_result\n//         } else {\n//             self.rhs.find_match(input)\n//         }\n//     }\n// }\n//\n// struct Question<T> {\n//     inner: T,\n// }\n//\n// impl<T> Regex for Question<T> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         Or {\n//             lhs: self.inner,\n//             rhs: (),\n//         }.find_match(input)\n//     }\n// }\n//\n// // 0 <= num_matches <= N\n// struct Star<T, let N: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32> Regex for Star<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let regex: Repeated<_, M> = Repeated {\n//             inner: Question { inner: self.inner },\n//         };\n//         regex.find_match(input)\n//     }\n// }\n//\n// // 0 < num_matches <= N\n// struct Plus<T, let N: u32, let N_PRED: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32, let M_PRED: u32> Regex for Plus<T, M, M_PRED> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         std::static_assert(M_PRED + 1 == M, \"M - 1 != M_PRED\");\n//         let star: Star<T, M_PRED> = Star { inner: self.inner };\n//         (\n//             self.inner,\n//             star\n//         ).find_match(input)\n//     }\n// }\n//\n// // Repeated is to (,) as AnyOf is to Or\n// struct AnyOf<T, let N: u32> {\n//     inner: [T; N],\n// }\n//\n// impl<T, let M: u32> Regex for AnyOf<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut result = Match::failed(input);\n//         for i in 0..M {\n//             if !result.succeeded {\n//                 result = self.inner[i].find_match(result.leftover);\n//             }\n//         }\n//         result\n//     }\n// }\n//\n// fn reverse_array<T, let N: u32>(input: [T; N]) -> [T; N] {\n//     let mut output = [std::mem::zeroed(); N];\n//     for i in 0..N {\n//         output[i] = input[N - (i + 1)];\n//     }\n//     output\n// }\n//\n// fn main() {\n//     assert_eq(reverse_array([1, 2, 3, 4]), [4, 3, 2, 1]);\n//\n//     let mut xs: Bvec<u8, 3> = Bvec::empty();\n//\n//     xs = xs.push(0);\n//     assert_eq(xs, Bvec { inner: [0, 0, 0], offset: 0, len: 1 });\n//\n//     xs = xs.push(1);\n//     assert_eq(xs, Bvec { inner: [0, 1, 0], offset: 0, len: 2 });\n//\n//     xs = xs.push(2);\n//     assert_eq(xs, Bvec { inner: [0, 1, 2], offset: 0, len: 3 });\n//\n//     xs = xs.push(3);\n//     assert_eq(xs, Bvec { inner: [0, 1, 2], offset: 0, len: 3 });\n//\n//     let ys = Bvec::new([0, 1, 2]);\n//     assert_eq(xs, ys);\n//\n//     // test that pop_front gives all contents, in order,\n//     // followed by std::mem::zeroed()\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 0);\n//\n//     xs = new_xs;\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 1);\n//\n//     xs = new_xs;\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 2);\n//\n//     xs = new_xs;\n//     println(xs);\n//     if xs.len != 0 {\n//         let (x, _new_xs) = xs.pop_front();\n//         assert_eq(x, std::mem::zeroed());\n//     }\n//\n//     assert_eq(new_xs, Bvec { inner: [0, 1, 2], offset: 3, len: 0 });\n//\n//     // gr(a|e)y\n//     let graey_regex = (\"gr\", (Or { lhs: \"a\", rhs: \"e\" }, \"y\"));\n//\n//     let result = graey_regex.find_match(Bvec::new(\"gray\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = graey_regex.find_match(Bvec::new(\"grey\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // colou?r\n//     let colour_regex = (\"colo\", (Question { inner: \"u\" }, \"r\"));\n//\n//     let result = colour_regex.find_match(Bvec::new(\"color\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = colour_regex.find_match(Bvec::new(\"colour\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 6);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // parse the empty string three times\n//     // EMPTY{3}\n//     let three_empties_regex: Repeated<(), 3> = Repeated { inner: () };\n//\n//     let result = three_empties_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 3);\n//\n//     // 1{0}\n//     let zero_ones_regex: Repeated<str<1>, 0> = Repeated { inner: \"1\" };\n//\n//     let result = zero_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 3);\n//\n//     // 1{1}\n//     let one_ones_regex: Repeated<str<1>, 1> = Repeated { inner: \"1\" };\n//\n//     let result = one_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 1);\n//     assert_eq(result.leftover.len, 2);\n//\n//     // 1{2}\n//     let two_ones_regex: Repeated<str<1>, 2> = Repeated { inner: \"1\" };\n//\n//     let result = two_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1{3}\n//     let three_ones_regex: Repeated<str<1>, 3> = Repeated { inner: \"1\" };\n//\n//     let result = three_ones_regex.find_match(Bvec::new(\"1111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 3);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1*\n//     let ones_regex: Star<str<1>, 5> = Star { inner: \"1\" };\n//\n//     let result = ones_regex.find_match(Bvec::new(\"11000\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 3);\n//\n//     let result = ones_regex.find_match(Bvec::new(\"11\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = ones_regex.find_match(Bvec::new(\"111111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1+\n//     let nonempty_ones_regex: Plus<str<1>, 5, 4> = Plus { inner: \"1\" };\n//\n//     let result = nonempty_ones_regex.find_match(Bvec::new(\"111111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 2^n-1 in binary: 1+0\n//     let pred_pow_two_regex = (nonempty_ones_regex, \"0\");\n//\n//     let result = pred_pow_two_regex.find_match(Bvec::new(\"1110\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // (0|1)*\n//     let binary_regex: Star<Or<str<1>, str<1>>, 5> = Star { inner: Or { lhs: \"0\", rhs: \"1\" } };\n//\n//     let result = binary_regex.find_match(Bvec::new(\"110100\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // even numbers in binary: 1(0|1)*0\n//     let even_binary_regex = (\"1\", (binary_regex, \"0\"));\n//\n//     let result = even_binary_regex.find_match(Bvec::new(\"1111110\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 7);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // digit: \\d+\n//     // [0-9]\n//     let digit_regex = AnyOf {\n//         inner: [\n//             \"0\",\n//             \"1\",\n//             \"2\",\n//             \"3\",\n//             \"4\",\n//             \"5\",\n//             \"6\",\n//             \"7\",\n//             \"8\",\n//             \"9\"\n//         ]\n//     };\n//\n//     let result = digit_regex.find_match(Bvec::new(\"157196345823795\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 1);\n//     assert_eq(result.leftover.len, 14);\n//\n//     let result = digit_regex.find_match(Bvec::new(\"hi\".as_bytes()));\n//     println(result);\n//     assert(!result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 2);\n//\n//     // digits: \\d+\n//     // [0-9]+\n//     let digits_regex: Plus<AnyOf<str<1>, 10>, 32, 31> = Plus { inner: digit_regex };\n//\n//     let result = digits_regex.find_match(Bvec::new(\"123456789012345\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 15);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = digits_regex.find_match(Bvec::new(\"123456789012345 then words\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 15);\n//     assert_eq(result.leftover.len, 11);\n//\n//     // multiples of 10\n//     // apply to a reversed input string (because there isn't backtracking)\n//     // 0\\d+\n//     let backwards_mult_of_10_regex = (\"0\", digits_regex);\n//\n//     let result = backwards_mult_of_10_regex.find_match(Bvec::new(reverse_array(\"1230\".as_bytes())));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let ten_pow_16: str<17> = \"10000000000000000\";\n//     let result = backwards_mult_of_10_regex.find_match(Bvec::new(reverse_array(ten_pow_16.as_bytes())));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 17);\n//     assert_eq(result.leftover.len, 0);\n//     // adapted URL parser: (https?:\\/\\/)?([\\da-c.\\-]+)\\.([a-c.]+)([\\/\\w \\.\\-]*)*\\/?\n// }\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
