---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "td3driTFsQXgd5lrLjoz4yeTV0GWhfHYQhoBGsORjhDvfjoic8XCR9rl9q6ZG+oDZq/o3Z2rqruqGn7/8PePf/vtn3/98ad//PyvD99+9/uHv33+8dOnH//5108///D9rz/+/NPzn/7+4RF/aePDt+2bD032RvfG9sb3Zu7Nyk1/7E3bm743O6XvlL5T+k7pO6XvlL5Txk4ZO2XslLFTxk4ZO2XslPFMkedm7s3KjTz2pu1N35uxN7I3zxR9bmxvfG/m3qzc6GNv2t70vRl7I3uzU3Sn6E7RnaI7xXaKP39gPTe6N7Y3vjdzb1Zu5mNv2t70vRl7s1PmTpk7Ze6UuVPmTlk7ZcUT+Xhu+9mOs5Wz1bO1s/WznXvbHhEQr/KjAwMQQAEDHJhAvL79ifYAGtCBAQiggAEOTADJHckdyR3JHckdybkWR8CBdRBLqklgHsQqaRZwYALrIFbLRgM6MAABFECyIlmRrEiOFdQ80IAODEAABQzwA4+cGWhABwYggAIGOBCPcAXWQSzZjQZ0YAACKGCAA0ieSF5IXkheSF4nuceC7I+AHMRr2ntgAusgdjAbDejAAARQwAAkDyQPJAuSBcmCZEFy7Hz6CChggAMTWAextDYaEMkSUMAAByawDmIhbTQAObGQugYEUMAAByawDmJpbTSgA5FsgUj2gAHzIFZCnwE/iP1Sjxc3dkwbDkxgbYzHA2hAB55/eDwC6yD2PxvtIPYJI482ChjgwATWQSykjQbEH+6BCayDWBuJfAVj2892nK2crZ6tna2f7TzbSNQ4+j2ABnRgAAIoYIADE0CyI9mR7Eh2JDuSHcmOZEeyI9mRPJE8kTyRPJE8kTyRPJE8kTyRPJG8kLyQvJC8kLyQvJC8kLyQvJC8TrI8HkADOjAAARQwwIEJILkhuSG5IbkhuSG5IbkhuSG5IbkhuSO5I7kjuSO5I7kjuSO5I7kjuSN5IHkgeSB5IHkgeSB5IHkgeSB5IFmQLEgWJAuSBcmCZEGyIFmQLEhWJCuSFcmKZEWyIlmRrEhWJKODgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDgg4KOijooKCDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDig4qOqjooKKDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDhg4aOmjooKGDjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODjg46OujooKODMztogQZ0YAACKBDJHnBgAusgO5hoQAcieQYEUMAAByawDrKDiQZ0AMkdyR3JHckdyR3JHckDyQPJA8nRQWkBARQwwIEJrIM8hZ+Ik/g90IEBCKCAAQ5MYB1EBzeQrEhWJCuSFcmK5CiRxGsaJdowwIEJrIMo0UYDOjAAJDuSHcmO5CiRxJKIEiWiRBsN6MAABFAgcuJlisokojIbDejAAARQIB5hXnVwYAJrY0VlNhrQgQEIoIABDkwAyQ3JDcmxwjWvd/SDWKLaAw3owAAEUMAAByawDgTJgmRBsiBZkCxIFiTnNacRmMA6yCtPiQZ0YAACRI4EJrAO8tpTogEdGIAA8Qg1YIADE1gHsZ43GtCBAQiAZEeyI9mR7EieSI71rBYYgB7EglQPyMbzMlUkrtQsLSj2gEet1EujJCUtWalm9JrRa8aoGaNmjJoxakYsNstLa7HajqzkpVlaUCy5o1Z6zrB9PU5LVvLSLC0oFtpRK1VerDXrKSlpyUpemqUFxSI8aqVeihkjFTMkZaUJxdIxTTkU68EsZSUvzdKCYid31Eq9FD+Rqyn2XakWO6+jBsVR2GZKS1by0iwtKFbiUSvFT6zULC0o1tVWvh3d6qVRkpKWrOSlWXrO8H2Z9VFqpV4aJSlpyUrPGT5Ss7SgWAdHrdRLMUNSUtKSlbw0SwuK3dJRK/VSzfCa4TXDa4bXDK8ZXjNmzZg1Y9aM2Fm5pqSkJSt5aZYWFOv0qJV6qWasmrFqxqoZq2asmrEwoz8epVbqpVGSUsyYKSt5aZYWFAfoo1bqpVGSUs1oNaPVjFYzWs3oNaPXjF4zYj/uK/X82Rl7zLyaO1vKoWjAtFQr9dIoSUlLVvLSLC3IaobVDKsZVjOsZljNsJoRDZiemqUFRQOOWqmXRklKMSOfq1jtRwuK1X7USr00SlKqvFjtM5/7WO1Hs7SgWO1HrdRLoyQlLcU9MPmqxmpf+VrGGk/lBeGj+Gexl8oLwFtxtJ+a0pKVHIrj9MobQmLlHHlplhYUx+mjVuqlUZJSzZCaITVDaobUDK0ZWjNixa58zLFij6SkJSt5aZYWFCt2WWqUpKQlK3lplhbklRerc3mql0ZJSlqykpdmaUF5/9RWzJipmLFSUjJo3wz1SCqYl3efB/2kkEoa6eQkVzHvejrMH+tJJye5inkD3GMkBymkkkY6OclVlPyxvLUp7206dHIW8wietzrlEXyrlXpplKSkJSvlFE9OchXzPqXDRnZykELm7zSTRjo5yVXMe5cOc9pKdnKQQipppJN551uupLybaTPvZzpsZCcHKaSSRjrJaaum5YVTsJGdHKSQShrp5CQ5rXFa47S8uy/vq8tLqqCQShrp5CRXMe/2O2wkp3VO65zWOa1zWue0zmmd07KIeS9gXlJ9vq8NSo7Yd/ZJMW/l63nXbN7Md7iKeUPfYSM7OUghlTSS04zTjNOc05zTnNOc07JOcadayyuaoJFOTnIVs06Hjcxp+UxmcQ6NdHKSq5jFOWwkc7M4PV+hLM6hkkY6OckF5tVOsJGdzGmazGn7Rk0jZ3Hfu7pv4PRi3uIcdyu2vHYIDlKKkn9gJQcppJJGOjnJVcx7Vg8byWnKacppymnKacppymm57Ef+FrnsDxvZyUEKqaSRedtu3pOeC/ywkZ0cpJBKGvmn3Pgt4q69lpcND3OBHzayk4MUUkkjncxpI5nTcp3lWj8cYF7/a3E5ouUVwMPc/8blhpaX8cBODlJIJY30Yu5IR95BnDvSQyWtmO8xxr6T+EE2spODFFJJK+aazLMWeaEMFFKLuUrypvO8rAVOchVz7Rw2spODjGlxDaDlZS7QSCcnuYq5dg4bGdNkJAcppJJGOpnTcmnk2tnMXeZhIzs5SCFzWq6o3GUeOjnJBeaFMbCRnRykkEoa6eQkOa1xWuO0xmmN03Ktx9WTlpfNQCOdnOQq5nuNw0bmtH23+yCFVNJIJye5ivkdmLh20fKyGtjJQQqppJExTfPbOvlR4HAVs6aHjezkIIXMaZI00slJrmIecQ4b2cmclq9btvtQSSOdnGROi73GzCPOYSM7OUghlTQyp+0vLkxyFXNfctjITg5SSCWN5DTnNOe0yWmT0yan5b5Ec6XmvuRQSSOdnOQq5r7kMKblyfu8QggOUkgljXRykjEtLwXkFUOwkZ0cpJA5TZJGOjnJVcx9yWEjO5nTLCmkkkY6OclVzH3JYSM7yWmd03KvkZcf8opmyysHeU0T7OQgM0GTShrp5CRXMfcPh42MaZ7f/sv9w6GQShrp5CRXMfcPeTUhr32CnRykkErmtFwPuX84nOQq7m9WbTaykzktF8H+htWmkkY6OclVzP3DYSM7yWnOac5pzmnOac5pzmmT0yanTU7L/UOeklm5fzhU0kgnJ7mKuX84bGQnOW1xWu4JPL4C9MjOxzn7JxvZyUFmgiaVNNLJSa5idv6wkTFt5pdZs/OHQipppJOTXMXs/OzJRnZykEIqmdNG0slJrmLuHw4b2UmpZ33wBcj6H2ZYPiVZ/8NGdnKQQipppJOT5DTlNOU05TTlNOU05bSsf1wo6XlZGpzkKmb9DxvZyUHmtHx2suiHk1zF/UXLzUZ2cpDM3V+5zAW+v3S56eQkVzGLftjITg5SyJyW35/cX8TMb1Dub2Am91cvN/Of5lLOo3Ryf+13StLQzf3V38NJrmJ7kI3s5CCVzKNTPFH7+72HnYwfWyMppJJGOjnJVcwOHTayk5w2OG1w2uC0wWmD0wanZclWPpNZssNODlJIJY10MqdFL/a3kg87OUghlTTSyT/l5m8RFdnfUz5sZCcHKaSSRjo5yZyWL3eWbOXSyGYdSnF/BXklB5kJsU/d3y22/LOrkZ0cpJBKGunkAvsDp41736faN4VU0kgnJ7mK+1T7ZiM5rXFa47SoU3/kN6SjTuAqxoEKbGQnBykkc6NkoJM5Lf+7EPlN7M38LvZhIzs5SCGVNNJJTstvZ8e1tJ7fz87z9j2/oQ0OUsm57xro+SXsrbxHZquVemmUpKQlK3mpZmjNsJqRX9GOi3V9fyX7UEkjnZzkKubXsw+Zm1/RPhxkTsvl4koa6eQkV3E+yEZ2cpCcNnNaPv1540AunLxxYGtBeZPA448/vvmA/2zJX3/9/PFj/FdL/vTfMfnu9w+/fP/540+/fvj2p98+ffrmw/98/+m3/EP/+uX7n3L76/efn//2mfnxp78/t8/Af/z46WPoj2/404+3f1S64afl+aArQP+LhDhvehJ0vZXQ306IizYnIS6NvJUw3k5Ygofw/Djzjp+PWy7xCB7D3vM7WHyA3wnPE+xvJdjtZ8HfThiPBx7DeL41fythvp3wbKedhGf55jsSVkPA6us9P//KKzlvv5KXCQsPIe5hfE9Cj3eXO2E85nteydbwGEZ7+7eIPf3Nl/Iq4qXX8jLglRfzKuDFV/My4rUXw25XOy4/33wxriJeejEuA155Ma4CXt1JXkXku7j/2K3rR/FSPS8jbi+JOLGB1/N5YuM9i2qOeiae58TfccR58TH024/h8ti/8BhktDerMS4OvbNei+dp4wp4Hr3+LUC+YoBXMfxP7f5/AVdPwuhWT8J819MoXgn66O9KUOyjnmH65guxbr//kMfNXcxVwIu7mMtf47W9tYz7z4Tcfism9w/gcvcALncP4HL/AC73D+CXr8Zrb6f0/hFc7x7B9e4RXO8fwfX+4VfvH34vG/payfX+Rx29+1lH737Y0fufdi4jXntLpvc/Men8qmvixfdDl8vqtTdEV4efFx/F5RHs/tsyba3eT7z9IPxx812Vt68YcPttmca9aftJsIe+52n0UU+j63xXwqPOjfl4cz/lX+C00P2zCVcRL+3qrgJe3EdcRrx4WuX+R/l5/2TlvNjNjBHfr9ivx9C3I+6/v5z331/Ou+8v5933l/P++8vLiNcOgNeP4rVThvff5c77p6DXuL0mriJeWhPr7rn8df9k/mXEa2vi+lG8tCYuI+6viRffjsz7Z4n8/ukyv3++7PJYbDwWzzd3me2hN9/UtId9zYTb74t8oR4yrb3nmVyPOl21hrwnYc56b7befm+W31q4eSBurd+/znKV8dpVkquEF3cV1xmv7Suun9HXDiD5nN1+Vebt90etrdtvkPLbaXcvoV1lvLY6+t2TqpcJr15Fu8x47Yj4Hx7Ha+v8MuPVde7313mfX2BtzNtrY95eG/MLrI35BdbG/AJrY37dtfHiW5Xr9fXae5XLffHLj6N91fdMS+qy0nr7DEiTu2eSmrSvmXD7PdOqo5o+hr/jmdTecEzTLu95z6R51/NJaPNdj6EuEj7PCl68mn77tZhfM+Huq6m8WKryrl6o1h5P9eremH73edDxNRNuP5Pe6pn0cXGT0dWHQ6k9f9d2keF3j4Pqt4+Dl8+F87mYb/8edntfae1rJtxeE6s+X9rjT4/hv3gml+PT4TPM334mr85ujomGdnmM92UIj8FycQy2+2dZL54Ne4xez6dcPBvr7qq4fT3oMuHuurJHvWu31t/TUOuGX8L69HcljHoM3d7+5OBfYGX6F1iZ/nVXZl9IsOeZlLcfxe2VOR9fM+H2yhzd63lY71wVLx4Fry4KvfqZ9Crjtc+klwkvHYuvEl79THqZ8eJn0uvH8dpn0suMFz+T2hdYG6vfXxvr9pnOy4SX1sbq99fGZcaLa2N9gXO260ucs739jLYv8Iy2+8+o330L7/ffwV9GXPwaf3n+3fc//Pj53/5H039E1ucfv//bp4/nb//x208//Onf/vq/v+Df4H9U/cvnn3/4+PffPn+MpPh3+/9W3T98+10fz4+9ffj4yzcfLP/+eRL7+Q/l+ffxfcnvel/yzfMvK/5B2z+h8Sf8L3/EQ/w/",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "struct Match {\n    succeeded: bool,\n    match_ends: u32,\n    leftover: [u8],\n}\n\nimpl Match {\n    fn empty(leftover: [u8]) -> Self {\n        Match { succeeded: true, match_ends: 0, leftover }\n    }\n}\n\nimpl Eq for Match {\n    fn eq(self, other: Self) -> bool {\n        (self.succeeded == other.succeeded) & (self.match_ends == other.match_ends)\n        // (self.leftover == other.leftover)\n    }\n}\n\n// TODO: load match into str<N> and assert that it's the correct length\n// impl<N> From<Match> for str<N>\n\ntrait Regex {\n    fn find_match(self, input: [u8]) -> Match;\n}\n\n// Empty\nimpl Regex for () {\n    fn find_match(_self: Self, input: [u8]) -> Match {\n        Match::empty(input)\n    }\n}\n\n// Exact\nimpl<let N: u32> Regex for str<N> {\n    fn find_match(self, input: [u8]) -> Match {\n        let mut leftover = input;\n        let mut matches_input = true;\n        let self_as_bytes = self.as_bytes();\n        for c in self_as_bytes {\n            if leftover.len() != 0 {\n                let (first_elem, popped_slice) = leftover.pop_front();\n                leftover = popped_slice;\n                matches_input &= first_elem == c;\n            } else {\n                matches_input = false;\n            }\n        }\n        if matches_input {\n            Match { succeeded: true, match_ends: self_as_bytes.len(), leftover }\n        } else {\n            Match { succeeded: false, match_ends: 0, leftover: input }\n        }\n    }\n}\n\n// And\nimpl<T, U> Regex for (T, U)\nwhere\n    T: Regex,\n    U: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let lhs_result = self.0.find_match(input);\n        if lhs_result.succeeded {\n            let rhs_result = self.1.find_match(lhs_result.leftover);\n            if rhs_result.succeeded {\n                Match {\n                    succeeded: true,\n                    match_ends: lhs_result.match_ends + rhs_result.match_ends,\n                    leftover: rhs_result.leftover,\n                }\n            } else {\n                Match { succeeded: false, match_ends: 0, leftover: input }\n            }\n        } else {\n            Match { succeeded: false, match_ends: 0, leftover: input }\n        }\n    }\n}\n\n// N T's: (T, (T, (T, T)))\nstruct Repeated<T, let N: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32> Regex for Repeated<T, N>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let mut result = Match::empty(input);\n        for _ in 0..N {\n            if result.succeeded {\n                let next_result = self.inner.find_match(result.leftover);\n                result = Match {\n                    succeeded: next_result.succeeded,\n                    match_ends: result.match_ends + next_result.match_ends,\n                    leftover: next_result.leftover,\n                };\n            }\n        }\n        result\n    }\n}\n\nstruct Or<T, U> {\n    lhs: T,\n    rhs: U,\n}\n\nimpl<T, U> Regex for Or<T, U>\nwhere\n    T: Regex,\n    U: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let lhs_result = self.lhs.find_match(input);\n        if lhs_result.succeeded {\n            lhs_result\n        } else {\n            self.rhs.find_match(input)\n        }\n    }\n}\n\nstruct Question<T> {\n    inner: T,\n}\n\nimpl<T> Regex for Question<T>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        Or { lhs: self.inner, rhs: () }.find_match(input)\n    }\n}\n\n// 0 <= num_matches <= N\nstruct Star<T, let N: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32> Regex for Star<T, N>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        let regex: Repeated<_, N> = Repeated { inner: Question { inner: self.inner } };\n        regex.find_match(input)\n    }\n}\n\n// 0 < num_matches <= N\nstruct Plus<T, let N: u32, let N_PRED: u32> {\n    inner: T,\n}\n\nimpl<T, let N: u32, let N_PRED: u32> Regex for Plus<T, N, N_PRED>\nwhere\n    T: Regex,\n{\n    fn find_match(self, input: [u8]) -> Match {\n        std::static_assert(N_PRED + 1 == N, \"N - 1 != N_PRED\");\n        let star: Star<T, N_PRED> = Star { inner: self.inner };\n        (self.inner, star).find_match(input)\n    }\n}\n\nfn main() {\n    // gr(a|e)y\n    let graey_regex = (\"gr\", (Or { lhs: \"a\", rhs: \"e\" }, \"y\"));\n\n    // NOTE: leftover ignored in Eq: Match\n    let result = graey_regex.find_match(\"gray\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 4, leftover: &[] });\n\n    // NOTE: leftover ignored in Eq: Match\n    let result = graey_regex.find_match(\"grey\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 4, leftover: &[] });\n\n    // colou?r\n    let colour_regex = (\"colo\", (Question { inner: \"u\" }, \"r\"));\n\n    let result = colour_regex.find_match(\"color\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n\n    let result = colour_regex.find_match(\"colour\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 6, leftover: &[] });\n\n    // parse the empty string three times\n    // EMPTY{3}\n    let three_empties_regex: Repeated<(), 3> = Repeated { inner: () };\n\n    let result = three_empties_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 0, leftover: &[] });\n\n    // 1{0}\n    let zero_ones_regex: Repeated<str<1>, 0> = Repeated { inner: \"1\" };\n\n    let result = zero_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 0, leftover: &[] });\n\n    // 1{1}\n    let one_ones_regex: Repeated<str<1>, 1> = Repeated { inner: \"1\" };\n\n    let result = one_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 1, leftover: &[] });\n\n    // 1{2}\n    let two_ones_regex: Repeated<str<1>, 2> = Repeated { inner: \"1\" };\n\n    let result = two_ones_regex.find_match(\"111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n\n    // 1{3}\n    let three_ones_regex: Repeated<str<1>, 3> = Repeated { inner: \"1\" };\n\n    let result = three_ones_regex.find_match(\"1111\".as_bytes().as_slice());\n    println(result);\n    assert_eq(result, Match { succeeded: true, match_ends: 3, leftover: &[] });\n    // TODO(https://github.com/noir-lang/noir/issues/6285): re-enable these cases and complete the test using array_regex below\n    //\n    // // 1*\n    // let ones_regex: Star<str<1>, 5> = Star { inner: \"1\" };\n    //\n    // let result = ones_regex.find_match(\"11000\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n    //\n    // let result = ones_regex.find_match(\"11\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 2, leftover: &[] });\n    //\n    // let result = ones_regex.find_match(\"111111\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    //\n    // // 1+\n    // let nonempty_ones_regex: Plus<str<1>, 5, 4> = Plus { inner: \"1\" };\n    //\n    // let result = nonempty_ones_regex.find_match(\"111111\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    // // 2^n-1 in binary: 1+0\n    // let pred_pow_two_regex = (nonempty_ones_regex, \"0\");\n    //\n    // let result = pred_pow_two_regex.find_match(\"1110\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 3, leftover: &[] });\n    //\n    // // (0|1)*\n    // let binary_regex: Star<Or<str<1>, str<1>>, 5> = Star { inner: Or { lhs: \"0\", rhs: \"1\" } };\n    //\n    // let result = binary_regex.find_match(\"110100\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 5, leftover: &[] });\n    //\n    // // even numbers in binary: 1(0|1)*0\n    // let even_binary_regex = (\"1\", (binary_regex, \"0\"));\n    //\n    // let result = even_binary_regex.find_match(\"1111110\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match { succeeded: true, match_ends: 6, leftover: &[] });\n    // 2-letter capitalized words: [A-Z][a-z]\n    // numbers: \\d+\n    // [0-9]+\n    // words: \\w+\n    // [a-Z]+\n    // adapted URL parser: (https?:\\/\\/)?([\\da-z.\\-]+)\\.([a-z.]+)([\\/\\w \\.\\-]*)*\\/?\n    // // panics (at compile time) when input string is too short\n    // let foo_regex = (\n    //     \"colo\",\n    //     (\n    //         Question {\n    //             inner: \"u\",\n    //         },\n    //         \"r\"\n    //     )\n    // );\n    //\n    // let result = foo_regex.find_match(\"colo\".as_bytes().as_slice());\n    // println(result);\n    // assert_eq(result, Match {\n    //     succeeded: true,\n    //     match_ends: 4,\n    //     leftover: &[],\n    // });\n}\n\n// TODO\n// array_regex execution_success test:\n// use to complete test once https://github.com/noir-lang/noir/issues/6285 is resolved\n//\n// // offset <= len <= N\n// struct Bvec<T, let N: u32> {\n//     inner: [T; N],\n//\n//     // elements at indices < offset are zero\n//     offset: u32,\n//\n//     // elements at indices >= len are zero\n//     len: u32,\n// }\n//\n// impl<T, let N: u32> Eq for Bvec<T, N> where T: Eq {\n//     fn eq(self, other: Self) -> bool {\n//         (self.inner == other.inner) &\n//             (self.offset == other.offset) &\n//             (self.len == other.len)\n//     }\n// }\n//\n// impl<T, let N: u32> Bvec<T, N> {\n//     fn empty() -> Self {\n//         Self { inner: [std::mem::zeroed(); N], offset: 0, len: 0 }\n//     }\n//\n//     fn new(array: [T; N]) -> Self {\n//         let mut result = Bvec::empty();\n//         for x in array {\n//             result = result.push(x);\n//         }\n//         result\n//     }\n//\n//     // pushing when len == N is a no-op\n//     fn push(self, x: T) -> Self {\n//         let mut inner = self.inner;\n//         let mut len = self.len;\n//         if self.len < N {\n//             inner[self.len] = x;\n//             len += 1;\n//         }\n//\n//         Self { inner, offset: self.offset, len }\n//     }\n//\n//     fn pop_front(self) -> (T, Self) {\n//         assert(self.offset <= self.inner.len());\n//         assert(self.len != 0);\n//\n//         let first_elem = self.inner[self.offset];\n//         let popped_slice = Self { inner: self.inner, offset: self.offset + 1, len: self.len - 1 };\n//\n//         (first_elem, popped_slice)\n//     }\n// }\n//\n// struct Match<let N: u32> {\n//     succeeded: bool,\n//     match_ends: u32,\n//     leftover: Bvec<u8, N>,\n// }\n//\n// impl<let N: u32> Match<N> {\n//     fn empty(leftover: Bvec<u8, N>) -> Self {\n//         Match { succeeded: true, match_ends: 0, leftover }\n//     }\n//\n//     fn failed(leftover: Bvec<u8, N>) -> Self {\n//         Match { succeeded: false, match_ends: 0, leftover }\n//     }\n// }\n//\n// impl<let N: u32> Eq for Match<N> {\n//     fn eq(self, other: Self) -> bool {\n//         (self.succeeded == other.succeeded) &\n//             (self.match_ends == other.match_ends) &\n//             (self.leftover == other.leftover)\n//     }\n// }\n//\n// // TODO: load match into str<N> and assert that it's the correct length\n// // impl<N> From<Match> for str<N>\n//\n// trait Regex {\n//     // Perform a match without backtracking\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N>;\n// }\n//\n// // Empty\n// impl Regex for () {\n//     fn find_match<let N: u32>(_self: Self, input: Bvec<u8, N>) -> Match<N> {\n//         Match::empty(input)\n//     }\n// }\n//\n// // Exact\n// impl<let M: u32> Regex for str<M> {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut leftover = input;\n//         let mut matches_input = true;\n//         let self_as_bytes = self.as_bytes();\n//         for c in self_as_bytes {\n//             if leftover.len != 0 {\n//                 let (first_elem, popped_slice) = leftover.pop_front();\n//                 leftover = popped_slice;\n//                 matches_input &= first_elem == c;\n//             } else {\n//                 matches_input = false;\n//             }\n//         }\n//         if matches_input {\n//             Match {\n//                 succeeded: true,\n//                 match_ends: self_as_bytes.len(),\n//                 leftover,\n//             }\n//         } else {\n//             Match {\n//                 succeeded: false,\n//                 match_ends: 0,\n//                 leftover: input,\n//             }\n//         }\n//     }\n// }\n//\n// // And\n// impl<T, U> Regex for (T, U) where T: Regex, U: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let lhs_result = self.0.find_match(input);\n//         if lhs_result.succeeded {\n//             let rhs_result = self.1.find_match(lhs_result.leftover);\n//             if rhs_result.succeeded {\n//                 Match {\n//                     succeeded: true,\n//                     match_ends: lhs_result.match_ends + rhs_result.match_ends,\n//                     leftover: rhs_result.leftover,\n//                 }\n//             } else {\n//                 Match {\n//                     succeeded: false,\n//                     match_ends: 0,\n//                     leftover: input,\n//                 }\n//             }\n//         } else {\n//             Match {\n//                 succeeded: false,\n//                 match_ends: 0,\n//                 leftover: input,\n//             }\n//         }\n//     }\n// }\n//\n// // N T's: (T, (T, (T, T)))\n// struct Repeated<T, let N: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32> Regex for Repeated<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut result = Match::empty(input);\n//         for _ in 0..M {\n//             if result.succeeded {\n//                 let next_result = self.inner.find_match(result.leftover);\n//                 result = Match {\n//                     succeeded: next_result.succeeded,\n//                     match_ends: result.match_ends + next_result.match_ends,\n//                     leftover: next_result.leftover,\n//                 };\n//             }\n//         }\n//         result\n//     }\n// }\n//\n// struct Or<T, U> {\n//     lhs: T,\n//     rhs: U,\n// }\n//\n// impl<T, U> Regex for Or<T, U> where T: Regex, U: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let lhs_result = self.lhs.find_match(input);\n//         if lhs_result.succeeded {\n//             lhs_result\n//         } else {\n//             self.rhs.find_match(input)\n//         }\n//     }\n// }\n//\n// struct Question<T> {\n//     inner: T,\n// }\n//\n// impl<T> Regex for Question<T> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         Or {\n//             lhs: self.inner,\n//             rhs: (),\n//         }.find_match(input)\n//     }\n// }\n//\n// // 0 <= num_matches <= N\n// struct Star<T, let N: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32> Regex for Star<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let regex: Repeated<_, M> = Repeated {\n//             inner: Question { inner: self.inner },\n//         };\n//         regex.find_match(input)\n//     }\n// }\n//\n// // 0 < num_matches <= N\n// struct Plus<T, let N: u32, let N_PRED: u32> {\n//     inner: T,\n// }\n//\n// impl<T, let M: u32, let M_PRED: u32> Regex for Plus<T, M, M_PRED> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         std::static_assert(M_PRED + 1 == M, \"M - 1 != M_PRED\");\n//         let star: Star<T, M_PRED> = Star { inner: self.inner };\n//         (\n//             self.inner,\n//             star\n//         ).find_match(input)\n//     }\n// }\n//\n// // Repeated is to (,) as AnyOf is to Or\n// struct AnyOf<T, let N: u32> {\n//     inner: [T; N],\n// }\n//\n// impl<T, let M: u32> Regex for AnyOf<T, M> where T: Regex {\n//     fn find_match<let N: u32>(self, input: Bvec<u8, N>) -> Match<N> {\n//         let mut result = Match::failed(input);\n//         for i in 0..M {\n//             if !result.succeeded {\n//                 result = self.inner[i].find_match(result.leftover);\n//             }\n//         }\n//         result\n//     }\n// }\n//\n// fn reverse_array<T, let N: u32>(input: [T; N]) -> [T; N] {\n//     let mut output = [std::mem::zeroed(); N];\n//     for i in 0..N {\n//         output[i] = input[N - (i + 1)];\n//     }\n//     output\n// }\n//\n// fn main() {\n//     assert_eq(reverse_array([1, 2, 3, 4]), [4, 3, 2, 1]);\n//\n//     let mut xs: Bvec<u8, 3> = Bvec::empty();\n//\n//     xs = xs.push(0);\n//     assert_eq(xs, Bvec { inner: [0, 0, 0], offset: 0, len: 1 });\n//\n//     xs = xs.push(1);\n//     assert_eq(xs, Bvec { inner: [0, 1, 0], offset: 0, len: 2 });\n//\n//     xs = xs.push(2);\n//     assert_eq(xs, Bvec { inner: [0, 1, 2], offset: 0, len: 3 });\n//\n//     xs = xs.push(3);\n//     assert_eq(xs, Bvec { inner: [0, 1, 2], offset: 0, len: 3 });\n//\n//     let ys = Bvec::new([0, 1, 2]);\n//     assert_eq(xs, ys);\n//\n//     // test that pop_front gives all contents, in order,\n//     // followed by std::mem::zeroed()\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 0);\n//\n//     xs = new_xs;\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 1);\n//\n//     xs = new_xs;\n//     println(xs);\n//     let (x, new_xs) = xs.pop_front();\n//     assert_eq(x, 2);\n//\n//     xs = new_xs;\n//     println(xs);\n//     if xs.len != 0 {\n//         let (x, _new_xs) = xs.pop_front();\n//         assert_eq(x, std::mem::zeroed());\n//     }\n//\n//     assert_eq(new_xs, Bvec { inner: [0, 1, 2], offset: 3, len: 0 });\n//\n//     // gr(a|e)y\n//     let graey_regex = (\"gr\", (Or { lhs: \"a\", rhs: \"e\" }, \"y\"));\n//\n//     let result = graey_regex.find_match(Bvec::new(\"gray\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = graey_regex.find_match(Bvec::new(\"grey\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // colou?r\n//     let colour_regex = (\"colo\", (Question { inner: \"u\" }, \"r\"));\n//\n//     let result = colour_regex.find_match(Bvec::new(\"color\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = colour_regex.find_match(Bvec::new(\"colour\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 6);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // parse the empty string three times\n//     // EMPTY{3}\n//     let three_empties_regex: Repeated<(), 3> = Repeated { inner: () };\n//\n//     let result = three_empties_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 3);\n//\n//     // 1{0}\n//     let zero_ones_regex: Repeated<str<1>, 0> = Repeated { inner: \"1\" };\n//\n//     let result = zero_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 3);\n//\n//     // 1{1}\n//     let one_ones_regex: Repeated<str<1>, 1> = Repeated { inner: \"1\" };\n//\n//     let result = one_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 1);\n//     assert_eq(result.leftover.len, 2);\n//\n//     // 1{2}\n//     let two_ones_regex: Repeated<str<1>, 2> = Repeated { inner: \"1\" };\n//\n//     let result = two_ones_regex.find_match(Bvec::new(\"111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1{3}\n//     let three_ones_regex: Repeated<str<1>, 3> = Repeated { inner: \"1\" };\n//\n//     let result = three_ones_regex.find_match(Bvec::new(\"1111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 3);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1*\n//     let ones_regex: Star<str<1>, 5> = Star { inner: \"1\" };\n//\n//     let result = ones_regex.find_match(Bvec::new(\"11000\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 3);\n//\n//     let result = ones_regex.find_match(Bvec::new(\"11\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 2);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = ones_regex.find_match(Bvec::new(\"111111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 1+\n//     let nonempty_ones_regex: Plus<str<1>, 5, 4> = Plus { inner: \"1\" };\n//\n//     let result = nonempty_ones_regex.find_match(Bvec::new(\"111111\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // 2^n-1 in binary: 1+0\n//     let pred_pow_two_regex = (nonempty_ones_regex, \"0\");\n//\n//     let result = pred_pow_two_regex.find_match(Bvec::new(\"1110\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // (0|1)*\n//     let binary_regex: Star<Or<str<1>, str<1>>, 5> = Star { inner: Or { lhs: \"0\", rhs: \"1\" } };\n//\n//     let result = binary_regex.find_match(Bvec::new(\"110100\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 5);\n//     assert_eq(result.leftover.len, 1);\n//\n//     // even numbers in binary: 1(0|1)*0\n//     let even_binary_regex = (\"1\", (binary_regex, \"0\"));\n//\n//     let result = even_binary_regex.find_match(Bvec::new(\"1111110\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 7);\n//     assert_eq(result.leftover.len, 0);\n//\n//     // digit: \\d+\n//     // [0-9]\n//     let digit_regex = AnyOf {\n//         inner: [\n//             \"0\",\n//             \"1\",\n//             \"2\",\n//             \"3\",\n//             \"4\",\n//             \"5\",\n//             \"6\",\n//             \"7\",\n//             \"8\",\n//             \"9\"\n//         ]\n//     };\n//\n//     let result = digit_regex.find_match(Bvec::new(\"157196345823795\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 1);\n//     assert_eq(result.leftover.len, 14);\n//\n//     let result = digit_regex.find_match(Bvec::new(\"hi\".as_bytes()));\n//     println(result);\n//     assert(!result.succeeded);\n//     assert_eq(result.match_ends, 0);\n//     assert_eq(result.leftover.len, 2);\n//\n//     // digits: \\d+\n//     // [0-9]+\n//     let digits_regex: Plus<AnyOf<str<1>, 10>, 32, 31> = Plus { inner: digit_regex };\n//\n//     let result = digits_regex.find_match(Bvec::new(\"123456789012345\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 15);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let result = digits_regex.find_match(Bvec::new(\"123456789012345 then words\".as_bytes()));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 15);\n//     assert_eq(result.leftover.len, 11);\n//\n//     // multiples of 10\n//     // apply to a reversed input string (because there isn't backtracking)\n//     // 0\\d+\n//     let backwards_mult_of_10_regex = (\"0\", digits_regex);\n//\n//     let result = backwards_mult_of_10_regex.find_match(Bvec::new(reverse_array(\"1230\".as_bytes())));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 4);\n//     assert_eq(result.leftover.len, 0);\n//\n//     let ten_pow_16: str<17> = \"10000000000000000\";\n//     let result = backwards_mult_of_10_regex.find_match(Bvec::new(reverse_array(ten_pow_16.as_bytes())));\n//     println(result);\n//     assert(result.succeeded);\n//     assert_eq(result.match_ends, 17);\n//     assert_eq(result.leftover.len, 0);\n//     // adapted URL parser: (https?:\\/\\/)?([\\da-c.\\-]+)\\.([a-c.]+)([\\/\\w \\.\\-]*)*\\/?\n// }\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
