---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/+1azYsjRRSvTrqTSbLDBPcseFjQk3ZPf6T7IoGdD3d3Fg+CJ2HJp4gX715a8CAieBNUBPEieBcEQfAgXrwJCv41pjP1Jr9+edXJmK6ZyE5BU9VVv/q996peVVdXlaMug7N4Gmo9ODoe6jj0kyiaDY5nQRiM/ONsnMZ+FI+TNEiDOI2nx2kYztIoHWTjbOBnQRTOgnmchXP/MiCXv1uY2NTTqU/PJZertgvUB//ouMPyC65mfboFHeCtmz/1o1mH2Vez/mFHlX23Zv6kA5wW+P225nkjX/FzWxTEhON1XMA8AswjA+YxYB4bME8A88SAuQDMhQHzFDBPGYba15L/pZb7LzlU63Mn2dIBOy3IHjhMnmJ2Kia/q6yOlcBh8kgf3j6UPiRMvtLHYWVuvm4HlXl52Y4iHCyeFwHHfasBuFcg/apOW/bHmeX5yr9fYTPltXN1Fa7mF8ijdqV2PkA8K+tAmZuX5XT1O84FyEV6eAz/sn4/0nEL6lD9viC/xeSX9BbyeLt0BHxHwLcWz0s63VOrb/TDfMVX2DzU+f6OgfhPgF+p+tcAp8BvY41xZoc/If5zK/zhpOjjYo54XfNZ/qZEh2p9HqVAZR7Ilr4DFJrsnc+VJ8DLcVwmjhdvT9uiIei/bVu8D7wcx2U6QlvgXODmZRlDne/vEAbp5b/E0hbN76l1u1C+x/AP9XuX2bbrnDUfjIJ5OJqP4tF0Gk1GLzD+IjSgnXA8HapyX3C9OE+zgtvymsvvq3V/d5lsz47sWBqHJLv4Jl1APpaRj/B1GM3HHsO/CZzvGTgd4DSNP0dzEFdTmecRj+Hf0nHhJz8aONEut8Iuwr8NnD8xzjbUb6ryGFeCXQcCvg0Y0ueI6YB1uWwP6uFaAu1F/DMdF+XvMM5Na3D61l/Xp6hNGmo1BvC7e0NjwXeY3q6S/RHHAOLfZXa1oa14/3O/xz5BuehD1CbcB0lu4QM/67Q0p5BsHINHgl5Uh8+pDiuX7EI9Kd+7Jp7saqj19pfw0vyB9rRAvqkvnYr63N+ahrqY5t90BWnLfrz1P/zVP5KSfWBYjz4B9wOlqudDaruWoGuflRUB5zVe1hTyGndctXPxdTPxSzHJ4Xl8vYX9X+O/b8Dn567ml2Sa9HFq0yfy+fffU/Lcxr/ZhP9Mx8X7L0xHab2Ga2LTeu1z4KR1TdXems1/lEUYFHr8Cnqgrkv9mU6STyN+m7UX9je1WZ/h0Y+orOr74gicfA8D8bhuuk7/fa1jXOtK+8qn+Yr/G4Nsaa2PtnDZ34HO3+q0tM7Af9wjtd5efD9C6lPpXIOPb9N/gmkN/L2Oi7b728CJbYJ68f4g/A/AWTWecM4pgpuX7RvqfH+3II4nXGvy8VT1b1IE7hcdAY9jhtqsL+DpmyKNpzaTU9c/Cfl+3XsYx2maZMdjPxpMJ/NpFG7aw6hb/iROxpMoHvmzYKnOTctPoiRI01E6SSbzLJqMb9z+LJlnYTgOwmw6y4Jkk3zpfADHZxHojAHPIBBPfB7D/0bYxfO7TvNzJ5RX4P6qwDmGeMkh5Ll5OU86m8AzG8KT7G6+riOV9aAM544i3NPv2F7IRXp4DP+nfqc+wXMWqt8X5B8w+SW9hTy+v9sT8D0BX/TPH8SnY7S97n+opUzGj3lcN/IdG+NqMaUMJqNBEGRRMIuCeNO4+kqn/993T2L/7u5JdaDv80m+4q+6e0I4XgfnilPAnBowZ4A5M2DOAXNuwOx6F8byWX90d/fk+bt78gBw3Lfw7slrkPZVWYeGYIM0V9v0r4X/jiz7UCL1Ae8fNy/LxjLsAxfa8wFrHxs+h+1ja3zfV+Y5ma9vlVJ7eZeH7lXt810eum/UU6tzlA+pjlpv9zrv9kj7Y3wO37ezB0vzQeXZg7QfeJ2zB96HWIZyttlLv+P671x1nj1U7eFuM664fkP97u8Wth5XJP+mxtW2++x8jxHr9oUy014uypH2H++46uOq8w7VNnecbN2vsjw2r/6p23b4g017188gH8tM5zb83IPwU+Ac6/Sm+yFHhr5DfaSzAMlHKL8r4HFfp8F0w3OFLivDevw8qVchR9LrnoDvVeiFe273GBfKcSvs4Lq2DHji8xj+Ax0X2I90+rbPnT4GPdCOpf552W7JFxDfMLQT4rEt+XyE/ddhXFX//TjepbntgNm4aezu+x1fHd36Hd/b3se2eT70CWEXz6c6vel86MsKnGOIlxxCnpuX8/b9fOgL/b7P50N0j2Yfz4fIdwq//he7ci0BtD0AAA==",
  "debug_symbols": "pZbdisMgEIXfxetcOP7bV1mWkqa2CGKCTRaW0ndfUzqmvVgo0ysTzXdm0ONkruwYDst5H/NpvLDd15UdSkwpnvdpHPo5jrnOXm8dw9f9XEKoU+xpvVJTX0Ke2S4vKXXsp0/L/aPL1Of7OPelrvKOhXysYxU8xRTWp1u30fx/VAmElRIN1+/zrvHeE3gD4sEbkBRea+S1ofDWI+84hffw4C1XBN5yizxoCg8OeQmfxSfxTiDvhKPwyiCvLIW36D/nSPmbFt9R/O888p5T4nuB/vWK4n/gBg0A3FJOAIDjFQQAQVOATcGTFJRqCkqTFNym4Gk5tFJSxSi1AEQrpiAUkBS0bAokP4IwWw6OloPTm4IhKWBNBUnax1YTwFBqggC0oyD5uZ4d8pYU3+OFkqSa8MxT9l82G0rhP+Pl6z/tu771QywvXQzja8odg3W4rbIl9ocUHh3OacnDU8Mz/064gi3RVMYhHJcSVtn7Wg30Bw==",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "__udiv_mod",
    "__validate_gt_remainder"
  ]
}
