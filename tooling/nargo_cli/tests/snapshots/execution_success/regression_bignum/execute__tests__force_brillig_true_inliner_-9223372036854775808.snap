---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbuJADEX/Jc88ZGyPZ2Z/paoq2qYVEgJEYaVVxb+vHeeG9mGl1fSFe1LwSZpcJsDn8Do9X9+fdoe348fw6+FzeD7v9vvd+9P++LK97I4H++vnMPoD2WPaDJQiKIIjJCJHaESJqBFtDg4Lh4XDwmHhsHBYOCwcFg4Lh0XCImERs5AFR0hEjtCIEmEWtmhz5DEiRVAER0hEjtCIEhGWHBYNi4ZFw6Jh0bBoWNQsYlEiakSbo4wRKYIizJItJMIsaqERJaJGmKVshjpGmKVaUARHyBzNtpqFROQIjSgRNaLNkUY/2aNDAhCAAQLIAAX4JbOrlNIISAACMEAAGaCAAqgAmAlmgplgJpgJZoKZYCaYCea5rNaXNNd1hgQgAAMEkAEKKIAKgFlgFpgFZoFZYBaYBWaBWWD2Gid28ClxUPzFX5wdKqAt4O0N8HF1IAADXFgcMkABBVCXnXqfZ/BGByQAARiAQ/VuB+gCXuVUHRKAAP5ib2a1nZJ3rLYF2ghIAAIwQAC+RPjl9voHFICb7aySd57YQQAZoIACqIC2gHc+AB7vfACEXmwSBx/PDm0BL3aAj6sDARjgnuKQAQoogApoC3ixAxKAAAyAmWFmmBlmhplhFpgFZoF5XqGrgwAyQAEFUAFtAV+vAxLAzc2BAQLIAAUUQAW0BeY1fHRIAAIwQAG+7s/3N7zYi83eFi92gAAywMf9cvvCHVABEHrnAxKAAAwQQAYowM3pdtsMuHs/Xc7T5DfvL7dzu8mftufpcBl+Ha77/Wb4vd1f5xd9nLaHOS/bsz1r/9l0eLU04dtuPzndNvfp8d+jyc/qPGwr6Dqe/39eFPNaOubJV/F53t5vPfOyzpeu/Tda5nlMP5zXjnkmXDym9rN5lo55WedFes6/1HW+9Ry/Jpw/TdwznzPmc8/514L+a+3pvzb0r4w957+MBfMp98z7fTbmOf1s/13zlTBfqfbMr+tHlZ73by3oX61dx6/r/mtP/2vDfOtaPxqhv016+m+f3lGANJaeK2Cf9vEWtM/71GdId0PrMoisBsldhno3tL5jWJcSk3XdC2ldTO1LTOoyZF4NXX2070r3Y6h9x1Dz3fB9TX20re3L7vztR4ebu8677fN+WjbfroeXL89e/pzwDH60OJ2PL9Pr9Ty56f7LhT08UOMNJ3n0L6S2WXXTkm/YB60Hti9AnMrjzQ/lLw==",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
