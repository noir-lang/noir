---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1YzY7TMBB22qRNGspW8CAk2mSzCA6VKA8SdamEhHgATr4gcUBcuCHBs7KuPMrXL5NsUWNOHalK7BnPN7+2m8h0FPlnbC4gUfLHPzP/nAF//vjb+nFxGZUZ4U6p/76o6kzxb0L7bzOvMwqjvxD9geJfLL2e97bTj74Ibvr4y+H9uenqI5T/kr+Q/r8c8Vlq553tePHEuXW0s0F8u8t9ru5GcjWhP/s1xc8AVgb+BfC1iQjPEJYh/JUJWldlRHhiD8dH3teQD7Z1o/Aieo8VnFjB2Sg8rO+rrvN1Ba7paq1gCwkvAWysZaY5jdFut0e8Bb0sx5hYe4IfeJ+ux/Km7d03pp8b7h+Rjf2P+1XynJD8K/I5DuNz8QL0DvkwH4mHo509jQfnB3VFSjxmI/EQ+ZriEagf1HgIVm668zq20+M390UhuHOIA/cV4ick/8aPV4ofl5zDh6YtD7ftoa3bh4dq33KcHM0gTngnWJt+HfGZHai+zz6zY4hbwPoqx/aYuRJLbQ+WtRviOeIzKFFwEgXnqms6XdqZGg08BYfnhu4GWCfn9FVC67Z+XFxGZ/eV4P+vvtLyN9ZXC8XWDfEccZ0sFJyFgnPVNZ0u3gtFv/YUHJ4b6l+sk9B3jMz0a2/KXuD/yOiLw/wI88iTuwaudbSzHR/lP4POT/79BvQainFu9DtzQvakgK3dN2cknynyKcjwfX0JvIx4uI7vwasRHM2uXJFfjdiF3ylz0oU48YgfbOtiQF70JST/xT8d/6t/l/9rcsfkXjnaRLytny8uo8bZ8Q3sQD+O9ttTv7VaQPnZQJxQHmPJ+wXmLyVdY99hsN+1vWdJPj7Vu1Pf76u6bfZtU5avq/JDVdZP3e9vxCYLPtvTNUs/jtEH29eXkPx38PeH6eJylLV9PCf3e0TuX8+I2J7OZbYvP7d9ecFe2b6NwsuBh7Xr6JkfY7xQl9iRkPwvP5acpLBG1m8U/JTwT+xW5vjbT67I54q8y89P0eef6PvU98AjJunHObZNasfV9V97geOs7RoAAA==",
  "debug_symbols": "pZXbiqNAFEX/xWcf6tTtWPmVJgSTmEYQE2wdGIL/Pqdqe7p7BgYa85K1S93LW1V8VtfuvLyf+vF2/6gOb8/qPPXD0L+fhvulnfv7KFuflck/FKoD1RVFgIEGSAXWAARYwAEegMXCYmGxsFhYHCwOFgeLE4sVeCAAEWCgAVKBF4sTEGABsXiBBwIQAbEEQQOIJdZVMAABtiDKiAUWcIAHAhABBhogFbABYGFYGBaGhWFhWBgWhoVhaWBpxNIILOAADwQgAgw0QCpIBoAlwZJgSbAkWBIsCZYES4KFjNkox6bM/EKNBDLYQPll5olCVoPT4DXkqWFziBpYQ/a5HNIWylQrgTTY7ZxlwpXgNQQNUQNr0Cstky+HMv3MutaVroHTPHVdXgLfFoUslUc7deNcHcZlGOrqVzss5aCPRzsWzu0ke0XZjVehCG/90OW01l9t8/+qzY+llC3Zz3r4ed9/9pn39JPd+s7Qi/24o++sPjxn02t953f0I+n1R3J7+iFoP+y5/8hJ+43Z00/6/tnsuX82rH0Ke/rUaN/Ra+f/p3+UUXvpp78+U2s2TX17HrpteFvGy7e98++H7tHP3GO6X7rrMnXZ9PWtk583crGmwMf8dybD4OuQ8oDKPleTC8c1X8of",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
