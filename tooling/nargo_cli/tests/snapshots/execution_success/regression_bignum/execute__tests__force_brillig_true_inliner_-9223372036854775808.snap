---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjdbtpMEIbvhWMOPD87u9tbiaKIJKRCQiSi8EmfIu69Mx6/pq1Uqdqc8D4OzGPHflkDn5vX/fP1+9Ph9Pb+Y/Pt4XPzfD4cj4fvT8f3l93l8H7yv35upnhgf6TthimDMyRDM0qGZdSMltHnkLRIWiQtkhZJi6RF0iJpkbRIWjQtmhZ1C3tIhmaUDMuoGW4Rjz5HmTIogzMkQzNKhmXUjLSUtFhaLC2WFkuLpcXSYm5Rj5rRMvocdcqgDM5wS/HQDLeYh2XUjJbhlrrdtCnDLc2DMyRD5+i+1T00o2RYRs1oGX0OmuJkTwEEYIAAFFAABohL5leJaAIQgAECUEABGKACGgBmhplhZpgZZoaZYWaYGWaGeS6r94Xmus5AAAYIQAEFYIAKaACYFWaFWWFWmBVmhVlhVpgV5qgxSUBMaUC8uARUQAP0BaK9ZAEEYEAcRg1QQAEYoALastPo8wzR6AQCMEAAONTodoItEFWmFkAABsSLo5nNd8rRsdYX6BOAAAwQgAJiiYjLHfVPqIAw+1nl6DxLgAIKwAAV0AB9geh8AjzR+QQIo9isATFeAvoCUeyEGLcABgggPDWgAAxQAQ3QF4hiJxCAAQKAWWAWmAVmgVlgVpgVZoV5XqFbgAIKwAAV0AB9gVivEwgQ5h4gAAUUgAEqoAH6AvMaPgUQgAECMECs+/P9LV4cJYliS1zKKHaCAgrAABXQABBG5xMIwAABKKAADBBmut22G9y9ny7n/T5u3r/czv0m/7E770+XzbfT9Xjcbv7bHa/zi3587E5zXnZnf9b/1/3p1dOFb4fjPui2vU9Pfx+lOKvzsK+g63j593k1zFsdmOdYxed5f7+NzOs6X4f233mZl4m+OG8D88K4eML9a/OiA/O6zquOnH9t63wfOX4jnD8jGZkvBfNl5PxbRf+tjfTfOvpXp5HzX6eKeSoj83GfzXmhr+1/aL4x5hu3kfl1/Wg68v5tFf1rbej4bd1/G+l/65jvQ+tHZ/S360j//dM7CkBTHbkC/mkfb0H/vM9jBrob+pBBdTVoGTK0u6GPHcO6lLhs6F7I62LqX2JoyFBkNQz10cfK3WBDBrv/F3+8px59a/dyOP/2o8MtXOfD7vm4XzbfrqeXX569/P+BZ/Cjxcf5/WX/ej3vw3T/5cIfHrjLVkgf4wupbzbbdooN/6D1IP5NSKg+3uJQfgI=",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
