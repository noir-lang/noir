---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjdbtpAEIXfhWsuPD87u9tXiaKIJKRCQiSiUKmKePfOeHxMe1Gp2txwPgfms2Mf1sDn5nX/fP3+dDi9vf/YfHv43DyfD8fj4fvT8f1ldzm8n/yvn5spHtgfabthyuAMydCMkmEZNaNl9DkkLZIWSYukRdIiaZG0SFokLZIWTYumRd3CHpKhGSXDMmqGW8Sjz1GmDMrgDMnQjJJhGTUjLSUtlhZLi6XF0mJpsbSYW9SjZrSMPkedMiiDM9xSPDTDLeZhGTWjZbilbjdtynBL8+AMydA5um91D80oGZZRM1pGn4OmONlTAAEYIAAFFIAB4pL5VSKaAARggAAUUAAGqIAGgJlhZpgZZoaZYWaYGWaGmWGey+p9obmuMxCAAQJQQAEYoAIaAGaFWWFWmBVmhVlhVpgVZoU5akwSEFMaEC8uARXQAH2BaC9ZAAEYEIdRAxRQAAaogLbsNPo8QzQ6gQAMEAAONbqdYAtElakFEIAB8eJoZvOdcnSs9QX6BCAAAwSggFgi4nJH/RMqIMx+Vjk6zxKggAIwQAU0QF8gOp8AT3Q+AcIoNmtAjJeAvkAUOyHGLYABAghPDSgAA1RAA/QFotgJBGCAAGAWmAVmgVlgFpgVZoVZYZ5X6BaggAIwQAU0QF8g1usEAoS5BwhAAQVggApogL7AvIZPAQRggAAMEOv+fH+LF0dJotgJAlBALP1xlaPYCRXQABBG5xMIwAABKKAADBBmut22G9y9ny7n/T5u3n/czv0m/7E770+XzbfT9Xjcbn7ujtf5RT8+dqc5L7uzP+v/6/706unCt8NxH3Tb3qenf49SnNV52FfQdbz8/7wa5q0OzHOs4vO8v99G5nWdr0P777zMy0RfnLeBeWFcPOH+tXnRgXld51VHzr+2db6PHL8Rzp+RjMyXgvkycv6tov/WRvpvHf2r08j5r1PFPJWR+bjP5rzQ1/Y/NN8Y843byPy6fjQdef+2iv61NnT8tu6/jfS/dcz3ofWjM/rbdaT//ukdBaCpjlwB/7SPt6B/3ucxA90Nfciguhq0DBna3dDHjmFdSlw2dC/kdTH1LzE0ZCiyGob66N+V7sfQxo6hlbvh7zX10bd2L4fzXz863MJ1Puyej/tl8+16evnj2cuvDzyDHy0+zu8v+9freR+m+y8X/vDAXbZC+hhfSH2z2bZTbPgHrQfxb0JC9fEWh/Ib",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
