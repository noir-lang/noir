---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ay47rRBBtJ/YkzmMSgdghgcQHYMeOE68YIVaIn3D82CHxAQiZD0Nixwr2fAAbJPZsQHec2zU+rpQ7npv2aBbT0qhjd/WpR1dVl7vHUW1zdO+qGxqBfKF/+Pp5AuPTx78H/Rzc1kKf8bWJfwzi2Bf0syh/5GtMZxz8gPBHsn8w0zjf1C0+6kJ8549/S/i9Uq1/jKU/rd+Y+n9s0Hmpdf2X6YqyuLfIklVJlZdZmB2y067IfdDPCn6ZB3kW5EFW5GW0T33AtIJ/3BdRdcjz3eOPMtoRvmcLvyj2uzzOsqgqyjRKCP/OFj60pCozwp+NgN+0tcacq7Y5zLcwH1r084PD+CnV9TPF+C+YrLbzvsP4kTzcPhRrZLuFIOtWGMMYxTHksxD4SFhTi1iuRSzPItadRSyKH1qzCcxzenriw9/RXCk32twHtkreZ5C3Ow7vRMqbFvH3Ut5Uym4NN17uip72xcU49gnJT3kNo7TNvoT3zR/VQZ5qYwPnujCO9DvA/K4H0wFMHt/4ewVYkgwek4HoE903Ofb/HkzUa2nQi+hTwHScLuZatc2U34n+XqBfAw3Js2Ey4FzO29Oy8719xfQh+q9139j2K4a5FORDu5OPSj61BFzuU0Q3AVxfmOsLetvMgyQLrZEL8qwEeTxG/y3T6x5sNTXYhK8Z8sV19RnfNePbyOFqBlJOJ94YgxumgzRnIugxF+TisTSUnvTA9V8Z6KV8gfhr4N/nS45hPs/lEs5c0IHHN9nb75H7QT8Ht7XB9S3xf6n6VsoXpvpWirGtMIZ5DMeQz0rg84ZlD4vWDNfY6emJD3/H61vkY/HbM+R5ZqHaPVHKM5I8jjV54oDvDx7wwBzD92ii/173TSzNnK6MuEfQ2vIzG8Qk+h8Ak+qYpzxat/PnYKOmuTBmM6c1fBYgB8p6lr/u6i35NNIPqbVwvXkM4D68ZmOY1/lexXMsroEjyEXzsbYdsn4/6h5rW6kOWwD+Tz28+2r7eQ/vvwDzZ/3b+nlht+WkG33XKXW53460vw3eb4n/gsk61n47Z/Jw+/D9VqpntsJYn48iHynWJKzZG9YHYZnOk16rv491b2by94lg1+f6+5uPvh5/l76nhvijxEf6xh0SV6/tXmLsuJLWzxRXUv0j1UbcT6Tvw6XA5w3LHpZUS98aV1KtcO1c+Rd4j/OGnisT/R+A+av+vRHm87qcZFHKfIa8UXLMSViuar8rkX7GZCf633Q/8h1I8BHgKoHXEHu4z7CH80x7EP3vzB5j3XdJ9iBeyys2keppU3xy26geG/KzfZzHzxpXBj6SXNI9BD/bQN6YN9aMDvm4Bj24rHc99ITH71X+1H2j++dOVz6cT3EtnVXg+dJZ3rrL90G/D25r4lkF+oJXyzZRypzHn7t+W3W5ZlM2ZjoLnwh8MEZM9zs0F3P7ZgDP1RWefbbou/vru9f6W/foTxwT9x5+Filh/gOYpjMzPFdsmgtjY/sh+g73Q9N9Y9O47TcCPZ6Lkc22jB5zvlSb8Bwj1Z9D/RDPz+h8a0y7H47v7w3Psmp88iPeXBhH+v/0M97xU3/LmVl1yMIqyqpsnxVFnGd832sa/r+fbf674zFJd6cgPhR5VcTRS/PP98kpj/dZUIZncV6afxIn4fGYHfMkr9I4P724/mlSpVF0CqO0KNMwucaf4vWubscxjzVtpp/pjprTYx2P9PcaoInLLcuVnsCvofvMQOf09GcM4Z1bd9/59SX9tL6kf7ozqi9lpLEljGGObdpKP6O9EIvk8Bj9p1DzNG0Oc2j+VuA/Z/w7cgvvMMdzrKnwDvf5T/Qk8lvU3fa5xJknw8d3XDbynTHi6jGlHPLsEIZpHJZxuL8WV+8ArDE1jqkwAAA=",
  "debug_symbols": "pZfRbtswDEX/xc95kCiJovorQ1GkbToECNIiSwYMRf59pKnrrA8OBvWl9zgpT2RZlODP6XX3fPn5tD++vf+aHn58Ts+n/eGw//l0eH/ZnvfvR/30cwr2J6bpIW6mmD2KB3tUD/Foc1DwiB7k4RZyC7mF3EJuIbeQW5JbkluSW5JbkluSW5Jaskb1EI82R9YPy2YqKmON6EEeySN7FA/20LqqIR5tDlaLaGhd02CP6iEebY4aPKIHeXhdzR5eXu3e9Saq3TxpNk8JPe3+kyb1TD1tCvQGpfTknrWn9GyeLfSMPaln6tl9rfta97Xua93Xui+GAIgAApizGGRAATCgAgTQOsQAiAAzs0ECZEABMKACBNA6zCuzGkQAARKAAValjzvOK3GGCCBAAmRAATCgAgQAc4Y5w5xhzjBnmDPMGWZb3BQMBNA62IJ3iAACJEAGFAADYC4wF5gZZoaZYWaYGWaGmWG2dqF5AxFA62BN4xABBEiADCgABsBcYa4wC8wCs8AsMAvMArPAbD1EZPubVSUDq7Klbm3jYFW2Vq1xHCpAAOZh2yADwMZTDQiQABlgQjGoAAG0DtYy1AwigAAqTMEgAwqAARUgfoNkLTODtYxDBBAgATKgABignjRv/+pJZBABBEiADCgABtgITWhN5NA6WBM5RAABEiADzJyu182Eg+7pfNrt7Jz75+TT8/Bje9odz9PD8XI4bKbf28Nl/qdfH9vjnOftSb/VOdsdXzVV+LY/7Iyum1t1WC+N9nTmYt1glvLy//WZUc91rZ7W6zNh8DnTWn1arxdbnHO9kIzUL+OXXEfqK8YvEkfqefl9Gbr/hvoWRn6/2Zbg9TmNPD9Znl9ra/Xx3gIKLFhBocqQQs98KPSQHlTEm2LsRvSMXBS5jCnkphicTj1GF4WEIQUtPRl1NxvYFChiMmn9cdyrz0t9XW3K2NYFHLEgOKYhwTKLXHhIULGv8p2ncE/QMAc15JE5bJiCFOI363mgPi2LKFH7Xn3KIxNYA06GGsuQIGJjqil+cwR3BHc7UZZmJuExBd+aWQZHUdJN8bWfH/Vq+7I/fXlhv5rrtN8+H3b98u1yfPnn2/OfD3yDF/6P0/vL7vVy2pnp9tavf36QHpEk9dFezuwyy0ZHZJfRLkvWS3682mD+Ag==",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
