---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1azY7jRBBuJ/YkTpxJBOKGBBIPgB07TnxihTghXsLxzw2JB0DIPBgSN07wANy5IHHnsqsdZ7vGXyrVjmfTHs1hWhp17K7+6qerqsvd46iuObp31Q2NQL7SP3z9PIHx6cPfG/0c3tYin/G1iX8Ik8QX9LMof+xrTGcc/JDwR7J/ONM43zUdPupCfOcPf0v4HajOP8bSn9ZvTP0/7dF5qXX9n+mKsri3yJLXaV1UeZTv8+O2LHzQzwp+VYRFHhZhXhZVvMt8wLSCf9iVcb0viu3DjyreEr5nC78sd9siyfO4LqssTgn/zhY+tLSucsKfjYDftpXGnKuuOcy3MB9a9PO9w/gpde5nivFfMFlt532H8SN5uH0o1sh2C0HWjTCGMYpjyGch8JGwphaxXItYnkWsO4tYFD+0ZhOY5xh64sPf0VwpN9rcBzZK3meQtzsO71TKmxbxd1LeVMpuDTde7oof98XFOPaJyE95DaO0zb6G9+0f1UGe6mID57owjvRbwPzBgOkAJo9v/B0AliSDx2Qg+lT3bY59Z8BEvZY9ehF9BpiOc465Ul3ry+9Efy/Qr4CG5FkzGXAu5+1p2fneHjB9iP5b3be2/YZhLgX50O7ko5JPLQGX+xTRTQDXF+b6gt428yDJQmvkgjyBII/H6L9net2DraY9NuFrhnxxXX3Gd8X4tnK4moGU04k3xuCa6SDNmQh6zAW5eCwNpSc9cP2DHnopXyD+CvibfMnpmc9zuYQzF3Tg8U329g1yv9HP4W1tcH1L/J+rvpXyRV99K8XYRhjDPIZjyCcQ+Lxi2cOiNcM1dgw98eHveH2LfCx+e0Y8zyxUtydKeUaSx7EmTxLy/cEDHphj+B5N9D/qvo2lmXMuI+4RtLb8zAYxif4nwKQ65jGPNt38OdiobS6M2cxpLZ8FyIGynuRvzvWWfBrph9RauN48BnAfXrExzOt8r+I5FtfAEeSi+VjbDlm/n3WPta1Uhy0A/xcDb1NtPzfw/gcwf9W/rZ8XnreCdKPvOqUu99uR9rfB+y3xXzBZx9pv50webh++30r1zEYYM/ko8pFiTcKavWJ9FFbfedJL9fex7s36/H0i2PWp/v7qoy/H36XvqSH+KPGRvnGHxNVLu5cYO66k9euLK6n+kWoj7ifS9+FS4POKZQ9LqqVvjSupVrh2rvwbvMd5Q8+Vif4vwPxd/14L83ldTrIo1X+GvFZyzElYruq+K5F+xmQn+j90P/IdSPgJ4CqB1xB7uE+wh/NEexD9n8weY913SfYgXkuDjqYzSLSXVGsTvfR9ys8iFfBG3QM2hvOkc0gTH0mua3cOXK6+Owfk4/bowWW9M9Dzc3ai/1v3re5fagGlswo8XzrJBGNjn1VgPHnNud6SLyD9xGAnpOe2bNtGXa4fP0fltQxiTAQ+GCN99zs0F3P7WuDJfT64wtNkC9Pdn+le61/do89wTNx7+FmkhPkfYPadmeG5YttcGBvbD9F3uB/2xX7buO3XAj3mALLZhtFjzpdqE55vpPpzqB/i+Rmdb41p9/3hw73hSVaNT37EmwvjSP9WP+MdP/W3nJnV+zyq47zOd3lZJkXO97224f/72ea/PRzSbHsMk31Z1GUSPzf/Ypcei2SXh1V0Eue5+adJGh0O+aFIizpLiuOz65+ldRbHxyjOyiqL0mv8KV7vmm4c81jbZvqZ7qg5PdbxSH+vAdq43LBc6Qn8WroveugcQ3/CEN65zfk7v7mknzaX9I93Rs2ljDS2hDHMsW0L9DPaC7FIDo/Rf64BaE3mMIfmbwT+c8b/TG7hHeZ4jjUV3uE+/5meRH6Luts+lzjxZPj4jstGvjNGXD2klH2R76MoS6IqiXbX4uo9dop8V6kwAAA=",
  "debug_symbols": "zZzRauNADEX/xc95GGk0Gk1/ZVmWtE2XQEhL2i4spf++zlInxTYpIpW5LyET5l4fIl85scd+6+43t6+/f233D4/P3c2Pt273eLd+2T7u+9Hb+6q7PWx3u+3vX58/7tLxhfL/+c9P6/1x+PyyPrx0N8Rt1W329/27nHr9w3a36W5Kev+56kjciuJWqFtR3QpzK5pXwcmtILeC3Qp3zdldc3bXnN01Z3fN2V1zdtc8u2ue3TXP7ppnd82zu+bZXfM8X3PRQaH1s2I1mSqcPqaK8OWpxvVjqrGNOSoIh4FwNAwOWbIuJ1eTOuIoaUGOOkw1ozEHgXAwCEcG4RAQjgLCoSAcS/YPPfUP4zGHgXA0DA5dsp+2wbWl8f6hC/aPxmXgkDzmUBCOCsJhIBwNg6MmEA4C4WAQDpD+UQWEA6SP1av7mJ04Wrs8lZLaYJvq+B9MtQVJKPFgSzQ+5taGQmIJhoQWJaEzSRuTMAxJhiGRJUlETiRSxiQFhkRhSCoMicGQNBSSlmBICIaEYUgyDAlMj20wPbbB9NgG02MbTI9tMD2WEkyT7X9H4aDAtFlKi/ZZO6O0NkERHJSCg6I4KBUHxXBQGgwKJRwUwkFZtNuWckKxNEHJOCiCg1JwUBQHpeKgGA5Kg0HhJbstn077EwtNUAgHhXFQMg6K4qDMJohpOM3Mk2sANL9g87KE/BL2S7JfIn5J8UvUL6l+ifkl/uqLv/rir774qy/+6ou/+uKvvvirP7+Os4/vIKlfNAil4SqeUp64W6h7i3SfX1n6be4U6s6h7jnUXULdS6i7hrqHZrWEZrWEZlVDs6qhWdXQrGpoVjU0qxqaVQ3Nql6d1dN/QC06cbdQ9xbpXlOoO4W6c6h7DnWXUPcS6q6h7qFZraFZraFZtdCsWmhWLTSrFppVC82qhWbVQrNqV+/vdbjpVaenVtvV+0wbptYkE/f5faYNPyPy5C4Yml8EdFlSvpJMvtT5ZTWXJdUvMb9kttr5dJ4x8/iqG8+v/LgsoS8kWSYS9kuyXyJ+iQbmg9O1R8qahluKK5WJu4W6t0h3SqHu1x4pKw13QtRME3cOdc+h7vJ93/uMewl111D3GupugUdKphbpzinUnULdOdQ9h7pLqHsJdddQ9yVXF1y8TMt50dUFekaxKQrhoDAOSsZBkSVRrJxRdIJScFAUB2XJtVxc8hmFJyiGg9JgUCThoBAOCuOgZBwUwUEpGCjv/ejP+rBd3+42Hw/UfHjd3316vubL36fN6FGbT4fHu83962FzfOjm+XmbxySy6oqt/jwurz8OxVb91o/DYzi4SD/Ufqv9lv8B",
  "file_map": {
    "50": {
      "source": "fn main() {\n    let numerator =\n        [790096867046896348, 1063071665130103641, 602707730209562162, 996751591622961462, 28650, 0];\n    unsafe { __udiv_mod(numerator) };\n\n    let denominator = [12, 0, 0, 0, 0, 0];\n    let result = unsafe { __validate_gt_remainder(denominator) };\n    assert(result[4] == 0);\n    assert(result[5] == 0);\n}\n\nunconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {\n    let bit_difference = get_msb(remainder_u60);\n    let accumulator_u60: [u64; 6] = shl(bit_difference);\n}\n\nunconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {\n    let mut addend_u60: [u64; 6] = [0; 6];\n    let mut result_u60: [u64; 6] = [0; 6];\n\n    for i in 0..6 {\n        result_u60[i] = a_u60[i] + addend_u60[i];\n    }\n\n    result_u60\n}\n\nunconstrained fn get_msb(val: [u64; 6]) -> u32 {\n    let mut count = 0;\n    for i in 0..6 {\n        let v = val[(6 - 1) - i];\n        if (v > 0) {\n            count = 60 * ((6 - 1) - i);\n            break;\n        }\n    }\n    count\n}\n\nunconstrained fn shl(shift: u32) -> [u64; 6] {\n    let num_shifted_limbs = shift / 60;\n    let limb_shift = (shift % 60) as u8;\n\n    let mut result = [0; 6];\n    result[num_shifted_limbs] = (1 << limb_shift);\n\n    for i in 1..(6 - num_shifted_limbs) {\n        result[i + num_shifted_limbs] = 0;\n    }\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
