---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "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",
  "debug_symbols": "zdzNattAFIbhe9Hai/nmf3wrJQTZloNAyEa2C8X03qsEh5i2m1IOvDvLmoizCA8hPq/v3WHY3d5ex/l4unTbb/duOu3763ia16t75z7eupz7+f3qcu2Xa7eV4qYb5sP6yrufm+44TkO3TevLP4565/LjrHfKX4f/craU8Dha6vPJl00nxhieMUZgjBEZYyTGGJkxRmGMURljNAhfFEYhjup/IVVrX3P4358O8VEQIAURUhAiVUx/+yD0CWKfh9jnKX9DmtrnIfZ5iH0eYp+H2OdN7fMQ+zzEvgCxL0DsC6b2BYh9AWJfgNgXIPYFU/sCxL4AsS9C7IsQ+6KpfZHyP0GIfRFiX4TYF03tixD7IsS+BLEvQexLpvYliH0JYl+C2Jcg9iVT+xLEvgSxL0PsyxD7sql9GWJfhtiXKZ8GQ+zLpvZliH0ZYl+B2Fcg9hVT+wrEvgKxr0DsK5RVGFP7CsS+ArGvQuyrEPuqqX0VYl+F2Fch9lWIfdXUvgqxr0LsaxD7GsS+Zmpfg9jXIPY1iH0NYl8zta9RVpsxu82U5WZH2W52tuvNjrLf7CAAylE2nB1lxdnZ7jg7ypKzoyjISTwoChpHHpjKA5N5YDoPTOhhXHpgUg9K6yFK7CFK7SHb3EOU3kOU4EOU4kOU5EO2zYco0Yco1Yco2Yco3YeCcfBLUZCSfojSfogSf8i2/hAl/xCl/xAlABGlAJFtAiJKAyJKBCJKBSJKBiLbDkSUEESUEkSUFESUFkS2MYgoNYgoOYgoPYgoQYhsixD9YxLysl7slnGaxrfX5y/fW9/+3i9jv5uGx+XxNu+f7l5/nD/vfP78eTnth8NtGd6f9HFvffwv",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Simple example of checking where two arrays are different\nfn main(a: [Field; 32], b: [Field; 32]) {\n    assert(a != b);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
