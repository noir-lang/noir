---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _189",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63]",
    "public parameters indices : []",
    "return value indices : []",
    "EXPR [ (1, _0) (-1, _32) (-1, _64) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 })], outputs: [Simple(Witness(65))]",
    "EXPR [ (1, _64, _65) (1, _66) -1 ]",
    "EXPR [ (1, _64, _66) 0 ]",
    "EXPR [ (1, _1) (-1, _33) (-1, _67) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(67))], q_c: 0 })], outputs: [Simple(Witness(68))]",
    "EXPR [ (1, _67, _68) (1, _69) -1 ]",
    "EXPR [ (1, _67, _69) 0 ]",
    "EXPR [ (1, _2) (-1, _34) (-1, _70) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(70))], q_c: 0 })], outputs: [Simple(Witness(71))]",
    "EXPR [ (1, _70, _71) (1, _72) -1 ]",
    "EXPR [ (1, _70, _72) 0 ]",
    "EXPR [ (1, _66, _69) (-1, _73) 0 ]",
    "EXPR [ (1, _3) (-1, _35) (-1, _74) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 })], outputs: [Simple(Witness(75))]",
    "EXPR [ (1, _74, _75) (1, _76) -1 ]",
    "EXPR [ (1, _74, _76) 0 ]",
    "EXPR [ (1, _72, _73) (-1, _77) 0 ]",
    "EXPR [ (1, _4) (-1, _36) (-1, _78) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(78))], q_c: 0 })], outputs: [Simple(Witness(79))]",
    "EXPR [ (1, _78, _79) (1, _80) -1 ]",
    "EXPR [ (1, _78, _80) 0 ]",
    "EXPR [ (1, _76, _77) (-1, _81) 0 ]",
    "EXPR [ (1, _5) (-1, _37) (-1, _82) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(82))], q_c: 0 })], outputs: [Simple(Witness(83))]",
    "EXPR [ (1, _82, _83) (1, _84) -1 ]",
    "EXPR [ (1, _82, _84) 0 ]",
    "EXPR [ (1, _80, _81) (-1, _85) 0 ]",
    "EXPR [ (1, _6) (-1, _38) (-1, _86) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 })], outputs: [Simple(Witness(87))]",
    "EXPR [ (1, _86, _87) (1, _88) -1 ]",
    "EXPR [ (1, _86, _88) 0 ]",
    "EXPR [ (1, _84, _85) (-1, _89) 0 ]",
    "EXPR [ (1, _7) (-1, _39) (-1, _90) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(90))], q_c: 0 })], outputs: [Simple(Witness(91))]",
    "EXPR [ (1, _90, _91) (1, _92) -1 ]",
    "EXPR [ (1, _90, _92) 0 ]",
    "EXPR [ (1, _88, _89) (-1, _93) 0 ]",
    "EXPR [ (1, _8) (-1, _40) (-1, _94) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(94))], q_c: 0 })], outputs: [Simple(Witness(95))]",
    "EXPR [ (1, _94, _95) (1, _96) -1 ]",
    "EXPR [ (1, _94, _96) 0 ]",
    "EXPR [ (1, _92, _93) (-1, _97) 0 ]",
    "EXPR [ (1, _9) (-1, _41) (-1, _98) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 })], outputs: [Simple(Witness(99))]",
    "EXPR [ (1, _98, _99) (1, _100) -1 ]",
    "EXPR [ (1, _98, _100) 0 ]",
    "EXPR [ (1, _96, _97) (-1, _101) 0 ]",
    "EXPR [ (1, _10) (-1, _42) (-1, _102) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(102))], q_c: 0 })], outputs: [Simple(Witness(103))]",
    "EXPR [ (1, _102, _103) (1, _104) -1 ]",
    "EXPR [ (1, _102, _104) 0 ]",
    "EXPR [ (1, _100, _101) (-1, _105) 0 ]",
    "EXPR [ (1, _11) (-1, _43) (-1, _106) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(106))], q_c: 0 })], outputs: [Simple(Witness(107))]",
    "EXPR [ (1, _106, _107) (1, _108) -1 ]",
    "EXPR [ (1, _106, _108) 0 ]",
    "EXPR [ (1, _104, _105) (-1, _109) 0 ]",
    "EXPR [ (1, _12) (-1, _44) (-1, _110) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 })], outputs: [Simple(Witness(111))]",
    "EXPR [ (1, _110, _111) (1, _112) -1 ]",
    "EXPR [ (1, _110, _112) 0 ]",
    "EXPR [ (1, _108, _109) (-1, _113) 0 ]",
    "EXPR [ (1, _13) (-1, _45) (-1, _114) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(114))], q_c: 0 })], outputs: [Simple(Witness(115))]",
    "EXPR [ (1, _114, _115) (1, _116) -1 ]",
    "EXPR [ (1, _114, _116) 0 ]",
    "EXPR [ (1, _112, _113) (-1, _117) 0 ]",
    "EXPR [ (1, _14) (-1, _46) (-1, _118) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(118))], q_c: 0 })], outputs: [Simple(Witness(119))]",
    "EXPR [ (1, _118, _119) (1, _120) -1 ]",
    "EXPR [ (1, _118, _120) 0 ]",
    "EXPR [ (1, _116, _117) (-1, _121) 0 ]",
    "EXPR [ (1, _15) (-1, _47) (-1, _122) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 })], outputs: [Simple(Witness(123))]",
    "EXPR [ (1, _122, _123) (1, _124) -1 ]",
    "EXPR [ (1, _122, _124) 0 ]",
    "EXPR [ (1, _120, _121) (-1, _125) 0 ]",
    "EXPR [ (1, _16) (-1, _48) (-1, _126) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(126))], q_c: 0 })], outputs: [Simple(Witness(127))]",
    "EXPR [ (1, _126, _127) (1, _128) -1 ]",
    "EXPR [ (1, _126, _128) 0 ]",
    "EXPR [ (1, _124, _125) (-1, _129) 0 ]",
    "EXPR [ (1, _17) (-1, _49) (-1, _130) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(130))], q_c: 0 })], outputs: [Simple(Witness(131))]",
    "EXPR [ (1, _130, _131) (1, _132) -1 ]",
    "EXPR [ (1, _130, _132) 0 ]",
    "EXPR [ (1, _128, _129) (-1, _133) 0 ]",
    "EXPR [ (1, _18) (-1, _50) (-1, _134) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 })], outputs: [Simple(Witness(135))]",
    "EXPR [ (1, _134, _135) (1, _136) -1 ]",
    "EXPR [ (1, _134, _136) 0 ]",
    "EXPR [ (1, _132, _133) (-1, _137) 0 ]",
    "EXPR [ (1, _19) (-1, _51) (-1, _138) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: 0 })], outputs: [Simple(Witness(139))]",
    "EXPR [ (1, _138, _139) (1, _140) -1 ]",
    "EXPR [ (1, _138, _140) 0 ]",
    "EXPR [ (1, _136, _137) (-1, _141) 0 ]",
    "EXPR [ (1, _20) (-1, _52) (-1, _142) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 0 })], outputs: [Simple(Witness(143))]",
    "EXPR [ (1, _142, _143) (1, _144) -1 ]",
    "EXPR [ (1, _142, _144) 0 ]",
    "EXPR [ (1, _140, _141) (-1, _145) 0 ]",
    "EXPR [ (1, _21) (-1, _53) (-1, _146) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 })], outputs: [Simple(Witness(147))]",
    "EXPR [ (1, _146, _147) (1, _148) -1 ]",
    "EXPR [ (1, _146, _148) 0 ]",
    "EXPR [ (1, _144, _145) (-1, _149) 0 ]",
    "EXPR [ (1, _22) (-1, _54) (-1, _150) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 0 })], outputs: [Simple(Witness(151))]",
    "EXPR [ (1, _150, _151) (1, _152) -1 ]",
    "EXPR [ (1, _150, _152) 0 ]",
    "EXPR [ (1, _148, _149) (-1, _153) 0 ]",
    "EXPR [ (1, _23) (-1, _55) (-1, _154) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: 0 })], outputs: [Simple(Witness(155))]",
    "EXPR [ (1, _154, _155) (1, _156) -1 ]",
    "EXPR [ (1, _154, _156) 0 ]",
    "EXPR [ (1, _152, _153) (-1, _157) 0 ]",
    "EXPR [ (1, _24) (-1, _56) (-1, _158) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 })], outputs: [Simple(Witness(159))]",
    "EXPR [ (1, _158, _159) (1, _160) -1 ]",
    "EXPR [ (1, _158, _160) 0 ]",
    "EXPR [ (1, _156, _157) (-1, _161) 0 ]",
    "EXPR [ (1, _25) (-1, _57) (-1, _162) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: 0 })], outputs: [Simple(Witness(163))]",
    "EXPR [ (1, _162, _163) (1, _164) -1 ]",
    "EXPR [ (1, _162, _164) 0 ]",
    "EXPR [ (1, _160, _161) (-1, _165) 0 ]",
    "EXPR [ (1, _26) (-1, _58) (-1, _166) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(166))], q_c: 0 })], outputs: [Simple(Witness(167))]",
    "EXPR [ (1, _166, _167) (1, _168) -1 ]",
    "EXPR [ (1, _166, _168) 0 ]",
    "EXPR [ (1, _164, _165) (-1, _169) 0 ]",
    "EXPR [ (1, _27) (-1, _59) (-1, _170) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(170))], q_c: 0 })], outputs: [Simple(Witness(171))]",
    "EXPR [ (1, _170, _171) (1, _172) -1 ]",
    "EXPR [ (1, _170, _172) 0 ]",
    "EXPR [ (1, _168, _169) (-1, _173) 0 ]",
    "EXPR [ (1, _28) (-1, _60) (-1, _174) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(174))], q_c: 0 })], outputs: [Simple(Witness(175))]",
    "EXPR [ (1, _174, _175) (1, _176) -1 ]",
    "EXPR [ (1, _174, _176) 0 ]",
    "EXPR [ (1, _172, _173) (-1, _177) 0 ]",
    "EXPR [ (1, _29) (-1, _61) (-1, _178) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(178))], q_c: 0 })], outputs: [Simple(Witness(179))]",
    "EXPR [ (1, _178, _179) (1, _180) -1 ]",
    "EXPR [ (1, _178, _180) 0 ]",
    "EXPR [ (1, _176, _177) (-1, _181) 0 ]",
    "EXPR [ (1, _30) (-1, _62) (-1, _182) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: 0 })], outputs: [Simple(Witness(183))]",
    "EXPR [ (1, _182, _183) (1, _184) -1 ]",
    "EXPR [ (1, _182, _184) 0 ]",
    "EXPR [ (1, _180, _181) (-1, _185) 0 ]",
    "EXPR [ (1, _31) (-1, _63) (-1, _186) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(186))], q_c: 0 })], outputs: [Simple(Witness(187))]",
    "EXPR [ (1, _186, _187) (1, _188) -1 ]",
    "EXPR [ (1, _186, _188) 0 ]",
    "EXPR [ (1, _184, _185) (-1, _189) 0 ]",
    "EXPR [ (1, _188, _189) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "ndXNjqJAGIXhe2Htok79V9/KZGJQsUNC0NAyycR474OcU60uTCa9KX/weyTwAtfm0O3mz20/Hk9fzceva7Ob+mHoP7fDad9e+tO4fHu9bZr6cXuZum75qnnavkyd26kbL83HOA/DpvnTDvP6o69zO66vl3ZatppN042H5XUBj/3Q3d/dNo9p834U8BqGfYyH13m8n7cGRYA1Nj6E/wec+QZc/gnwvAflDeDfAylHzadSfvL/5vH/7gX4vXxo9/30ctIbs2zbNFhXu65uXf26hnWN65rWNa9r4ZSGOY1lfNl3cB4EQAEkkPgTIqBiqVjtAxVLxVKxVCwVS8VSsVQcFUfFUXFUHBVHxVFxVBwVR8VT8VQ8Fa8jQsVT8VQ8FU/FUwlUApVAJVAJOrBUApVAJVAJVCKVSCVSiVQilajzQyVSiVQilUQlUUlUEpVEJVFJOs1UEpVEJVPJVDKVTCVTyVQylUwlU8lUCpVCpVApVAqVQqVQKVSKoqvVKTuj7ozCMyrPKD2j9oziM6rPKD8j7ztjeTXkWnJNubZcY64115zVMxQ0bL0u5KlpKGqoaihrqGsobKhsKG2obbh6oclT3lDfUOBQ4VDiUONQ5FDlUObw9cqVp9Kh1KHWodih2qHcod6h4KHiEeqtQJ6ih6rHPXvc7ve0qW93Q6eH0XEe90/Ppsvfc91Sn17n6bTvDvPU3W9p67blJvcP",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Simple example of checking where two arrays are different\nfn main(a: [Field; 32], b: [Field; 32]) {\n    assert(a != b);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
