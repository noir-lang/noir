---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "xs",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "15544221083219072719": {
        "error_kind": "string",
        "string": "check_shuffle, lhs and rhs arrays do not contain equivalent values"
      },
      "17679955115386040593": {
        "error_kind": "string",
        "string": "Array has not been sorted correctly according to `ordering`."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "2": {
      "source": "use crate::cmp::Eq;\n\nunconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [u32; N]\nwhere\n    T: Eq,\n{\n    let mut shuffle_indices: [u32; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [u32; N], idx: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i;\n            break;\n        }\n    }\n    result\n}\n\npub(crate) fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: Eq,\n{\n    // Safety: shuffle_indices is ensured to be a permutation of 0..N, and then\n    // shuffle_indices is ensured to map lhs to rhs: assert(lhs[i] == rhs[shuffle_indices[i]]), for all i in 0..N\n    unsafe {\n        let shuffle_indices = __get_shuffle_indices(lhs, rhs);\n\n        for i in 0..N {\n            let idx = __get_index(shuffle_indices, i);\n            assert_eq(shuffle_indices[idx], i);\n        }\n        for i in 0..N {\n            let idx = shuffle_indices[i];\n            let expected = rhs[idx];\n            let result = lhs[i];\n            assert_eq(expected, result);\n        }\n    }\n}\n\nmod test {\n    use crate::cmp::Eq;\n    use super::check_shuffle;\n\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n",
      "path": "std/array/check_shuffle.nr"
    },
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(xs: [u8; 3]) {\n    let sorted = xs.sort();\n    assert(sorted[0] == 1);\n    assert(sorted[1] == 2);\n    assert(sorted[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "quicksort",
    "__get_shuffle_indices",
    "__get_index",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
