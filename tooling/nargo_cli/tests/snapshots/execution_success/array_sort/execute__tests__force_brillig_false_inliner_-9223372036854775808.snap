---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "xs",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "15544221083219072719": {
        "error_kind": "string",
        "string": "check_shuffle, lhs and rhs arrays do not contain equivalent values"
      },
      "17679955115386040593": {
        "error_kind": "string",
        "string": "Array has not been sorted correctly according to `ordering`."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "2": {
      "source": "use crate::cmp::Eq;\n\nunconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [u32; N]\nwhere\n    T: Eq,\n{\n    let mut shuffle_indices: [u32; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [u32; N], idx: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i;\n            break;\n        }\n    }\n    result\n}\n\npub(crate) fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: Eq,\n{\n    // Safety: shuffle_indices is ensured to be a permutation of 0..N, and then\n    // shuffle_indices is ensured to map lhs to rhs: assert(lhs[i] == rhs[shuffle_indices[i]]), for all i in 0..N\n    unsafe {\n        let shuffle_indices = __get_shuffle_indices(lhs, rhs);\n\n        for i in 0..N {\n            let idx = __get_index(shuffle_indices, i);\n            assert_eq(shuffle_indices[idx], i);\n        }\n        for i in 0..N {\n            let idx = shuffle_indices[i];\n            let expected = rhs[idx];\n            let result = lhs[i];\n            assert_eq(expected, result);\n        }\n    }\n}\n\nmod test {\n    use crate::cmp::Eq;\n    use super::check_shuffle;\n\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n",
      "path": "std/array/check_shuffle.nr"
    },
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(xs: [u8; 3]) {\n    let sorted = xs.sort();\n    assert(sorted[0] == 1);\n    assert(sorted[1] == 2);\n    assert(sorted[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "quicksort",
    "__get_shuffle_indices",
    "__get_index",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
