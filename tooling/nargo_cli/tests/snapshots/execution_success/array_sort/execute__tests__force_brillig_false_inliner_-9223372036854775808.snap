---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "xs",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "15544221083219072719": {
        "error_kind": "string",
        "string": "check_shuffle, lhs and rhs arrays do not contain equivalent values"
      },
      "17679955115386040593": {
        "error_kind": "string",
        "string": "Array has not been sorted correctly according to `ordering`."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "2": {
      "source": "use crate::cmp::Eq;\n\nunconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [u32; N]\nwhere\n    T: Eq,\n{\n    let mut shuffle_indices: [u32; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [u32; N], idx: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i;\n            break;\n        }\n    }\n    result\n}\n\npub(crate) fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: Eq,\n{\n    // Safety: shuffle_indices is ensured to be a permutation of 0..N, and then\n    // shuffle_indices is ensured to map lhs to rhs: assert(lhs[i] == rhs[shuffle_indices[i]]), for all i in 0..N\n    unsafe {\n        let shuffle_indices = __get_shuffle_indices(lhs, rhs);\n\n        for i in 0..N {\n            let idx = __get_index(shuffle_indices, i);\n            assert_eq(shuffle_indices[idx], i);\n        }\n        for i in 0..N {\n            let idx = shuffle_indices[i];\n            let expected = rhs[idx];\n            let result = lhs[i];\n            assert_eq(expected, result);\n        }\n    }\n}\n\nmod test {\n    use crate::cmp::Eq;\n    use super::check_shuffle;\n\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n",
      "path": "std/array/check_shuffle.nr"
    },
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(xs: [u8; 3]) {\n    let sorted = xs.sort();\n    assert(sorted[0] == 1);\n    assert(sorted[1] == 2);\n    assert(sorted[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "quicksort",
    "__get_shuffle_indices",
    "__get_index",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
