---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tddNTuNAEAXgu3idRVdV/xVXGY1QAIMiRUkUkpFGiLtPt6sehIVRFDMbv0dMfThuHMdvw9P4cH653+ye96/D3a+34eG42W43L/fb/eP6tNnv2qtv76sBP96fjuPYXhou9repw/o47k7D3e683a6GP+vtefql18N6N+VpfWx7w2oYd08tG/i82Y69va8+p8P8KCmGSdPHeLphnkO4YZ6lYj7T3LzMz1cuxYEqgT8E0S9C/OYdBCHFOQjCcc5I84ZwISda/TyPxNcfBedycRR57iiuPhc6J3y3GjXibYQytxq6eDUo/MByEC1ej++P48oF0f+5ICK4vCTJ3IJQWr4i+SdWpCxfkfwDK3L9+bhpSTJOhtRbPvEu52/5xBXFfKSwcP6Wvx/5Yz6GZfOJbpmvjHnVRfMpxBvmkyTMx7xsPn39jP3dflo/bo5fviMM0v6hV0Octmna5mlbpm2dtjptKViQBVvYPBlAJpARZAYZQqawKWwKm8KmsClsCpvCprApbIqYIqZIU9pZl6a0271Ei2SRLYpFtdApYrAgC7YwJfZjabermDyzZ/GsnmqZgid5sqd4updS/y7TMnsWz+qpljl4kid7imf0dC93r69e8ayealmCJ3myp3hGz+TpXnGvuFfcq+5V96p71b3qXnWvulfdq+5V97R7bRG1e+1biLKneEbP5Jk9i2f1VEsKAYVQGEVQIkpCySgFpaJAJsgEmSATZILcLwmOvXQ59VJQKop66ReHFUJhFEGJKAkFMkNmyAxZIAtkgSyQBbJAFsgCWSAL5Ag5Qo6QI+QIuV9NnHvpcumloFQU9dIvKSuEwiiCElESCuQEOUFOkDPkDDlDzpAz5Aw5Q86QM+QMuUAukAvkArlAnq612kuXtZeCUlHUy3TBTYVQGEVQIkpCgVwhV8gVskJWyApZIStkhayQFbJCVpc5BBRCYRRBiSipPxe891vbcbN+2I7+DPt83j1ePNKe/h6wBw+9h+P+cXw6H8d+a5v2tZvdPw==",
  "file_map": {
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::WrappingSub;\n\n// Testing signed integer division:\n//  7/3  = 2\n// -7/3  = -2\n// -7/-3 = 2\n//  7/-3 = -2\nfn main(mut x: i32, mut y: i32, mut z: i32) {\n    // 7/3 = 2\n    assert(x / y == z);\n    // -7/3 = -2\n    let minus_x = (0 as i32).wrapping_sub(x);\n    let minus_z = (0 as i32).wrapping_sub(z);\n    let minus_y = (0 as i32).wrapping_sub(y);\n    assert(x + minus_x == 0);\n    assert(z + minus_z == 0);\n    assert(minus_x / y == minus_z);\n    // -7/-3 = 2\n    assert(minus_x / minus_y == z);\n    // 7/-3 = -2\n    assert(x / minus_y == minus_z);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
