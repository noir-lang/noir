---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _124",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 31)] []",
    "EXPR [ (1, _1) (-2147483648, _3) (-1, _4) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 31)] []",
    "EXPR [ (1, _0) (-2147483648, _5) (-1, _6) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(1), Witness(3))], linear_combinations: [(1, Witness(1)), (4294967296, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(7))]",
    "EXPR [ (-2, _1, _3) (1, _1) (4294967296, _3) (-1, _8) 0 ]",
    "EXPR [ (1, _7, _8) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(0), Witness(5))], linear_combinations: [(1, Witness(0)), (4294967296, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(9)), Simple(Witness(10))]",
    "BLACKBOX::RANGE [(_9, 31)] []",
    "BLACKBOX::RANGE [(_10, 31)] []",
    "EXPR [ (1, _8) (-1, _10) (-1, _11) -1 ]",
    "BLACKBOX::RANGE [(_11, 31)] []",
    "EXPR [ (-2, _0, _5) (-1, _8, _9) (1, _0) (4294967296, _5) (-1, _10) 0 ]",
    "EXPR [ (-1, _9) (-1, _12) 2147483648 ]",
    "EXPR [ (-2, _3, _5) (1, _3) (1, _5) (-1, _13) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(14))]",
    "EXPR [ (1, _9, _14) (1, _15) -1 ]",
    "EXPR [ (1, _9, _15) 0 ]",
    "EXPR [ (2, _12, _13) (1, _9) (-1, _16) 0 ]",
    "EXPR [ (-1, _15) (-1, _17) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 })], outputs: [Simple(Witness(18))]",
    "EXPR [ (1, _10, _18) (1, _19) -1 ]",
    "EXPR [ (1, _10, _19) 0 ]",
    "EXPR [ (-2, _5, _10) (4294967296, _5) (1, _10) (-1, _20) 0 ]",
    "EXPR [ (-1, _19) (-1, _21) 1 ]",
    "EXPR [ (1, _16, _17) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 222)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (-1, _0) (-4294967296, _22) (-1, _23) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _22) (-1, _24) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_24, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(22))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(25))]",
    "EXPR [ (-1, _22, _25) (5096253676302562286669017222071363378443840053029366383258766538131, _25) (1, _26) -1 ]",
    "EXPR [ (-1, _22, _26) (5096253676302562286669017222071363378443840053029366383258766538131, _26) 0 ]",
    "EXPR [ (1, _23, _26) (1, _26, _26) (268435454, _26) (-1, _27) 0 ]",
    "BLACKBOX::RANGE [(_27, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(2))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [(_28, 222)] []",
    "BLACKBOX::RANGE [(_29, 32)] []",
    "EXPR [ (-1, _2) (-4294967296, _28) (-1, _29) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _28) (-1, _30) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_30, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(28))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(31))]",
    "EXPR [ (-1, _28, _31) (5096253676302562286669017222071363378443840053029366383258766538131, _31) (1, _32) -1 ]",
    "EXPR [ (-1, _28, _32) (5096253676302562286669017222071363378443840053029366383258766538131, _32) 0 ]",
    "EXPR [ (1, _29, _32) (1, _32, _32) (268435454, _32) (-1, _33) 0 ]",
    "BLACKBOX::RANGE [(_33, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(1))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(34)), Simple(Witness(35))]",
    "BLACKBOX::RANGE [(_34, 222)] []",
    "BLACKBOX::RANGE [(_35, 32)] []",
    "EXPR [ (-1, _1) (-4294967296, _34) (-1, _35) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _34) (-1, _36) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_36, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(34))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(37))]",
    "EXPR [ (-1, _34, _37) (5096253676302562286669017222071363378443840053029366383258766538131, _37) (1, _38) -1 ]",
    "EXPR [ (-1, _34, _38) (5096253676302562286669017222071363378443840053029366383258766538131, _38) 0 ]",
    "EXPR [ (1, _35, _38) (1, _38, _38) (268435454, _38) (-1, _39) 0 ]",
    "BLACKBOX::RANGE [(_39, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (1, Witness(23))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "EXPR [ (1, _0) (1, _23) (-4294967296, _40) (-1, _41) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(42)), Simple(Witness(43))]",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _42) (-1, _43) 2147483648 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(44)), Simple(Witness(45))]",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 32)] []",
    "EXPR [ (1, _23) (-4294967296, _44) (-1, _45) 2147483648 ]",
    "EXPR [ (-1, _42) (1, _44) (-1, _46) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(46))], q_c: 0 })], outputs: [Simple(Witness(47))]",
    "EXPR [ (1, _46, _47) (1, _48) -1 ]",
    "EXPR [ (1, _46, _48) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(49)), Simple(Witness(50))]",
    "BLACKBOX::RANGE [(_49, 1)] []",
    "BLACKBOX::RANGE [(_50, 32)] []",
    "EXPR [ (1, _41) (-4294967296, _49) (-1, _50) 2147483648 ]",
    "EXPR [ (1, _42) (-1, _49) (-1, _51) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 })], outputs: [Simple(Witness(52))]",
    "EXPR [ (1, _51, _52) (1, _53) -1 ]",
    "EXPR [ (1, _51, _53) 0 ]",
    "EXPR [ (1, _48, _53) (-1, _48) 0 ]",
    "EXPR [ (1, _41) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (1, Witness(29))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(54)), Simple(Witness(55))]",
    "BLACKBOX::RANGE [(_54, 1)] []",
    "EXPR [ (1, _2) (1, _29) (-4294967296, _54) (-1, _55) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(56)), Simple(Witness(57))]",
    "BLACKBOX::RANGE [(_56, 1)] []",
    "BLACKBOX::RANGE [(_57, 32)] []",
    "EXPR [ (1, _2) (-4294967296, _56) (-1, _57) 2147483648 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(58)), Simple(Witness(59))]",
    "BLACKBOX::RANGE [(_58, 1)] []",
    "BLACKBOX::RANGE [(_59, 32)] []",
    "EXPR [ (1, _29) (-4294967296, _58) (-1, _59) 2147483648 ]",
    "EXPR [ (-1, _56) (1, _58) (-1, _60) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 })], outputs: [Simple(Witness(61))]",
    "EXPR [ (1, _60, _61) (1, _62) -1 ]",
    "EXPR [ (1, _60, _62) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(55))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(63)), Simple(Witness(64))]",
    "BLACKBOX::RANGE [(_63, 1)] []",
    "BLACKBOX::RANGE [(_64, 32)] []",
    "EXPR [ (1, _55) (-4294967296, _63) (-1, _64) 2147483648 ]",
    "EXPR [ (1, _56) (-1, _63) (-1, _65) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 })], outputs: [Simple(Witness(66))]",
    "EXPR [ (1, _65, _66) (1, _67) -1 ]",
    "EXPR [ (1, _65, _67) 0 ]",
    "EXPR [ (1, _62, _67) (-1, _62) 0 ]",
    "EXPR [ (1, _55) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [(_68, 1)] []",
    "BLACKBOX::RANGE [(_69, 31)] []",
    "EXPR [ (1, _1) (-2147483648, _68) (-1, _69) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(70)), Simple(Witness(71))]",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "BLACKBOX::RANGE [(_71, 31)] []",
    "EXPR [ (1, _23) (-2147483648, _70) (-1, _71) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(1), Witness(68))], linear_combinations: [(1, Witness(1)), (4294967296, Witness(68))], q_c: 0 })], outputs: [Simple(Witness(72))]",
    "EXPR [ (-2, _1, _68) (1, _1) (4294967296, _68) (-1, _73) 0 ]",
    "EXPR [ (1, _72, _73) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(23), Witness(70))], linear_combinations: [(1, Witness(23)), (4294967296, Witness(70))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(73))], q_c: 0 })], outputs: [Simple(Witness(74)), Simple(Witness(75))]",
    "BLACKBOX::RANGE [(_74, 31)] []",
    "BLACKBOX::RANGE [(_75, 31)] []",
    "EXPR [ (1, _73) (-1, _75) (-1, _76) -1 ]",
    "BLACKBOX::RANGE [(_76, 31)] []",
    "EXPR [ (-2, _23, _70) (-1, _73, _74) (1, _23) (4294967296, _70) (-1, _75) 0 ]",
    "EXPR [ (-1, _74) (-1, _77) 2147483648 ]",
    "EXPR [ (-2, _68, _70) (1, _68) (1, _70) (-1, _78) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 })], outputs: [Simple(Witness(79))]",
    "EXPR [ (1, _74, _79) (1, _80) -1 ]",
    "EXPR [ (1, _74, _80) 0 ]",
    "EXPR [ (2, _77, _78) (1, _74) (-1, _81) 0 ]",
    "EXPR [ (-1, _80) (-1, _82) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 })], outputs: [Simple(Witness(83))]",
    "EXPR [ (1, _75, _83) (1, _84) -1 ]",
    "EXPR [ (1, _75, _84) 0 ]",
    "EXPR [ (-2, _70, _75) (4294967296, _70) (1, _75) (-1, _85) 0 ]",
    "EXPR [ (-1, _84) (-1, _86) 1 ]",
    "EXPR [ (1, _81, _82) (-1, _29) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(87)), Simple(Witness(88))]",
    "BLACKBOX::RANGE [(_87, 1)] []",
    "BLACKBOX::RANGE [(_88, 31)] []",
    "EXPR [ (1, _35) (-2147483648, _87) (-1, _88) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(89)), Simple(Witness(90))]",
    "BLACKBOX::RANGE [(_89, 1)] []",
    "BLACKBOX::RANGE [(_90, 31)] []",
    "EXPR [ (1, _23) (-2147483648, _89) (-1, _90) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(35), Witness(87))], linear_combinations: [(1, Witness(35)), (4294967296, Witness(87))], q_c: 0 })], outputs: [Simple(Witness(91))]",
    "EXPR [ (-2, _35, _87) (1, _35) (4294967296, _87) (-1, _92) 0 ]",
    "EXPR [ (1, _91, _92) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(23), Witness(89))], linear_combinations: [(1, Witness(23)), (4294967296, Witness(89))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 })], outputs: [Simple(Witness(93)), Simple(Witness(94))]",
    "BLACKBOX::RANGE [(_93, 31)] []",
    "BLACKBOX::RANGE [(_94, 31)] []",
    "EXPR [ (1, _92) (-1, _94) (-1, _95) -1 ]",
    "BLACKBOX::RANGE [(_95, 31)] []",
    "EXPR [ (-2, _23, _89) (-1, _92, _93) (1, _23) (4294967296, _89) (-1, _94) 0 ]",
    "EXPR [ (-1, _93) (-1, _96) 2147483648 ]",
    "EXPR [ (-2, _87, _89) (1, _87) (1, _89) (-1, _97) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 })], outputs: [Simple(Witness(98))]",
    "EXPR [ (1, _93, _98) (1, _99) -1 ]",
    "EXPR [ (1, _93, _99) 0 ]",
    "EXPR [ (2, _96, _97) (1, _93) (-1, _100) 0 ]",
    "EXPR [ (-1, _99) (-1, _101) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(94))], q_c: 0 })], outputs: [Simple(Witness(102))]",
    "EXPR [ (1, _94, _102) (1, _103) -1 ]",
    "EXPR [ (1, _94, _103) 0 ]",
    "EXPR [ (-2, _89, _94) (4294967296, _89) (1, _94) (-1, _104) 0 ]",
    "EXPR [ (-1, _103) (-1, _105) 1 ]",
    "EXPR [ (1, _100, _101) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(106)), Simple(Witness(107))]",
    "BLACKBOX::RANGE [(_106, 1)] []",
    "BLACKBOX::RANGE [(_107, 31)] []",
    "EXPR [ (1, _35) (-2147483648, _106) (-1, _107) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(108)), Simple(Witness(109))]",
    "BLACKBOX::RANGE [(_108, 1)] []",
    "BLACKBOX::RANGE [(_109, 31)] []",
    "EXPR [ (1, _0) (-2147483648, _108) (-1, _109) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(35), Witness(106))], linear_combinations: [(1, Witness(35)), (4294967296, Witness(106))], q_c: 0 })], outputs: [Simple(Witness(110))]",
    "EXPR [ (-2, _35, _106) (1, _35) (4294967296, _106) (-1, _111) 0 ]",
    "EXPR [ (1, _110, _111) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(0), Witness(108))], linear_combinations: [(1, Witness(0)), (4294967296, Witness(108))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(111))], q_c: 0 })], outputs: [Simple(Witness(112)), Simple(Witness(113))]",
    "BLACKBOX::RANGE [(_112, 31)] []",
    "BLACKBOX::RANGE [(_113, 31)] []",
    "EXPR [ (1, _111) (-1, _113) (-1, _114) -1 ]",
    "BLACKBOX::RANGE [(_114, 31)] []",
    "EXPR [ (-2, _0, _108) (-1, _111, _112) (1, _0) (4294967296, _108) (-1, _113) 0 ]",
    "EXPR [ (-1, _112) (-1, _115) 2147483648 ]",
    "EXPR [ (-2, _106, _108) (1, _106) (1, _108) (-1, _116) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(112))], q_c: 0 })], outputs: [Simple(Witness(117))]",
    "EXPR [ (1, _112, _117) (1, _118) -1 ]",
    "EXPR [ (1, _112, _118) 0 ]",
    "EXPR [ (2, _115, _116) (1, _112) (-1, _119) 0 ]",
    "EXPR [ (-1, _118) (-1, _120) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(113))], q_c: 0 })], outputs: [Simple(Witness(121))]",
    "EXPR [ (1, _113, _121) (1, _122) -1 ]",
    "EXPR [ (1, _113, _122) 0 ]",
    "EXPR [ (-2, _108, _113) (4294967296, _108) (1, _113) (-1, _123) 0 ]",
    "EXPR [ (-1, _122) (-1, _124) 1 ]",
    "EXPR [ (1, _119, _120) (-1, _29) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tddNTuNAEAXgu3idRVdV/xVXGY1QAIMiRUkUkpFGiLtPt6sehIVRFDMbv0dMfThuHMdvw9P4cH653+ye96/D3a+34eG42W43L/fb/eP6tNnv2qtv76sBP96fjuPYXhou9repw/o47k7D3e683a6GP+vtefql18N6N+VpfWx7w2oYd08tG/i82Y69va8+p8P8KCmGSdPHeLphnkO4YZ6lYj7T3LzMz1cuxYEqgT8E0S9C/OYdBCHFOQjCcc5I84ZwISda/TyPxNcfBedycRR57iiuPhc6J3y3GjXibYQytxq6eDUo/MByEC1ej++P48oF0f+5ICK4vCTJ3IJQWr4i+SdWpCxfkfwDK3L9+bhpSTJOhtRbPvEu52/5xBXFfKSwcP6Wvx/5Yz6GZfOJbpmvjHnVRfMpxBvmkyTMx7xsPn39jP3dflo/bo5fviMM0v6hV0Octmna5mlbpm2dtjptKViQBVvYPBlAJpARZAYZQqawKWwKm8KmsClsCpvCprApbIqYIqZIU9pZl6a0271Ei2SRLYpFtdApYrAgC7YwJfZjabermDyzZ/GsnmqZgid5sqd4updS/y7TMnsWz+qpljl4kid7imf0dC93r69e8ayealmCJ3myp3hGz+TpXnGvuFfcq+5V96p71b3qXnWvulfdq+5V97R7bRG1e+1biLKneEbP5Jk9i2f1VEsKAYVQGEVQIkpCySgFpaJAJsgEmSATZILcLwmOvXQ59VJQKop66ReHFUJhFEGJKAkFMkNmyAxZIAtkgSyQBbJAFsgCWSAL5Ag5Qo6QI+QIuV9NnHvpcumloFQU9dIvKSuEwiiCElESCuQEOUFOkDPkDDlDzpAz5Aw5Q86QM+QMuUAukAvkArlAnq612kuXtZeCUlHUy3TBTYVQGEVQIkpCgVwhV8gVskJWyApZIStkhayQFbJCVpc5BBRCYRRBiSipPxe891vbcbN+2I7+DPt83j1ePNKe/h6wBw+9h+P+cXw6H8d+a5v2tZvdPw==",
  "file_map": {
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::WrappingSub;\n\n// Testing signed integer division:\n//  7/3  = 2\n// -7/3  = -2\n// -7/-3 = 2\n//  7/-3 = -2\nfn main(mut x: i32, mut y: i32, mut z: i32) {\n    // 7/3 = 2\n    assert(x / y == z);\n    // -7/3 = -2\n    let minus_x = (0 as i32).wrapping_sub(x);\n    let minus_z = (0 as i32).wrapping_sub(z);\n    let minus_y = (0 as i32).wrapping_sub(y);\n    assert(x + minus_x == 0);\n    assert(z + minus_z == 0);\n    assert(minus_x / y == minus_z);\n    // -7/-3 = 2\n    assert(minus_x / minus_y == z);\n    // 7/-3 = -2\n    assert(x / minus_y == minus_z);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
