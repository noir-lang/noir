---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zdvNSiNREIbhe+l1Fqeqzk8db2UYJGqUQEgkxoFBvPdJJO2o3RjejdQunfSbfPBAgx3zMtytbp4frtfb+93TcPXrZdjsbpeH9W57PHoZ7O2pp8fl9nT0dFjuD8OVVF0Mq+3d6VF7XQz3681quCrp9fdiyDQoNKg0aDRwGnQaSMKF4EJxgbUFcwv2FgwuWFwwuWBzxeaKzRWbKzZXbK7YXLG5YnPF5orNDZsbNrdL5k2/FrPmKulcqNnHYjE9taqN57aU3k9WnTnZtMn55OPD8n6y6NuWHGhLCbSlBtrSAm3xQFt6nC05BdoigbZooC2Brrt5/rpb/r9//bktJdCWGmhLC7TFA23pcbaUFGiLBNqigbZYoC2Brrtl/rrb65hI/7ktNdCWFmiLB9rS42ypKdAWCbRFA22xQFtyoC2Brrt19rprNt49svzpb5JT0XDhuOi0aAkXggvFheEi46LgAps3bN6wecPmjs0dmzs2d2zu2NyxuWNzx+aOzR2b94vm/rWYN3+/P25t8hmKC8NFxkXBRcVFw4XjotNCUuKJ8ER5YjzJPCk8qTxpPHGecH3h+sL1hesL1xeuLxf1fZLM6/cxyWn6KY0nzpOOk/mvzb9PhCfKE+NJ5knhCddXrq9cX7m+cX3j+sb1jesb1zeub1zfuL5xfeP6metnrp+5fub6mevnS/qSJ8msfs5lTKpOksYT50nHyfxXK98nwhPlifEk86TwhOsXrl+4fuH6letXrl+5fuX6letXrl+5fuX6letXrt+4fuP6jes3rt+4fruoP/2f13n97uekpD5JGk+cJx0n8zf2vk+EJ8oT40nmSeEJ13eu71zfuX7n+p3rd67fuX7n+p3rd67fuX7n+h3ra0o8EZ4oT4wnmSeX9DV9So4HN/v1ZrN+uP74w53j03+W+/XyZrM6H94/b28/vHr4+zi+MvaP+93t6u55vzq909trx7f/Bw==",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Testing signed integer division:\n//  7/3  = 2\n// -7/3  = -2\n// -7/-3 = 2\n//  7/-3 = -2\nfn main(mut x: i32, mut y: i32, mut z: i32) {\n    // 7/3 = 2\n    assert(x / y == z);\n    // -7/3 = -2\n    let minus_x = std::wrapping_sub(0, x);\n    let minus_z = std::wrapping_sub(0, z);\n    let minus_y = std::wrapping_sub(0, y);\n    assert(x + minus_x == 0);\n    assert(z + minus_z == 0);\n    assert(minus_x / y == minus_z);\n    // -7/-3 = 2\n    assert(minus_x / minus_y == z);\n    // 7/-3 = -2\n    assert(x / minus_y == minus_z);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
