---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1av2/TQBQ+23Fsx0kryoQQE0IMCClWUzndOtD+DwwMVksWBiaEmChiQAxMCDEhxIAYmBBiQogBMcACOxJ/C7V6T/n69Z2bUl9IJU6K7mJ/ee97P+6dz5fA7Ldw7xPYccf2kTncBLNh++HJWtGirKFPnsEp4Rl64nkgGQKbMK4mRv22fWb7EO5HLRqdkd425Y+HozJT7GuR/2pmZXY8y4/9yB8mVs613al8tEX0RoTj30SA2QTMpgOzBZgtwgzsODCHdck9zOFNuof5LrLTvc8ZMx2v2HFGunzkH/JtO35nFf6iK7e2fidbey1zKSf7TXhIzsRWPusMiE/eMh9poqtP8llnAHyR/znbd/c+5+1YcqwLv+8D7kIDLlBw84pJYppjEi5YTELgi/wvgg8vka9To8fkcgMuVHDCER+mhCPGMyV8Bj6U61i3E7JJcFeAw1WQ4SMvOA68brHODtko9nQAzzLQRsEXZFfXk10rINeQLs9r9dCzbaXkr+QRNi23O3QP8xL9w403D2hTLf8nyGUc88H8F24Z2dGyn8bsC6PwQl+wn3jOyZib5iex6bh+wpzBOsIxbdFP6+wLo/DSaoHc0+r1rH4Sm47rJ8wZfqZISSfneUyyMoVPZA77HHG4FmjPNIzJFf2CkfjyWrhhvw//so1tL7zEr661v0929BR83oCXe1hXBzDuzSA/bZCfKvJ7Dl14D3MS5efHlJ8DX8Rft339/VeDTLFRqzks84btfa//2jo5y3zCeig1y8d8ihyYXNEfmIPz/X+++8n3W7ZvM99v2/5f5rvoHrSsm/dgKfggUnTGxGfJky+EzzLJZ52xI2Z3bF/Pv7t2rNWAZcDda8DFCm5eMdHmJuoMFywmvC8W/vfBhw/I17kjJg8bcKGCE47avhjjyfWmDz6U61ifemST4B8Bh8cgw0decBy0fTHq5H2x+Mu1L+6SjYJ/QnZ5etZX6x/vx9p+DuW5hmtApOjk+uc7xjyXXfU4Jv5PbV/H9Jkda/vvJcA9b8DFCm5eMcmOiEliFismrndoL8CHL8nXPUdMXjXgEgXHcx3rn1bPBJ+DD+U61oaMbBL8a+DwBmT4yAuOA59XsM6QbBR7sP6xDLRR8G/JLl/nXFr943rj+x08+uA0nosI/3e2r/PyvR3LHMK8xnfwHxpwgYJblLOqZMFiwvVP+H8EH34iX7vORT434BIF11T/MJ6znIvg/p7XWcF9AQ5fQYaPvOA4aPVPOy8LzMEcdtU/fv4T/DeyK/Jkl1b/RFdupj7v7Lavvxzv+7Vu0e7UD/xeGPXHhP9hv2MMpO+cgOekrIrJajWp1qqdndF2xX6qm+s8XXsnhr/LlGsbs/EsjuKNthvQr3HR3oXj/yf4Gq/pmqzI8bvIoQ9jHTn0IXbQwLmOQ9t5MFqryu2qLIr1UXFzVKwdlQd/AHUaiTB9JwAA",
  "debug_symbols": "tdrfauJAFIDxd8m1FzPnzJ9z+irLstg2LYJosXZhKX33TYpaNxkavi29ESP+mITPqJnMa3ff3748/trsHvbP3c2P1267v1sfN/vdsPX6tupuD5vtdvP46/rlLowP0d/f//y03o2bz8f14djdxCKrrt/dj8/q4B822767yeHt56qTgEXEQrBQLBIWGYuCRcXCsMDNFTdX3Fxxc8XNFTdX3Fxxc8XNFTdX3Dzh5gk3T7h5ws0Tbp6WmleZioJFxcKwaDaXGE5CVCciBywiFoKFYpGwyFgULCoWzeaS9SxqmQqnogQsIhaChWKRsMhYtJt7OQmNPhUVC8PCqagBi4iFYKFYNJurnr8TNU3PqJqxKFhULAwLp8ICFhELwUKxwM0NNzfc3HBzw81tsblNhAcsIhaCRbv55Z+M1umRe8IiY1GwqFgYFk5FDIGTyIlwopwkTjInhZPF9jYjxoljEgMn7fp+JinMDj8KJ8pJ4iRzUjipnBgnjkl7cu5zwusLry+8vvD6wusLry+8vvD6wusrr6+8vvL6yusrr6+8vvL6ulQ/phkxThyTFDhp1k8pn0mRGRFOlJPESeakcFI5MU4ck/bU3eeE18+8fub1M6+fef3M62deP/P6mdcvvH7h9QuvX3j9wusXXr/w+mWxfp0R48QxqYGTdn23E8nBZ0Q4UU4SJ5mTwknlxDhxTNoTe58TXt94feP1jdc3Xt94feP1jdc3Xt95fef1ndd3Xt95fef1ndf3pfoSZsQ4cUokBE7ad4tKutyGLClfkAy/gvNrCqnxPJ0k9ePNUd5HaE9B/TOC+fUI7yj+D2rfYyqXa57haf3asejibvl8t1IbycedxRC+tlv520co3zrC27D1e33YrG+3/WmR2sPL7u5qzdrxz1M/Wb72dNjf9fcvh35cyHa1hm38vEmQlYQ6nkfjJ0mir0TiMM4w1l8=",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Testing signed integer division:\n//  7/3  = 2\n// -7/3  = -2\n// -7/-3 = 2\n//  7/-3 = -2\nfn main(mut x: i32, mut y: i32, mut z: i32) {\n    // 7/3 = 2\n    assert(x / y == z);\n    // -7/3 = -2\n    let minus_x = std::wrapping_sub(0, x);\n    let minus_z = std::wrapping_sub(0, z);\n    let minus_y = std::wrapping_sub(0, y);\n    assert(x + minus_x == 0);\n    assert(z + minus_z == 0);\n    assert(minus_x / y == minus_z);\n    // -7/-3 = 2\n    assert(minus_x / minus_y == z);\n    // 7/-3 = -2\n    assert(x / minus_y == minus_z);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
