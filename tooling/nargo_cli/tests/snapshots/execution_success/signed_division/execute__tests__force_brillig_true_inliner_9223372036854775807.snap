---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VZv2sUQRid/TF3t7e7BmMlYiViIcItuXCxS2FS2/gHHIlnJWIlYmEsrESsRCzEwkrESsRCLLRR8J8yR+bjXt59M7mQnXgZOGZu9+373vdjZ2d2E3PQ0v1f4sa56zMz3wSz6frByVrTItcgps7kjOhMI+k8VAyJKxhfE6f+ur5wfQrnsxadLshum/wbg+GoUPxrUf9a4TjzyPw2Dv+g63hu7c340RexmxGOr8kAswWYLQ9mGzDbhKndODHztuQc1vAWncN6F+7e/u+8mY1X3bggWzHqD/W2nb8Lin6xVTpff5Gv/Za1jCYHTXRIzVjHzzYT0lO2rEea2KqIn20moBf1X3R9Z/93yY2lxjpwfQW4ywFcouBOKyddE85JumQ5SUEv6r8CMbxKse4ZPSfXArhUwYlGXEyJRsxnj/AFxFCO47zdJZ8Edx003ACOGHXBeeDnFtvMyUfxJwc8c6CPgm/Ir04kv1aB15CtzOOTIW0Wjm0upqs5Spcx+nxglViLzq7iAz5H2Zcu6NbqNfdwdOk4Nq3OtZoWrsJznc9eoWjuKfzMgXZSRXM/oLkIaO577GnX+zh4rcYaDB0XrOSqVrRYus4uoFl7xjEG52Guj1hr2w3Xi67a8VmPdr5fSwVfBfByDo/XMC4X4LcBfqvwlx5beA7XhMhfHZO/Ar2Iv+366f30x41j7yfYR3xOaPVsCX+HdFaRdGrPCY676DXgQwYYmadqM5+TPl2HvvPaKvP4qmGwlnhuTOj4ce8P67HDeDmXe7RUC/CH1hi5wl95bOH/1MNZL8DfVfCW8Duux/tJ49TmMOvhvOf6wug53XT/BydsWr13yXbdsu1F9oVos0N6zkWKhehZIX622aGcif77rp+ef+DGtZK/FcA9DOA6Cu60ctI34ZykS5YT3heK/kcQw8cU69KTkycBXKrg+F73rWl5PVFBDOW4tn6zhH8KGp4BR4y64Dxo+8LQM0Hi5dsX9shHwT8nv2KtS7T5z5LtttcafK/lEAPtuczzX+wc873sm4/5mfXC9dPzL924VvJ3DnCvAriOgjutnBy1VirMcuWkAL2o/zXE8A3Fuu/JydsArlBwfK/79se89y4hhnJcW3vxXuAdaHgPHDHqgvPA7+vZZko+aus/5kAfBf+B/Pqf81/sd9AYg7P4XUD0f3T9tC4/ubHcQ9qeZYr7HMAlCm5ZvtUUS5YTnv9E/xeI4VeKte9bzbcArlBwofkP88nveHGfhb4ZM58DxH8HDT+AI0ZdcB60+U/7XpSYwzXsm/94/Sf4n+RXFskvbf4TW6WZ5Sbfa9/+aOMgrtOW7c3iwO/a0b4l/G/3H3MgfX4CnZPRuJmsjSfj9fHu7nBnzHGaNvye3Lb94fp4tDMeNc3NYXN32KwfZf8fjpx8bPUkAAA=",
  "debug_symbols": "zdrbSuNQFIDhd8l1L/Y67JOvMgxSNUqhtFLrwCC++yRDT6Sh5ScqvZFG8u0u829LtflontqH95f7xep5/dbc/fpoluvH+XaxXnVHH5+z5mGzWC4XL/en325C/0Xq//PfXuer/vBtO99smztJOmva1VP/KHf+ebFsm7sYPn/PGg1YCBaKhWHhWEQsEhYZi4IFbm64ueHmhpsbbm64ueHmhpsbbm64ueHmjps7bu64uePmjpv7teZZhyJhkbEoWIw2Vwk7oWanYnZ+aqr71buHx8ukOnKyaZbdyd3DeDhZtJ8lhsmzeDjOUk9n6ZeX711eJy+vtj83hzDpStoNzeI3NMvob63G4/rp53Z7mjzLxe2YJy//dZe93NAs9XZmSeMveDXtidQf245JJs9yaTsmnbz81112u6FZ/IZmGX11NNtvMXMbvHtICYuMRcGiUpEDFoKFYmFYOBa4ecbNM26ecfOMm5erzctQCBaKhWHhWIw3P/yVYPnsWiUsMhYFi0pFDVgIFoqFYeFY4OYVN6+4ecXN69Xmw90uIXAinCgn490Pb+k82BlxTiIniZPMSeGkYiKBE+FEOeH1hdcXXl94feH1hdcXXl95feX1lddXXl95feX1lddXXl95fb1WX3xILHAinCgno/Xd454kPSPOSeQkcZI5KZxUTMY/nLhMhBPlhNd3Xt95fef1ndd3Xt95/cjrR14/8vqR14+8fuT1I68fef3I68er9YefzkkKnAgnysl4/Vp2JIZ6RpyTyEniJHNSOKmYjP877zIRTpQTXj/z+pnXz7x+5vUzr595/cLrF16/8PqF1y+8fuH1C69feP3C65dr9TUMSQ2cCCfKyGd39Ge+Wcwflu3ufrvn99Xjye1327+v7eBOvNfN+rF9et+0/T15J7fj9T+hVJ9Jrf0s/fQawkyDds/TPdc/",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Testing signed integer division:\n//  7/3  = 2\n// -7/3  = -2\n// -7/-3 = 2\n//  7/-3 = -2\nfn main(mut x: i32, mut y: i32, mut z: i32) {\n    // 7/3 = 2\n    assert(x / y == z);\n    // -7/3 = -2\n    let minus_x = std::wrapping_sub(0, x);\n    let minus_z = std::wrapping_sub(0, z);\n    let minus_y = std::wrapping_sub(0, y);\n    assert(x + minus_x == 0);\n    assert(z + minus_z == 0);\n    assert(minus_x / y == minus_z);\n    // -7/-3 = 2\n    assert(minus_x / minus_y == z);\n    // 7/-3 = -2\n    assert(x / minus_y == minus_z);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
