---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "start",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "end",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(2))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 100 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 5 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(13), rhs: Relative(1) }, Const { destination: Relative(14), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U64, lhs: Relative(14), rhs: Relative(1) }, JumpIf { condition: Relative(8), location: 25 }, Jump { location: 27 }, Mov { destination: Relative(9), source: Relative(15) }, Jump { location: 29 }, Mov { destination: Relative(9), source: Relative(1) }, Jump { location: 29 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(13), rhs: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U64, lhs: Relative(14), rhs: Relative(4) }, JumpIf { condition: Relative(10), location: 35 }, Jump { location: 37 }, Mov { destination: Relative(11), source: Relative(15) }, Jump { location: 39 }, Mov { destination: Relative(11), source: Relative(4) }, Jump { location: 39 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U64, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(12), op: Xor, bit_size: U1, lhs: Relative(8), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 43 }, Jump { location: 45 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(13), rhs: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U64, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(13), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(13), rhs: Relative(2) }, Const { destination: Relative(14), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U64, lhs: Relative(14), rhs: Relative(2) }, JumpIf { condition: Relative(8), location: 53 }, Jump { location: 55 }, Mov { destination: Relative(9), source: Relative(15) }, Jump { location: 57 }, Mov { destination: Relative(9), source: Relative(2) }, Jump { location: 57 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(13), rhs: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U64, lhs: Relative(14), rhs: Relative(4) }, JumpIf { condition: Relative(10), location: 63 }, Jump { location: 65 }, Mov { destination: Relative(11), source: Relative(15) }, Jump { location: 67 }, Mov { destination: Relative(11), source: Relative(4) }, Jump { location: 67 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U64, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(12), op: Xor, bit_size: U1, lhs: Relative(8), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 71 }, Jump { location: 73 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(13), rhs: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U64, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U64, lhs: Relative(2), rhs: Relative(7) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Store { destination_pointer: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(6), bit_size: Integer(U64), value: 1 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 83 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U64, lhs: Relative(3), rhs: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(1), rhs: Relative(9) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U64, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(5), location: 91 }, Jump { location: 89 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Return, Load { destination: Relative(5), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 96 }, Call { location: 106 }, Store { destination_pointer: Relative(2), source: Relative(7) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U64, lhs: Relative(3), rhs: Relative(6) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 83 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 105 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "ndTBjoIwEMbxd+mZQ9tpp+CrGGMQqyFpgFTYZGN49x34ZFcPmxgv/K0wPy4td3WOp+l6bLtLf1O7/V2dcptSez2mvqnHtu/k37vSy8WUamcKZao1ViMGsQghDvEIIwGBYqEQFIJCUAgKQSEoBIWgEBSC4qA4KA6Kg+KgOCgOihPFSkqkWuM1YhCLEOIQjzACxUPxUBgKQ2EoDIWhMBSGwlAYCkMJUAKUACVACVCCKCRhJCDlmlKedBKHeIQReYMvVGXWVWWxIsQhHmFEaD/Phdq2xHHMMS474mmPyM4Z6hy7Ue26KaVCfdVpWh+6DXW3dqyz3NWFit1ZKuClTXH5NRd/0/r/0eAesyX9Dvu3p402j3Gjy0/mbbXNk/5k3ttt3vtP5pm3+eBe5g+yqps2v5zZeZFyW59SfCwvU9c83R2/h+3OduaH3DfxPOW4SE8HX657o3VhtD/IB8CsS5ZleZiX1/8A",
  "file_map": {
    "50": {
      "source": "unconstrained fn main(start: i64, end: i64) -> pub u32 {\n    let start = (start % 5);\n    let end = (end % 5);\n    let mut sum = 0;\n    for i in start..end {\n        sum += 1;\n    }\n    sum\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
