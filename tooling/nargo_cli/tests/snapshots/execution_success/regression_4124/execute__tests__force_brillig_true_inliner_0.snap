---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "value",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 12 }, Call { location: 13 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 20 }, Const { destination: Relative(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 19 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 25 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "dZBBDoMgEEXvMmsWaqpVr2KMQR0NCQGC0KQx3L2DltYuupnP8HmfzOww4+jXQahFb9B2O4xWSCnWQeqJO6EV3e6QxZLfoM0Z5OUp1Sn3U2qSEBgkbHAWMVKXHEo33KJy0CovJYMHl/54tBmuDnXckpsxQDWTUuAiJMZTYF86+482ZYKbqv7gJfE9dXwS9meyEJOs4KPEd7t4NV1c9zTJSZsxVk84e4sx6bIeql2RsaLsQ/ztBQ==",
  "file_map": {
    "50": {
      "source": "use std::option::Option;\n\ntrait MyDeserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n\nimpl MyDeserialize<1> for Field {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        fields[0]\n    }\n}\n\npub fn storage_read<let N: u32>() -> [Field; N] {\n    std::mem::zeroed()\n}\n\nstruct PublicMutable<T> {\n    storage_slot: Field,\n}\n\nimpl<T> PublicMutable<T> {\n    pub fn new(storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { storage_slot }\n    }\n\n    pub fn read<let T_SERIALIZED_LEN: u32>(_self: Self) -> T\n    where\n        T: MyDeserialize<T_SERIALIZED_LEN>,\n    {\n        // storage_read returns slice here\n        let fields: [Field; T_SERIALIZED_LEN] = storage_read();\n        T::deserialize(fields)\n    }\n}\n\nfn main(value: Field) {\n    let ps: PublicMutable<Field> = PublicMutable::new(27);\n\n    // error here\n    assert(ps.read() == value);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
