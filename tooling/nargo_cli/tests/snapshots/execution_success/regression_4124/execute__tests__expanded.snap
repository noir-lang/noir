---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::option::Option;

trait MyDeserialize<let N: u32> {
    fn deserialize(fields: [Field; N]) -> Self;
}

impl MyDeserialize<1> for Field {
    fn deserialize(fields: [Self; 1]) -> Self {
        fields[0_u32]
    }
}

pub fn storage_read<let N: u32>() -> [Field; N] {
    std::mem::zeroed()
}

struct PublicMutable<T> {
    storage_slot: Field,
}

impl<T> PublicMutable<T> {
    pub fn new(storage_slot: Field) -> Self {
        assert(
            storage_slot != 0_Field,
            "Storage slot 0 not allowed. Storage slots must start from 1.",
        );
        Self { storage_slot: storage_slot }
    }

    pub fn read<let T_SERIALIZED_LEN: u32>(_self: Self) -> T
    where
        T: MyDeserialize<T_SERIALIZED_LEN>,
    {
        let fields: [Field; T_SERIALIZED_LEN] = storage_read();
        T::deserialize(fields)
    }
}

fn main(value: Field) {
    let ps: PublicMutable<Field> = PublicMutable::<Field>::new(27_Field);
    assert(ps.read() == value);
}
