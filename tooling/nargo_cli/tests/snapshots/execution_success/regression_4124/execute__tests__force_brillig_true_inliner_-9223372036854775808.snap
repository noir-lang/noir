---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "value",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "206160798890201757": {
        "error_kind": "string",
        "string": "Storage slot 0 not allowed. Storage slots must start from 1."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/81VUU7DMAxN0xYIY3zADeAHvnDbtR1/k+AiYaXn6NFZJFsxxhsIEglLlRPl5dl+TtLCRCvQV2JuFMwOPfzNmoRcoCZ6yggzoHfoLVsvExbrRNyU/FvY9E6pL2H+nUPOnPoQZwZ+OEee1yXyy1qCrXHOzxDtuTh8VyaOr3HsxJ4cvc2oPdwq+VtWW7CXJeqRKu4KdbwXOlqTOlbzRtxVHg17Oje1+Wq0dqboq71VpZjzvINej4xX4mRMfp8o/n/TolTy/6kWwHglTsa0ihYyh1rBFmKNsHfoM+sJN4xXarAy8Y5WS/r44xaA4pZL1EH2hcevBf4B55dH6tj9Ms959M3c+dn3fpo2ey91CmaZTvytIRytU2/5XnrztH+TMen6W5jPPa2U/LQzSrgn9KG+7ki96xP1BWzq3kA77Yf39nB8xqFpn6fvevMBVPYttI0KAAA=",
  "debug_symbols": "ldTRioUgFAXQf/G5B02PZb8yDBcruwhiYTUwRP8+OtyBiAvDfhGOuNgPR/bBRtfvz4eP07yy7uNgYR7s5ueYp+OsWJ98CP75uF4zXg5Bv+/XxcYyrptNG+taoyvm4sg6I9rsJx8c64ifnxUTGhYNLFpYGFTUHBYCFjUs5DthiP8Jau5CwYJgoWHRwKKFhUGF5P8Ifd+HFLCoYSFRod5mKGleQpG+CwkLBQuChcbEmacvm7ztg3tV27TH4dJ02/fibqW3pHlw455cqb9L85W/IKlSvNRHWTOJimTOyDk/",
  "file_map": {
    "50": {
      "source": "use std::option::Option;\n\ntrait MyDeserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n\nimpl MyDeserialize<1> for Field {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        fields[0]\n    }\n}\n\npub fn storage_read<let N: u32>() -> [Field; N] {\n    std::mem::zeroed()\n}\n\nstruct PublicMutable<T> {\n    storage_slot: Field,\n}\n\nimpl<T> PublicMutable<T> {\n    pub fn new(storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { storage_slot }\n    }\n\n    pub fn read<let T_SERIALIZED_LEN: u32>(_self: Self) -> T\n    where\n        T: MyDeserialize<T_SERIALIZED_LEN>,\n    {\n        // storage_read returns slice here\n        let fields: [Field; T_SERIALIZED_LEN] = storage_read();\n        T::deserialize(fields)\n    }\n}\n\nfn main(value: Field) {\n    let ps: PublicMutable<Field> = PublicMutable::new(27);\n\n    // error here\n    assert(ps.read() == value);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
