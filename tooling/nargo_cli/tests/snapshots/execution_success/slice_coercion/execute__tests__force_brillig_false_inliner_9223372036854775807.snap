---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_1]",
    "public parameters indices : [_0]",
    "return value indices : []",
    "EXPR [ (-1, _0) (1, _1) 0 ]"
  ],
  "debug_symbols": "dY/BDoIwDIbfpecdUNQDr2IMGaOQJU23lM3EEN7dQpjiwVPX/vv+9p+hxy6PrechTNDcZ+jEE/mxpeBs8oF1Oi8GStsmQdQRHHSlohXkBA1nIgNPS3n7NEXLW01WVK0MIPda1XDwhOtrMV+6+o/W9WWH69v5g1+Vf2hnnZefi6GC5rSsduJtR7inGDK7Q6j0ikUpsaMEh30WXO02TRe8AQ==",
  "file_map": {
    "50": {
      "source": "struct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n}\n\nfn main(expected: pub Field, first: Field) {\n    let mut hasher = Hasher::new();\n    hasher.add(first);\n    assert(hasher.fields[0] == expected);\n\n    regression_4967();\n}\n\nfn regression_4967() {\n    let var1: [(i32, u8)] = [(1, 2)];\n    assert(var1.len() == 1);\n    std::println(var1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
