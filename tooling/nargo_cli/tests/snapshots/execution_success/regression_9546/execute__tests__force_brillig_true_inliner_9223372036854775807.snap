---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 16
      },
      "visibility": "public"
    },
    "error_types": {
      "1457105833098524175": {
        "error_kind": "string",
        "string": "attempt to shift right with overflow"
      },
      "15764276373176857197": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ]], outputs: [_2]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U16) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U16) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 90 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 52075 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 28165 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 56866 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(3), source: Relative(2) }, Jump { location: 29 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 34 }, Jump { location: 32 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(2), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(10), location: 38 }, Jump { location: 45 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 49 }, Jump { location: 41 }, Mov { destination: Relative(2), source: Relative(1) }, Jump { location: 43 }, Store { destination_pointer: Relative(4), source: Relative(2) }, Jump { location: 45 }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(9) }, Mov { destination: Relative(3), source: Relative(2) }, Jump { location: 29 }, Const { destination: Relative(1), bit_size: Integer(U64), value: 8724006435340102799 }, Const { destination: Relative(2), bit_size: Integer(U64), value: 4976821465038191667 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U64, lhs: Relative(5), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 55 }, Jump { location: 84 }, Const { destination: Relative(6), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U64, lhs: Relative(6), rhs: Relative(2) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U64, lhs: Relative(1), rhs: Relative(6) }, Const { destination: Relative(13), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(13), rhs: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U64, lhs: Relative(14), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 64 }, Jump { location: 66 }, Mov { destination: Relative(9), source: Relative(15) }, Jump { location: 67 }, Mov { destination: Relative(9), source: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(13), rhs: Relative(7) }, Const { destination: Relative(14), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U64, lhs: Relative(14), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 73 }, Jump { location: 75 }, Mov { destination: Relative(11), source: Relative(15) }, Jump { location: 76 }, Mov { destination: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U64, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(12), op: Xor, bit_size: U1, lhs: Relative(8), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 80 }, Jump { location: 82 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U64, lhs: Relative(13), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U64, lhs: Relative(3), rhs: Relative(6) }, Jump { location: 85 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 90 }, Call { location: 96 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 95 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15764276373176857197 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1457105833098524175 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
