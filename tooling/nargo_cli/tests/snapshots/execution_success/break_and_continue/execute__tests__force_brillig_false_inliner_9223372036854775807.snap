---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 61 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Store { destination_pointer: Relative(2), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 10 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 5 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 2147483648 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 26 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 29 }, Jump { location: 52 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(3), location: 59 }, Jump { location: 33 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(3), location: 51 }, Jump { location: 36 }, Load { destination: Relative(3), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, Mov { destination: Relative(12), source: Relative(11) }, Cast { destination: Relative(11), source: Relative(12), bit_size: Integer(U32) }, Cast { destination: Relative(13), source: Relative(3), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U1, lhs: Relative(13), rhs: Relative(3) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U1, lhs: Relative(13), rhs: Relative(3) }, JumpIf { condition: Relative(11), location: 48 }, Call { location: 67 }, Store { destination_pointer: Relative(2), source: Relative(12) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 26 }, Jump { location: 52 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 58 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 26 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 66 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLBjoMgEED/hTMHQZiqv9I0DVVsSAgaqptsjP++gyO79rBJ44XHMPOGTDIL6+xjft5d6IcXa64Le0TnvXve/dCayQ0BXxdWpEOUrBGcCUXQBNggERJRs6bkrMR6hUBBI4BwoceKUG9QVKkEQRJKgiJoAhCoi6IumgSNAiAUQROAgAKsK2d5oPsUrU3zHCbEuUcTbZhYE2bvOfsyft6KXqMJGycTMVtwZkOHxIa98zbdVv5nF/+rCnZXXX5l/bEN2YbqhF3J3a7O2KLKY4u6OOOXKvvqjC9F/l/Kd/+GkWldfNvWNXWKzjy83cN+Du0hO32POZO3fYxDa7s52tTpsPJ4XkFwgBuuukjBhUN9W9PXPw==",
  "file_map": {
    "50": {
      "source": "unconstrained fn main() {\n    let mut count = 0;\n\n    for i in 0..10 {\n        if i == 2 {\n            continue;\n        }\n        if i == 5 {\n            break;\n        }\n        count += 1;\n    }\n\n    assert(count == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
