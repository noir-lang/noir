---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 50 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Field, value: 0 }, Store { destination_pointer: Relative(2), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 10 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 5 }, Const { destination: Relative(8), bit_size: Field, value: 1 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 25 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 28 }, Jump { location: 41 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(3), location: 48 }, Jump { location: 32 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(3), location: 40 }, Jump { location: 35 }, Load { destination: Relative(3), source_pointer: Relative(2) }, BinaryFieldOp { destination: Relative(10), op: Add, lhs: Relative(3), rhs: Relative(8) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(9) }, Jump { location: 25 }, Jump { location: 41 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Const { destination: Relative(2), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 47 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Mov { destination: Relative(1), source: Relative(9) }, Jump { location: 25 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 55 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLBjoMgEED/Zc4cBIFafqVpDCo2JAQN1U02xn/fQWRrD00aLzyG4Q1DMgt0ppkftfX98AR1W6AJ1jn7qN3Q6skOHk8XKOJCS1CUAOUJIkFuYBgxRAWqRFxBcQIlAyUQIkGmw8sGThPwikSUCTxBJKAg15VAbqWegjGxk0Nv2PGog/ETKD87R+BHu3m79By13zjpgNmCgPEdEgv21pm4W8nLLj6rXO4uv/zL4mtbZltWJ+yK7XZ1xqZV/ja9Fmf8kmefn/EZze8z9u7fMdKtDW9ztsZKwerGmT3sZ98estPvmDN5TscwtKabg4mVDsOK600URIj7Gl/7Aw==",
  "file_map": {
    "50": {
      "source": "unconstrained fn main() {\n    let mut count = 0;\n\n    for i in 0..10 {\n        if i == 2 {\n            continue;\n        }\n        if i == 5 {\n            break;\n        }\n        count += 1;\n    }\n\n    assert(count == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
