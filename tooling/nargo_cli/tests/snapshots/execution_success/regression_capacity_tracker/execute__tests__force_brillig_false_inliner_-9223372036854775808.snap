---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9Va23LaMBBdA2kSaNK0ISFQQ0wLaZvyYIEB+y3f0TeYmJf+Zvsb/ZZKIKUaWaQz+OwM3pmd9Y3l7O7RWrId0E4mUh/1dl1qTeqN3g/0vjrekHoi9Y3UU6lnUs+lNqW2pL6VeiH1Uuo7qVdS30v9IPVaatvya0tN2ydtZ/EiSfLlNBczsYqn2Tqdx8l8vUhFKubp/HmazmZ5mqTLbJ0t40wks1xs5tlsE+/E9hWXExHgfMUNJ15bAicHcTkRQF+xB25Z38Js2Lm41bZjElLXVp344xxTF0UOqDpjEg8k5VSTUtwSjuAd4ikueiAiY77zxHyoT5tHd5pbDb0fUFECxrwgYjHS5QTc9RCkLPgu4QZrj7B3EI4c9mh/pz/Uf4+wzWBfjQ8U0dFxI+vcQ+LcbCVH8ucjsCZ2s1J+I9o1K7tWtqB5C7jZmLv9ygOXZSYRats3CTEJDOlflzfH+vT/mQQyiWVnEiEQVx9Y3KpNb/W4Fx64LKQcaHtvEmIIOKAiKdVFkQPqmKe3A8KR8h5cXDT5QqtmBIx7QNg7ORqf8hEy8zAuJytkc4wAvvIdEZeqEfgaIyjul2UcmutRBTAOkRjrmuD2gyquB2AcjWlIuHX8jrzZM3JQfYLFu0hMXVxB5ZOrThEd/6DC1cl5gIi+K30GAmUmFFuxkDngwjhCYqzoWmNNeHJ51xpjbR9MQsy6YkzFtYa6KHJAHfNaY0y47vEALi66u4VWMYH18K4P4nKyrXHIkIMvhO3wVZyHI3PAhfErGiPHYFIgsc1tkYRMSSwb7zeqzMBhm2tXYeAg60RV7XBVmMM+MmDcCvrNO3LF/p2woxz9glH5QMarfI0YcI6AGCdgIqJjVTkEDhahODghnkfaqDwqbGZdyvn5nO8LFbvh37wcu7r88evnb/u64Z5z5vdn2p5r27TiqONyNTX+Wzz+41MqStPabpE/fw3P74I9+zXHvnbta18VXXjOGZ/X2tp4TRznjrU5B8ylMP7bPP69tbKfkredOO18P4EwGH9mZXBCRak558y17pgJ8PgK76jrnv8yYjjTto6ZfP4Fmc4JH/MrAAA=",
  "debug_symbols": "pZTbjoMgEED/hWcfGO72VzabhlramBA1VJtsmv77jjD28rDJhr7MUeEMMlxu7BgOy3nfD6fxwnZfN3ZIfYz9eR/Hzs/9OODX271h2+t+TiHgJ/bSjtbkUxhmthuWGBt29XHJnS6THzJnn7CVNywMRyQmPPUxrE/35mnzv1UpFclSuYeu/+9b2PxWVfhKWPKVqBlfgXr47We+ggrfaE2+sfxDX9f4bUu+BVHhWzAPv6Z+xj19WTO+2dbfVtXPKrH5pmb/WbfVz4F587/xzXd9ejuxjLMdDgjYpWECp98wmaPKUedocrQ5uhzbHIEXQEHRAX0sAagCXWAKMAf+HriCNkPwAijALIDzE5KoiJpoiJboiJgM8OhKTgSiIErimg9nLDXREC3REdtCxYlrvnVDXH3q/SEGuu9Oy9C9XH/zz7S1bBfklMYuHJcU1sLnNlyKXw==",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[expected - 10] = 100;\n    } else {\n        hasher_slice[expected] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
