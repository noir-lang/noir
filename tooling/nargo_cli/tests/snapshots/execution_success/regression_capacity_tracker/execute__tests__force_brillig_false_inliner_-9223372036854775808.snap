---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 87",
    "private parameters indices : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]",
    "public parameters indices : [0]",
    "return value indices : []",
    "INIT (id: 2, len: 21, witnesses: [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (-1, _22) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _23) 0 ]) ",
    "EXPR [ (-1, _0) (1, _23) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 222)] []",
    "BLACKBOX::RANGE [(_25, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _24) (-1, _25) 0 ]",
    "EXPR [ (-1, _24) (-1, _26) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_26, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(24))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(27))]",
    "EXPR [ (-1, _24, _27) (5096253676302562286669017222071363378443840053029366383258766538131, _27) (1, _28) -1 ]",
    "EXPR [ (-1, _24, _28) (5096253676302562286669017222071363378443840053029366383258766538131, _28) 0 ]",
    "EXPR [ (-1, _25, _28) (4026531840, _28) (-1, _29) 0 ]",
    "BLACKBOX::RANGE [(_29, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(25))], q_c: 4294967306 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(30)), Simple(Witness(31))]",
    "BLACKBOX::RANGE [(_30, 1)] []",
    "BLACKBOX::RANGE [(_31, 32)] []",
    "EXPR [ (-1, _25) (-4294967296, _30) (-1, _31) 4294967306 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967265 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(32)), Simple(Witness(33))]",
    "BLACKBOX::RANGE [(_32, 1)] []",
    "BLACKBOX::RANGE [(_33, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _32) (-1, _33) 4294967265 ]",
    "EXPR [ (1, _30, _32) (-1, _32) 0 ]",
    "EXPR [ (-1, _0, _30) (1, _0) (10, _30) (-1, _34) -10 ]",
    "MEM (id: 2, read at: EXPR [ (1, _34) 0 ], value: EXPR [ (1, _35) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _36) 0 ]) ",
    "EXPR [ (-1, _37) 1 ]",
    "MEM (id: 2, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _38) 0 ]) ",
    "EXPR [ (-1, _39) 2 ]",
    "MEM (id: 2, read at: EXPR [ (1, _39) 0 ], value: EXPR [ (1, _40) 0 ]) ",
    "EXPR [ (-1, _41) 3 ]",
    "MEM (id: 2, read at: EXPR [ (1, _41) 0 ], value: EXPR [ (1, _42) 0 ]) ",
    "EXPR [ (-1, _43) 4 ]",
    "MEM (id: 2, read at: EXPR [ (1, _43) 0 ], value: EXPR [ (1, _44) 0 ]) ",
    "EXPR [ (-1, _45) 5 ]",
    "MEM (id: 2, read at: EXPR [ (1, _45) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "EXPR [ (-1, _47) 6 ]",
    "MEM (id: 2, read at: EXPR [ (1, _47) 0 ], value: EXPR [ (1, _48) 0 ]) ",
    "EXPR [ (-1, _49) 7 ]",
    "MEM (id: 2, read at: EXPR [ (1, _49) 0 ], value: EXPR [ (1, _50) 0 ]) ",
    "EXPR [ (-1, _51) 8 ]",
    "MEM (id: 2, read at: EXPR [ (1, _51) 0 ], value: EXPR [ (1, _52) 0 ]) ",
    "EXPR [ (-1, _53) 9 ]",
    "MEM (id: 2, read at: EXPR [ (1, _53) 0 ], value: EXPR [ (1, _54) 0 ]) ",
    "EXPR [ (-1, _55) 10 ]",
    "MEM (id: 2, read at: EXPR [ (1, _55) 0 ], value: EXPR [ (1, _56) 0 ]) ",
    "EXPR [ (-1, _57) 11 ]",
    "MEM (id: 2, read at: EXPR [ (1, _57) 0 ], value: EXPR [ (1, _58) 0 ]) ",
    "EXPR [ (-1, _59) 12 ]",
    "MEM (id: 2, read at: EXPR [ (1, _59) 0 ], value: EXPR [ (1, _60) 0 ]) ",
    "EXPR [ (-1, _61) 13 ]",
    "MEM (id: 2, read at: EXPR [ (1, _61) 0 ], value: EXPR [ (1, _62) 0 ]) ",
    "EXPR [ (-1, _63) 14 ]",
    "MEM (id: 2, read at: EXPR [ (1, _63) 0 ], value: EXPR [ (1, _64) 0 ]) ",
    "EXPR [ (-1, _65) 15 ]",
    "MEM (id: 2, read at: EXPR [ (1, _65) 0 ], value: EXPR [ (1, _66) 0 ]) ",
    "EXPR [ (-1, _67) 16 ]",
    "MEM (id: 2, read at: EXPR [ (1, _67) 0 ], value: EXPR [ (1, _68) 0 ]) ",
    "EXPR [ (-1, _69) 17 ]",
    "MEM (id: 2, read at: EXPR [ (1, _69) 0 ], value: EXPR [ (1, _70) 0 ]) ",
    "EXPR [ (-1, _71) 18 ]",
    "MEM (id: 2, read at: EXPR [ (1, _71) 0 ], value: EXPR [ (1, _72) 0 ]) ",
    "EXPR [ (-1, _73) 19 ]",
    "MEM (id: 2, read at: EXPR [ (1, _73) 0 ], value: EXPR [ (1, _74) 0 ]) ",
    "EXPR [ (-1, _75) 20 ]",
    "MEM (id: 2, read at: EXPR [ (1, _75) 0 ], value: EXPR [ (1, _76) 0 ]) ",
    "INIT (id: 3, len: 21, witnesses: [_36, _38, _40, _42, _44, _46, _48, _50, _52, _54, _56, _58, _60, _62, _64, _66, _68, _70, _72, _74, _76])",
    "EXPR [ (1, _30, _35) (-100, _30) (-1, _77) 100 ]",
    "MEM (id: 3, write EXPR [ (1, _77) 0 ] at: EXPR [ (1, _34) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _78) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _79) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967275 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(80)), Simple(Witness(81))]",
    "BLACKBOX::RANGE [(_80, 1)] []",
    "BLACKBOX::RANGE [(_81, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _80) (-1, _81) 4294967275 ]",
    "EXPR [ (-1, _30, _80) 0 ]",
    "EXPR [ (1, _0, _30) (-1, _82) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _82) 0 ], value: EXPR [ (1, _83) 0 ]) ",
    "EXPR [ (-1, _30, _83) (100, _30) (1, _83) (-1, _84) 0 ]",
    "MEM (id: 2, write EXPR [ (1, _84) 0 ] at: EXPR [ (1, _82) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _85) 0 ]) ",
    "EXPR [ (-1, _30) (-1, _86) 1 ]",
    "EXPR [ (-1, _30, _78) (1, _30, _79) (1, _78) (-1, _87) 0 ]",
    "EXPR [ (1, _30, _85) (1, _86, _87) (-1, _0) 0 ]",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    ""
  ],
  "debug_symbols": "ldjRioJAFIDhd5nrLhznnDNjr7Isi5WFIBZmC0v07muhbGtC/HeeGb65+REcr25XbS6Hr7rdH89u/XF1zXFb9vWxHaaryx5L51PZ3qdzX3a9W4foV65qd8NTIbeV29dN5daa3T5Xzi8B8TICyYsZyCkIb4D4GZAlYKojsJjNgFJgFEQKEgUFBT7DwmORYxGwwLn92946F4ZFxCJhsdg8ehtF9C/vXoaFxyLHImCx3Dz9iTAXioVhEbFIWBRUhAwLj0WORcACNw+4ecDNA24ecPOAmwtuLri54OaCmwtuLri54OaCmwtuLri54uaKmyturri54uaKmyturri54uaKmxtubri54eaGmxtubri54eaGmxtubrh5xM0jbh6Xv+EsTuL1ghOwECwUC8NisXmUfBI2vwDHhEVBRcqw8FjkWAQslpunYhTJ2z8xDJuubpr68PX8l2JY/i67utw01TjuL+32abf/OU07kz91x221u3TV/aTH3nD8Lw==",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[expected - 10] = 100;\n    } else {\n        hasher_slice[expected] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
