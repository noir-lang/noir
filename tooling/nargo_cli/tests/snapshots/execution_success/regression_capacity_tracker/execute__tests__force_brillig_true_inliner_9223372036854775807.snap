---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1aPY/bRhBdSkvxQ9aJZ98VAdIl6aWTdHflFUmfLmVAy7kqVdo0RNIkQPogRerkB6RKZxhwYbh2Z9g/xR7fzulxOKRke9fGAl7gsFzOcN7b2dnZIXWJuWmnr/8Sd21dPzbdxjpXrl+8X1t6tLUIyTPxyJNsnQT26yiAX31zHEfA0UbAMY2A4yQCjlkEHPMIOBYRcCwj4DiNgOOdCDjOIuB4FAHHeQQcqwg4HkfA8W4EHO9FwPEkAo6nATi+aadAmF5IqOCngpoKVioIqeCigoYKBjqQ6cCjA4USNiVESji0oWnDUEDSgp+Y9suq1lj20vWF60cg9/jysSwErk/7l4tNXSjz88h/VTibNoj95TnbT8PwX2TOztfNzj7OhXFnboyxw8+wbASyb5ysAM7+13cd2D/L9Uz4xIAPGHsSBnuTCDwj/GgEfmlCxuLNhxzEYz7SPxwHM9Zp2nxQZpvuPFiWgozXl3LeZ6AnY8uC3pdw/ZW75jULmW9wL/jer/cU/ohFLWvMbWPfjOEe+5X9nKO+kBUgs00bp3RjCzhoi3mkQv8LN567fgLP8POVgj8R+C3eyj3pl0LRLxR9isPP3fXU/VEM/crPmKD7fs3rix+Tx6a790aCTx6Ez2LFfDLT9p/0AePzvkxBP+np2ZaUMVZpgp5/y6G5pYqvK6EvfdBnK3tLWx9zTdHXuZhbruiPlblpuT8XMguyTMgw97NPhnI/62q9Md0YQ65z011H9kFhumvkM59Lv3Iu7YuLkemuC65JKu5duZ7Gv8Mzfee4ll8q040LGaehc2F+IFct7nAtqdkmBNebD8x/AI8EMKnhuUuyEmR8tlVChud7ZUyn3ilgbiHrjkT4MjW7dUDMfICP8ejrVPD51vWE/0hwCHR23OZQXMexWBfE1/IMPovj1OhnC8pY9zsx32mY+S7ugl0jsMamG7eyxh7vmb9mQ+aVsPlmUSdiXuke3pKP8cblfJ0KLj+6nrC+Fz6zA36XZ33a81wOctTfuh73lpZnC9B7DHqYB6jZpu27j1HjaDlr6KzBs5h9VinPT4QMczW+X/xs2j7A9+crP/OvjcJdxocV88R4kDXP+8bRT67/FEf+42hu9PMf+dg9/OU5pX1XkRzSHiyUse4vrg/7zVQ/pxhrasLWgReXN7XSGx83Oz9o/xBmQY76v7kxnoM4j6t35Hl9US+vV/V1vakfPFhva+knaiPwk2/8+mJ1uT1bby/ub1b16nwvPn8fan3PatrPTFEmdNAe28LvQ9MDbE0HbBUDtsoDbQ1hI1cr7N9x40mP/ULoz9wYv9VlCp9U2P/T7HD+FTps8y/Q+ZtlrNvsMOTaHaFM0cf3HqnPcyXMf9w93tdzwPF9DvTxxlhgfM0HSU+PtvAeY5XClue5LX2uyZCtowNtsT9xfen6P5a7PtBan8k58G+wOE/EZz5VGD63sTcHbM2njO8j9hjrQ8WeNreh2EN9GXuarfmBttifWrzNwvhgJfO66fEB4uMY9dGGFfpHgj+1od9MND8iJtqjVin65YA+j7FGQhslyFH/IfNz/TE8w89ra3vcwzfpwe/zB+prcUWx87+75r2Iv3PxGoWos7ab8/vb9aZe/LCk4dmhddbQWc3csX7Q9mYq9J/w+PXfU9P2h226eKT3wt27fQ8ELiFy/L7fSxlfq0f5OjDX1RDXTOGq+fht83/WtO9pv5+inzKB3aqBhQzPUCtweG9grKEt5iFr1edurNX6/Hyl4OOaSSwN/5DaXav1KbafsT3X22Zny+eZivuI9vgrkOi18K00AAA=",
  "debug_symbols": "ldjbiuowFIDhd+l1L3JaK4mvstkMHupQKFWqbtiI7z6t2JmhDch/I430g5A/6UXu1aHZ3T4/2v54ulSbP/eqO+231/bUj6P7o652Q9t17efH778rM/349Hz/ct720/By3Q7XauN9qKumP4xPIY3+2HZNtRHz+FtXPlMRDBYWC4eFxyJgIVgoFhEL3Dzg5oKbC24uuLng5oKbC24uuLng5oKbC26uuLni5oqbK26uuLni5lpuHu0scliKiEXCIlMRDRYWC4eFxyJgUWweXHyJ4JbNo2IRsUhYZCpSsXmw4VvkpbBYOCz8GxHsUgQsBAvFothcRV5Co1mKhEWmIpt3QpbCYlFc3ajzTozrWSkWEYuERXF1Y3Cz0OW3xBrDieXEceI5CZwIJ8pJ+ZzkPBPrViRjYssprX6TvCKWE8eJ56SYUtMP8SsinCgnkZPEScbEGU4sJ/xUuvKpTPNOTmZNhBN9Q6yuSOQkcZIZeYyjf9uh3e665nWJcrz1+193Ktf/52ZxvXIeTvvmcBua6aLl545lOqo2p9o5P05lSuek9jI+Twtsg6ltDs+vzTT0trZen9vvOYzjMI/zGef0BQ==",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[expected - 10] = 100;\n    } else {\n        hasher_slice[expected] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
