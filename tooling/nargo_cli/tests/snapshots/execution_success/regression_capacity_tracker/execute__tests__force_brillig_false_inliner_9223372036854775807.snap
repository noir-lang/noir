---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9Va23LaMBBdY9LcmjRtaC7UISaF9BIeLDBg3vIdfYMJvPQ329/ot1QCbaoRItPisx28MzuLbbGcPbtaWcYRraSn9cF+jrXWtL63x5E9NufrWve0vtK6r/VA66HWI63HWl9rPdF6qvWN1jOtb7W+03quteH4/V+/40rN2kdrB9koz+fj/lwN1DTrT2bFMMuHs1GhCjUshk/9YjCYF3kxnswm42yi8sFcLYaTwSJbiesrKycqwvnK6l68rkQeB1k5UUBfWQBuWd+KP7hcXFh7yYTE1poLv7xzZlDqgYoFSdyyKPu2KNUF4Qr8kmSSi56IyJivAjFv69OtoytbW3V7HNG6RIK8IGJhuZYEfB0okLLgrwk3WZuEXUEkOGzS5k6/rf8mYZsBOu5LG/em2vlXYb/IfH8Acug2F+O3TavmQvR3K/8OLA68Ok8DcEVW/sTaGyaECUzoT1fmc2ZQ6oGKBUksu/InQFw3wORW7XZ0sZS5CsAVKcqWtbdMCBdgi9aL0gxKPVC7fDvaIlxR3oKTiy6+xMkZAeNu0W6vvMZHIlyHWTmZIptjCvA1XxXi2DSCUGMExf287ULXeloBjG0kxtgWuPtgSeqBlURjahNu370q3skTclLdweId5ZwXX1B8SuUppd2fVLg8eQ/80KvSRyBQ4YISSxaSAymMHSTGiu41ZoQvruBeo2vtPRPC+4oure81zKDUA7XLe40u4brHPTi56O6WOMkE5iO4P8jKyTLHiQAHnwjb4at4H47kQArjZzRGiclkQGKb2yhPhEgsG+8XqszEEbvXrsLEQeaJqtrhqnAP+1UA41LQ/5Qjd+wPhJ3lqD/uXJ/IeI2vjgDODhBjD1yI6FgNh8DJokwN9kjmkTaKR4ON96WSr7uF3ihxG/7F87mz028/vv90x91tuMbfP7D20NojJ44Yx1Wf/R/L+M/2aV2OnM/HFOavHvhetOG45tmXxr70FtBJ4Br7PLfWxctxHHrWrTkgl4r9N2T8B3PlPiVveHG6fD+CMLA/3hns0brUvGs81p8zER7f2n/UceC3WLhmGs455vM3lBCJ8wssAAA=",
  "debug_symbols": "pZTbjoMgEED/hWcfHECQ/spm01BLGxOChmqTTdN/3xGGXh422dCXOSqcQYbLjR3dYT3vx3CaLmz3dWOHOHo/nvd+GuwyTgG/3u4NK6/7JTqHn9hLO1qzjS4sbBdW7xt2tX5NnS6zDYmLjdjaNsyFIxITnkbvtqd787Tbv1UhJMlC9g+9+7+vofhGVviSa/Ilrxlfgnz45jNfQoWvuo58pdsP/a7GN4Z8DbzC16Aefk39VP/0Rc34qqy/rqqflrz4qmb/6b7Urwf15n/jmx3G+HZiWct2OCCkyLFjwwQWoWEyxS5FlaJOsU/RpAhtBmTwjOwDJsBKQJehMnQGJsG/BJPA2wzI4BmYBXCaXBI7oiJqYk80mQKTAZ5gAUROFERJ3PLhlIUiamJPNJmyJQJxy7fti6uNoz14R9feaQ3Dyy24/MylpdyTc5wGd1yj2+qf2nBFfgE=",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[expected - 10] = 100;\n    } else {\n        hasher_slice[expected] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
