---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _129",
    "private parameters indices : [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]",
    "public parameters indices : [_0]",
    "return value indices : []",
    "INIT (id: 2, len: 21, witnesses: [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (-1, _0) (1, _1) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 222)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _22) (-1, _23) 0 ]",
    "EXPR [ (-1, _22) (-1, _24) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_24, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(22))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(25))]",
    "EXPR [ (-1, _22, _25) (5096253676302562286669017222071363378443840053029366383258766538131, _25) (1, _26) -1 ]",
    "EXPR [ (-1, _22, _26) (5096253676302562286669017222071363378443840053029366383258766538131, _26) 0 ]",
    "EXPR [ (1, _23, _26) (268435455, _26) (-1, _27) 0 ]",
    "BLACKBOX::RANGE [(_27, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(23))], q_c: 4294967306 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [(_28, 1)] []",
    "BLACKBOX::RANGE [(_29, 32)] []",
    "EXPR [ (-1, _23) (-4294967296, _28) (-1, _29) 4294967306 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -10 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(30)), Simple(Witness(31))]",
    "BLACKBOX::RANGE [(_30, 222)] []",
    "BLACKBOX::RANGE [(_31, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _30) (-1, _31) -10 ]",
    "EXPR [ (-1, _30) (-1, _32) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_32, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(30))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(33))]",
    "EXPR [ (-1, _30, _33) (5096253676302562286669017222071363378443840053029366383258766538131, _33) (1, _34) -1 ]",
    "EXPR [ (-1, _30, _34) (5096253676302562286669017222071363378443840053029366383258766538131, _34) 0 ]",
    "EXPR [ (1, _31, _34) (268435455, _34) (-1, _35) 0 ]",
    "BLACKBOX::RANGE [(_35, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 4294967275 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 32)] []",
    "EXPR [ (1, _31) (-4294967296, _36) (-1, _37) 4294967275 ]",
    "EXPR [ (1, _28, _36) (-1, _36) 0 ]",
    "EXPR [ (-1, _28, _31) (1, _31) (-1, _38) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _38) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "INIT (id: 3, len: 21, witnesses: [_0, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (1, _28, _39) (-100, _28) (-1, _40) 100 ]",
    "MEM (id: 3, write EXPR [ (1, _40) 0 ] at: EXPR [ (1, _38) 0 ]) ",
    "EXPR [ (-1, _41) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _41) 0 ], value: EXPR [ (1, _42) 0 ]) ",
    "EXPR [ (-1, _28) (-1, _43) 1 ]",
    "MEM (id: 3, read at: EXPR [ (1, _43) 0 ], value: EXPR [ (1, _44) 0 ]) ",
    "EXPR [ (-2, _28) (-1, _45) 2 ]",
    "MEM (id: 3, read at: EXPR [ (1, _45) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "EXPR [ (-3, _28) (-1, _47) 3 ]",
    "MEM (id: 3, read at: EXPR [ (1, _47) 0 ], value: EXPR [ (1, _48) 0 ]) ",
    "EXPR [ (-4, _28) (-1, _49) 4 ]",
    "MEM (id: 3, read at: EXPR [ (1, _49) 0 ], value: EXPR [ (1, _50) 0 ]) ",
    "EXPR [ (-5, _28) (-1, _51) 5 ]",
    "MEM (id: 3, read at: EXPR [ (1, _51) 0 ], value: EXPR [ (1, _52) 0 ]) ",
    "EXPR [ (-6, _28) (-1, _53) 6 ]",
    "MEM (id: 3, read at: EXPR [ (1, _53) 0 ], value: EXPR [ (1, _54) 0 ]) ",
    "EXPR [ (-7, _28) (-1, _55) 7 ]",
    "MEM (id: 3, read at: EXPR [ (1, _55) 0 ], value: EXPR [ (1, _56) 0 ]) ",
    "EXPR [ (-8, _28) (-1, _57) 8 ]",
    "MEM (id: 3, read at: EXPR [ (1, _57) 0 ], value: EXPR [ (1, _58) 0 ]) ",
    "EXPR [ (-9, _28) (-1, _59) 9 ]",
    "MEM (id: 3, read at: EXPR [ (1, _59) 0 ], value: EXPR [ (1, _60) 0 ]) ",
    "EXPR [ (-10, _28) (-1, _61) 10 ]",
    "MEM (id: 3, read at: EXPR [ (1, _61) 0 ], value: EXPR [ (1, _62) 0 ]) ",
    "EXPR [ (-11, _28) (-1, _63) 11 ]",
    "MEM (id: 3, read at: EXPR [ (1, _63) 0 ], value: EXPR [ (1, _64) 0 ]) ",
    "EXPR [ (-12, _28) (-1, _65) 12 ]",
    "MEM (id: 3, read at: EXPR [ (1, _65) 0 ], value: EXPR [ (1, _66) 0 ]) ",
    "EXPR [ (-13, _28) (-1, _67) 13 ]",
    "MEM (id: 3, read at: EXPR [ (1, _67) 0 ], value: EXPR [ (1, _68) 0 ]) ",
    "EXPR [ (-14, _28) (-1, _69) 14 ]",
    "MEM (id: 3, read at: EXPR [ (1, _69) 0 ], value: EXPR [ (1, _70) 0 ]) ",
    "EXPR [ (-15, _28) (-1, _71) 15 ]",
    "MEM (id: 3, read at: EXPR [ (1, _71) 0 ], value: EXPR [ (1, _72) 0 ]) ",
    "EXPR [ (-16, _28) (-1, _73) 16 ]",
    "MEM (id: 3, read at: EXPR [ (1, _73) 0 ], value: EXPR [ (1, _74) 0 ]) ",
    "EXPR [ (-17, _28) (-1, _75) 17 ]",
    "MEM (id: 3, read at: EXPR [ (1, _75) 0 ], value: EXPR [ (1, _76) 0 ]) ",
    "EXPR [ (-18, _28) (-1, _77) 18 ]",
    "MEM (id: 3, read at: EXPR [ (1, _77) 0 ], value: EXPR [ (1, _78) 0 ]) ",
    "EXPR [ (-19, _28) (-1, _79) 19 ]",
    "MEM (id: 3, read at: EXPR [ (1, _79) 0 ], value: EXPR [ (1, _80) 0 ]) ",
    "EXPR [ (-20, _28) (-1, _81) 20 ]",
    "MEM (id: 3, read at: EXPR [ (1, _81) 0 ], value: EXPR [ (1, _82) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 4294967275 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(83)), Simple(Witness(84))]",
    "BLACKBOX::RANGE [(_83, 1)] []",
    "BLACKBOX::RANGE [(_84, 32)] []",
    "EXPR [ (1, _23) (-4294967296, _83) (-1, _84) 4294967275 ]",
    "EXPR [ (-1, _28, _83) 0 ]",
    "EXPR [ (1, _23, _28) (-1, _85) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _85) 0 ], value: EXPR [ (1, _86) 0 ]) ",
    "EXPR [ (-1, _28, _86) (100, _28) (1, _86) (-1, _87) 0 ]",
    "MEM (id: 2, write EXPR [ (1, _87) 0 ] at: EXPR [ (1, _85) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _41) 0 ], value: EXPR [ (1, _88) 0 ]) ",
    "EXPR [ (-1, _28) (-1, _89) 1 ]",
    "EXPR [ (1, _0, _28) (-1, _28, _42) (1, _42) (-1, _90) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _28) 0 ], value: EXPR [ (1, _91) 0 ]) ",
    "EXPR [ (2, _28) (-1, _92) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _92) 0 ], value: EXPR [ (1, _93) 0 ]) ",
    "EXPR [ (3, _28) (-1, _94) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _94) 0 ], value: EXPR [ (1, _95) 0 ]) ",
    "EXPR [ (4, _28) (-1, _96) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _96) 0 ], value: EXPR [ (1, _97) 0 ]) ",
    "EXPR [ (5, _28) (-1, _98) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _98) 0 ], value: EXPR [ (1, _99) 0 ]) ",
    "EXPR [ (6, _28) (-1, _100) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _100) 0 ], value: EXPR [ (1, _101) 0 ]) ",
    "EXPR [ (7, _28) (-1, _102) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _102) 0 ], value: EXPR [ (1, _103) 0 ]) ",
    "EXPR [ (8, _28) (-1, _104) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _104) 0 ], value: EXPR [ (1, _105) 0 ]) ",
    "EXPR [ (9, _28) (-1, _106) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _106) 0 ], value: EXPR [ (1, _107) 0 ]) ",
    "EXPR [ (10, _28) (-1, _108) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _108) 0 ], value: EXPR [ (1, _109) 0 ]) ",
    "EXPR [ (11, _28) (-1, _110) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _110) 0 ], value: EXPR [ (1, _111) 0 ]) ",
    "EXPR [ (12, _28) (-1, _112) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _112) 0 ], value: EXPR [ (1, _113) 0 ]) ",
    "EXPR [ (13, _28) (-1, _114) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _114) 0 ], value: EXPR [ (1, _115) 0 ]) ",
    "EXPR [ (14, _28) (-1, _116) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _116) 0 ], value: EXPR [ (1, _117) 0 ]) ",
    "EXPR [ (15, _28) (-1, _118) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _118) 0 ], value: EXPR [ (1, _119) 0 ]) ",
    "EXPR [ (16, _28) (-1, _120) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _120) 0 ], value: EXPR [ (1, _121) 0 ]) ",
    "EXPR [ (17, _28) (-1, _122) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _122) 0 ], value: EXPR [ (1, _123) 0 ]) ",
    "EXPR [ (18, _28) (-1, _124) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _124) 0 ], value: EXPR [ (1, _125) 0 ]) ",
    "EXPR [ (19, _28) (-1, _126) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _126) 0 ], value: EXPR [ (1, _127) 0 ]) ",
    "EXPR [ (20, _28) (-1, _128) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _128) 0 ], value: EXPR [ (1, _129) 0 ]) ",
    "EXPR [ (1, _28, _88) (1, _89, _90) (-1, _0) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZbNbqswEIXfxWsWnvH4L69ydRWRhFRIiEQ0qXQV9d2vY5+h7aJSRTfzDZjzEXAMPMxpONxf9uN8vrya3Z+HOSzjNI0v++ly7G/jZS57H++d0c39bRmGsst8Gi+pa78M883s5vs0deatn+71oNdrP1fe+qWM2s4M86mwCM/jNDy79+4jbb+POicIO0lr3P88H0nzWTbkhSPywlvOLyRrPv8uL7QhH7xHPkT7y7zfkI9WJz+S23L+nDXPW64/sl/zW+YvpLDmecv5k9N8Clvyntb8lvlLVq8/ua+//2/Z6o/j8mXFG2t23Bkqh3SGy+V3xtUqtfpaQ62x1lRrrpVsAzW0OJV8WUIkDb4hNBRHmV5KDbmCbQM1cINrkAbfEBqahYuFyp3g3OgsSCCDRUXlpjoBPRjACCYwN4oFCWQQPoFP4BP4BD6BT+Dz8Hn4PHwePg+fh8/D5+Hz8Hn4AnwBvgBfgC/AF+AL8AX4AnwBvghfhC/CF+GL8EX4InwRvghfhC89feW/lQhk0IECPn1l0aQARjCBuTFbkEAGHSggfBm+DF+GL8NH1mpD2rA2ThvRxmsTtInaJG3UTGomNZOaSc2kZlIzqZnUTGomNbOaWc2sZlYzq5nVzGpmNbOaWc1OzXX9PF+db/0y9odpwJfB+T4fP30o3P5ddUQ/Ja7L5Tic7svwfMTUsfLQ+Q8=",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[(expected - 10) as u32] = 100;\n    } else {\n        hasher_slice[expected as u32] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
