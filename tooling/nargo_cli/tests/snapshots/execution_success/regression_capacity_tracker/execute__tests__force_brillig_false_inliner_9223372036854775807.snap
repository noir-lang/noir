---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9Va23LaMBBdY9LcmjRtyI06xLSQtikPFhgwb/mOvsEEXvqb7W/0WyqBNtUIkWnw2Rm8MzuLbbGcPbtaWcYRraSn9cF+jrXWtF7Y48gem/N1rXta32jd13qg9VDrkdZjrW+1nmg91fpO65nW91o/aD3X2nD8ulKz9tHaQTbK8/m4P1cDNc36k1kxzPLhbFSoQg2L4VO/GAzmRV6MJ7PJOJuofDBXi+FksMhW4vrKyomKcL6yuhevK5HHQVZOFNBXFoBb1rfiDy4Xl9ZeMSGxtebCH++cGZR6oGJBErcsyr4tSnVJuAK/IpnkoiciMubrQMzb+nTr6NrWVt0eR7QukSAviFhYbiQB3wQKpCz4G8JN1iZhVxAJDpu0udNv679J2GaAjvvKxr2pdl4r7BeZ749ADt3mYvy2adVciP5v5d+BxYFX52kArsjKn1h7y4QwgQn968p8zgxKPVCxIIllV/4EiOsWmNyq3Y4uljJXAbgiRdmy9o4J4QJs0XpRmkGpB2qXb0dbhCvKO3By0cWXODkjYNwt2u2V1/hIhOswKydTZHNMAb7mq0Icm0YQaoyguJ+3XehaTyuAsY3EGNsCdx8sST2wkmhMbcLtu1fFO3lCTqpPsHhHOefFFxSfUnlKafcnFS5P3gM/9Kr0GQhUuKDEkoXkQApjB4mxonuNGeGLK7jX6Fp7z4TwvqJL63sNMyj1QO3yXqNLuO5xD04uurslTjKB+QjuD7JyssxxIsDBF8J2+CrehyM5kML4FY1RYjIZkNjmNsoTIRLLxvuNKjNxxO61qzBxkHmiqna4KtzDPghgXAr6n3Lkjv07YWc56o871ycyXuOrI4CzA8TYAxciOlbDIXCyKFODPZJ5pI3i0WDjfank626hN0rchn/xfO7s9Mevn7/dce0N1/j7B9YeWnvkxBHjuOqz/2MZ/9k+rcuR8/mYwvzVA9+LNhzXPPvS2JfeAjoJXGOf59a6eDmOQ8+6NQfkUrH/hoz/YK7cp+QNL06X70cQBvbHO4M9Wpead43H+nMmwuNb+486DvwWC9dMwznHfP4F9G5wVqMrAAA=",
  "debug_symbols": "pZTbisMgEED/xec8eNf0V5al2NSWgJhgk8JS+u87cbTbPiwU+zInUc/IeLuRoz+s5/0YT9OF7L5u5JDGEMbzPkyDW8YpQuvt3pH6u1+S99BEnvrBml3ycSG7uIbQkasLax50mV3MXFyCXtoRH49ASHgag9++7t2fTf9XhZBFFtI+dPW+b1j1e9ngS26KL3nL/JLJh99/5kvW4Guliq8N/dBXLX7fF98w3uJb/fBFg2903T/TVL+RvPq65fwYW+u3TL/43/DnhjG93DhCyQ4mZDCkIxzK74jIUeaoctQ5mhxtjn2OjCIYAnUGPiwBkwiF0AjIYQEW0WdwimAIyAIVcIGQCIXQCIOwCMjCYEEELWSFvFAUQioGd1OoQl1oCm1hj5S0cMu3naSrS6M7BF8eqtMah6d3a/mZa0992eY0Df64Jr+teO6DPfgF",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[expected - 10] = 100;\n    } else {\n        hasher_slice[expected] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
