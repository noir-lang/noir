---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _50",
    "private parameters indices : [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]",
    "public parameters indices : [_0]",
    "return value indices : []",
    "INIT (id: 2, len: 21, witnesses: [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (-1, _0) (1, _1) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [_22]:222 bits []",
    "BLACKBOX::RANGE [_23]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _22) (-1, _23) 0 ]",
    "EXPR [ (-1, _22) (-1, _24) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [_24]:222 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(22))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(25))]",
    "EXPR [ (-1, _22, _25) (5096253676302562286669017222071363378443840053029366383258766538131, _25) (1, _26) -1 ]",
    "EXPR [ (-1, _22, _26) (5096253676302562286669017222071363378443840053029366383258766538131, _26) 0 ]",
    "EXPR [ (1, _23, _26) (1, _26, _26) (268435454, _26) (-1, _27) 0 ]",
    "BLACKBOX::RANGE [_27]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(23))], q_c: 4294967306 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [_28]:1 bits []",
    "BLACKBOX::RANGE [_29]:32 bits []",
    "EXPR [ (-1, _23) (-4294967296, _28) (-1, _29) 4294967306 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -10 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(30)), Simple(Witness(31))]",
    "BLACKBOX::RANGE [_30]:222 bits []",
    "BLACKBOX::RANGE [_31]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _30) (-1, _31) -10 ]",
    "EXPR [ (-1, _30) (-1, _32) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [_32]:222 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(30))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(33))]",
    "EXPR [ (-1, _30, _33) (5096253676302562286669017222071363378443840053029366383258766538131, _33) (1, _34) -1 ]",
    "EXPR [ (-1, _30, _34) (5096253676302562286669017222071363378443840053029366383258766538131, _34) 0 ]",
    "EXPR [ (1, _31, _34) (1, _34, _34) (268435454, _34) (-1, _35) 0 ]",
    "BLACKBOX::RANGE [_35]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 4294967275 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [_36]:1 bits []",
    "BLACKBOX::RANGE [_37]:32 bits []",
    "EXPR [ (1, _31) (-4294967296, _36) (-1, _37) 4294967275 ]",
    "EXPR [ (1, _28, _36) (-1, _36) 0 ]",
    "EXPR [ (-1, _28, _31) (1, _31) (-1, _38) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _38) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "INIT (id: 3, len: 21, witnesses: [_0, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (1, _28, _39) (-100, _28) (-1, _40) 100 ]",
    "MEM (id: 3, write EXPR [ (1, _40) 0 ] at: EXPR [ (1, _38) 0 ]) ",
    "EXPR [ (-1, _41) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _41) 0 ], value: EXPR [ (1, _42) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 4294967275 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(43)), Simple(Witness(44))]",
    "BLACKBOX::RANGE [_43]:1 bits []",
    "BLACKBOX::RANGE [_44]:32 bits []",
    "EXPR [ (1, _23) (-4294967296, _43) (-1, _44) 4294967275 ]",
    "EXPR [ (-1, _28, _43) 0 ]",
    "EXPR [ (1, _23, _28) (-1, _45) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _45) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "EXPR [ (-1, _28, _46) (100, _28) (1, _46) (-1, _47) 0 ]",
    "MEM (id: 2, write EXPR [ (1, _47) 0 ] at: EXPR [ (1, _45) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _41) 0 ], value: EXPR [ (1, _48) 0 ]) ",
    "EXPR [ (-1, _28) (-1, _49) 1 ]",
    "EXPR [ (1, _0, _28) (-1, _28, _42) (1, _42) (-1, _50) 0 ]",
    "EXPR [ (1, _28, _48) (1, _49, _50) (-1, _0) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZTbioMwEED/Jc8+ZHJPf2VZirXpIoiK1cJS+u87Zka3fVhY0pc55nImJkNyF+d0Wr6ObX8ZruLwcRenqe269uvYDU09t0OPvfdHJbbmcZ5Swi7xNI7WWE+pn8WhX7quEre6W/Kk61j3mXM94aisROrPSEx4abu0fj2qX1v+rWptWNYm7Lr9v+9h86Mp8I3y7BtVsr4Bs/vxPd9Age+sZd95+aZvC3wvt+J70CXrx7j5qmT/XtndL6mfC273Vcn6QW9+cCW+hd0vqV+Q2/6Dfv3/T2zVTTu93HghxUFVAnBKJRRuvxI6R5OjzdHl6HMMOcYcQRKAQDqgj1cIDMESHAFzYHkhEGKGkgQgKIImGIIlOAJlUZgF8CRUJGrJBKZiYirAQ9WGaZmO6ZmBGYlmzYdnY4CpmJppmGs+LLpxTM8MzEi0kgnMNd/6RN3qqa1PXeIX+LL0zdODPH+P28j2ZI/T0KTzMqW1lHkMi/sD",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[(expected - 10) as u32] = 100;\n    } else {\n        hasher_slice[expected as u32] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
