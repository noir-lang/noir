---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "expected",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "first",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 20,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _44",
    "private parameters indices : [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]",
    "public parameters indices : [_0]",
    "return value indices : []",
    "INIT (id: 2, len: 21, witnesses: [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (-1, _0) (1, _1) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [_22]:222 bits []",
    "BLACKBOX::RANGE [_23]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _22) (-1, _23) 0 ]",
    "EXPR [ (-1, _22) (-1, _24) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [_24]:222 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(22))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(25))]",
    "EXPR [ (-1, _22, _25) (5096253676302562286669017222071363378443840053029366383258766538131, _25) (1, _26) -1 ]",
    "EXPR [ (-1, _22, _26) (5096253676302562286669017222071363378443840053029366383258766538131, _26) 0 ]",
    "EXPR [ (1, _23, _26) (1, _26, _26) (268435454, _26) (-1, _27) 0 ]",
    "BLACKBOX::RANGE [_27]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(23))], q_c: 4294967306 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [_28]:1 bits []",
    "BLACKBOX::RANGE [_29]:32 bits []",
    "EXPR [ (-1, _23) (-4294967296, _28) (-1, _29) 4294967306 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967265 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(30)), Simple(Witness(31))]",
    "BLACKBOX::RANGE [_30]:1 bits []",
    "BLACKBOX::RANGE [_31]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _30) (-1, _31) 4294967265 ]",
    "EXPR [ (1, _28, _30) (-1, _30) 0 ]",
    "EXPR [ (-1, _0, _28) (1, _0) (10, _28) (-1, _32) -10 ]",
    "MEM (id: 2, read at: EXPR [ (1, _32) 0 ], value: EXPR [ (1, _33) 0 ]) ",
    "INIT (id: 3, len: 21, witnesses: [_0, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21])",
    "EXPR [ (1, _28, _33) (-100, _28) (-1, _34) 100 ]",
    "MEM (id: 3, write EXPR [ (1, _34) 0 ] at: EXPR [ (1, _32) 0 ]) ",
    "EXPR [ (-1, _35) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _36) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967275 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(37)), Simple(Witness(38))]",
    "BLACKBOX::RANGE [_37]:1 bits []",
    "BLACKBOX::RANGE [_38]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _37) (-1, _38) 4294967275 ]",
    "EXPR [ (-1, _28, _37) 0 ]",
    "EXPR [ (1, _0, _28) (-1, _39) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _39) 0 ], value: EXPR [ (1, _40) 0 ]) ",
    "EXPR [ (-1, _28, _40) (100, _28) (1, _40) (-1, _41) 0 ]",
    "MEM (id: 2, write EXPR [ (1, _41) 0 ] at: EXPR [ (1, _39) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _42) 0 ]) ",
    "EXPR [ (-1, _28) (-1, _43) 1 ]",
    "EXPR [ (1, _0, _28) (-1, _28, _36) (1, _36) (-1, _44) 0 ]",
    "EXPR [ (1, _28, _42) (1, _43, _44) (-1, _0) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZTbjoMgEED/hWcfGO72VzabhlramBA1VJtsmv77jjD28rDJhr7MUeEMMlxu7BgOy3nfD6fxwnZfN3ZIfYz9eR/Hzs/9OODX271h2+t+TiHgJ/bSjtbkUxhmthuWGBt29XHJnS6THzJnn7CVNywMRyQmPPUxrE/35mnzv1UpFclSuYeu/+9b2PxWVfhKWPKVqBlfgXr47We+ggrfaE2+sfxDX9f4bUu+BVHhWzAPv6Z+xj19WTO+2dbfVtXPKrH5pmb/WbfVz4F587/xzXd9ejuxjLMdDgjYpWECp98wmaPKUedocrQ5uhzbHIEXQEHRAX0sAagCXWAKMAf+HriCNkPwAijALIDzE5KoiJpoiJboiJgM8OhKTgSiIErimg9nLDXREC3REdtCxYlrvnVDXH3q/SEGuu9Oy9C9XH/zz7S1bBfklMYuHJcU1sLnNlyKXw==",
  "file_map": {
    "50": {
      "source": "// Reference https://github.com/noir-lang/noir/issues/4395#issuecomment-2018948631\n// for context.\n// We were not accurately accounting for situations where the slice capacity tracker\n// was expecting a capacity from slice intrinsic results.\nfn main(expected: pub Field, first: Field, input: [Field; 20]) {\n    let mut hasher_slice = input.as_slice();\n    hasher_slice = hasher_slice.push_front(first);\n    assert(hasher_slice[0] == expected);\n    // We need a conditional based upon witnesses\n    // to force a store of the slice.\n    // If this successfully compiles it means we have stored\n    // the results of the slice intrinsics used above.\n    if expected as u32 > 10 {\n        hasher_slice[expected - 10] = 100;\n    } else {\n        hasher_slice[expected] = 100;\n    }\n    assert(hasher_slice[0] == expected);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
