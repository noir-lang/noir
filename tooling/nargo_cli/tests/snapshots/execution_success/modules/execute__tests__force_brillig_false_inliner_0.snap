---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (1, _0, _2) (-1, _1, _2) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "dY/BDoMgDIbfpWcOOreLr7IsBrEakqaQCksWw7uvGt3cYRdK+/P99F9gwD5PnecxzNDeF+jFE/mpo+Bs8oF1uhQDR9slQdQRnHSlohXkBC1nIgNPS3l7NEfLW01WVK0MIA9a1XD0hOutmC9d/Ueby22Hm2vzwW91KQ/trPPyszFU0NYGaj3Laire9oR7ljGzO0VLr3goR/goweGQBVfTTdNv3g==",
  "file_map": {
    "51": {
      "source": "mod foo;\n// This is a comment.\n//\n// `main` is the entry point to a binary\n//\n// You can have a `Binary` or a `Library`\n// Release : 0.2\n//\n// To run a proof on the command line, type `cargo run prove {proof_name}`\n//\n// To verify that proof, type `cargo run verify {proof_name}`\nfn main(x: Field, y: pub Field) {\n    assert(x != foo::hello(y));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
