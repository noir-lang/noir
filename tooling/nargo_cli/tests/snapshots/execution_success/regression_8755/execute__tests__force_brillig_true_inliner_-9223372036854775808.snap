---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : [_0]",
    "BRILLIG CALL func 0: inputs: [], outputs: [Simple(Witness(0))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 12 }, Call { location: 14 }, Mov { destination: Direct(32836), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 0 }, Return, Call { location: 36 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(2), bit_size: Field, value: -292434322542114415011969994633470574393 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(4), source: Relative(3) }, Store { destination_pointer: Relative(4), source: Direct(32835) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 42 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(5) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 41 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 36 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Direct(32835) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Jump { location: 51 }, Load { destination: Relative(4), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 62 }, Jump { location: 55 }, Load { destination: Relative(4), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 60 }, Call { location: 71 }, Store { destination_pointer: Relative(1), source: Relative(5) }, Jump { location: 51 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Load { destination: Relative(3), source_pointer: Relative(4) }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(2), bit_size: Field, value: 157653526363045079447323020681982670581 }, BinaryFieldOp { destination: Relative(3), op: Div, lhs: Relative(2), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(3) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdPNioMwEAfwd8k5h3xH+yqllNSmJRCipLqwFN99x4zZ2sPCYi/+jPE/QwLzJFd/me7nkG79gxyOT3LJIcZwP8e+c2PoE3x9ErY8uCYHTgk3iEUapC0IhnBEIBJRCFYRWEVgFQFVBNAWJEM4IhCJqILClVpXGoGaErBIU9AcgSoK0Aj8qQGLNEhbMAyBgAGgkQUUohGDQLwBIN7MMyX1ys5j9n65sc0dws0OLvs0kkOaYqTky8Wp/PQYXCqOLsMuo8SnKwgFbyH65W2mrzT7O2pqlrNXWv87ruRvXO6I89bWfNvsyAsh1ryQYk++5Wte7jq+FPX80uzpL42pefthf/ve/wQr14X8NpPzUikHd4l+Xd6m1G12x++h7tSZHnLf+euU/VJpM9jwPEpDFT/BJMO8HC2nVp7mpfUP",
  "file_map": {
    "50": {
      "source": "unconstrained fn main() -> pub Field {\n    func_2([(0, &mut -292434322542114415011969994633470574393)])\n}\nunconstrained fn func_2(mut b: [(u32, &mut Field); 1]) -> Field {\n    let mut idx_e: u32 = 0;\n    loop {\n        if idx_e == 1 {\n            break;\n        } else {\n            idx_e = idx_e + 1;\n        }\n    }\n    (157653526363045079447323020681982670581 / *b[0].1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
