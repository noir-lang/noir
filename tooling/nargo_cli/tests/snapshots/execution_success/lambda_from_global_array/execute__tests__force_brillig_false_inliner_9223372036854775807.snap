---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _18",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "EXPR [ (-1, _2) 1 ]",
    "EXPR [ (-1, _3) 2 ]",
    "EXPR [ (-1, _4) 3 ]",
    "EXPR [ (-1, _5) 4 ]",
    "INIT (id: 0, len: 4, witnesses: [_2, _3, _4, _5])",
    "EXPR [ (2, _0) (-1, _6) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _6) 0 ], value: EXPR [ (1, _7) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) -1 ]], outputs: [_8]",
    "EXPR [ (1, _7, _8) (-1, _8) (1, _9) -1 ]",
    "EXPR [ (1, _7, _9) (-1, _9) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) -2 ]], outputs: [_10]",
    "EXPR [ (1, _7, _10) (-2, _10) (1, _11) -1 ]",
    "EXPR [ (1, _7, _11) (-2, _11) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) -3 ]], outputs: [_12]",
    "EXPR [ (1, _7, _12) (-3, _12) (1, _13) -1 ]",
    "EXPR [ (1, _7, _13) (-3, _13) 0 ]",
    "EXPR [ (1, _9, _11) (-1, _9) (-1, _11) (-1, _14) 1 ]",
    "EXPR [ (-1, _13, _14) (1, _14) (-1, _15) 0 ]",
    "EXPR [ (1, _7, _15) (-4, _15) 0 ]",
    "EXPR [ (2, _13, _14) (2, _15) (-1, _16) 0 ]",
    "EXPR [ (-1, _9) (-1, _17) 1 ]",
    "EXPR [ (-1, _9, _11) (1, _14, _16) (1, _11) (-1, _18) 0 ]",
    "EXPR [ (1, _17, _18) (-1, _1) (1, _9) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZLBboQgEIbfZc4cBFdXfZWmMajjhoSgYaFJY3z3jjNru3vooenl/4Dh/5Nh2GDCId96F+blDt3bBkN03rtb75fRJrcEOt12Bee2TxGRjuCpTq7VRgwJupC9V/BhfeZL99UGZrKRqoUCDBORAmfn8Vjt6sdd/G5tmoe3bb/N1d/dutD/s9cv9nfa2dHFl9cCTRcVGNaS9cJasdasV9YGOqOgZdWFQAuMoBRcBJWgFlwFEqIlxUiKkRQjKYZSyv3oLzo7eHzMdM5hfBpx+lzPyvkJ1riMOOWIR4Nco5a/AA==",
  "file_map": {
    "50": {
      "source": "global FN_ARRAY: [fn() -> Field; 2] = [f1, f2];\n\nfn main(x: u32, y: Field) {\n    assert(FN_ARRAY[x]() == y);\n}\n\nfn f1() -> Field {\n    1\n}\n\nfn f2() -> Field {\n    2\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
