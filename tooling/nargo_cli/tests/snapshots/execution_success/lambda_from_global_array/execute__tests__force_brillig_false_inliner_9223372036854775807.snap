---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _6",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "EXPR [ (-1, _2) 1 ]",
    "EXPR [ (-1, _3) 2 ]",
    "INIT (id: 0, len: 2, witnesses: [_2, _3])",
    "MEM (id: 0, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _4) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: -1 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (1, _4, _5) (-1, _5) (1, _6) -1 ]",
    "EXPR [ (1, _4, _6) (-1, _6) 0 ]",
    "EXPR [ (-1, _4, _6) (1, _4) (2, _6) -2 ]",
    "EXPR [ (-1, _1) (-1, _6) 2 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZHPCoMwDMbfJece/DOd+ipjSNUohVJLbQdDfPfFoJsedhi7fG3y5deUZIYOmzDUyvTjBNVthsYprdVQ67GVXo2GsvMiYA9r7xApBQefKCsdGg+VCVoLeEgduGiy0vDppSM3EoCmo5Me7JXG9baIDx19R4tiY8vyDWe/03EU/4fnJ/xOkWyVO00LYioUkLCmrBfWDKpEQM56ZS1YS6jSZe3ulGw0bhPvg2kPC/BPuzv7iqwbW+yCw7U9e/ShFw==",
  "file_map": {
    "50": {
      "source": "global FN_ARRAY: [fn() -> Field; 2] = [f1, f2];\n\nfn main(x: u32, y: Field) {\n    assert(FN_ARRAY[x]() == y);\n}\n\nfn f1() -> Field {\n    1\n}\n\nfn f2() -> Field {\n    2\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
