---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(x: Field, y: pub Field) {
    let string: str<14> = "i: {i}, j: {j}";
    println(string);
    let fmt_str: fmtstr<14, (Field, Field)> = f"i: {x}, j: {y}";
    let fmt_str: fmtstr<14, (Field, Field)> = string_identity(fmt_str);
    println(fmt_str);
    let fmt_str_no_type: fmtstr<14, (Field, Field)> = f"i: {x}, j: {y}";
    println(fmt_str_no_type);
    let fmt_str_generic: fmtstr<14, (Field, Field)> = string_with_generics(fmt_str_no_type);
    println(fmt_str_generic);
    let s: myStruct = myStruct { y: x, x: y };
    println(s);
    println(f"randomstring{x}{x}");
    let fmt_str: fmtstr<14, (Field, myStruct)> = string_with_partial_generics(f"i: {x}, s: {s}");
    println(fmt_str);
    println(x);
    println([x, y]);
    let foo: fooStruct = fooStruct { my_struct: s, foo: 15_Field };
    println(f"s: {s}, foo: {foo}");
    println(f"x: 0, y: 1");
    let s_2: myStruct = myStruct { x: 20_Field, y: 30_Field };
    println(f"s1: {s}, s2: {s_2}");
    let bar: fooStruct = fooStruct { my_struct: s_2, foo: 20_Field };
    println(f"foo1: {foo}, foo2: {bar}");
    let struct_string: fmtstr<5, (fooStruct,)> = if x != 5_Field { f"{foo}" } else { f"{bar}" };
    println(struct_string);
    let one_tuple: (Field, Field, Field) = (1_Field, 2_Field, 3_Field);
    let another_tuple: (Field, Field, Field) = (4_Field, 5_Field, 6_Field);
    println(f"one_tuple: {one_tuple}, another_tuple: {another_tuple}");
    println(one_tuple);
    let tuples_nested: ((Field, Field, Field), (Field, Field, Field)) = (one_tuple, another_tuple);
    println(f"tuples_nested: {tuples_nested}");
    println(tuples_nested);
    regression_2903();
    regression_2906();
    let first_array: [Field; 3] = [1_Field, 2_Field, 3_Field];
    let second_array: [Field; 3] = [4_Field, 5_Field, 6_Field];
    let arrays_nested: [[Field; 3]; 2] = [first_array, second_array];
    println(f"first_array: {first_array}, second_array: {second_array}");
    println(f"arrays_nested: {arrays_nested}");
    let free_lambda: fn(Field) -> Field = |x: Field| -> Field { x + 1_Field };
    let sentinel: u32 = 8888_u32;
    println(f"free_lambda: {free_lambda}, sentinel: {sentinel}");
    println(free_lambda);
    let one: Field = 1_Field;
    let closured_lambda: fn[(Field,)](Field) -> Field = |x: Field| -> Field { x + one };
    println(f"closured_lambda: {closured_lambda}, sentinel: {sentinel}");
    println(closured_lambda);
    regression_4967();
}

fn string_identity(string: fmtstr<14, (Field, Field)>) -> fmtstr<14, (Field, Field)> {
    string
}

fn string_with_generics<let N: u32, T>(string: fmtstr<N, T>) -> fmtstr<N, T> {
    string
}

fn string_with_partial_generics<let N: u32, T>(
    string: fmtstr<N, (Field, T)>,
) -> fmtstr<N, (Field, T)> {
    string
}

struct myStruct {
    y: Field,
    x: Field,
}

struct fooStruct {
    my_struct: myStruct,
    foo: Field,
}

fn regression_2903() {
    let v: [str<1>; 1] = ["1"; 1];
    println(v);
    let a: str<1> = v[0_u32];
    println(a);
    let bytes: [str<3>; 3] = ["aaa", "bbb", "ccc"];
    println(bytes);
}

fn regression_2906() {
    let array_two_vals: [Field; 2] = [1_Field, 2_Field];
    println(f"array_two_vals: {array_two_vals}");
    let label_two_vals: str<2> = "12";
    println(f"label_two_vals: {label_two_vals}");
    let array_five_vals: [Field; 5] = [1_Field, 2_Field, 3_Field, 4_Field, 5_Field];
    println(f"array_five_vals: {array_five_vals}");
    let label_five_vals: str<5> = "12345";
    println(f"label_five_vals: {label_five_vals}");
    println(
        f"array_five_vals: {array_five_vals}, label_five_vals: {label_five_vals}",
    );
}

fn regression_4967() {
    let sentinel: u32 = 8888_u32;
    let slice_of_tuples: [(i32, u8)] = &[(11_i32, 22_u8), (33_i32, 44_u8)];
    println(f"slice_of_tuples: {slice_of_tuples}, sentinel: {sentinel}");
    println(slice_of_tuples);
    let slice_of_tuples_coerced: [(i32, u8)] = [(11_i32, 22_u8), (33_i32, 44_u8)].as_slice();
    println(
        f"slice_of_tuples: {slice_of_tuples_coerced}, sentinel: {sentinel}",
    );
    println(slice_of_tuples_coerced);
}
