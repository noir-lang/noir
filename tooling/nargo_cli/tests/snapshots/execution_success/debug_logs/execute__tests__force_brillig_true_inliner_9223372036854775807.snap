---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "fn main(x: Field, y: pub Field) {\n    let string = \"i: {i}, j: {j}\";\n    println(string);\n\n    // TODO: fmtstr cannot be printed\n    // let fmt_str: fmtstr<14, (Field, Field)> = f\"i: {x}, j: {y}\";\n    // let fmt_fmt_str = f\"fmtstr: {fmt_str}, i: {x}\";\n    // println(fmt_fmt_str);\n    // A `fmtstr` lets you easily perform string interpolation.\n    let fmt_str: fmtstr<14, (Field, Field)> = f\"i: {x}, j: {y}\";\n\n    let fmt_str = string_identity(fmt_str);\n    println(fmt_str);\n\n    let fmt_str_no_type = f\"i: {x}, j: {y}\";\n    println(fmt_str_no_type);\n\n    let fmt_str_generic = string_with_generics(fmt_str_no_type);\n    println(fmt_str_generic);\n\n    let s = myStruct { y: x, x: y };\n    println(s);\n\n    println(f\"randomstring{x}{x}\");\n\n    let fmt_str = string_with_partial_generics(f\"i: {x}, s: {s}\");\n    println(fmt_str);\n\n    println(x);\n    println([x, y]);\n\n    let foo = fooStruct { my_struct: s, foo: 15 };\n    println(f\"s: {s}, foo: {foo}\");\n\n    println(f\"x: 0, y: 1\");\n\n    let s_2 = myStruct { x: 20, y: 30 };\n    println(f\"s1: {s}, s2: {s_2}\");\n\n    let bar = fooStruct { my_struct: s_2, foo: 20 };\n    println(f\"foo1: {foo}, foo2: {bar}\");\n\n    let struct_string = if x != 5 { f\"{foo}\" } else { f\"{bar}\" };\n    println(struct_string);\n\n    let one_tuple = (1, 2, 3);\n    let another_tuple = (4, 5, 6);\n    println(f\"one_tuple: {one_tuple}, another_tuple: {another_tuple}\");\n    println(one_tuple);\n\n    let tuples_nested = (one_tuple, another_tuple);\n    println(f\"tuples_nested: {tuples_nested}\");\n    println(tuples_nested);\n\n    regression_2903();\n    regression_2906();\n\n    let first_array = [1, 2, 3];\n    let second_array = [4, 5, 6];\n    let arrays_nested = [first_array, second_array];\n    println(f\"first_array: {first_array}, second_array: {second_array}\");\n    println(f\"arrays_nested: {arrays_nested}\");\n\n    let free_lambda = |x| x + 1;\n    let sentinel: u32 = 8888;\n    println(f\"free_lambda: {free_lambda}, sentinel: {sentinel}\");\n    println(free_lambda);\n\n    let one = 1;\n    let closured_lambda = |x| x + one;\n    println(f\"closured_lambda: {closured_lambda}, sentinel: {sentinel}\");\n    println(closured_lambda);\n\n    regression_4967();\n}\n\nfn string_identity(string: fmtstr<14, (Field, Field)>) -> fmtstr<14, (Field, Field)> {\n    string\n}\n\nfn string_with_generics<let N: u32, T>(string: fmtstr<N, T>) -> fmtstr<N, T> {\n    string\n}\n\nfn string_with_partial_generics<let N: u32, T>(\n    string: fmtstr<N, (Field, T)>,\n) -> fmtstr<N, (Field, T)> {\n    string\n}\n\nstruct myStruct {\n    y: Field,\n    x: Field,\n}\n\nstruct fooStruct {\n    my_struct: myStruct,\n    foo: Field,\n}\n\nfn regression_2903() {\n    let v: [str<1>; 1] = [\"1\"; 1];\n    println(v); // will print [1]\n    let a = v[0];\n    println(a); // will print `1`\n    let bytes = [\"aaa\", \"bbb\", \"ccc\"];\n    println(bytes);\n}\n\nfn regression_2906() {\n    let array_two_vals = [1, 2];\n    println(f\"array_two_vals: {array_two_vals}\");\n\n    let label_two_vals = \"12\";\n    println(f\"label_two_vals: {label_two_vals}\");\n\n    let array_five_vals = [1, 2, 3, 4, 5];\n    println(f\"array_five_vals: {array_five_vals}\");\n\n    let label_five_vals = \"12345\";\n    println(f\"label_five_vals: {label_five_vals}\");\n\n    println(\n        f\"array_five_vals: {array_five_vals}, label_five_vals: {label_five_vals}\",\n    );\n}\n\nfn regression_4967() {\n    let sentinel: u32 = 8888;\n\n    let slice_of_tuples: [(i32, u8)] = &[(11, 22), (33, 44)];\n    println(f\"slice_of_tuples: {slice_of_tuples}, sentinel: {sentinel}\");\n    println(slice_of_tuples);\n\n    let slice_of_tuples_coerced: [(i32, u8)] = [(11, 22), (33, 44)];\n    println(\n        f\"slice_of_tuples: {slice_of_tuples_coerced}, sentinel: {sentinel}\",\n    );\n    println(slice_of_tuples_coerced);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
