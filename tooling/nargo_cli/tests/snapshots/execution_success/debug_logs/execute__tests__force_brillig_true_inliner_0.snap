---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2d3W4jR3bHq/khiZQ06pG9669ZY2HEtwE1nA9NbkzA8ow/JI1tzUgzkmYkUiQlW5J3keTOcMDX8FPkwsAiNwEC7EWQu1z7JgvkFfIA2d7pokqHp4vd6n+pS+QpQBC7u/pXp06fOnW6qrs6UG9SEP9FqRL/L6nRpPO04v+NfGkFyGq4lDNwJOdQUPN3oJIVf/qbN/9r6vJFio6XgRWuMTKh+KuNh0O+ciN/s2YwHfDvan7FDb8xG3P+MLjMV6TcRXW58Zrn6GNmQ/5jfGwuPq5//0P8u0Z4Lq67KRNab28x8peMukXp08HFMQUsW/PX3PCHbeazgRPdDfmPY74L2Z+4kf2u5n+Ol33I/gLPbmr2l3j2Pc3+Cs++r9nrg4vriesk7w7b0oYb/vCabrrhH2n+Uyf85rA9fe2GP9TPN274Q7v/1g1/aPtbbvhtzX/mhH+/o/nP3fC7mr/tht/X/B0n/AdD+3/hhj+0/5du+EP733XDH9r/nhv+0P/vu+E/0PxXbvgPNf+1G/6q5h+44T/S/EM3/KH/abvhD/vHjht+T/OP3PCH/q3rhP9wGP/03PCH/q3vhj/0b8du+EP/duKGP/Rv37nhD/3b9274Q/926oY/9D9nbvhD/3Puhj+Mf34w+Kj70bt3O6vz6s24yq/xIIse95hTLurzoK3HesxxNT3+oMuuK3xd/5r63Lhlmewzy68TWdHjGAEpT8tD9aPHhbTu5hlZQ3IsSrRPn2fKmWfK4VhbQNY6kHUGZCH1dQ5kbQJZKN1zPkLs6/r0pe1L+wTTh1B/asqA818rvbT+VJdfV079+4pNr3VGr1p3C4ysITkWJWoLC0w5C0w5HGsDyDoEsg6ArA6QtQtkIXW/5alcfSDrGMjqAVm+2uorIAtpE5ueytUGsvaALF9tAtkeXwNZvvrVp0DWt0BWmnsE7j7QVjYX50T5qvHvP/7jdz/8syKpQrbXBrxgtxIE+B05Xz+4YHIDcq4i27fGHP8dw9IBbo3kbcXbjVzp4WpxwXX6wYpJCa6RnTnSeawDWagbCM7mkY7IlyADpfvoN735Fvuys06BLG1fS2r0Wmjf4difNmg9Kmp00MWUraRGbcisU5Xs+8/4f3T+XxYvzjGZpu7mLLqrM/IsMufRvmjBie5WVtL2Rbr8uhq9zi76ooWUetW6W2RkDcmxKNF2tMiUs8iUw7E2gKxDIOsAyOoAWbtAFlL3W57KtQ9kIW1iD8hqA1m+2hftI7nYpaZG/ZiLPlLfi1WYepiylUh+83eUqmTf/8X/uT4ya3wxx8hjY3H3KLS+Zv45S/6llPnH3njPke21AV+RWySffjrdzGtuJ1UwTKhIqHg5uGCDK48qURsmTUnnhimPK+M411BoMHmLyNOKtxs5E9Wf2VDMMmlDWTKOmUZUpfviSiIaSp2RJ42TWXKsu5DR3ZJFd6aNhIzu9L45oO6QTiZk8tuczO2U+b1xMrqCYUJFJtXJhESeVrzdyJmo/syGYpZJG8pt45hpRFWy720PnMxtx7pbVqO6u23R3bJxTP82daf33fHUySwz+W1O5q2U+b1xMrqCYUJFbqKT4Z57jP5a8XYjV3rQ5YaHcPz7TT28smyp21tEn6CyuwEpTyl+aEqXX1ejDd3F0BTXsEz90KGptxlZQ3IsSnRo6m2mnLeZcjjWBpB1CGQdAFkdIGsXyELqfstTufpA1jGQ1QOyToCsl0AWUl9Im9j0VC6kn9gBsbiYII9ceyC5ojTp/gut+1OgXAtAucSvil91Kdc+kIWMC5G+sA1kIWNMZPzlq79/5ikLqS9U34GWC+lz5L42G0vua6VPm8Y+DXkdz4Gs50AW0q/62KdFv+njy9KnSZ8mfZr0adKnTWafhmTROqadaxs7iV0l22uDi9+6MHM7aTZ9n3D0+3BVcj6XuHICwtTHF9WoAvQxPfFqdrq4ic6VZkDKU4qfeNXl14msWHkuJl45wzL1Qydef8PIGpJjUeoNLvLRY2VmX8nC2gGyOkDWLpB1BGJFv+lAfB65+iC5onQMZCHt6wDIQtrXKyDrDMSKftObkTxynYPkugl11E/4mX0MfcLPlAHo74dP+P025lWYepiylUh+83eUqmTfcqwA7gm/rMHLHCNP1v6K1tfMb3vC752U+XM/4acrskzyPRlc/NZ5uW1awTChIogn/OiTamU1mpLODVMeV8bx4gK19AsJ+B6o/ZaRNVSjjYJ2flyD+S1TDsfaArLWgawzEIvrGPLIdQ6SK0qbQBZS930ga9LtK0pIfdkCD+07amrUxl0EHro/qjD14AKPd4xjZqdcJfs+AQYebzHypAna3nGsu3fVqO7esejuXeOY/m3qTu974jho43S3THT3rmPdvadGdfeuRXfvGcf0b1N3et9ToO6WGXmy9vu0vmZ+W8D7PpP/SqOBNbK9NuArkvWVFrqdVGEaaOqK7SfIVSNcW/lpXnFRYxjjAmFuxFI3INMxUefjKBC2NiCuI8nagPYsDYgbouaMnnM+pq6SWFe6o0ta9s0sjCuY3oHZlnvjeOa27W7JttSNo7uT1MPa9H0i10vdpL3oWnfvMbKGzDF6jTlv+x5TDseiMtjudt9zoq/mvbTXT5d/XXe7nF5td7vvM7KG5FiUaKTO9X7vM+VwrA0g6xDIOgCyOkDWLpCF1P2Wp3LtAFk9T1nIOp4CWcjruOmpXG0gaw/IQvqcV0DWMZD1Gsjy1Rd+DWT52oaQNoH0X10gC9m2fbVViQuL89ESF2Zj7QNZSJtA+glkbOKrfZ07ZCFGgbn77dzfRnhvjABNcn6WbyNwXEW2mwynuAG0lakaQIsSnd686gBalLaArHUg6wzIQuorjZNIy9oEspC63weyjjxlTYPdT8N1pI9nmH0MnSZ3MwFwMcun+98KUw9TthLJb/6OUpXsq8adGWKWb5mRJ83kyftOdNdJPXmiy7+uyZO0wZzW3QeMrCE5FiXavj9gyvmAKYdjbQBZh0DWAZDVAbJ2gSyk7rc8lasPZB0DWT0g6wTIeglkIfWFtIlNT+VC+okdECv6Td8jyyPXHkiuKE2D/9oHso48ZEW/6cJ84qPFR/vqo5HtERljIv1qG8hCxqvIWM7XvuOZpyyUvtDxxClIrihtA1ly3yF9mss+TcZgsrFkDKY4ucQXii906QtlDCabXDIGU5zuUfFq9FvGTcSv3hS/KuMm2VgybpKNNenjJlFCjnXIfW02ltzXToafkD5tMvo05HU8B7KeA1lIv+rrXABdRk36NOnTpE+TPk36tMns05As6bcnw0/4+FxalCSekHhC4gmJJ8axJJ6YrHhCvy+2YBxrxf8b+VJfy8m9m2V7MZ+r17Il/x0m/5Ve5J8n22uDywXpimT9fkFJZTueNNm5T/briv+ieLnnCTepfKrgaLus0qck5v6Y47+QfVHSBjlH8rbi7Uau1GzQ1RO5sj8gesCU3egEpDylLvRsHtPl14msYHlWbA2OW4VD6+4OI2vIHKMDXlxDvcOUEzLHaKefh7UOYnF2mkeuTZBcyDpG6RTI8vE6RulpzOL8D7DNDV8+rzGycm0u9+ozuqC6kcesID0vzaozepsyqTNLs8pMjZzfircbuVL6VWZM/Ti88Cu2C29bZeZ9RtZQjRoMffIhz9JKT4Es5JJi60AWcvk7pO6RS2Qhl5BE6h6pL+SSm2Kr2VjbQBbyOtJVZsw+hq4y4yi4Hnb0OkCuMPUwZSuR/ObvKFXJvj/HHTW3ygzXx9Qsultm5Kkx57Ugulnp0RstIPueLRi0jTr8jslvG3X4MGX+sQFcnWyvDS4XpCuSd9ShRrY/IOdqBdC79g/JfionDQLNc6l8VxllSGLtpzyujONpAtJlIl8r3m7kSiuPAlKeUnxAqsu/roB0mciT1FC4u399LndHRYfD89ydHXnKegpk+XpnfAZkTYNNnANZvo4ITcN1/BrImoa2/QLI2gGyekAWvbHglmesqdF+0sWNhY7XKkw9TNlKJL/5O0pVsm8mjla5GwsuVli26I5b3jNr3EHra+a3fRXyw5T5xwboC2R7bcBX5F2SL2uAvkC2kwJ2uk0V9AvZ/yHZT+tByzXPpfK/S/ZlmSakLLr9S8rjijmuDafKnP/V4PIxnffv4qs+89e/pfh3cSPWjQcBKU+pmzliPc/IGpJjUaKdzzxTzjxTDsfaB7KOPGXpzkfr2bQNfT30MXMW5zNyXlVdlsk8NmMco9d11jimfUaU/xFpO7RtRqlGmEW1HV1+ncjqqu2UiDxUP1THc4ysoRptc7TtzDHlcG2UY70AsnaArB6QZWs7tA2kbTs1cp7Zdj4gx2aZY2bbWVK8PSrlvO00qH7NgJIGVUpdBJSmrZq6pv3sJ5aAkrbXpPYRquTrxumOBuPXNZ1v6m5OJevOjCFqjO70vidA3dGvRI9jlRkWra+Z/0rBddJjCFSwqpGHNtKAOT5Dts0GaFYgKSjmAkCqqIAp25aSzucC2zSdqdkYcEbdfBiQ8pTiO1O977o60zKRJ8ngqSM3zw3VqP3QIK3ClFNhyuFYHSBrD8jaBrKOgawTIKsLZLWBLOR13AKy1oGsMyBL2qO0x5vSHs+BrE0gC9m2d4AsZHtE+glkG3oNZCFttQdkif+SeOKmxBPiv8R/if+a7PiLDuxGKYj/6/GSirEfNz5xrxeQ8pTix0t0+XV1WVasPBfjJZxeuUE9bnBbnxuSY1GivrnKlFNlyuFYG0DWIZB1AGR1gKxdIAup+y1P5ToGsk6ArC6Q1Qay9oAs5HXc9FQupH2dAlldIAtpE30gy1f/9QzIkr5W+tqb0tfuA1lIm0D6L2Rf66t9nQNZyH5bfKH4QvGF4gvHscQXii8UXyi+cBxLfGFxvvC5A7n0g8B0nD9KNXKePtaKtxs5k66Hfu60wtTDlK1E8pu/VXyOua8T/+AeBM46f1Jm5Kkx57UwunlAdWPKGTBy6v2zTP6yJX8tZf7cb/zpijwg+Z4MLm8/Jtufk+0vyPaXZPsrY5satqmgDbK/RvbrtDZ48z/LG38PyL6yyp6S2BspjyvjeJo3JWbIsVa83ciZqN7NRj7D1KVE8lOjrpJ9f7A0clM/tsbDNXJ6jTnWlRrKDNleG1zeTtsAqGDUcD8djJYXKHvKYlTFPW2/0g9IeYqUpUj5vj5tP8vIGqpRo6czJpyXn2XK4VgnQFYXyGoDWXtAVh/I2gayOkCWr/pC2j2yjrtA1haQtQ5knQFZ4r/Ef4n/mkz/leVpQhrvtOLtRq7USf32pS7/up4mTHs3rnVXY2QNybEoUd+cdfFS89gGkHUIZB0AWR0gaxfIQup+y1O5joGsEyCrC2S1gaw9IAt5HTc9lQtpX6dAVhfIQtpEH8jy1X89A7Kkr5W+Vvpa6WvHsaSvlb5W+lrpa8expK+djL52H8hC2gTSfyH7Wl/t6xzIQvbb4gvFF4ovFF84jiW+UHyh+ELxheNY4guL84XPPZVLfLT46Gn00TJOXlzfgbyOMk5enH3JOHk2loyTS187jX2t3A9Nhn2dA1ly3yG+UHyh+MJxLPGF4gvFF4ovHMcSXzgZvtDXcXKXcnHviAUMy1Z2mck/diGKebK9NuAF+5Dk+2xwefsx2Uav2KIr/CfFy2vWIyDnKrL9IdlXVtlTEvtPZF+U0qy84ualSPt3VmeZupRIfmpsVbLv7+Pvfd6YlVdqZHttcHnbtSHrilBD1iu1mPIF6mopi3HWFG+crXi7kS916MftFSODmcqWukRG9r+xkS0y+dQNrdM/LY2vU3Er7TTuBYw8ZbLPLN/XlXZqjKxc76x9AKKn/xzI0r4nzVv2tK6teLuRL6W2BV3+db1lnzYiom3XPDdUo+1a+/eAOVZm9pUsrK9ALLNf4dZuvCZbaNB6mMFFjZG1xNTDrG+V7HthCS6yrt0YpNQdDczmHetugdHdvEV3C8axBUZ3et8hUHdlRp5F5jxqdwtudNdM64N0+XXFX+cWRp4Vei3H6VXrbpGRNWSOBeT3IlPOIlMOxyoTGbglLWsJ57Xi7Uau1HyU9vrp8uvKqT2t2PS6wOhV6+4WI2tIjkWJjnLdYsq5xZTDsQ6ArB6Q1QeyjoGsbSBrB8hC6h7JQtbxFMjaArLWgawzIEv8hPgJ8RP5WOdA1iaQhfQ5yDa0B2S9BLKOgKwOkLULZInPkdjkpsQm4nPE54jP8S/OoWNJmh+lGjkvUNBxnNRzAbr8OpEVK8/FOA6nV258TOtuiZE1JMeiRP3pElPOElMOx9oAsg6BrAMgqwNk7QJZSN1veSrXDpDV85SFrOMpkIW8jpueytUGsvaALKTPeQVkHQNZr4EsX33hN0CWr20IaRNI/9UFspBt21dblbiwOB8tcWE21j6QhbQJpJ9Axia+2te5A9ZSfMwcL9D3zTVyXqCg9+7D56HCmFdh6mHKViL5zd9RqpJ938QPpHHPQ2Udh1lk5LGxuGdIaH3N/IEl/20mf9mSf5nJv2jJ/1bK/GMftJ8j22uDywVpRa2SfE9IvtAQxtx/O2G/rnBT8RVrKl4uU96AnKvI9irZx104TrY0x/R2M+VxZRyXz7FeCBSo0cZha2D0gTjz3FCNNmQ6+MA9/Mc1fI7V85SFrOMpkNUHsraBrA6QtQdkIfV1DGQh67gLZG0BWetA1hmQJf5L/Jf4r8n0X3Ry2IyBgvi/25c07qf+HCt9ScNNfGp/SYO7gcrykkaUqG++6ksaUdoAsg6BrAMgqwNk7QJZSN1veSrXDpDV85SFrOMpkIW8jpueytUGsvaALKTPeQVkHQNZr4EsX33h10CWr20IaRNI/9UFspBt21dblbiwOB8tcWFxMVPPU5bEhcXJJXFhcTHANMSF3wBZEhdmY3WBLIkLi6ujxIWTYV9IufaBLKRNIP0EMjbx1b7ObwiLm6MJGJat7IolP/eQHjcHNPYhtxmyvTbgK5K0fDKtQJKg2wnlmOUH5FxFtrlljwPLeUpdKKU0hr1N9qm4Tlz+KLl9GK25EpDyFClLkfJ9fRiNW5kwVKMGTh101hX+zGM9IGvPU9Y2kNUGsnZArOh3XWFYUXoxwLF2gSyUvqK0BWStA1lnQJb4CfET4ifysc6BrE0gC+lz+kAWsj12gKxjIOsAyELWEal7pP+ahr5W2pC0IZdtKMtDvmZ/j7uvfdgLSHlK8ffZuvzresiX0ys3wKN1t8DIGpJjUUK+gLEBZB0CWQdAFvKFAuQD8kjdI18WQsq1D2SdAFlIm3gJZB0DWcg2dARkIXWPtNVNT+Xy9SW5V0AWqm1Hv+lYgi8vVyHtHukn+kCWr33aMyBL4q/i7F7ir2wsZPyFtAmkX20DWb7aV5qHE9KyngNZvsZMyDgHaavIfhsVM0UJqS+kv0cuLIDUPXIhhi6QhbRVX/tHib+Ka48Sf2VjSfw1GfaFjL98jZl8Hev4DsiSPk36NOnT/LnvQF5HpH0h7xWkH5oM+0LO8/k6n4acC0C2oR6QhZxP87VP83VRQF/7R+R9GtK+kPdWyLaNtC/6DJn53FQQ/3e7UOTdBwEpT9fD3GeWXyeyYuWxLxTJPZundbfIyBqSY1GSF7+zseTF7+LkOgGykNexD2QhbRW5+AtSX8gX5ZFtyFc/cQxkIXWPtC+kXD0gaxoWwvoeyEK2IWTbRrYhWbwqGwu5QKq+R6D3AVFqxf8budLKqk3OgJFT70+7kIfOHzL5uZg+qmOur1vpijRIvieDi99UmVH6gXB0BX9SfEU+TpAjy9esGmRfmTD1vqTzfxrD/5jsi9ISyW+Wqw1tkRxrxduNnInqtqJGG4UpW4nkp4ZXJfsW44vKfWrO1I/NwEOiE6qrJBZn/GON2WwBUVobXPw2jZQW/BM579P4PG4UQREG3f6JOafAFWQeBaQ8RcpSpPyb/jkz5Ag7cuQMOVqPHIVDzpT0gCxfR5+RTxMi7Qs1Yhz9Rr798gIkV5SQ1xE5wj4Nn1kTvyp+Vfyq+NVxLKRf9fVJFaSP9nVG1dc3TafhaQmk/5qG2ETakLQhl22o+M+QPmoHpDyl0j1d4mZc6eqfIb3FyBqSY1Gi/oEbIb/FlMOxNoCsQyDrAMjqAFm7QBZS91ueyrUPZJ0AWUibeAlkHQNZyDZ0BGQhdY+01U1P5doBsnpA1isgC9W2o990LCGPXHsguaKEtHukn+gDWb72ac+ALIm/irN7ib+ysZDxF9ImkH61DWT5al/nQNZzIMvXmAkZ5yBtFdlvI++HkPpC+vttIAup+1MgqwtkIW3V1/5R4q/i2qPEX9lYEn9Nhn0h4y9fYyZfxzq+A7KkT5M+Tfo0f+Jo5D1MF8hC9mm+xuS+9kNyn5aNJeP30tdKXzuZfa3cP06Gffk6fj8N97XT8NyQr8/nIGMTZFzYA7KQz+f42m8j/f00xADIfhtpX8i+Ftm2kfal+zS9AIX5PJhet8DtM+n2BSi4995KJD+tE12A4s/xohPcAhR1Naq7ukV3FUaeGnNeC6KblY7tGgeMnHp/yOQvW/LfZvJfaSWYGtleG1wuSFdkleR7Mri8/djYpsqNEl0ZRlf4Z3V5v65Y0sowprwBOVeR7VWyr6z4pI8lcX4eU85VV4hxtASotYFWmLpkbaD/bWmgpn5shh8SnVBdJbG4RjHWyKtke21weTvJeKkgPxOOXjHG5AeKT+OMyzy3pnjjacXbjVxppaHfygkT5KSpbKlLZAT/tfzm9yKTT6d5ddF4KwN8vR6uvjH8v8kb86uKb/QV47iZ/3/iCpjXX/+v5JCz/7C90m+2++377W733lF7mfCjVDL0hC6//bC5enT33tHDzv1mu/lgbPnRNf011kWaVYzM3gnoyO4GjJxlRje6/OtaxahE5ElycvTNQfNc6gCj9HRw+TyzHKrzsps6pta53ldXTm3AunKUqR+q8wojKxcVBuQ8sxyqczcd9r1GWp1XiM4d2cBQ5xUiT1IHrHVXZWQNybEo0VmKKlNOlSmHY20AWYdA1gGQ1QGydoEspO63PJVrB8jqecpC1vEUyEJex01P5WoDWXtAFtLnvAKyjoGs10CWr77wKZDlaxtC2gTSf3WBLGTb9tVWJS4szkdLXJiN1QeykP6rB2T5aqvIeEJizOL6IYkxJ8OvImPMc4csbjyLG0O0lX2lCaikTxRQwYIEAT4h59s+VRAk/Da3A8s55vYnDF/PbJaYcx0PTjeovsyZTW6QvaRG9WvqrEr2/Us8xcnNbHKD/pzxhGpUx3Sg1DyP6s7NIPNKl15zXQ9FZKWDzK4H9tM2ShlkHj0mNxPFdXpyMzEZtio3E9lYcjNRXHuUm4lsrDQ3AAHDspXNxSbObwDukPPT3gCY2+OO32FYBT79cy8g5SnFB6y6fF+f/qkwstInUaJEZ2E5Y+We8b0uVnE3L+ltYVJuXuh3XvI4QRcsatuaH6WaGq1rEbagy68rp7a5YtMr18a07mYYWUNyLEr0XboZppwZppzrYlHb1vwo1dRoXYuwBV1+XTm1zRWbXrk2pnU3y8gaMsdoHz7LlDPLlMOxSkBWhdTHvB7XEy+kf4pyUuIFOsCVp4/fALIOgawDIKsDZO0CWUjdb3kqFzIe7XnKQtbxFMhCXsdNT+VqA1l7QBbS57wCso6BrNdAlq++8Bsgy9c2hLQJpP/qAlnItu2rrUpcWJyPlrgwG6sPZCH9Vw/I8tVWkfGExJjF9UMSY06GX0XGmGkmPq/K4sazuLFNW9kBkz/3JGrJKIQTAP0UZTmhPJqPe4rSo2UWmgEpj9ZJkfJv+jILjwcX+eixMrPPxvp8cFkGU2Z6/Uz5cPq6u5L2+ul9N3nJhijJYGI2FvJmfBvIQgYI3wNZR0AWUl/fAVlI+0IGxsgbQmRwtg5kIQdoxBeKLxRfKL5wHEvfxBW3zFXzyg/xuYmbZZkrBEveQMrGkmWuimPJMlfFySVvDWVjHQNZ0/DW0NdAlixzlY3VBbJkmavi6ihx4WTYF1KufSALaRNIP4GMTXy1L9+X1Qks+bmXabj787ETyDNke23AV+T3JN9nA74CSYI2E8oxyw/IuYps/57s4xTFyUA5TbIvSjLZPDoI5Gqymb7OnmeyWQe5Mtk8ev04vSImm2nn4MtA8wsgC/k0GlJfMsFSnL5kgiUbaxomm8UXii8UXyi+cByr+Mnmqy93KZPNMqgog4pu5eoDWchJkR6QJctdZmPJxPVk2IRMXGdjISeuZWB+jKB3EspBD8zr7XGD854tufkgIOUpxQfNkzI4/3hwkY8esxk0x/ocyPoCyPoSyPoqZhU4AZF6AmlSJiDkDY9sLF/f8NgHspBLSiAHt5CDpzKAl40lkxnFXUfxq+JXxa+KXx3H0jfoXIwc/bXi7Uau1Lxf3PLszalbnp32SXmWVN8Asg6BrAMgqwNk7QJZSN1veSrXDpDV85SFrOMpkIW8jpueytUGsvaALKTPeQVkHQNZr4EsH32hjgtQcvnahpA2gfRfXSAL2bZ97bclLizOR0tcmI21D2QhbQLpJ5Cxia/2de6Qxd0/2x4m4MoOLPm5z09x9+e5HybQJ39E8n024CtQTRAU8ZbfR2QfpyhOBsqxveVXYo45/kZf6gcJ6CCQ60natEacdRCIvuWXp+F9DWR9A2R9C2Lpaxul4r4dmP5BAl3+Tf52YJRoB3jV7/1FaQfIegFk7QFZSH1tA1n7QNYBkPUdkIW8jkjdI+uIbENIW+0DWVtA1jqQdQZkiV8Vvyp+VfzqOBbSr9I3LLl7zho5L1DIeDX9G5a6/DqRFSvPRfzM6ZW7L9G6m2NkDcmxKNE+Y44pZ44ph2NtAFmHQNYBkNUBsnaBLKTutzyVqw9kHQNZPSDLV1t9BWQhbWLTU7naQNYekOWrTSDb42sgy0e/qmMMlFx0UqTMsLixOltsYptE4WTlYpnckyK6Ih+RfJ8N+ApUEwRFvGH5EdlXtuQdNzFie8OyzBxzOzFy72FAylNKpZoYKTuRxz4xYuqHBs2zjKyub8Z6nrKQdTwFsmRwJBtLBkeysWTQORsLOegsflX8qvhV8avjWC4GnRGsTSAL6aNlMq84fYlfFb86jX5VHpIQvyp+VfzqOJb41WwsHa8uxcfMMV39ZoHbhyQaDV0PPT5eYephylYi+c3fKs5n7vu35Tf/o+2/LF6cYzJN3dmWkqww8nC6myG6m3OsuxqjuzmL7mrGMf3b1J3e9x9A3XEvCthY3Ng6ra+ZP7DkrzP5bZNK80z+iiX/ApP/SpNQc2R7bXC5IH3yY5LvCcmnFUQVXU/YryvcVHzFkiatTHkDcq4i24/JPu7CcbJRTto3fZKOcxNe83Fdfo2NvEbOBzfcDrdMaQDjrzxw/Y0rx29H3XPc6TS1vm1vkpjl25YLov81ix6jb8m4Xs6Hq5ttGSabg87zJpNmuX1b6eKa2pYxMsvP8gYb9QV5dVICssogVpT0oGNxSyw3H6VtT7r8m77EMg3ouSdmuGCIY7WBrAMg6yWQtQdkbQNZR0DWPpCFrOMxkHUCZHWBLGQbQtoq0k9sAVnrQNYZkCV+Vfyq+FXxq+NYSD+R5unntKxNIAvpo5H6Ql7HDpCFbI9If4+sI1L3yLYtsYm0IWlDmH7I7Thzc7W4F0UeHgWkPGXIYR7z/UWRtCtoyXKZ2ViyXGZxcvWBLOSylEj7eglk+brcrywBnY3VBbJkCWjp06RPm0yfcwJkdYEsXz9PIX2a9Gn0GDLG9NV/PQOypK+Vvvam9LXIto20CeSnjZD2hfSrSFv1tT0i+1qk7pH2hZSrB2RNQyz3PZCFbEPIto1sQ5P+abYoIb80gfwCBvKTOMj2KPFqcf2jxKvZWMjxHOR1lDi6uJhJ4ujidC9xdHH9tsTRxbWhafjEcUlhWFFCxr7PgSwXn6ks7muHd6fua4dy71JcTCL3LtlYcu+SjSX3LpPhJ+TeJRurB2TJvUtxbUjuXYrrt2/KHAAXFwcMS+/nvsLCrTWjF0sz1/XR5+p7EHNxMmDMf9emJ3OxtFqKupUtuuAWJ+PuKcYuBlYj22uDywXpk1dJvicDfrukLivAvBA6/UDK0JX/UV3er2X7WPEymrIH5FxFtlfJvjL5XVKjN61lhqn3J5XzI3OOuf0x2RelpYQydB3N6wA22AY1WHN1P24RNO76msZeJfv+9e03/7nV/Uz92BxAqOzXg9pYGufA2afjlRTv2urNOStb3TjnMLaxV8n22uDyNm3EppJnEoT6kTA/HYyWRRtC2gY3rpGZbK4R0eVFZ0hZrXi7kTNRnZiNiOpNqQv9mhfdvMhVsu/fgY2owsiTZiUuN6vk3VsJSHm6HuY+s/zrWolrNqVes36/lo44+PLNRuR3PF8CWchvSW4DWUdA1j6QhazjMZB1AmR1gSxfv3uK9BPI7yOvA1lnQJb4VfGr4lfFr45jIf0E0iaQbRvZhpC67wFZvvrCXSDrHMhCfnceGQMg26Ov351H+ntkPIGsI1L3yL5DYl9pQ9KGMP0QN7NGJyrmyLFWvN3ImXQ9xn2GaNaoj5nf/B0l+hmiL3/z5n/EomOsWT9/VWbk4XRXIrpzNCs51F2d0V3Noru6cazO6E7v+xaouxIjj40VMCy9n/tkkm1SaN44X5+rr82icczFpBD3+agFo8zFFHWzzRgvMvmdzBjri9Qi+cbNGJvGNk/OpTPGuvJ0tlVXEjFj3CL7btqMcYkca8XbjZyJXmfTmZSYumSd7OpYnImpH5sDSDNjzDW4tI+T6HO1rk3HcV0zxlx7sdXt2meMZxOE8mXGOFLa/wOL/lUuuYIDAA==",
  "debug_symbols": "",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "fn main(x: Field, y: pub Field) {\n    let string = \"i: {i}, j: {j}\";\n    println(string);\n\n    // TODO: fmtstr cannot be printed\n    // let fmt_str: fmtstr<14, (Field, Field)> = f\"i: {x}, j: {y}\";\n    // let fmt_fmt_str = f\"fmtstr: {fmt_str}, i: {x}\";\n    // println(fmt_fmt_str);\n    // A `fmtstr` lets you easily perform string interpolation.\n    let fmt_str: fmtstr<14, (Field, Field)> = f\"i: {x}, j: {y}\";\n\n    let fmt_str = string_identity(fmt_str);\n    println(fmt_str);\n\n    let fmt_str_no_type = f\"i: {x}, j: {y}\";\n    println(fmt_str_no_type);\n\n    let fmt_str_generic = string_with_generics(fmt_str_no_type);\n    println(fmt_str_generic);\n\n    let s = myStruct { y: x, x: y };\n    println(s);\n\n    println(f\"randomstring{x}{x}\");\n\n    let fmt_str = string_with_partial_generics(f\"i: {x}, s: {s}\");\n    println(fmt_str);\n\n    println(x);\n    println([x, y]);\n\n    let foo = fooStruct { my_struct: s, foo: 15 };\n    println(f\"s: {s}, foo: {foo}\");\n\n    println(f\"x: 0, y: 1\");\n\n    let s_2 = myStruct { x: 20, y: 30 };\n    println(f\"s1: {s}, s2: {s_2}\");\n\n    let bar = fooStruct { my_struct: s_2, foo: 20 };\n    println(f\"foo1: {foo}, foo2: {bar}\");\n\n    let struct_string = if x != 5 { f\"{foo}\" } else { f\"{bar}\" };\n    println(struct_string);\n\n    let one_tuple = (1, 2, 3);\n    let another_tuple = (4, 5, 6);\n    println(f\"one_tuple: {one_tuple}, another_tuple: {another_tuple}\");\n    println(one_tuple);\n\n    let tuples_nested = (one_tuple, another_tuple);\n    println(f\"tuples_nested: {tuples_nested}\");\n    println(tuples_nested);\n\n    regression_2903();\n    regression_2906();\n\n    let first_array = [1, 2, 3];\n    let second_array = [4, 5, 6];\n    let arrays_nested = [first_array, second_array];\n    println(f\"first_array: {first_array}, second_array: {second_array}\");\n    println(f\"arrays_nested: {arrays_nested}\");\n\n    let free_lambda = |x| x + 1;\n    let sentinel: u32 = 8888;\n    println(f\"free_lambda: {free_lambda}, sentinel: {sentinel}\");\n    println(free_lambda);\n\n    let one = 1;\n    let closured_lambda = |x| x + one;\n    println(f\"closured_lambda: {closured_lambda}, sentinel: {sentinel}\");\n    println(closured_lambda);\n\n    regression_4967();\n}\n\nfn string_identity(string: fmtstr<14, (Field, Field)>) -> fmtstr<14, (Field, Field)> {\n    string\n}\n\nfn string_with_generics<let N: u32, T>(string: fmtstr<N, T>) -> fmtstr<N, T> {\n    string\n}\n\nfn string_with_partial_generics<let N: u32, T>(\n    string: fmtstr<N, (Field, T)>,\n) -> fmtstr<N, (Field, T)> {\n    string\n}\n\nstruct myStruct {\n    y: Field,\n    x: Field,\n}\n\nstruct fooStruct {\n    my_struct: myStruct,\n    foo: Field,\n}\n\nfn regression_2903() {\n    let v: [str<1>; 1] = [\"1\"; 1];\n    println(v); // will print [1]\n    let a = v[0];\n    println(a); // will print `1`\n    let bytes = [\"aaa\", \"bbb\", \"ccc\"];\n    println(bytes);\n}\n\nfn regression_2906() {\n    let array_two_vals = [1, 2];\n    println(f\"array_two_vals: {array_two_vals}\");\n\n    let label_two_vals = \"12\";\n    println(f\"label_two_vals: {label_two_vals}\");\n\n    let array_five_vals = [1, 2, 3, 4, 5];\n    println(f\"array_five_vals: {array_five_vals}\");\n\n    let label_five_vals = \"12345\";\n    println(f\"label_five_vals: {label_five_vals}\");\n\n    println(\n        f\"array_five_vals: {array_five_vals}, label_five_vals: {label_five_vals}\",\n    );\n}\n\nfn regression_4967() {\n    let sentinel: u32 = 8888;\n\n    let slice_of_tuples: [(i32, u8)] = &[(11, 22), (33, 44)];\n    println(f\"slice_of_tuples: {slice_of_tuples}, sentinel: {sentinel}\");\n    println(slice_of_tuples);\n\n    let slice_of_tuples_coerced: [(i32, u8)] = [(11, 22), (33, 44)];\n    println(\n        f\"slice_of_tuples: {slice_of_tuples_coerced}, sentinel: {sentinel}\",\n    );\n    println(slice_of_tuples_coerced);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
