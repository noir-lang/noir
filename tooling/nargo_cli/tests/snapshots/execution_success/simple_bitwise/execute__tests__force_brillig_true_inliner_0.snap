---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "d",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _4",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : [_4]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(4))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32841 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U1) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 20 }, Call { location: 21 }, Mov { destination: Direct(32840), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 50 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Xor, bit_size: U1, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Or, bit_size: U1, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(1), op: And, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(2), op: Xor, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(8), op: Or, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, Cast { destination: Relative(3), source: Relative(5), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, Cast { destination: Relative(3), source: Relative(7), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U8, lhs: Relative(5), rhs: Relative(3) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U8, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 36 }, Call { location: 56 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U8, lhs: Relative(4), rhs: Relative(1) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U8, lhs: Relative(4), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 40 }, Call { location: 56 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U8, lhs: Relative(3), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U8, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 44 }, Call { location: 56 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: LessThanEquals, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 48 }, Call { location: 56 }, Mov { destination: Relative(1), source: Relative(2) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 55 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pZTdjoMgEEbfZa65YPhTeJWmaayljQlRQ3WTTeO779BF215sssEbjojnG4YYHnDx5/l26vrrcAd3eMA5diF0t1MY2mbqhp7ePoCnQQhwyEBIcIKgwEmCBqcIBpwmVOAMoQZXESy4moEk2xKQdE5MMZQjZabK1JkUhVRAVpl1pv2lojikygozRabMTHm0JaUzTWbKU8vCYG3tNEXvU2dvvdIJjE30/QSun0Ng8NWE+fnRfWz6J6cm0ip14vsLkQKvXfDpaWEvm/+tGpVdYzdZ/9uuZbbrusBGLrKOvCrxBa6+MCW+Wg8OlS7xtV19o0r8att/VXR+2/Gj5UX1t/4tlvhWZ19wsau+4HKnX+3zEXf6n//PkWZN28WPm2tJSbFrzsHn6XXu27fV6XtcV9abb4xD6y9z9Cnpdf0hjQfNmdZHBohpYpiuj0sq/QM=",
  "file_map": {
    "50": {
      "source": "fn main(a: bool, b: bool, c: u8, d: u8) -> pub u8 {\n    let i = a & b;\n    let j = a ^ b;\n    let k = a | b;\n    let x = c & d;\n    let y = c ^ d;\n    let z = c | d;\n    (i as u8) + (j as u8) + (k as u8) + x + y + z\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
