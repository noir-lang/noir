---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdTqNQFAXgd+Gai/O/9/ZVJsZUraZJ05paJ5kY331gtLTTc6BZ68aI6SfIWiBs+Oye148frw+b3cv+vbv79dlt90+r42a/G5Y+v/ru8bDZbjevD5c/7tz4RfTf59/fVrtx8f24Ohy7Ox+d9d169zx+m2z4DS+b7bq7y+7rvu/EcKOOMJ4wgTCRMIkwmTCFMEKYdg+Cpsk4vTaGG3OE8YQJhImESYTJhCmEEcIQPTCiB97dLsLwyWvkGRQYNHNO0OkYSjFXKDEoM6gwSBikDDICeccgz6DAoJlGlHONtGq5TwzKDCoMEgYpg4xAwTHIMygwiGlEYBoRbjYixVKhwiAhUGyuSZL+GClSEcGJ4sRgkhxOPE4CTiJO2l1zYQrThSrMlBlUGCQMap99nCtn5CtkBMqOQZ5BgUGRQYlBmUGFQcIgphGZaURhGlGYRhSmEWWmESIT0up4KolBmUGFQTONMDchCxVSBhmBxDFophFFzzuiOpdLYFBkUGJQZlBhkDBIGWQEmhl03UBMI5RphDKNUKYRyjRCmUYo0whlGqFMI4xphDGNMKYRxjTCmEYY0whjGmFMI4xphBGNCM4xyDOoucuj+R+TQqhIwYngRHFiMGmPlJaJx0nASfOgS/E0gErqKpJwknFScCI4UZwYTNrjo2Uyk76biK9IM/1kp6vanOq1RJwknGScFJwIThQnBpPolqPMqYoy3pzN1cOvEDODCoOEQcogI1ByDPIMak/P3MmIq0nEScJJxkmzCUXLRKqatudmy0RxYjBpT8yWicdJwEnEScJJxgmefsbTz3j6GU+/4Om3Z2OSZZppV8dLezK2TCJOEk7ax76c/t+IVFeB7YnYMhGcKE7g5yZBHE48TgJOIk4STjJOCk4EJ4oTPH3F01c8fcXTVzx9xdNXPH3F01c8fcXTVzx9w9M3PH3D0zc8fcPTNzx9w9M3PH3D0zc4/di+a1q60Yox46TAZObewuQ0mBlGfhfo27RvAc1OVzHhv2fS36YQ62mmGc4P+IZ5X7w2ShjDTfsyfvignPdBvjaeMIEw8fbfc5lP37jwiacu63WSmUh/5un4simg+RoWfq8Om9Xjdv3zTvfLx+7p4hXv45+39dXb3m+H/dP6+eOwHt/7Pr/yPaYbnfYx2Lgtw1Lxvfj78b29YcEH631M4+KYaYyujzEMWzBsxV8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
