---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfBbuowEEX/hTULe8b22O9XqqqibVohIUAUnvRU8e/Pk9wb2kWlKmx6Thrmxo4nMXyuXofny/vTdv92+Fj9efhcPZ+2u932/Wl3eNmct4d9/+/nKvifGDviujOCAiqYwAwW0MAKtonS88QZQQEVTGAGC2hgBdtERZ4iT3ueOhVMYM9LzgIaWME2MQUwggIqmMCel50FNLCCbWIOYAQFVDCByMvIyz2vOCvYJpqvg0/IhKKURMmUQjFKpfh6+ERqoESKUDzZB1MTJVMKxSiV0iAtUCJFKExuTG5MbkxuTG6e7HNvbRIJgRIpQlFKomRKTzangRVsE73VR0ZQQNRF1EXURdQJ6gR1gjpv6ZEJzCDyBHmCPEGeIk+R5y1dnQomMIMFNLCCbaK39MgIIi8hLyEvIS8hLyEvIS8hLyMvIy8jLyMvIy8jz1u6OQ2sYJtYAhhBARX0lQwuvpLRpVCMUikNYoESKULxHhGX6SETq+D0kIk/EyMjKKCCCfQB+RKNj8MoRqkUH5DfhvFxGCVShKKURMmUQjFKpSBZQ6BEilCU4snNJVMKxSiV0iDj23+USMFrR6NSEiVTCsUoeO2o947fevXmmUQovgMEl0TJlEIxSqU0iHfRJKzynpC+3mo85a0gfi1vhUmU4hf1EfrLc5JC8YtmlzmwQbxRJF6v6xW3zqfzaRh85/yyl/Yd9rg5Dfvz6s/+stutV383u8v4oY/jZj/yvDn1s32Mw/61swe+bXeD23V9qw4/l/aNsKG673ltDsi/T+htPSeEem9CDksStM6zSJoXJZTbGGq9MyFpWZIQSmVCqLYgQVtEQBJZUJ+UtzHVsOj6Ya6PS67fDPU53Xf9nJZc3xIXwIotWkGZeyDIsh4I5ZYQFyWY3bpoyRgscBIWltSXWub6RauQbV6FRfewGR+D/iXwywh+H9A4A/m2jL8NkNsq9u+auiQg2m0E+d4R/DQF79YfV8GUq1C/1T/2g83L9vTtZ9/Vg07bzfNuwOHbZf/y5ez535Fn+LPxeDq8DK+X0+BJt9+O/c+D9pFpyo99r+xHJa4tdvevFQ+xH8VS/DD6J1Ppn6yPVx/Yfw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
