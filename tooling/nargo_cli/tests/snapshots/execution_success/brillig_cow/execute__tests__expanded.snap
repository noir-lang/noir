---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
global ARRAY_SIZE: u32 = 5;

struct ExecutionResult {
    original: [Field; 5],
    modified_once: [Field; 5],
    modified_twice: [Field; 5],
}

impl ExecutionResult {
    fn is_equal(self, other: Self) -> bool {
        ((self.original == other.original) & (self.modified_once == other.modified_once))
            & (self.modified_twice == other.modified_twice)
    }
}

fn modify_in_inlined_constrained(original: [Field; 5], index: u64) -> ExecutionResult {
    let mut modified: [Field; 5] = original;
    modified[index] = 27;
    let modified_once: [Field; 5] = modified;
    {
        let i_3784: u64 = index + 1;
        modified[i_3784] = 27;
    };
    ExecutionResult { original: original, modified_once: modified_once, modified_twice: modified }
}

unconstrained fn modify_in_unconstrained(original: [Field; 5], index: u64) -> ExecutionResult {
    let mut modified: [Field; 5] = original;
    modified[index] = 27;
    let modified_once: [Field; 5] = modified;
    {
        let i_3787: u64 = index + 1;
        modified[i_3787] = 27;
    };
    ExecutionResult { original: original, modified_once: modified_once, modified_twice: modified }
}

unconstrained fn main(original: [Field; 5], index: u64, expected_result: ExecutionResult) {
    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));
    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));
}
