---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1bzXLjRBAe2Rrb8s/Gu5s9cqCKA8UFC9txQhVVW8WyQIUH4Kp4yWugC9x4BE48AUeOHHgRbjwCJ0g7086nT21nvdFslXY9VamRp1s9X3/TPT+Skrjbcnrzl4TrNNQ+1AlcO2iT8jzUs4eVvEFbs1gYkxZg7LQAY7cFGNMIGGPg9A3ifBt53mvB2PdbgHHQAoxZCzAOXbvyZ9QCTsctwDhpAcZHLcB44tqVP9MWcPq4BRiftADj0xZgPI2AcVOewbWAloOBbLxlYytJJhsx2ejIRkIWalkIZXGRyVsmR5l8JLklYSQgZcCF0FO3uyg534eLLPzugLzBzX+eUb9N2j+fLa8yw78G8c+zYLMXxX6+VPv9OPhnavdleWcffVF5N9SX5R2Xl3CPxKRijTOWi7PIXCwn5L8DX7TvQZy+zxLqDzlHmfY/dDHj7vZBCfaneJgfnRcmqlPe4UlIlpZ1P1TmQabjKzpfgB7HVo9kikWKxmYG3DjXeEyujzHZrpjskiwt634cGpPIieLQsUkjcHGzruXHuGtX3KUkS8u6H4fGHcYWx52PwMVN3B3XYNeuuPMkS8u6H4fGHcZWD/S+gevvwnXcPeHt/h7X/obHYPbUwI99SemXbls0XrrQprwqzwPUJ1kGsrSs9jMMv1PoB20pDk/6X4ffJ6HuwT16/9Tov0f9V3AbbcxLZuhnhj6+UJDzq57Zviyr9lRn9rCyPXO+APtpBPtflXe+NmM7vxJ+JL/UtMY/nqMbjP9Cc37o6kVlI+g7IdkYZBwfWLr0G30Sf38Gu6zHeHA+HpEM160xyXBd2eajq/rfML9XzKEz/BlT3yibgCwl2SOQeZKdgIzPUVOQ9Un2GGTIFxdrPJVDue8vsMt6jvrE2FYuPMmuQx33ecxs9oRwWnuvdz0X/wa7rMd4YuRipLX+guPNGf7wPIAy5J5zEbnnXMQc5lzEHOZcxBw+NBeVw0NzEeNeufAk+zHUsfdmVi5qX7iPSMvm+1+d377skqJ7OO/qXGP/nvR/Cr8xprR+yH7kelXk1/PiulgWr14t1gXz5Ign3E+cuGps47jGfKYhRftSnnSfa/WpPqA+Xivf2PZLqMXfD5OqfzhuXaNN+Zo6Z55nrPus2N/3nDRmvN6UM/H7o9AZn+U2fBGmnsGJNzhR/b6hz+uwlKmhr3tlK/488BNzbWc/0nv86Lj6OoY+eWr7NdRNxB8/39llK3XVOJTyoqzqK76eoY/22J/fwJ/Pkyr2zg58u3IAx3iDu6ze8zy0zx5WzBxAvvwObtA3a1xU33pWg/HB44j6nANsW/lhmzFyQHGl9/jRcfX9B/rkqe33UFs50DG4w7Z9c7DKLO54/oj0/HDL3TaGwY+B280dnhcygztt+8M1x51/Te62z20MrDG4GxrcZW43d7h3GhrcadufrjnurPWd30Eix7ue2USKw4PPMQnJrHNMYtiyzhXq0+a5McyzrMd4cG5RbJH3m+d81nQGLiv2LA4xn7hYPKlPh/KEcx5i49zQ9j7pOBed1xWPqTP84NhHGfqF+y4usXhFbIgPebXWZsuW3vs+nbP+CfXxnHU8Z+2Lv1jnrH9D/a6cs/4Df47nrPqafTxn1c9Zk+DI8Zx1+DnrWYPcvW/nrA8a5O5NzllNP0svVvPz9WeL9epqOS/mZ/c+S7e+scD5V4p+p4HfcaC+2vOk/3EwIOvHJzC3bnSN/kTvYo9esqPe2DDa0rLaZn3fgd+9qL72PSzrGFU2AhmuDVLG4TfyhbYUhyd9/aBLxwS/VdH7p0b/A+q/gtto43epI0N/ZOjL+Hwabtq+S4O+G8z7XLH1yD62MTaNnRh5tVgWq3WxyvOLRf7DIl8e8o6Kv39kXGynu8f21LCl3x3F/JZSSuR9duz/Hcl5X4dciU8vaf5Xmb4n5Xt7IEf9S5j3voWcVruOxnAEcm/Ief/gAI8VI7xmoj6v04gN9yLD17DV2dP3yNAf7ukbceG9eJ83cPIzpYGBxxu2OI/YLt6HPuD48/cN98XV/8qrUUP5RAAA",
  "debug_symbols": "ndrbTuNAEATQf/FzHqZ7Lt3Dr6xWKEBAkaIEhbDSCvHv67DkQmbiqOoFYcjBhiobuzMfw9Pi4f3lfrl+3rwNd78+htXmcb5bbtbj1sfnbHjYLler5cv9+ZeHsP9g9vX6t9f5er/5tptvd8OdxFBnw2L9tP801fEnPC9Xi+Euh8/fs8GcMBU3HggjhFHCRMIkwmTCFML0e6Cejib4pXHCVNzUQBghjBImEiYRJhOmEIboQSV6UG/3YHzhTyMhMEgYdOWS4MdTKMXcoMigxKDMoMIgY5AzqBJIAoOEQVcaUU41cm9QZFBiUGZQYZAxyBlUCaSBQcIgphHKNEJvNiLF0qDMoEKg2N2TJf82VqwhBSeGE8dJhUkKOBGcKE76XQt6DDNoE2bqdy2EckLSoMygwiBjkDOoEigHBgmDlEGRQUwjMtOIzDQiM43ITCPylUaYHZE351MJDBIGKYOuNKKGI6raoCuNKH7aU3M1KplBhUHGIGdQJZAFBgmDlEGRQUwjjGmEMY0wphHGNMKYRjjTCGca4UwjnGmEM41wphHONMKZRjjTCGcaUZlGVKYRlWlEZRpRmUb0Z0uxyrdJ2vx36o+Wpoj2B0vTRHCiOIk4STjJOOmedCkeRijJQ0MMJ46TCpP+EGmaCE4UJxEnV9IPRyIN6aaf6uG2Mad2LwUnhhPHSYVJf2A0TQQnipM4HWVOTZR6czbXjm9UnUGVQDEwSBikDIoMSgzqT8zCwVhoSfeUK16OpGlDf2I2TRwnFSb9idk0EZwoTiJOEk4yTvD0E55+wtNPePoZT78/IbNsx+Fnc77052PTJOIk4aR/7tvhsm7W3GxleFqu2XDiOIGn5VoCTgQnipOIk4STjBM8/YKnX/D0C56+4ekbnr7h6RuevuHpG56+4ekbnr7h6RuevuPpO56+4+k7nr7j6TuevsPpR3H0sSFKhYkGnPTndNUOY4Zx2HOG/pv+Y0ath5sF/fEW5pe58sAwuZ/+84Ke3g8a5z3x0kTCJMLkvhE7/Q3ypSmEMcL47d/nPJ9Z58YnHrrsTZJE+v1nixtGQPM5bvyZb5fzh9Xie4nt8/v68WzF7e7v6+Ji8e3rdvO4eHrfLvbLcE8rcPfHq1VnUeL+WMatIjOT3/slUeOGqM8k7r/1NXOKksZXlvEIxqP4Bw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
