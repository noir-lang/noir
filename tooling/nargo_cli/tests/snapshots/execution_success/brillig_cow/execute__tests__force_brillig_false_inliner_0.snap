---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1avY4jRRCuGU97PbZ37f05JDIkkEhnzvZ6QSCtxCLgyAjJvL7bgIgnQJMQ8AKEPAIhL4GERERISEhIyG3vdtnf1JR77XP36kbalqwed9d0ffVNVXf1TCd0X85uf4m7zlxtXJ3ANUGbLZeuLvYrZcCxilgYkxZgTFuAsdMCjFkEjDFwmoA4HyPOuy149gctwNhrAca8BRj71K74GbSA02ELMB62AONRCzCOqF3xM24Bp8ctwHjSAoynLcB4FgHjXXkG1xa03RjYxNsmtjbIbCJmEx2bSNiF2i6EdnGxk7edHO3kY4PbBox1SPvALaFntLkwOV+5i9z9T6E/YPJf5kJvyPEvitkiV+wLiH+SuzG7UcYvZzz+QRz8BY/7ebUeH23h/o6rX1RrLl/APdYnGWucZzmNzcXsUNhPYAvr7sXRfZ4Ifcg59rH+PsX0u/sXJaiP8Uh+eF44ZJlqjScRfVnVtIP7DPTx87Uyn4Kc9K2u6GMstrBv5sANUXCfvH7yyXb5ZEf0ZVXTjl19EjlhHPxssghc3K5rxZPftcvvMtGXVU07dvU79C3pdyYCF7d+97QGU7v8zoi+rGrasavfoW91Qe5LuP7aXcfNCe/ze1z7Az+D4lTBj7psOahoVdhfOtDGvDLPPZQXfTn0ZVVdT9/9z0APjsU4jJD/wv0fuboL9/D9Y0V/V+iv4VbaJC+5Ip8r8vhBwe5fec/2WVUfj2WK/cpqz3kF44ecw6wNNgZSB3xE+jxBtI6PWPs7OYew70idXXgmco7F+ceItm9cbf/3kvU9co7yzVtj2pxHadxlgrtI68GKu1zhrufhDt9p5Ap33PYtheMu25I7I7jLI3PXV7jLPdz1oY+vkTtuu6Zw3JktuUsEd/3I3A0U7voe7gbQx9fIHbd9R+G4SxQ88j5tfZY2mg36rirdhu/BhoEDkVPT9ktXF3uV8tr3fmM1P1R1G8PoLs6tjUdOGedgQ7DRCEyH0NdR5PFZ2N+RIn8IMvw8xkIeudbiZQj8yDFjxAvjyh6wI1XsQA6MaPvB1SHiZajg0d4hBzy8UmrPOaNmXMq5bpUvbpA/Enyx/I/A1wdJnRvtfjkndGFceZ8tV1VdL8v/BHoHEC93+qu1LvRLW7KqjuPStRf7FTVu0Tdk3GpxqPmSfD4oj5xK3xtBn4xbOT8zP3Jdeay4HSh27Bq3P7tai9tU4Q7bfLlp6uEuEdwdReZupHCn+UBKTR8YKdxx2y8UjrtEwZMreAJ+Nys43sbULNx3LHRj3wnVbSaoSdiPBW2y3H0o5iFSxpLfLxDbiJo8yf3PWNhx6f4Xe5ZEYEEfGyv2ptTk9RjsNKLtV+BJ+pg2t2Gbb/8z8nAnc5LjyNydKNwde7hDv+Nr5I7bfqNw3A0VPLmCJ2B8TtjnT6lZuO8MdGei7xn0IX5ZtPhkm3aNT/QjxpYLOwLzNJVckIILuTCi7x3ow/xOFo0ntmlXntBnGBv7L/ve766O+b3ClhOBE3XJNe8PgSnWO2UNUyowscyfbwGmbfKcWM+PdbHv4jxqFKwpNX29lnOLtr9cHSvP0biTa1Ck70feHFF7N7Nrjvg3heNuuCV3cm8SJ3/0r98j2szdtuv3PxSOuzfdm8Q4E/MQdxrWXbn7l8Jx54tZ7JM5d6x52Med9ix35e4/2sxdQk3uEg93mYJH407OdzHOxDzEXRaAu/8pHHdDBQ9++8yq8BzNL+45usNYrW2UuR/qN0L+wA2A3yG43ued5c18Ud5MFjeL2eLly+lyIfMR5HAQQf9iPrlYPp8u59ezyWJy/uj6l7Pz6+V0tihelfbv84f0a9/y8R2nLXweAM8LoDzmnCh/4gawOcKZu5ZnRFCflXvfI5dsqO/GUNqyqt6mnSPA8xUsz7r7VRMj9w2gzwg9Q/cf+cKxGIcR8u+5AVbvfeAevn+s6O8J/TXcShvO/3KsjtKG5yveFXGLtoc+s3SnU4yPbRIb+06MuLoNqflyMS/Lj6blq2k5eyiu8NyGPGcncclxOp6xx8pYfL6F10zcz8hcLfYegc+CbNojGLAH5fGaaL1mchs7hLZmGsGdbPPlavIcQ6z9Z+TzOaV2hphtsfzPN3CG38Zw/b6q1v0o/wnM6R/DfCV5Zf8ckO6XMo/SziZq/s/tuSIvz+8gNvTBfIuxUo/uviKfe3QjLrwX7zMKzp7Q21XwGGUs31keX8yg77CfbutXrwGYpCVVPUQAAA==",
  "debug_symbols": "pZfNbuIwFEbfhTUL3+ufa/dVRlVF27RCQoAojDSqePfxJd8HZQGqwqbnpMEHkzgJfM/eh9fD58ty/bH5mj39+Z697par1fLzZbV5W+yXm3X/7/cs+B8JHTrvFFDBCCYwgwU0sM6eorONlAAK2HvJGcEEZrCABlawjdQACoieoqfoKXqKnqKnvZedbWQMoIAKRjCBGSxg7xVnBdvIFEABFYxg71VnBgtoYAXbyBxAARWMIHoZvYxeRi+jl9ErvdecAioYwQRmsIAGVrCNNPQMPUPP0DP0DD1Dz9Az9Ay9il5Fr6JX0au9J8ElUwrFKJXSIC1QhNK7Ii6RkiiZUihGqZQ2ivr1IuoiFKVESqJkSqEYpVK83Feq+pUzilCUEimJkimF4uXsUikN4tfQKEJRSqQkipfNpVCMUikN4lfTKEJRSqQkCsuR5chyZDmynFj2C0uqi1IiJVEypVCMUikN4lfYKCxnljPLmeXMcmb5tEiai1Eqpb+F9sUWTzfVkwhFKZGSKJlSIMJRfrpVXM67/LarLpXSIH6WNboIRSn+ptmFQT/Lo3hZjsf5jA+Hl/1uGPzZ8ONp0Z8h28VuWO9nT+vDajWf/V2sDqcXfW0X6xP3i13f2+c4rN87e/BjuRrcjvPL6HB7aL81N4zud+F2DuTrgtwuWKoIWLEJ4/vDL3EGQcukQiiXgkwqmJ0LddocSr0Ubh6He2dC6/k4xFBvFezhOdwpxCYIJNUJ41PkYko1TBnfeBpyCo8ewzypEOv5ekgx31wJ8V6ipEuiTEmUygVtQSZ9issUYr25lqQ8vJjuJX61msK98eG8GiYdhWacQP9O8aPw+0DjedCrW9NvA3q5M/WvLnFKQOwyg/zoDG59BL8D37y/W+RarFfjn/vG4m25u/qBc/TQbrl4XQ3Y/Dis337s3f/bcg9/IG13m7fh/bAbvHT5ldT//FELc23y3J+ZfavI3NzltCvXuZbom+KbTfsr0/PRJ/Yf",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
