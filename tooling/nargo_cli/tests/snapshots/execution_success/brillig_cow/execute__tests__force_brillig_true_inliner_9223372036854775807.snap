---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZndTiM7EITfJddc2O32H6+yQihAWEWKAsrCkY4Q735c4y4CFzOaM9beUF82mVq73G1bycfu6fDw/vv+eH5++bO7/fWxe7gcT6fj7/vTy+P+7fhybv/6sXP4U8vuVm52tU7inTP1pmIaTNU0mqbdbYBm02Jau3pn6k2bn0KDqZpG02SaTYtp7SrO1Juan5ifmJ+Yn5ifmJ80vwitXYMz9aZi2vwSVE2jaTJtfhlaTGtXdabeVEyDafOr0GiaTLNpMa1dozP1pmIaTM0vml80v2h+0fyi+aXm5z3AE4TQLD3WNCkhEhIhEwqhGmRH4FMZn8GiZ3zGNSiO4AlCCAQlREIiZEIh0LnSudK50rnSudK5whmrXBMhE+CMBUZDAAQd0cEThBAISogE8xEUvs8APFUBgaAENJMDJEImFEI1QAd08AQh0AdVLh6Ap9paCOq8gycIIRCUEAmJkAlwVkA1QMV38AQhBIISIgHOEZAJhVANUPsdPEEIgQBnxIsG6JAImVAI1QBd0METhBAIdE50TnROdE50TnRGFwjWNHuCEJpzwOpkJURCImRCIVQD9E4H+qAvAlYZfSEFUAjVAH3RwROEEAhKiIREoHOlczXn4BzBE4SAEQaAEiIBY1ZAJhRCNZjOjAk8QQiBQB/0RWiVENAXIQM8QQh4CgPD6dAhEhIhEwqhGqB3OtAHfREqAMeKAxRCNUBfdPAEIQSCEiKBw0A7qAdUA7RDBxgKQAiBAEPEgnaYRhg5VLTDBInxovgV0aH4OwQCfBIgEhIBU8YIUfxT8olLgOLvYCUaUOqK/xSl3iERmk+cPlMI1QClHjEdHBOo8IBjokMg2FYZUPwRpYXi71ANUPwRM0XxdxBC84mYzlT8MJyKf4JEsCNAUeoxAzxBCPApACVEAq4KDpD7EaDToTBBNZgOBQHgvuEBSogE+EyfyYRCaD6pTUdR/DhqFcXfAc7h8/Nmxzvf/dvlcMCV79slsF0NX/eXw/ltd3t+P51udv/sT+/Th/687s+Tvu0v7d02j8P5qWkzfD6eDqDPm+vTbv7Rdseq9nS7TtUvg/jTwc87ZNTbZJBT3vB8u8UqR+AkbXJw6ergNznk/OVQto2hui+HKpscUrmOYTbJpbWU8pVk27nnHMrwGBYcWjebQSvy2RTckgFzjOq3GLTrIofQLozfLP6HQ2U9yY+KXBuCBvaUFjc7Bx0NQYdD0L8ZQs1fc5gPoYyGUIZDKKMhrG3J6LY0dTsx6aAhzjlIWLJIerVIWyxSYQ7Z+U2zuA6h3QVmh5CG96Yli1Wbk4yWpAyXpAyX5FIKq3anIIMpLBmsS2HZYTiFNdtTSKMppOEU0t/cntbtDEtjkOvlq30JEzbMoj2Wr7OImxy+j2EuB13Y33IO3N9K2lCPK1OQ4RRkOIU8lsLS3rQuhWWHNSmsH8PcLKIfS8EPp+CHU/DjKcTBFHQ4BR1OQYdTqIMpuOEU3HAKbjSFtGV3vGsv9o/Hy4+frj5hdDnuH04He/n8fn789u7bv698hz99vV5eHg9P75cDnK6/f7U/v7R9S6ix3LXvfNqr9qVL9nf4DQtvtW+ZNTi89HjZVlKTv/vEwP4D",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
