---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZ3dbiI5EIXfhWsuXD922XmV1WhEEjJCQiQiyUqrKO++9Ez4GRiMxvQxdROlg6vOF6hTpt2G/pg8zu/ff3xfrJ6eXyd3/3xMls8Ps7fF82pz9PE5ndyvF8vl4sf3wz9PwvDD9Of415fZajh8fZut3yZ3JKFMJ/PV4/Crlk2Gp8VyPrmL4XN6Mtg0f421ZIdDv00nFrHpEza9YdNnbPoCTZ8DNj1h0/PV6SmwbgcHTscCghZQtEBECyS0gKEF8ggCIe0F6FiggAVKQAsQWoDRAoIWULRARAsktIChBdBOLmgnbx6FKxBcgeEKAlcYw85mO4WcThQiXCHBFQyukOEKY3i6hJ1C4WMFCnAFgiswXGEMT6e8f6XtREHhChGukOAKBlfIcIWCVuAAVyC4AsMV4J5muKcZ7mmGe5rhnma4pxnuaYF7WuCeFrinBe5pgXta4J4WuKcF7mmBe1rgnla4pxXuaYV7WuGe1j97mvNuYVZCritIoa+xynxp6PZMI+rJqb1GPyjJDUqknihUbDuWSj6A+cWifVnKdiWIf7s68Ivl+mpR2dpIc7jmJUp+UMwNSgo9UeqFm6QvS61w0/Um0mK75/2qlyj6QUl+UEpPlHrhGvdlqRWuXTZRDMdPpmlLUGwJSi1B1hKUW4JKQ1AOLUHUEnTmvWzevdNUiReqR5LuB5+s55/bszGigsIVIlwhwRUMrpDhCgWtcG7rxl8opLxtphZOJplzOzdGy8/g/ALOr+D8EZw/gfMbOP/1Hq7tEKRSoPk5BHB+AudncH4B51dw/gjOn8D5DZw/g/OD/Utg/xLYvwT2L4H9S2D/Eti/BPYvgf1LYP8S2L8M9i+D/XtuD8b+pEFynysAfG6zxi1Q1A+K9USprtLxuQ0KKJbKKh2f28rwFywjXQFgYT8o4gcl9US5ULilL0utcPV6E410BYCV/KCwH5TYE6VeuJr7slQL96KJTtcXOYaWIGoJ4pYgaQnSlqDYEpRagqwlqPgp+tS1Q/L+gzib1S45ZiFHLOyIRfqykO0bUzxmUUcs0RFLul29HE4efzglNdmekubjaSaZnykvOZp+U/HDYl3PeOqzhXU95al3RVNHLNERS+rLUuuKZo5YsiOWcrt6aZ8tcujbiWpdMZMjFnbEcn0nGm0JM6eeLPWumM0RS3bEUvqy1LpiCY5YyBEL365e2meLIn07Ua0rFnXEEh2xXN513GtbOpeuW+SrXVFCcMRCjli4L0ulK0oQRyzqiCXerl6aZwsJqW8nqnRFCeaIJfthoRE60UgrUULck6XeFUkcsagjltiXpdYVKTliMUcs+Xb10j5bUOnbiWpdkYMjFnLEcn0nGmslSrjr10DUuyInRyzmiCX3Zal1RS5+WCQ4YqHb1Uv7bCHctxPVuqKIIxZ1wvK5Ofh3tl7M7pfzrxtgPL2vHg7uh/H238v86NYYL+vnh/nj+3o+3CRjf3+MwS2iZSoWhv9xc5RoavRt+PbX4SGxqSgPh0Mty2bWEJMNwYbifw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
