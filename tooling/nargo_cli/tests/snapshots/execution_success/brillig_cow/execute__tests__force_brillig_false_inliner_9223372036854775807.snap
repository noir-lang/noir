---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZ3dbuJIEIXfxddcdFX1X+VVVqsRScgICZGIJCutorz72DPhZ2DcaNo+Td1EOOqq8wF1qnG7wR/d4+r+/fu39fbp+bW7++ej2zw/LN/Wz9v+6ONz0d3v1pvN+vu30393bviT/M/xry/L7XD4+rbcvXV3JE4X3Wr7ODz02md4Wm9W3V1wn4uLwcnnr7EpptOh/y66FLDpIzZ9wqbP2PQKTZ8dNj1h0/Pk9OTY7wc7jucCMoOAi0cBOhfwaIGAFohogYQWyGgBBQuoQwsQWoDRAmgnK9rJinayop2saCcr2sk6h5NTOgjk8wmnl4crEFyB4QoCV5jDzuoOCsoXCnP4Oebjc0gXChGukOAKGa6gaAVycAWCKzBcQeAKHq4A9zTBPU1wTxPc0wT3NMM9zXBPM9zTDPc0wz3NcE8z3NMM9zTDPc1wTwvc0wL3tMA9LXBPC9zTAve0/NnTnA+rjeJyWUGUvsZ65mtD92cawdMFSrKDku2gqBkUH1qikKb9WNJ8AvOLJbdl0f1qC/+2+v6LZfpb5GXvaJ/dhLcoODsoZAfFt0QpF25IbVlKhRumm8hrOrzuk94iNYMSnR0UaYlSLtwY27KUCjdeN1FwFy9mrgnSiqDkaoKoJohrgqQmyNcEhZqgkdPMfPjQ6yVcqR6J/jj4YtF8bKvFjAoZrqBohbE9FzMqEFyB4QoCV/CTFWLeN9PkLiaZsa0Xs+WP4PwJnD+D8ys2vzpwfgLnn+7h0uYsUgHn9+D8AZw/gvMncP4Mzq/Q/OwcOD+B8zM4v4Dze3D+AM4fwfkTOH8G5wf7l8D+JbB/CexfAvuXwP4lsH/HtlIcTxokt7kCwGN7Lm6Bks2gjO2AwKAUV+l4bJ8BiqWwSsdjOxL+gmWmKwDM0Q5KMoMytpEAg1Iu3LHL9SiWUuHKdBPNdAWAJdhBiXZQtCVKuXA9t2UpFa6/aqLL9UX2viYo1ATFmqBUE5RrgrQiKLiaIKoJEjtFH5p2SD5+2aVfrZBzlmCIJRpiSW1ZKB0bUzhnyYZY1A5LdLerl9PJ4w+npEn2p6T5fJqJZGfKi4am3yiGWJqe8ZRni9j0lKfcFWM2xKJ2WJJry1LqiokMsbAhFrldvdTPFsm37USlrpiCIZZoiGV6J5ptCTO7lizlrpjJEAsbYpG2LKWumL0hlmCIJd6uXupni5zadqJSV8zZEIvaYdHru45bbUtnbbpFvtwVR3Z63YYlGGKJbVlKXVGTIZZsiEVvVy/Vs4U417YTFbqiODLEwoZYZuhEM61EiYstWYpdUVwyxJINsWhblkJXFHKGWMgQC9+uXupnC5K2najUFckbYgmGWBp/sb80W1DT314od0V2hljIEAu3ZSl1RRZDLN4QS7hdvdTPFhzbdqJSV+RkiMXKT6989gf/LXfr5f1m9XXvgaf37cPJrQje/n9Znd2V4GX3/LB6fN+thvsTHG9NMHRX8W4hkYbn2B9FWqTh8c+PgCK0EInD4dD7JHI/0vcEPcUP",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
