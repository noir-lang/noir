---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "9558946300811596045",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1aMW8rRRDes+8cn+0k5iU0tPyBuxc7TgqkJ4EEj46S8l5idzT8Aa6j5I8gIVFRUlJSItGAhESBaOiQQHpZZyf+/N34bCu7SVbKStbe7cztfPPt7NzerhNzW05vfom7Tl2duTqBawNttrxydXG/UnrsqwiFMYkAYycCjN0IMKYBMIbAmXnE+RDzvBfB2B9EgLEfAcY8AowDE9f8GUbA6SgCjIcRYDyKAOOxiWv+jCPg9J0IML6IAONJBBhPA2Bclnfh2oK2HwZ24W0XtnaS2YWYXejYhYR9UdsXoX252ORtk6NNPnZy2wljA9IOuCX01GwuQs777iJ39x2Qe1z8lznZ9dn/RTG9zBX/POI/y12fvSD9l1Pp/yAM/kL6/ahe9Y++iLzr6tf1isvX8IyNScEaZiwnk8BcTA/JfwO+iO1+GNvnCdlDzlEm9gcmZNzdbpSgPcHD/EheOBSdeoUnIVlaN/0QWQYyGV+r8wHocWz1SCZYbJHYzIEbY7zHZPUck3HFZJdkad30Y9+YRE4Eh4xNGoCLm7hbPMddXHGXkiytm37sG3cYWxx3WQAubtZTz+9gE1fcZSRL66Yf+8YdxlYP9D6B60/dddg14e36Ht/9nsegOFHwoy1bDmpzVyReutAmvArPfdQnWQ6ytF63M3D3KdjBvgRHRvofu/tjV/fgGXl+rNjvkf013Eob85Ir+rmijwcK9vtVvtk+rNf7E53ifmW5AWtj9FfX37FpzmPOOaG+v3iOy9iyzR5wxjkQ80NGbZ+52t7/Tv5hDmnLK2Ozee3Nz2lzkfO28cZf+Ub6HpBNP/0XU/F7CPxqPg9AjvqfmxX/f7jrtm8lif20DuLPucXxJ+BIwOYSP2EagKyr6ONYo9+oj2MjnI1JH+NDm4858BNwvAv2I93iR0fxAzngeFi42sd8zBU82n6Ux4PwUhvn1DTnPefSkbvvbdDH+YX6XwBf/xM32vOcc7j9lR8epuxXtgUX+/Ul+NWWFzDubUnrIP6oeQFjj/OCNs+1WGWeUB/HhmN7BDLOC9y38MPvxYfKC33Fj33zwleu1vJCR+EO29re050W7jinBporBccAcqfFQMc0Y2CkcCdtXxt/3OVmN+44344Cc3f3/QZ+jMxm7g5BJtfInbR9Y/xxp60BcwWPR37mkquOTLOI7Jhso2xMPhuoDfmPBX3qw0OHih7jwTgSbE+Np5RkyBOf2WHxyRPuvTxVnjKSIU84H7j45An3AQWbzHOJtW9dHXJ/0JYXhBNtZWZ9XL8jTKH2cDRMHcIkHH7/BDDtss4JcZ5lS0J84Pumq2DtmGYMyrXG7w+ufsx1TogzGeQuU7hLzWbuNv1JP6O2H40/7nZd53DchcobbeuczGzmbtd1zk/GH3dtcYcyjrtQuaSNO20s9+XuZ7OZu8Q0uUtauMsVPBp3vL7OH4G73AN3vxh/3Gn707hfntb+OZpd3HK0xFivfOT1C9rPSP83d4/7Z1LfZ29qMavKxVm1qKbV9fXkquJ3KnI4DGC/mp1dXL2cXM3eTM+qs/MHtz+/uLwuLhfzqizLl9fFfJt97fwH95pskTMkPGNCfVw3of5fonvz+9td87ki2rN6/7XoJRvqZR9KW1qvt2lnT3gmJ/pie1A3MYpsCLKM7IzcPfKFfQmOjPT/dfcyJniOJs+PFft9sr+GW2njM7mhoj9U9O34/CP9uRp9933OvbRJ/WMbY5PYCTGvJtNqdlXNyvJyUs4n5XTbvMKzRP4mY1zcT7el77HSl5yJhl6Phf1faxH6f62ltocgXFmf8mTVjjLcx9f+18Vr8qNk1efIXWvrGRnDIcgzRR54vXN3bjHY4m9O/or+iXMKzy0SesaY9vUMY0B99tsAX7jPPiC+HuP8t6vg4X3991r40vzvtPC17WyV+UIu8VkNL3LL696+gidT+uJ8xf3ic+gD8ij5YNf5+xZtWeoX/T4AAA==",
  "debug_symbols": "tZvbbtpAFEX/xc88zDlnrvmVqopIQiIkBBEhlaoo/147DZdiDGXweoniMHttIryMPfZ8NE+zh/eX+/nyefXW3P34aBarx+lmvlq2Wx+fk+ZhPV8s5i/3h39uXPcjha/xb6/TZbf5tpmuN82dmCuTZrZ86n71pSU8zxez5i64z0lvcPL5e2yK6XDoz0mTIotPLD6z+ILis2PxwuKVxdvNeHHqt4OdxuMCP0KBi/sCOS4IdEGkCxJdkOmCAhcURxcIXaB0gdEFtMmFNrnQJhfa5EKbXGiT21fxBsEbFG8wvGEMnVPaNeTYawh4Q8QbEt6Q8YYxnC5u11D0uEHGcDrm/f+Qeg2CNyjeYHiDxxsC3hDxhoQ3ZLyh0A2KO62404o7rbjTijutuNOKO62404o7rbjThjttuNOGO22404Y7bbjThjttuNOGO2240x532uNOe9xpjzvtcaf9aac176bfzeXzDVbke6zX3lWcjzA/wfwM8wvLDw7mC8xXmG83871tbfTZ9fge5geYH2F+gvkZ5heWHx3Mv91fX7YThcH3+QrzDeZ7mB9gfoT5CeZnmH/Z39ALJVcTkpqQ1oSsJuRrQqEmFGtCqSY0cCmWd6fP3sKF02eLfj+4dxtk6DGj8RqGnjQasUHwBsUbDG/weEPAG+LNDTFv7/8m17v9O/TQ0Wj8DPMLyy8O5gvMV5hvMP92h8899yglwPwI8xPMzzC/oHx1DuYLzFeYbzDfw/wA8yPMTzA/w3zYX4H9Fdhfgf0V2F+B/RXYX4H9Fdjf05OttnsML3jpRfL1kXJ1ZGAWrKTtzH176nAQ+ps5fTAqZXsCqP8sHPnKDEzcnO05PW+j+wdh269tO85oRcYqMr4iEyoysSKTKjL5dEbS/jMNx5lyfeb0pMqFjFRktCJjFRlfkfmP/eDQnxPHmmTbY00+Nm1gquGsnQPTB+cz1x4FPtuNX9P1fPqwmH2v4Hx+Xz4eLOjc/H6dHa3tfF2vHmdP7+tZt8pzv8Cz24vUZKJB2/fSfW5RJkm6S5Gvl6RMVH232e07GqwdGdp30L6LPw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
