---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 64
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _8",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 190)] []",
    "BLACKBOX::RANGE [(_4, 64)] []",
    "EXPR [ (1, _0) (-1, _1) (-18446744073709551616, _3) (-1, _4) 0 ]",
    "EXPR [ (-1, _3) (-1, _5) 1186564023676924939888766319973246049704924238154051448977 ]",
    "BLACKBOX::RANGE [(_5, 190)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(3))], q_c: 1186564023676924939888766319973246049704924238154051448977 })], outputs: [Simple(Witness(6))]",
    "EXPR [ (-1, _3, _6) (1186564023676924939888766319973246049704924238154051448977, _6) (1, _7) -1 ]",
    "EXPR [ (-1, _3, _7) (1186564023676924939888766319973246049704924238154051448977, _7) 0 ]",
    "EXPR [ (1, _4, _7) (4331911350818177023, _7) (-1, _8) 0 ]",
    "BLACKBOX::RANGE [(_8, 63)] []",
    "EXPR [ (1, _2) (-1, _4) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZHbCoMwDED/Jc998DKvvzKGVI1SKFVqOxjiv6/N6qYPg7GXkzbpKSFZocfWjo1Qw7RAfV2h1UJKMTZy6rgRk3LZdWOwXxujEV0KDnVnzVyjMlArKyWDO5eWHi0zVxQN164aMUDVu+g+HIREf9rYx46+q1kS3Dx5y9nPdlEGu0z/sMsq2FV1sm/uxjuhT7OCGOqUQUJMiRdiRsyJBbEkVsQ4egVvb74VLXgrMUx/sKo7LMM85r2yr2vWU4e91eiboZpr7wk=",
  "file_map": {
    "50": {
      "source": "fn main(a: Field, b: bool) -> pub u64 {\n    let c = b as Field;\n    let res = a - c;\n    res as u64\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
