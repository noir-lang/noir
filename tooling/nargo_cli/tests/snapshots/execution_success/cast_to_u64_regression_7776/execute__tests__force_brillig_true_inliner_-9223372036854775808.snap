---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 64
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ]], outputs: [_2]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U1) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 24 }, Cast { destination: Relative(3), source: Relative(2), bit_size: Field }, BinaryFieldOp { destination: Relative(2), op: Sub, lhs: Relative(1), rhs: Relative(3) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(3), bit_size: Field }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Relative(2) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 29 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZFNDoMgEIXvMmsWSv+EqzSNQR0NCUGD0KQx3L2D1VYXTZpu5jE8vkcyM0GDVehKbdt+BHmdoHLaGN2Vpq+V172l2wmyVPILyJxBXoDkJALkgQHPXpKTxMhgxUrvEBO1yaH0QTm0HqQNxjC4KxPmR+Og7KxeOXIzBmgbUgpstcF0iuxDZ9/RE1/YM3/Dp5/pS7HQxeEPuhALLcSOvlGnau12M40px2lVGVzaNth64/rHsDrrTgbX19gEhylpsxiqV35kXNxi+u0J",
  "file_map": {
    "50": {
      "source": "fn main(a: Field, b: bool) -> pub u64 {\n    let c = b as Field;\n    let res = a - c;\n    res as u64\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
