---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 35 }, Const { destination: Relative(3), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 20 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 25 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(1), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 30 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(3), rhs: Relative(3) }, JumpIf { condition: Relative(1), location: 34 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 40 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLLisQgEEX/xbULH3mY/ErTBJOYRhAT7GRgCP77lCkzk14MNL3xqOW5FuhORtNvj876aX6S9raTPljn7KNz86BXO3vY3QlLAy9JyynhFaJGKERzQMBBAeAIgZCIAgEpElAhaoRCNAckpBQAjhAISClipORsrFuDMamvS6fQ/6KD8Stp/eYcJV/abceh56L9wVUHqDJKjB+BEDhZZ9Is0j+b/a9WRXbr8lcu37ZVk23O2Ae6qFX2hVIf+JKJ7Ev26t9hpQcbXh4+pqRgde9MXk6bHy7V9Xs5K+fHWcI8mHELJiVdfg+MN1nSgt1juu0H",
  "file_map": {
    "50": {
      "source": "fn main(x: Field, y: Field) {\n    let pair = (x, y);\n    assert(pair.0 == 1);\n    assert(pair.1 == 0);\n\n    let (a, b) = if true { (0, 1) } else { (2, 3) };\n    assert(a == 0);\n    assert(b == 1);\n\n    let (u, v) = if x as u32 < 1 { (x, x + 1) } else { (x + 1, x) };\n    assert(u == x + 1);\n    assert(v == x);\n    // Test mutating tuples\n    let mut mutable = ((0, 0), 1, 2, 3);\n    mutable.0 = (x, y);\n    mutable.2 = 7;\n    assert(mutable.0.0 == 1);\n    assert(mutable.0.1 == 0);\n    assert(mutable.1 == 1);\n    assert(mutable.2 == 7);\n    assert(mutable.3 == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
