---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/7WOQQqAMAwEbfFBSZO0yc2vWGz//wQVcxAUL+rAsrdhwnAQtsXhSvCf/OEdeHYRZOZWUkPCGZJVFWCpWVFRVJakRE1Zi1UrYMjUsItRd9mfneE7F+yu0V3xpvmJFb9x88egAQAA",
  "debug_symbols": "bY1bCsMgEEX3Mt9+GGj6cCulBB9jGBAVH4Ui2XtNSCCFfp57z9xpYFDVeSJvQwbxbOCCloWC79SAb1GO0q+Ui0wFxPXCAL0BcRsXBpYcghj58mIw/NPvj10fOP/xO6hEztE8nZ/2+C0TSeVwR1u9PrXlE4/muI8paDQ14bq0dX3+Cw==",
  "file_map": {
    "50": {
      "source": "fn main(x: Field, y: Field) {\n    let pair = (x, y);\n    assert(pair.0 == 1);\n    assert(pair.1 == 0);\n\n    let (a, b) = if true { (0, 1) } else { (2, 3) };\n    assert(a == 0);\n    assert(b == 1);\n\n    let (u, v) = if x as u32 < 1 { (x, x + 1) } else { (x + 1, x) };\n    assert(u == x + 1);\n    assert(v == x);\n    // Test mutating tuples\n    let mut mutable = ((0, 0), 1, 2, 3);\n    mutable.0 = (x, y);\n    mutable.2 = 7;\n    assert(mutable.0.0 == 1);\n    assert(mutable.0.1 == 0);\n    assert(mutable.1 == 1);\n    assert(mutable.2 == 7);\n    assert(mutable.3 == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
