---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/81VTU/DMAx1ugYoUyUEB45c4MYhW4u6YyU+/kfE1N/Rn44ibOq8pReWCCxNyerk+fnZbg19m+FfsJrXik5Nzoy8uvNslxHLleRpCvH8Iar3htaF73ltKC5S8G8yJtwkOOXCP7h+aBL5ZeTfNQqzAP5e8Osy+O6Scd7nGJ8gbkvx8Oo74tOD/MG+K/bL/ob3DeCVqLvmlFu3uwT/SuUW7HVe9MgUdy/Yb/mxuy3X6GGBjvqBIC/sB90veBf7Q/ts4q7kZ+HsPa9SXwt4Yx4t3K3CJYhVeOb7NqGHWJvI24DvQvkqyEMb1lXnFPrgSeHiObEtLf1ezzHOyM/dGTYcnJN4G8a3dMpdx7dw/pH/XwN/0Xj8Jc9p8Lup85N/8cdj/+mxZ4JVSqf/PlvPvP7lbCF/5JzSxazcxXcy6jTmyafHuJbWvw2oeQf8Sn3nU5pLrNCbXzM1IFOhCwAA",
  "debug_symbols": "tdbZaoUwEAbgd8m1F9kmi69SysElHgKi4lIo4rs3FgVJpQfxzI04Mv9HYFRmJqXLp+fDN1U7kPRjJnVbZKNvm1DNS0Ly3te1fz6OjwldL0z/9g9d1qzlMGb9SFImICGuKcMdqJCvfO1ICnRJ/rRytbdyzY+tnwlh5o24inF7Fzd2xy1EOKeYOMPEOSYubuKC8q1VMBPjEhMHTFxh4hoTN5i4RcTF6clByi0BwOKEfZWIX3d5+hcAZfaElnGCXU7wywlxOXH6ZYFhW0JR+f8glN5xZXSMw/twG89Mqpu4pvt4NaMxrjFxg4lbRBwoGr6E6ivrfZbXbltNqqkpDpvK+N25aGnp+rZw5dS7dX05bC7rMQVLhApsoH8A",
  "file_map": {
    "50": {
      "source": "global TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\n// Identical to `entry_point_one`\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    nested_inner_func(x, y);\n}\n\nunconstrained fn nested_inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
