---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1WzUrEMBBOuo0al4LowaMXvXnIbivdg0LB1fcoLn2OProGZ8h0moXFJuDCfFAmv9/8ho5Wv9A/XwHjEiTOKTTIDqRbhk1CLpfTTp3DzpIFXgKdKdBaharWEePpGgKT8gbSsnV/Z5XQcRuxKRX/zjWtZf4ltr+2hDMD/9ZG8piQ310Cz8c45VdMbwVzWjN4B/fog/6EvSvYx/ENjC3jy5F3alPquN1F7C+Ibx7vY4hHIr1b5N6n567XkKOHQD2pB8X84vVA64Xf5fVB90zkLvpn2Nl7kJhfw/i6NLFwt4RXMV2Z33xTReKBqCJ+a7Z3QfYK5gcFzyv1ydfBE+Hl5xBrFeq9HKc8Hay7BWh3zqG+FfAbNbed6jfs/CPMr5n9GOPuj3YObb8Z6n7oX/rDofnqec14FCRO//1tPYOUtxV053pbDeHl5xCn1sx+nNt7bB6rGf6v9OhAumVouF6jjv83eT2+Mvty9UCxekRdPgfSC58E6YWV9MJKSS+Mc+mFpReWXjhAeuE55G1JL3xOvfA3rKR2MzoZAAA=",
  "debug_symbols": "7dfbasJAEAbgd9nrXOxp9uCrlCJRowRCIjEWSsi7dyMutetW89+Kd07C5wgz+DMj21Wb82Fdt/vuxFYfI2u6bTnUXRuqkfHLo9OxbOfqNJT9wFZCUcGqdhc+kZkKtq+biq2IT58FE1lgTATO/gGh2PR109SHddp3ZMLmvkya2F1amXZ3z8Td7/VZ4XwUnhIhOSwELCQsVE4oLq9CCZcKDQuChYGFhYWDhUeFyvYgra+CSKTCPxPpBHV2r8i4KKxOhYCFhIWCRXavyImrMPxOECwMLCwsHCw8KojDIjsPY+M8TPIHG4R+Iny6u5Sdh+Vxd63gqTCwsLBwsPCYmC7x9V/uaBmdVmJR7twKWpQ7WsepaNKLcuehELCQsMjuozZxg7W1i3LnoSBYGFhYWDhYeFS8c+edO+/cefncCdVX2dflpqnm62d+eW638RgK5fB9jG/iuXTsu221O/fVfDjd3EzzZJUolPmNs5tHU+j2Aw==",
  "file_map": {
    "50": {
      "source": "global TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\n// Identical to `entry_point_one`\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    nested_inner_func(x, y);\n}\n\nunconstrained fn nested_inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point_one",
    "entry_point_two"
  ]
}
