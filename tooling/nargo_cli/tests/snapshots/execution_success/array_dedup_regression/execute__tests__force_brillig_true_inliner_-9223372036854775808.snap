---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2ZzY7TSBDHOxM7ifMxCTMwu/MMSLtObMcZrbRC2r3tA+wBCclJJggOgAAhcUD4wA0JXhl66LL/KZdnQFRDDrQUue2u/tVHd1e3nY6pS8ddA3ZvBJl77hp/X5krsmLR0OsKyZy5SuTuj6C9q+hsxPRq8ldxmkWCf4r2J5Fj+owPMT3w477j/FvWfO6LgSvJ8T62feLqOM9IZuDaqT519Yj18TH+HscnPhXsPwLfbPmnrNuMou6Ri+VjFksaK0Vd1TwM9NkLYof67Gp99vTZKbH7+uyM1tIA2B02zpg7Fef0ssP0GbOffwzTP2S2aufADtNH9vD40Lqj2A0FW2dCG/qGbahnKOiRWIEiK1Rk9RRZNN9970085yjzs0iIszH6OVM/96xinnu01xytIeksYP25C89xfYWmnk/YN4B2lP8TmH+4ut3XpqaZ42itk+9DP77H5NPI8QLTXCNo2xGTxzr6TM8yd7X+PDNyHA3oxGd8XQ4Ee65jSecU7m+vRT5q8ecv8OdFCzMU/JHmBcn/DcxXrk7nx25Z98c5YUsAbZp7otXzGuxojHG57/cY2rqCPI/9RJAfgwzfvybQRvllKvQbQXx4Px9r5tjxcM2gzjH4j/JYtyVkz/5zV2nNjK+JHenC2I0EeyLTjJ1ifC4ngo9UqG0KukPWNoM2tJ+XLrtHn2zsPgKXy2Ed++FYSvtByOQfuqudl/8zJs/ZPB/0W2zAnIQyUYsN903t82lnnyntVdIZju9VD4D5qsVOY3TWO9kj7YPYF2VDQZaf+6o8KfS3hd5VOWvnrpFpzkHNPHICXGOa+9LDFn+MkecozRXpPBMB9y74dxWfUt+/fPUlT17ZWtZx5msW9YdM/qm7x/lK1+A77NzlxXyXFLsiK7bbdFPwcTAQu5EH/UWerDaLdJOvs6RIlj9cf5oV+abI5/OLdH6ZzrMfrX+TLdebz0bEl3N7u7hJP+0VvbJux3ORLX13T/mbyxMvZPJvSPbz762rU84JBX1W7sM1cp2W6xVDeBaU+8+isinfLZvypHtYNm2kthG04ZnNlrG7x3ghi+wImfx7d09jMoA+1H8m6B8w/Xt2C88wd3FWV3hG8nZ83hHPXdF37W81VzoZH59x22ju3PQ9k3L+PRVb87X0fUGPv1hI3xf0+Ms1/76gzL+QvjEo8i+JP/DDT6XvpHr8pJC+QyjaP5fOWorzfyG98yjyL6R3TsX1tSH+sZ/4V/ypH371/XHmh58T/5af8a3W14kf+1fEP/XCT6r43/YTn+ob7R0/8VkS/8yP/Vt6Z/rN1KU6k7n67/Bc7xyRpF9zVkT9Q2arj3MN6iN7eHz4f1Dngq0zoY2fcc4FPeeCHokVKLJCRVZPkdVXZA0UWZqxjw7UrqEia3SgLE0fx4oszXGcHKhdx4qsqSJLM+fMFFm3FFkniqxDzYWniqxDXUOac0Izf91WZGmu7UOdq7/OhT8vR/86F34b644iS3NOaOYJzbPJoc6vM4+srsA6Elgd5hfKS+/bdo+inPTs+aMnLw0rCCK4ZFjYYkDCePRHOedyvmnhclsSgePjj8bFarW8WKzjNN9udts0uemPxk8uo44UDjMAAA==",
  "debug_symbols": "pdbdTupQEIbhe+lxDzqz/r0VYwxiNSQNkAo72THc+16r0xfdByQGT/gGcB6w8JV+dq/jy/n9ebd/O3x0D4+f3cu8m6bd+/N02G5Ou8O+PvrZDe1GYvcgfSfJIluUJXSwEAu1cBbeIliYoqaoKWqKM8WZ4kxxpjhTnCm+Pqg1TPGmeFOCKcGUYEowJZgSquJqRItkkS2q4vsuDhZiUZVQw1l4i2ARLZJFtihLpMFCLExJpiRTkinJlFSVVCNblCXyYCEWauEsqpJr1L1SI1uUJcpgIRZq4SzakRhqhjXjmu2Q1kNU8prFUoaBQRjcOvhmaRsCQ2RIDJmhrMPyOS2DMCiDY0AOyAE5IAfkgByRI3JEjsgROSJH5IgckSNyQk7ICTkhJ+SEnJATckJOyBk5I2fkjJyRM3JGzsgZOSMX5IJckAtyQS7IBbkgF+SyyjoMDMKgDI7BMwSGyJAYMgOyIAuyIAuyIAuyIAuyIAuyIiuyIiuyIiuyIiuyIiuyQ3bIDtkhO2SH7JAdskN2yB7ZI3tkj0wHlQ4qHVQ6qHRQ6aDSQaWDSgeVDiodVDqodFDpoNJBpYNKB5UOKh1UOqh0UOmg0kGlg0oHlQ4qHdSlg64NytBkd7n0HT9fz6d5HNuv17ffs/ord9zM4/7UPezP09R3fzbTefmjj+Nmv+RpM9dn6+lw3L/WrODbbhrbdOm/tofbqyJpXRbJ1/Xw4/1U1vU83LEtTnl1l+7Z98K+9/fsa7m+/j3/fT3vsx/Drf14ez8X3n9Rd91X/fHrXw9/PdXe8f5V+OrUE889+wPfnnq++uX+PZ//b49f8rx++vb9bftP9d5mu5v/u768NGnebV6mcb37dt5vvz17+nvkGa5Pj/NhO76e57FJXxep9eZRVHrx+tQuUdrdIfYi0u7WE8ajptBrSk+X9mb+AQ==",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "unconstrained fn main(x: u32) {\n    let a1 = [1, 2, 3, 4, 5];\n\n    for i in 0..5 {\n        let mut a2 = [1, 2, 3, 4, 5];\n        a2[x + i] = 128;\n        println(a2);\n\n        if i != 0 {\n            assert(a2[x + i - 1] != 128);\n        }\n    }\n\n    // Can't use `== [1, 2, 3, 4, 5]` here, that make_array may get\n    // deduplicated to equal a1 in the bugged version\n    assert_eq(a1[0], 1);\n    assert_eq(a1[1], 2);\n    assert_eq(a1[2], 3);\n    assert_eq(a1[3], 4);\n    assert_eq(a1[4], 5);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
