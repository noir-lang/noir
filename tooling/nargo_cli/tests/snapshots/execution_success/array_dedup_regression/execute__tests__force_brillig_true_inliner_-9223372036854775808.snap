---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2azW7bOBDHqViyLduJ3aTtbrDAPsCeLEu2nMMCAbrYF9gHWMhyDOylXRQFWqBAoR6KXnor0L5uy5Qj/T0aJf0Ytj6UQCCKHP7mg+SIkhOYpgTuGrJ7I8hcuuv820qiyJqLht5USOZ3V4nd/RH09xSdjZleTf56ni1jwT9F+9PYMX3Gh5ge+POB4/xVNXzui4EryfExtv/Y1XGdkczQ9VN96uoxG+Nj/j3Oz/xMsP8IfLPlQdX0GUXdYxfLxyyWNFeKuup1GOqzF8SO9Nn1/uzrszNiD/TZS9pLQ2AHbJ4xdyqu6VXA9Bmzn38M0z9itmrnwIDpI3t4fGjfUexGgq0zoQ99wz7UMxL0SKxQkRUpsvqKLFrvU9OOH80HzxfaeTdgMQrBD66T/OExxXwTsbY/3NX68wzG8PzaE9p47Pi+wPj4eq7Hgr+K/CXPq9qHYH+5dT33nD8Tyj/SOcrGK4V2XK+RadYTjo2gH+VzYK5c3Z4Jpqa9D/i+HPnxvd6XY8fDfSnlySMmj3X0mdr+dFdpX+LZpCe03bQvw89gSWc87m+/Qz7s8OcB+PO8gxkZObdFHcy/gfnC1ens3aua8bgmbAmhT/M8YfW8BDtac1zt+z2Bvp4gz2N/LMhPQIZiNmPy0rMMx40hPnycjz1z4ni4Z1DnBPxHeazbErG2f9xV2jOTG2JHujB2Y8Ge2LRjpxifq2PBRyrUNwXdfdY3gz60n5ceu0efbOzeA5fLYR3H4VxKz4OIyT9yV+vDv4zJczbPB3GHDZiTUCbssKE0jc+/BftM6VklnVn5s2oHzBcddhqjs9/JHuk5iGNRNhJkB0b2PRTG20Lv+Zz10F1j016DmnnkFLjGtJ9Ljzr8MUZeo7RWpPNMCNwU/LuOT6XvX77+lCevba2aOPM9i/ojJv/U3eN6RX8uv9LOXV4ku7TYFctiu83Kgs+DgdiNPegv8nRdLrIy3yzTIl19d/3ZssjLIk+Siyy5ypLl99ZfLleb8qMR86vE3i5u00/Pin7V9OO5yJaBu6f8zeWJFzH5VyT78e+1q1POiQR9Vu7dDXJBx/WaIbSF1X5bXLXle1VbnnSPqraN1DeGPjyz2TJx9xgvZJEdEZN/6+5pToYwhsbPBP1Dpn/PbqENcxdn9YQ2krfz84Z47oq+a3/nutbJ+NjGbaO1c9u3YMr5lyq25hvp+44ef7GQvl/o8Vcb6fuFIv+Cf79Q5l8Rf+iHn0nfSPT4aSF9h1C0P5HOWorrfyG98yjyL6R3TsX9VRL/xE/8a/7UD7/+/jjzw8+Jf8fP/Nb769SP/Wvin3nhp3X87/qJT/2N9p6f+KyIf9+P/Vt6Z/rFNKU+k7n6r9Cud45Is885K6L+EbPVx7kG9ZE9PD7897tzwdaZ0MfPOOeCnnNBj8QKFVmRIquvyBoosoaKLM3Yxwdq10iRNT5QlqaPE0WW5jweH6hdJ4qsqSJLM+fMFFl3FFmniqxDzYVniqxD3UOaa0Izf91VZGnu7UNdqz/PhT8uR/88F34Z654iS3NNaOYJzbPJoa6v+x5Z0v8dHgmsgPmF8tL7tn1GUU76//F/D58YVhBEcMmwqMOAlPHoh3LO5XzTweW2pALHxw+Ni/V6dbHYzLN8W+62WXrbD40fAOfF/BJKNAAA",
  "debug_symbols": "pdbdTupQEIbhe+kxB51Zf7O8FWMMajUkBAjCTnYM977X6vRF94GJwRO/r+A8EMq0fAwv09P57XGze92/D3f3H8PTcbPdbt4et/vn9Wmz37VHP4ax/5E83MlqkOJhHnUOHT3EQz2CR/RIHq6oK+qKuhJcCa4EV4IrwZXgSmiKtige5lHniKOHeKhHmCO1B0OL5EeuJFeSK8mV7Ep2JbuSmxJbRI/kkT2Kh3nUOUpTUgvxUI/gET2SR/YoHuZR5zBXzBVzxVwxV6wppUX2KB7mUeeoo4d4NMVatLnaInsUD/Ooc8g4LilL9hMz9hIokdJPT/9ajJlSKEapSxFZSuqg9hIokZIomVIoRqlL6efMi1CQM3JGzsgZOSNn5IxckAtyQS7IBbkgF+SCXJALsiEbsiEbsiEbsiEbsiEbckWuyBW5IlfkilyRK3JFrous40gRilICJVISJVMKxSjIgizIgizIgizIgizIgizIiqzIiqzIiqzIiqzIiqzIATkgB+SAHJADckAOyAE5IEfkiByRI3JEjsgROSJH5IickBMyO6jsoLKDyg4qO6jsoLKDyg4qO6jsoLKDyg4qO6jsoLKDyg4qO6jsoLKDyg4qO6jsoLKDyg4qO6jsoLKDOu9g6DehkdLlcLmsBm5/j6fjNPW735f7YbtLHtbHaXca7nbn7XY1/Flvz/M/vR/WuzlP62N7tl0Rp91Lywa+brZTb5fV5/T4/WiyZTbV63D68bRIWcZF7Ib5UpdxG2959aC8eii3zGu9zt/y7tvdg/mcvpvP389blWW+arjOq/749a8fX7tg3/D+VfjitMvXLfMjZ79d9X45f8v5++3nVyKvX758//r8QztaP2+O//06vXTpuFk/bafl8PW8e/7y7OnvgWf4dXs47p+nl/Nx6tLnT9z2575/+ySND/2XSj+UuBKp/bBdHO7VwkotPVz6m/kH",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "unconstrained fn main(x: u32) {\n    let a1 = [1, 2, 3, 4, 5];\n\n    for i in 0..5 {\n        let mut a2 = [1, 2, 3, 4, 5];\n        a2[x + i] = 128;\n        println(a2);\n\n        if i != 0 {\n            assert(a2[x + i - 1] != 128);\n        }\n    }\n\n    // Can't use `== [1, 2, 3, 4, 5]` here, that make_array may get\n    // deduplicated to equal a1 in the bugged version\n    assert_eq(a1[0], 1);\n    assert_eq(a1[1], 2);\n    assert_eq(a1[2], 3);\n    assert_eq(a1[3], 4);\n    assert_eq(a1[4], 5);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
