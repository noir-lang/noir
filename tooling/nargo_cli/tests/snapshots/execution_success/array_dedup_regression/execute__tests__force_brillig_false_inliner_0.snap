---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1azW7TQBBe13YaO0kTKBTaigfgZsdOnN564EWcpJW4IIR4AD8TEpw4IfECHDlyQOIIEheQELjsOF8m4/A3CzmwUrTr3dlvfnZ2PNm1Z1bFs3XAno1Ac27r5M9KqoiViIJuK0RzxzYi+7wH476ishHjq4k/S/JJJOinKH8WWUyX9iFMB/jJvsW5V63wuS4GaqLjc+rxgW2jnxFN145T+8C2IzbHxfo7XJ/kUJCfePWsrh+Zrj7YR0mOxk8CfewxYYf62M3+6ehj54S9r489IV/vArbH1hljm6LPTT3Gz5j1+GAY/5jJqh2jPMaP5OH2oX1BtosFWUfCGOqGY8gnFvhIWIEiVqiI1VHEIn8fmk370XrweKEdFz1mowD04DxJH25TjDch67tr61qfzzCHx1df6OO24/sC7cN971zFPsU8MrIP6eCPxzyu6uJP5zy2KuOfSTFUEf+C8GM3+M27p+cEPysJv+9G/iafGLjx/8Y/D9zgN/4zdII/XhD+yI39G/xrbvCbvPi6G/yC8A/drG+zv264kX9G+Ded4GeN/Y/c2Cch/Ftu7DMl/Ntu5F9SjnhsVoXn1yfQr5e7ZPnP5tfEP2ayusqvT5g83D48vz4VZB0JYzzHORX4nAp8JKxQEaujiLWviBUpYsWKWJq27+2oXH1FrMGOYmnqeKCIpbmOwx2Va6SIdU0RSzPmXFfEOlTEuqGItaux8KYi1q7uIU2f0IxfR4pYmnt7V331f17472L0/7zw17BuKWJp+oRmnNDMTXbVv247wHJ9hy6d5SviT6SzfKOHn7q7J50lju9CU+kcX9E2CZ2lSN9E1OvxBPrrH91thWblrzg3hHGkfwaYT227jrVDRle3+R1ez41tmzs8+j+Kd3jIk2TbY/TYRp2p77mtpTs8/I7BF/q23eEFP4HlAc0eoyf5Oi30QYs+L0CfLy2YoZHvQcMWzJeA6Vkh6KzBr1bz0SfqEsCY5rcHNZ8A5NhY42pd7wGM+QI9t/2BQI9nK2SzEaPH+DUU5vXBPnyeiz1D/81wzyDPAeiP9NiuS8j6Xtla2jODLbYjXmi7viCPZLtjZruhY9uNBNsNt9gO8yJqo+2o77XRs92xIM/v+vxIoJfO9ftmFScePrr/4LFhBQMdTxhQsLBFgIzNj1twcS6WsGWMnrMtOAPgJb04feCB9B9sXev6hmHyFyMPulGLDBj4kSZokeGtrWvHOvHWMaWEAOVqSwjeAabnyXIaoxNUSR4p2cC5SBsKtPyPE40Fwnz0L4713tbSRw6aAQcPQo3ZfPl/aNHHGNlHyVekpDEA3Ceg35V9Kn39itn3gHola7WyM34IZRj/kNF/ss88uSZ9zn9TzsuiTC+z8rKclMtlvij5Ohiz/hGtNv+yyGaLcb4o5pOszKZ/nX8+KYtFWaTpWZ5e5Onkb/NfTKbzxTchkou0fhz/iD+9fDvVahyTz7rs22eK35ye8EJG37UA9b6Ibbt5Twn8arrjLXReS32FIfQF1XpfVG3S+9UmPfGOq00ZaawHYyHj07fPaC/EIjlCRn9kAWhNujCH5o8E/l3Gf01uoQ9jF8fyhT6ir9dnaCc18R14a38YccWT4WMfl418x8W+Gs9m07PxPMmL5eJymWc/2ldfATd8RiZqNAAA",
  "debug_symbols": "zZzNSiNREEbfpddZ3K9u3z9fZRgkaiuBkEiMA4P47tMtiRPsNkNthrORtNYhJRVOOlrffesehrvXp9vN7nH/0t38eOu2+/v1cbPfjVdv76vu7rDZbjdPt5ff7sL0Remj/uV5vZsuX47rw7G7SXXVDbuH8UEb6cfNdhgfhvefq07ZWV+c9dVZ33z1Fpz1ctabsz4663tnvXO+5pyvOedrzvmac77ROd/onG90zjc65xud842L85XKCZDqVyK7ieImqptoXqIPbkJuwtzE4ryV+jOR0yWxmpXWplNps/hZauYpnfroIX0kSB8Z0keB9FEhfTRGHylA+hCkD4P0AfFpgvg0QXyaID5NEJ8miE8TxKcZ4tMM8WmG+DRDfJohPs0Qn2aITzPEpxni0wzxaYH4tEB8WiA+LRCfFohPC8SnBeLTAvFpgfi0QHxaIT6tEJ9WiE8rxKcV4tMK8WmF+LRCfFohPq0QnzaITxvEpw3i0wbxaYP4tEF82iA+bRCfNohPG8SnChChKkCMqgBRqgLEqQoQqSpArKoA0aoCxKsKELEqUMwqillFMasoZhXFrKKYVRSzimJWUcwqillFMatRzGoUsxrFrEYxq1HMahSzGsWsRjGrUcxqFLNGilkjxayRYtZIMWukmDVSzBopZo0Us0aKWSPFrD3FrD3FrD3FrJQslShhKlHSVKLEqUTJU4kSqBIlUSVKpEqUTJUooSpRUlWixKpEyVWJEqwSJVklSrRKlGyVKOEqUdJVosSrRMlXiRKwEiVhJUrESpSMlSghK1FSVlqOSZR2Imq4bGMCqvuEEH2z4n4V6f1I8iPZjxQ/Uv2I+3AYfbOPHO2MxDJD5EfMj0Q/sjz9/vw6Hv8+MUOSH8l+ZHn61j5/l/lcqh9pXsS+WZ68isiPmB+JfqT3I8mPZD9S/Ej1I/7pyz99+adPWZoyytKUUZamjLI0ZZSlKaMsTRllacooS1P2P5emSn++ZSoXt7LnRkRpxCiNLJv18+PAeJP99V1heZlnfEs6IePrboYUP1L9SHMjy0sn1xH5EfMji3MZb0jOiIUZ0vuR5Efyv5AyQ4ofqX6kuZHlf4xfR8yHvI9Xv9aHzfpuO5xOKn583d1fHFx8/P08fDnD+Pmwvx8eXg/DdJrx34OMp24th5VVTR8aPi77tLIUpsvpZWnVxp/247OOz/wH",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "unconstrained fn main(x: u32) {\n    let a1 = [1, 2, 3, 4, 5];\n\n    for i in 0..5 {\n        let mut a2 = [1, 2, 3, 4, 5];\n        a2[x + i] = 128;\n        println(a2);\n\n        if i != 0 {\n            assert(a2[x + i - 1] != 128);\n        }\n    }\n\n    // Can't use `== [1, 2, 3, 4, 5]` here, that make_array may get\n    // deduplicated to equal a1 in the bugged version\n    assert_eq(a1[0], 1);\n    assert_eq(a1[1], 2);\n    assert_eq(a1[2], 3);\n    assert_eq(a1[3], 4);\n    assert_eq(a1[4], 5);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
