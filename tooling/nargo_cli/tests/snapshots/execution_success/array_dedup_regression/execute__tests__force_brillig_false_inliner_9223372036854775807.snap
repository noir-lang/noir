---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2azW7TQBDH142dDydpQgv06wm4ObETp7ceeBEnaSUuCCEewM9UCU6ceAGOHJA4UokLSEgcEAfqsOP8Mxm3pcyWHGopsr07+5vZ2dnxxmvPLA/Pnn12bwSZE3uO/u0YKLIi0dCrDpLZsRcte78F9TXFzraYXk3+JEpGLaF/ivbHLct06R9iOuBHDct5mi/5vC8GziTH2xT1XXuNcUYyTVtP19v2usXauBh/h+MT7Qr2k6627esX1tca+EfJjjJOfH32kNiBPrucP3V9dkLshj57RLHeBLbHxhlzm2LMjT2mz5jV/GCY/pDZqp2jPKaP7OH+oXlBvgsFW/tCHfYN61BPKOiRWL4iK1Bk1RVZFO89s+4/Gg+eL7Tzosd85EM/uE7qD/cp5puAlT2x56I/36ANz681oYz7js8L9A+PvRMV/6TTlpFjSIc/HPK8qssfT3luVeYfSzlUkX9K/NANv3z2tJ3w44z4HTf2l+uJrpv4L+Nz2w2/jJ+eE/5wRvy+G/+X/Adu+OW6eMcNPyX+rpvxLefXQzf2T4j/yAk/Lv3/2I1/IuLvufHPmPj7buyf0xrxwCwPvr4+hHK9tUuc3HR9TfpDZqur9fUhs4f7h6+vjwRb+0IdX+McCXqOBD0SK1Bk1RVZDUVWS5EVKrI0fd/eULs6iqzuhrI0+7ityNIcx96G2tVXZD1QZGnmnB1F1q4i66Eia1Nz4SNF1qbOIc2Y0MxfjxVZmnN7U2P1fl34/3L0/brw71h7iizNmNDME5prk02Nr30HLNd76NK7fEX+yN0e6SSS3uO7+H6Bf+ehzQ/d8CN6lyJ9E1GMxzmUFz/a2wrMMl6xbQD1KP8GmK/tdZFre0yuuOZ7eG03Y1fu4dH/UdzDQ51k2xaTx2vsM5W9tWdpDw+/Y6gJZVft4fk3YHkgs8Xkyb56hbxf0Z930J/v9preC9TyZXscv+LwoU7zO4FCzw+wY2088tV+d826n1Ce+2lbkO8KfuozecxlPaHdAfiHt3MR3/Q/CuMbdXah/yiP18URsLL39izFd/cK35Eu9N2BYM9tx60nyEvvkTtmma9evHz2/JVhB04snuTRsKDCgJi1Dyu42BaPoKKO7uMrOF3QJSXqGuhA+Qt7LgL4A2PyRMyTUaPCBkw0KONX2PDRnovA6nirTOkBhHZVPYA+AbPnyXYao5MYyB7p4YZtUTYQZPkfQarzhfYYX5z12Z6lTXXNhIMv3oxZf9hcVPTHGDlGKVakRYoP3HPo38I/uX7/0smfhLqwNV/6GT+8MUx/wOS/2nu+mKP+nNzSzrM0G5zF2Vk2yubzZJbxcTBm9aNNbf1ZGk9mw2SWTkdxFo/vXH8yytJZlg4Gx8ngNBmMrtNP+bmeL+txAVMcDXtP+ZPLEy9g8j9J9vL3y16Xz4l8XV8h1/aq5byK84IhlPn5alkrX5ev5evypDvM122kujbU4eKqODr2Hv2FLLIjYPJNC6AxaUIbat8X9DeZ/hW7hTLMHZxVE8pIvhgfzzYq8yvo1t4IX+hkfCzjtlHsuJhXw8lkfDycRkk6n53Nk/iu5/VsNJ7OLid3dDpYmHOd/t/wDAi12jIAAA==",
  "debug_symbols": "zZzNSiNREEbfpddZ3K9u3z9fZRgkaiuBkEiMA4P47tMtiRNMJ1IbORtJSx1SWuHkLuq7b93DcPf6dLvaPG5fuptfb916e7/cr7ab8entfdHd7Vbr9erp9vTXXZh+KH3UvzwvN9Pjy36523c3qS66YfMwvmgj/bhaD+PL8P570Sk764uzvjrrm6/egrNeznpz1kdnfe+sd87XnPM153zNOV9zzjc65xud843O+UbnfKNzvnF2vlI5AFL9SmQ3UdxEdRPNS/TBTchNmJuYnbdSfyRyOiUWZ6W16VDaLH6WmnlKpz56SB8J0keG9FEgfVRIH43RRwqQPgTpwyB9QHyaID5NEJ8miE8TxKcJ4tME8WmG+DRDfJohPs0Qn2aITzPEpxni0wzxaYb4NEN8WiA+LRCfFohPC8SnBeLTAvFpgfi0QHxaID4tEJ9WiE8rxKcV4tMK8WmF+LRCfFohPq0Qn1aITyvEpw3i0wbxaYP4tEF82iA+bRCfNohPG8SnDeLTBvGpAkSoChCjKkCUqgBxqgJEqgoQqypAtKoA8aoCRKwKFLOKYlZRzCqKWUUxqyhmFcWsophVFLOKYlZRzGoUsxrFrEYxq1HMahSzGsWsRjGrUcxqFLMaxayRYtZIMWukmDVSzBopZo0Us0aKWSPFrJFi1kgxa08xa08xa08xKyVLJUqYSpQ0lShxKlHyVKIEqkRJVIkSqRIlUyVKqEqUVJUosSpRclWiBKtESVaJEq0SJVslSrhKlHSVKPEqUfJVogSsRElYiRKxEiVjJUrISpSUleZjEqUdiBpO25iA6r4hRBdW3K8ivR9JfiT7keJHqh9xXw6jC/vI0Y5ILGeI/Ij5kehH5qdv7RM5//OTH8l+pPiR6keaF7ELy5NXEchRxihrjkZZc7QAOcoYZc3RKGuORllzNMqao/3kmmPpj9+A5eRkcmjkJ9ccrzciSiPzZv083Y1npq/fCvPrd+P/9oCYzi+MzH6k+JHqR5obmV/ouo7Ij8zOZXTLEbFwhkQ/0vuR9B1SzpDsR4ofqX6kuZH5XY/LyPv49Ge5Wy3v1sPh4tnH1839yT20+7/Pw5craZ932/vh4XU3TJfT/r+XdvrgWZ8Xlst0Bvx4jP3CYpsep8Ys14WVML7r+M7/AA==",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "unconstrained fn main(x: u32) {\n    let a1 = [1, 2, 3, 4, 5];\n\n    for i in 0..5 {\n        let mut a2 = [1, 2, 3, 4, 5];\n        a2[x + i] = 128;\n        println(a2);\n\n        if i != 0 {\n            assert(a2[x + i - 1] != 128);\n        }\n    }\n\n    // Can't use `== [1, 2, 3, 4, 5]` here, that make_array may get\n    // deduplicated to equal a1 in the bugged version\n    assert_eq(a1[0], 1);\n    assert_eq(a1[1], 2);\n    assert_eq(a1[2], 3);\n    assert_eq(a1[3], 4);\n    assert_eq(a1[4], 5);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
