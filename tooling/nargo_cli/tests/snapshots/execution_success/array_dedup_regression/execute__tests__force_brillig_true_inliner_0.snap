---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1azW7TQBDeNHYSO3/u/89T2LEdp7ceeBHHaSQuCCEewM9TCU6ckHgBjhw5IHGkEheQkCpxAIcdezIep4XOlhy6UrTr3dlvfnZ2duJ1S1WlpWuLPCuG5kLX/v1KIIjls4JuKkBzqBuOft5B421BZR3CVxJ/5kexw+gnKH/oaEyT9gFMA/h+V+M8ySt8qotCNdDROcX4ULexnwFNT49De6TbDpljYv0Nro+/z8gPvPpa169E1zayj5AcpZ9Y8tgTwLblscv905HHjgC7K48dg6/3EHaLrDOObYI+N20RfkqtxwdF+LtEVukY1SL8QB5qH9gXYDuXkdVjxrBueAzzcRk+HJYliGULYnUEscDfubOj+F3oZ/9eJZnTmCOLP6nFHVn86dxpsL0Q/jmNP8L4l1ycEcQv46drBD9MAb9vRv7yTBwYwU9K/xyawS/9Z2QEf5IB/tiM/Ut8zwx+mdvtmsFPAH/PzPqW+2vfjPwzwD8wgh+W9j80Yx8f8I/M2GcK+Mdm5F9AnnOiqkJzxFPUL5eThdFdc0Tg7xJZTeWIp0Qeah+aI54xsnrMGM1xzhg+ZwwfDssSxLIFsTqCWF1BLEcQS9L27pbK1RfEGmwplqSOQ0EsyXUcbalcY0EsTxBLMubsCmLtCWLtC2Jtayw8EMTa1j0k6ROS8etQEEtyb2+rrz7mhf8vRj/mhX+HdSSIJekTknFCMjfZVv86NoBl+h6Ye5cviB9z7/KVHH5g7h5x5nPv8QVl9w3fFwbwLoW71y/sdYX6cXy0VeWveK6FxjH9a4T5SreL/4FjVY+7cC/I3QFI+jXoBP9tLaQT5gmy7RB63MY6Q98bXRf6fFe8HZW62x1ej5FnE1YL0ewQepCv00DvNujzFunzowHTZvTh/ALo3yHMG92GnLidV/OxTxTFQmOS9+cFn59Ijtoa5+t6D9FYm6Gnth8x9Pg/ANjMI/Q4fo2ZeQNkHzrPxJ6BsxrvGcxziPSnZzu0i2KTvve65vbMcIPtgBe23YCRh7PdCbHd2LDtPMZ24w22wzkWtLHtoO+DkrPdCSPPv/q8x9Bz7/UHqsoBnr94+uylIgV/wEQTBiyY3SBASOZ3G3DxXFzshjF4DjfgDBEv7uBsIx6Y/lrXxeb/SDDpwUiDrtMgAw78mMZtkOGTrgvH2mutY3IJAZarKSH4jDBvGuRUSiaogjxcsoHnYlqboW36EMdi5mP/olhfdM19hCAZcPCLKqXqh/91gz5K8T4KvsIljS7CvUL6reyTy+uXzP4E1JWseWVn/AGlIvxtQv9NP+M1htq6h5zLJA2WYbpM43SxiLKUroNS6x+CSvNPk3CWTaIsmcdhGk4fnH8Up0mWJkFwHgWXURA/NP8sns6z30L4l0HxOLmNPxy+nbwax8lnUbr6GeI3pQc8m9ADQLEvdnS7PKfyOr+CbncDXauhXmEwfVa+3ufkdfp2XqcH3m5elxHG+mjMJnwG+hnbC2OBHDahH2kAWJMemgPzPYZ/j/Bfk5vpw7GLYrWZPqAv1qerJ5VnH+It/WHEiifBx31UNvAdE/tqMptNzydzP0oW2XIRhbftq18cx8mRLjMAAA==",
  "debug_symbols": "pZbNTuswEIXfJesuMuOfsXkVhFApAUWK0iq0V7pCfXfsnOMCiyJUNv0mhPnquCeTvHfPw9Pp9XGcX/Zv3d39e/e0jNM0vj5O+932OO7n8tf3rq8fEro72XQSAQMSkFdoDwiggAM8AIvCorAoLAqLg8XB4mBxsDhYXLH4gggYkIC8wveAAAo4wAOweFg8LB4WD0uAJcASYAmwBFgCLAGWAEuAJcASYYmwRFgiLBGWCEuEJcISYYmwGCwGi8FisBgsBovBYrAYLAZLgiXBkmBJsCRYEiwJlgRLgiXBkmHJsGRYMiwZlgxLhiXDkmHJsEjfk0Iq6UhPBjKSRiaSPqFP6BP6hD6hT+gT+oQ+oU/oU/qUPqVP6VP6lD6lT+lT+pQ+R5+jz9Hn6HP0Md/CgAsTLoy4MOPCkAtTLoy5MOfCoAuTLoy6MOvCsAvTLoy7MO/CwAsTL4y8MPPC0AtTL4y9MPfC4AuTLzXCodJziHCmWBsqnCrGsWKZU6YnhSzripWO9GQgi88qjUxk8aU6rnpSSCUd6clARtLIRMKnfU8KqaQjsW/KHCtzrMyxMsfKHCtzrMyx1hznSkd6su5fX4u6YevozSzWWbwW0gpthWuFb0X1aC1iK6wV1exqkVms83ktpBXaiip05/Oma8+Px+MyDPXx8eWBUh4zh+0yzMfubj5N06b7t51O6z+9HbbzyuN2KWfLlQ3zc2ERvozTUKvz5rO7v95abmk2l5v60h5+3x9864/hWr9e709Z2J/VXfpVv/W7P/b/sH7LbE/9LVfvtF29s1v6fVt9GUG39Gu+fP/VX++H3TPffn37cv2/3z25bF8ZKTesX6VFt9yQt/T3bf3lPv5j//ff76EcbXfj8u0F71xNy7h9mgYevpzm3Zezx/+Hdqa9IB6W/W54Pi1DNX2+JZaPew26UXMP9cFcD51t1Gs9lHpovpyND+e6mA8=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "unconstrained fn main(x: u32) {\n    let a1 = [1, 2, 3, 4, 5];\n\n    for i in 0..5 {\n        let mut a2 = [1, 2, 3, 4, 5];\n        a2[x + i] = 128;\n        println(a2);\n\n        if i != 0 {\n            assert(a2[x + i - 1] != 128);\n        }\n    }\n\n    // Can't use `== [1, 2, 3, 4, 5]` here, that make_array may get\n    // deduplicated to equal a1 in the bugged version\n    assert_eq(a1[0], 1);\n    assert_eq(a1[1], 2);\n    assert_eq(a1[2], 3);\n    assert_eq(a1[3], 4);\n    assert_eq(a1[4], 5);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
