---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 12 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Field, value: 4 }, Return, Call { location: 29 }, Const { destination: Relative(2), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, Mov { destination: Relative(5), source: Relative(3) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 35 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(5) }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Direct(32835), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 28 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 34 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 29 }, Not { destination: Relative(2), source: Relative(1), bit_size: U1 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Field }, Cast { destination: Relative(1), source: Relative(2), bit_size: Field }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(3), rhs: Direct(32835) }, Const { destination: Relative(3), bit_size: Field, value: 5 }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(1), rhs: Relative(3) }, BinaryFieldOp { destination: Relative(1), op: Add, lhs: Relative(2), rhs: Relative(4) }, Return]"
  ],
  "debug_symbols": "nZHBqsMgEEX/ZdYu1DRt9FdKCSYxRRATrD54BP+9Y2zadFEo3cxxHO+9wiww6C5eW+PG6QbyvEDnjbXm2tqpV8FMDm8XoLmwGiQjwI4FJ5Ac0RSIFZwWsAJeUBUcQFaIuuBYgC5VSgS2uDZ4rXPaLh9/NSuvXQDporUE/pSN66PbrNzKoDxOKQHtBiQajsbqfErkpaafpUzwh5iJ5imvv9c39KkXv+hP9Qf9BTvVG/+2kZSdvFGd1Y92jK7fTcP/vE22jc5+6vUQvc5Ou7ViPXNBqsMl5bQ7",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is basic conditional on brillig\nfn main(x: Field) {\n    // Safety: testing context\n    unsafe {\n        assert(4 == conditional(x == 1));\n    }\n}\n\nunconstrained fn conditional(x: bool) -> Field {\n    if x {\n        4\n    } else {\n        5\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
