---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct MyStruct {
    x: u32,
    y: u32,
    z: u32,
    nested_struct: InnerStruct,
}

struct InnerStruct {
    small_array: [u32; 2],
    big_array: [u32; 5],
}

struct ParentStruct {
    basic_array: [Field; 3],
    id: u32,
    my_structs: [MyStruct; 2],
}

fn main(x: u32, y: pub u32) {
    let nested_struct: InnerStruct =
        InnerStruct { small_array: [1_Field as u32; 2], big_array: [0_Field as u32; 5] };
    let s: MyStruct = MyStruct { x: x, y: y, z: x + y, nested_struct: nested_struct };
    let parent: ParentStruct =
        ParentStruct { basic_array: [1_Field; 3], id: 100_u32, my_structs: [s, s] };
    let new_parent: ParentStruct = map_fields(parent);
    assert(new_parent.basic_array[0_u32] == 1_Field);
    assert(new_parent.basic_array[1_u32] == 18_Field);
    assert(new_parent.basic_array[2_u32] == 1_Field);
    let struct_0: MyStruct = new_parent.my_structs[0_u32];
    assert(struct_0.x == 5_u32);
    assert(struct_0.y == 3_u32);
    assert(struct_0.z == 8_u32);
    assert(struct_0.nested_struct.small_array == nested_struct.small_array);
    assert(struct_0.nested_struct.big_array == nested_struct.big_array);
    let struct_1: MyStruct = new_parent.my_structs[1_u32];
    assert(struct_1.x == 50_u32);
    assert(struct_1.y == 30_u32);
    assert(struct_1.z == 80_u32);
    assert(struct_1.nested_struct.small_array == [5_u32, 10_u32]);
    assert(struct_1.nested_struct.big_array == [15_u32, 20_u32, 25_u32, 30_u32, 35_u32]);
}

#[fold]
fn map_fields(mut input: ParentStruct) -> ParentStruct {
    let current_struct: MyStruct = input.my_structs[0_u32];
    let mut sum: u32 = 0_u32;
    {
        let ___i0: [u32; 2] = current_struct.nested_struct.small_array;
        for ___i1 in 0_u32..___i0.len() {
            let value: u32 = ___i0[___i1];
            {
                sum = sum + value;
            }
        }
    };
    {
        let ___i0: [u32; 5] = current_struct.nested_struct.big_array;
        for ___i1 in 0_u32..___i0.len() {
            let value: u32 = ___i0[___i1];
            {
                sum = sum + value;
            }
        }
    };
    sum = sum + ((current_struct.x + current_struct.y) + current_struct.z);
    input.basic_array[1_u32] = sum as Field;
    input.my_structs[1_u32].nested_struct.small_array = [5_u32, 10_u32];
    input.my_structs[1_u32].nested_struct.big_array = [15_u32, 20_u32, 25_u32, 30_u32, 35_u32];
    input.my_structs[1_u32].x = input.my_structs[1_u32].x * 10_u32;
    input.my_structs[1_u32].y = input.my_structs[1_u32].y * 10_u32;
    input.my_structs[1_u32].z = input.my_structs[1_u32].x + input.my_structs[1_u32].y;
    input
}
