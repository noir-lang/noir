---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VbW27aQBQ1b8Ij5MEbktA0TdM0bWb8wDb8pB9ZCATz3110Ad1Du5J+tB/dRBfSGWWQjDWxIvlcS3OlI6Mz6HLusT2ML0PReo4zgQv1uiBQUkcZswRXUFw8Sur4oI4sW3BkrkIsl8Pmrhv5dsQdvmJ2uA485nrrecAD7gXexg4cJwrcwA/Xoc9C7joR33qhs1XJijhdLO5pUeNpIeFpVu0l8Pmh0lmG6Zy7lDorwGuhovQNVb5SDOWY/mKMr2jw2vftPqcqUBOoCxwINASaAi2BtsChQEfgSOBY4ETgVKAr0BPoCwxUvpHAWGAiMLWe55SClYgHjGGpFyDLFrwKvEgoddYAOqOtjGhLqbNuiJ8NmJ/bJ0qdTZzOiFJnC6czpNTZNuT6PDREZweXi1TnkSE6jw3ReWKIzlNDdHYt1Pz5RPr93oPpjBxKnX2YzjXp+nNgmbEOGeJ0+pQ6RzidNqXOMUxntKHUOcHpDCh1Ti0z5qUzmM5NJLWVEzrjr3WcjF0Dr/fvy+jr7x+PO34p8Bh7fyl2nCW4soaraLiqhqtpuLqGO9BwDQ3X1HAtDdfWcIcarqPhjjTcsYY70XCnGq6r4Xoarq/hBoqLB7opWwPmQvYEGE7XXlOW5eDpATAXA3rKiTzlOXjaAObiQE9tIk/tHDxtAnPZQE8dIk+dHDxtAXM5QE9dIk/dHDxtA3O5QE89Ik+9HDwtA3NVgJ7OiTyd5+BpFZhrDvTUJ/LUz8FT4D3GfaCnAZGngcbTItbTFfI3h5DIhzAHHzpAHxZEPiws+nsMeA75AujpksjT5SuuLcRvcShPh0Af0mpm2QLSk6WYXynPM3Dz2F6vmGUMypqRm84mhtSMXC9PDakZuBlurx/OMgZlzcg1/LkhNSN7wBeG1FwH1jwzpGZkX/qNITUj+8aXhtSM7Ou+NaRmZN/1ypCakX3RdznVzLIFvwb6h+xdUNb8Hlgzsk9BWfMNsGZkHyFeM3rPyAdAzXnsEbvF6STdI/YRp5N0j9gdTCftHrFPOJ2ke8Q+43SS7hG7h+nc3yM2TGiWc/PuT2fymR71BzEr8Xkv/WFMPgfL58KZgHxukOtoua6U6yy57pDf6fI7Ts75cg6U84u8d+V9Ia85eT7vlb5d9NUxubctrkc3Nk4Zm6aMnaeMzVLGLlPGrlLGrlPGbtTxz/e/v35+W+3d87cpY3cpOWX8BwYNcTQ5PAAA",
  "debug_symbols": "tdbbisIwEAbgd8m1FzOTs6+yLFK1SqG0UuvCIn33rdJUSWddE9i7JulXks5PkqvYl9vLcVM1h/Ys1h9XUbe7oq/aZmxdBd27zqeiubXOfdH1Yq3Qr0TZ7McnUsNKHKq6FGsNw+dKyFSgOKCVm4A2JgI6FZhUYFOB44BRNAFjKQKeBc5MwKKNAAInrMQgDMYCOeEoCCfjVSBbbKchCKNjwVbb2VBt5+NqI1tuD+HfertYh04WbMG905NAUItp2XTi0olPJgTphC08jm8GgwSxId7Ih9ELI3ljHsYtjOKNnw1JHxudYdgIIGkZjISFsRnGZRifbiSkmrGx7aq6ro6b5w197P4quqrY1uXUPFya3dNo/30KI8GfunZX7i9defvSfWxYxccEnznt5/kZ0O9l7rXhM2fmHQeNx/cy99roDGMyjM0wLsP4dPNL5l4bzDCUYfgcWAynG1oVH29SZRj9p1kcitJkGD4HFuTDLObmMgybAwIMVxUC6eILGmQYNgeEYINBKWNDGYbNARHMcyMVX6WUSjX/u5d+Dj8=",
  "file_map": {
    "50": {
      "source": "struct MyStruct {\n    x: u32,\n    y: u32,\n    z: u32,\n    nested_struct: InnerStruct,\n}\n\nstruct InnerStruct {\n    small_array: [u32; 2],\n    big_array: [u32; 5],\n}\n\nstruct ParentStruct {\n    basic_array: [Field; 3],\n    id: u32,\n    my_structs: [MyStruct; 2],\n}\n\nfn main(x: u32, y: pub u32) {\n    let nested_struct = InnerStruct { small_array: [1 as u32; 2], big_array: [0 as u32; 5] };\n    let s = MyStruct { x, y, z: x + y, nested_struct };\n    let parent = ParentStruct { basic_array: [1; 3], id: 100, my_structs: [s, s] };\n    let new_parent = map_fields(parent);\n\n    // Now check that the outputs are as we expect them to be\n    assert(new_parent.basic_array[0] == 1);\n    assert(new_parent.basic_array[1] == 18);\n    assert(new_parent.basic_array[2] == 1);\n\n    let struct_0 = new_parent.my_structs[0];\n    assert(struct_0.x == 5);\n    assert(struct_0.y == 3);\n    assert(struct_0.z == 8);\n    assert(struct_0.nested_struct.small_array == nested_struct.small_array);\n    assert(struct_0.nested_struct.big_array == nested_struct.big_array);\n\n    let struct_1 = new_parent.my_structs[1];\n    assert(struct_1.x == 50);\n    assert(struct_1.y == 30);\n    assert(struct_1.z == 80);\n    assert(struct_1.nested_struct.small_array == [5, 10]);\n    assert(struct_1.nested_struct.big_array == [15, 20, 25, 30, 35]);\n}\n\n// Meaningless mapping to test whether the values returned are what we expect\n#[fold]\nfn map_fields(mut input: ParentStruct) -> ParentStruct {\n    let current_struct = input.my_structs[0];\n    let mut sum = 0;\n    for value in current_struct.nested_struct.small_array {\n        sum += value;\n    }\n    for value in current_struct.nested_struct.big_array {\n        sum += value;\n    }\n    sum += (current_struct.x + current_struct.y + current_struct.z);\n\n    input.basic_array[1] = sum as Field;\n\n    input.my_structs[1].nested_struct.small_array = [5, 10];\n    input.my_structs[1].nested_struct.big_array = [15, 20, 25, 30, 35];\n\n    // LHS input.my_structs[1].x == 50\n    input.my_structs[1].x = input.my_structs[1].x * 10;\n    // LHS input.my_structs[1].y == 30\n    input.my_structs[1].y = input.my_structs[1].y * 10;\n    // LHS input.my_structs[1].x == 80\n    input.my_structs[1].z = input.my_structs[1].x + input.my_structs[1].y;\n\n    input\n}\n",
      "path": ""
    }
  },
  "names": [
    "main",
    "map_fields"
  ],
  "brillig_names": []
}
