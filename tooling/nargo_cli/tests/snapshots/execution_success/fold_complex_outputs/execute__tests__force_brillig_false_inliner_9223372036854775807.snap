---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _29",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BLACKBOX::RANGE [_1]:32 bits []",
    "EXPR [ (1, _0) (1, _1) (-1, _2) 0 ]",
    "BLACKBOX::RANGE [_2]:32 bits []",
    "EXPR [ (-1, _3) 1 ]",
    "EXPR [ (-1, _4) 100 ]",
    "EXPR [ (-1, _5) 0 ]",
    "CALL func 1: PREDICATE = EXPR [ 1 ]",
    "inputs: [Witness(3), Witness(3), Witness(3), Witness(4), Witness(0), Witness(1), Witness(2), Witness(3), Witness(3), Witness(5), Witness(5), Witness(5), Witness(5), Witness(5), Witness(0), Witness(1), Witness(2), Witness(3), Witness(3), Witness(5), Witness(5), Witness(5), Witness(5), Witness(5)], outputs: [Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12), Witness(13), Witness(14), Witness(15), Witness(16), Witness(17), Witness(18), Witness(19), Witness(20), Witness(21), Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29)]",
    "EXPR [ (1, _6) -1 ]",
    "EXPR [ (1, _7) -18 ]",
    "EXPR [ (1, _8) -1 ]",
    "EXPR [ (1, _10) -5 ]",
    "EXPR [ (1, _11) -3 ]",
    "EXPR [ (1, _12) -8 ]",
    "EXPR [ (1, _13) -1 ]",
    "EXPR [ (1, _14) -1 ]",
    "EXPR [ (1, _15) 0 ]",
    "EXPR [ (1, _16) 0 ]",
    "EXPR [ (1, _17) 0 ]",
    "EXPR [ (1, _18) 0 ]",
    "EXPR [ (1, _19) 0 ]",
    "EXPR [ (1, _20) -50 ]",
    "EXPR [ (1, _21) -30 ]",
    "EXPR [ (1, _22) -80 ]",
    "EXPR [ (1, _23) -5 ]",
    "EXPR [ (1, _24) -10 ]",
    "EXPR [ (1, _25) -15 ]",
    "EXPR [ (1, _26) -20 ]",
    "EXPR [ (1, _27) -25 ]",
    "EXPR [ (1, _28) -30 ]",
    "EXPR [ (1, _29) -35 ]",
    "func 1",
    "current witness index : _59",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23]",
    "public parameters indices : []",
    "return value indices : [_24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47]",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "BLACKBOX::RANGE [_4]:32 bits []",
    "BLACKBOX::RANGE [_5]:32 bits []",
    "BLACKBOX::RANGE [_6]:32 bits []",
    "BLACKBOX::RANGE [_7]:32 bits []",
    "BLACKBOX::RANGE [_8]:32 bits []",
    "BLACKBOX::RANGE [_9]:32 bits []",
    "BLACKBOX::RANGE [_10]:32 bits []",
    "BLACKBOX::RANGE [_11]:32 bits []",
    "BLACKBOX::RANGE [_12]:32 bits []",
    "BLACKBOX::RANGE [_13]:32 bits []",
    "BLACKBOX::RANGE [_14]:32 bits []",
    "BLACKBOX::RANGE [_15]:32 bits []",
    "BLACKBOX::RANGE [_16]:32 bits []",
    "BLACKBOX::RANGE [_17]:32 bits []",
    "BLACKBOX::RANGE [_18]:32 bits []",
    "BLACKBOX::RANGE [_19]:32 bits []",
    "BLACKBOX::RANGE [_20]:32 bits []",
    "BLACKBOX::RANGE [_21]:32 bits []",
    "BLACKBOX::RANGE [_22]:32 bits []",
    "BLACKBOX::RANGE [_23]:32 bits []",
    "EXPR [ (1, _7) (1, _8) (-1, _48) 0 ]",
    "BLACKBOX::RANGE [_48]:32 bits []",
    "EXPR [ (1, _9) (1, _48) (-1, _49) 0 ]",
    "BLACKBOX::RANGE [_49]:32 bits []",
    "EXPR [ (1, _10) (1, _49) (-1, _50) 0 ]",
    "BLACKBOX::RANGE [_50]:32 bits []",
    "EXPR [ (1, _11) (1, _50) (-1, _51) 0 ]",
    "BLACKBOX::RANGE [_51]:32 bits []",
    "EXPR [ (1, _12) (1, _51) (-1, _52) 0 ]",
    "BLACKBOX::RANGE [_52]:32 bits []",
    "EXPR [ (1, _13) (1, _52) (-1, _53) 0 ]",
    "BLACKBOX::RANGE [_53]:32 bits []",
    "EXPR [ (1, _4) (1, _5) (-1, _54) 0 ]",
    "BLACKBOX::RANGE [_54]:32 bits []",
    "EXPR [ (1, _6) (1, _54) (-1, _55) 0 ]",
    "BLACKBOX::RANGE [_55]:32 bits []",
    "EXPR [ (1, _53) (1, _55) (-1, _56) 0 ]",
    "BLACKBOX::RANGE [_56]:32 bits []",
    "EXPR [ (10, _14) (-1, _57) 0 ]",
    "BLACKBOX::RANGE [_57]:32 bits []",
    "EXPR [ (10, _15) (-1, _58) 0 ]",
    "BLACKBOX::RANGE [_58]:32 bits []",
    "EXPR [ (1, _57) (1, _58) (-1, _59) 0 ]",
    "BLACKBOX::RANGE [_59]:32 bits []",
    "EXPR [ (-1, _0) (1, _24) 0 ]",
    "EXPR [ (1, _25) (-1, _56) 0 ]",
    "EXPR [ (-1, _2) (1, _26) 0 ]",
    "EXPR [ (-1, _3) (1, _27) 0 ]",
    "EXPR [ (-1, _4) (1, _28) 0 ]",
    "EXPR [ (-1, _5) (1, _29) 0 ]",
    "EXPR [ (-1, _6) (1, _30) 0 ]",
    "EXPR [ (-1, _7) (1, _31) 0 ]",
    "EXPR [ (-1, _8) (1, _32) 0 ]",
    "EXPR [ (-1, _9) (1, _33) 0 ]",
    "EXPR [ (-1, _10) (1, _34) 0 ]",
    "EXPR [ (-1, _11) (1, _35) 0 ]",
    "EXPR [ (-1, _12) (1, _36) 0 ]",
    "EXPR [ (-1, _13) (1, _37) 0 ]",
    "EXPR [ (1, _38) (-1, _57) 0 ]",
    "EXPR [ (1, _39) (-1, _58) 0 ]",
    "EXPR [ (1, _40) (-1, _59) 0 ]",
    "EXPR [ (1, _41) -5 ]",
    "EXPR [ (1, _42) -10 ]",
    "EXPR [ (1, _43) -15 ]",
    "EXPR [ (1, _44) -20 ]",
    "EXPR [ (1, _45) -25 ]",
    "EXPR [ (1, _46) -30 ]",
    "EXPR [ (1, _47) -35 ]"
  ],
  "debug_symbols": "zVbLbuMwDPwXnX0QqRfVX1kUhZu6hQHDCdxkgUWQf1/Kejg9GCiYLbAXjW15xjRFcXRVb8Pr5eNlnN+Pn+rp11W9LuM0jR8v0/HQn8fjzE+vt07V25fzMgz8SN3NM+vUL8N8Vk/zZZo69bufLutLn6d+XvHcLzyrOzXMb4ws+D5OQ7q6dRtb71ONdYVsnGl0931+gMoPUcC3EAvfopXwqfGjFvCdrslzWvL/zlLley/ge4uF7314jB9Qwidf+AHgQb4k/mBq/QTnH+N7SfyBbOGTJgGfsH6fjCR+crX+yDsJP9T6pyjZP1HX+o1hN38Q9gVQ61oBqOFuC307AqodCLTd/YXUJn4sBNA+tBiipIyAY68KgFqkYDYFJ1PwmwLJFGJTQLPbztH95FqgMzUGo/djkJXkM9/0h3H5YsMK2b06ZdbRck/rlFtHv45hHYl3WKdiqpBOgU6BMgIjpwxYATgrwBrAL4PNmwZcQZ8rGEJBKhgzoi7Iesi6yHrIwSDrIeujzVlHV9DnDGAoSAVjRqMT3lKKlrF/nYZy2ni/zIe7w8f5z6nO1OPJaTkehrfLMqQMrXMp6//p4QUstVpxWmJ/4Jp/giOZQmwxeC1p4eCNbgqeRArNBcDL+he7f1UI1j+qILIyCNpsCrIYYt34ILNzCGGLIUoOhECbl5CPIgVojkhGYuoQTauHaEX1QGHLZJSsJndebE3YwMMKotWMRE1BS46nCLquJgL6RxWMEeWhdTkWk/QoRN0yiVaWh9AyCfGrwo6nwmqnmL01GZnLPlZsrLiYyybmsoe5bGEuO1gCyIAZzGrFJnu0YZXkdT5DWA3aZJ82MRux1QUhG6zFgslYuV/ZZKzwj4zy+fYX",
  "file_map": {
    "50": {
      "source": "struct MyStruct {\n    x: u32,\n    y: u32,\n    z: u32,\n    nested_struct: InnerStruct,\n}\n\nstruct InnerStruct {\n    small_array: [u32; 2],\n    big_array: [u32; 5],\n}\n\nstruct ParentStruct {\n    basic_array: [Field; 3],\n    id: u32,\n    my_structs: [MyStruct; 2],\n}\n\nfn main(x: u32, y: pub u32) {\n    let nested_struct = InnerStruct { small_array: [1 as u32; 2], big_array: [0 as u32; 5] };\n    let s = MyStruct { x, y, z: x + y, nested_struct };\n    let parent = ParentStruct { basic_array: [1; 3], id: 100, my_structs: [s, s] };\n    let new_parent = map_fields(parent);\n\n    // Now check that the outputs are as we expect them to be\n    assert(new_parent.basic_array[0] == 1);\n    assert(new_parent.basic_array[1] == 18);\n    assert(new_parent.basic_array[2] == 1);\n\n    let struct_0 = new_parent.my_structs[0];\n    assert(struct_0.x == 5);\n    assert(struct_0.y == 3);\n    assert(struct_0.z == 8);\n    assert(struct_0.nested_struct.small_array == nested_struct.small_array);\n    assert(struct_0.nested_struct.big_array == nested_struct.big_array);\n\n    let struct_1 = new_parent.my_structs[1];\n    assert(struct_1.x == 50);\n    assert(struct_1.y == 30);\n    assert(struct_1.z == 80);\n    assert(struct_1.nested_struct.small_array == [5, 10]);\n    assert(struct_1.nested_struct.big_array == [15, 20, 25, 30, 35]);\n}\n\n// Meaningless mapping to test whether the values returned are what we expect\n#[fold]\nfn map_fields(mut input: ParentStruct) -> ParentStruct {\n    let current_struct = input.my_structs[0];\n    let mut sum = 0;\n    for value in current_struct.nested_struct.small_array {\n        sum += value;\n    }\n    for value in current_struct.nested_struct.big_array {\n        sum += value;\n    }\n    sum += (current_struct.x + current_struct.y + current_struct.z);\n\n    input.basic_array[1] = sum as Field;\n\n    input.my_structs[1].nested_struct.small_array = [5, 10];\n    input.my_structs[1].nested_struct.big_array = [15, 20, 25, 30, 35];\n\n    // LHS input.my_structs[1].x == 50\n    input.my_structs[1].x = input.my_structs[1].x * 10;\n    // LHS input.my_structs[1].y == 30\n    input.my_structs[1].y = input.my_structs[1].y * 10;\n    // LHS input.my_structs[1].x == 80\n    input.my_structs[1].z = input.my_structs[1].x + input.my_structs[1].y;\n\n    input\n}\n",
      "path": ""
    }
  },
  "names": [
    "main",
    "map_fields"
  ],
  "brillig_names": []
}
