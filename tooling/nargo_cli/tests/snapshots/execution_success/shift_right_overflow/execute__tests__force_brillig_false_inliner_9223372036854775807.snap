---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _42",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 224 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "EXPR [ (1, _0) (-256, _1) (-1, _2) 224 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(1), Witness(0))], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(3), Witness(4), Witness(5), Witness(6), Witness(7), Witness(8), Witness(9), Witness(10)])]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "EXPR [ (-1, _0, _1) (1, _0) (-1, _3) (-2, _4) (-4, _5) (-8, _6) (-16, _7) (-32, _8) (-64, _9) (-128, _10) 0 ]",
    "EXPR [ (2, _10, _10) (4, _10) (-1, _11) 2 ]",
    "EXPR [ (1, _10, _10) (2, _10) (-1, _12) 1 ]",
    "EXPR [ (-1, _9) (-1, _13) 1 ]",
    "EXPR [ (1, _9, _11) (1, _12, _13) (-1, _14) 0 ]",
    "EXPR [ (2, _14, _14) (-1, _15) 0 ]",
    "EXPR [ (1, _14, _14) (-1, _16) 0 ]",
    "EXPR [ (-1, _8) (-1, _17) 1 ]",
    "EXPR [ (1, _8, _15) (1, _16, _17) (-1, _18) 0 ]",
    "EXPR [ (2, _18, _18) (-1, _19) 0 ]",
    "EXPR [ (1, _18, _18) (-1, _20) 0 ]",
    "EXPR [ (-1, _7) (-1, _21) 1 ]",
    "EXPR [ (1, _7, _19) (1, _20, _21) (-1, _22) 0 ]",
    "EXPR [ (2, _22, _22) (-1, _23) 0 ]",
    "EXPR [ (1, _22, _22) (-1, _24) 0 ]",
    "EXPR [ (-1, _6) (-1, _25) 1 ]",
    "EXPR [ (1, _6, _23) (1, _24, _25) (-1, _26) 0 ]",
    "EXPR [ (2, _26, _26) (-1, _27) 0 ]",
    "EXPR [ (1, _26, _26) (-1, _28) 0 ]",
    "EXPR [ (-1, _5) (-1, _29) 1 ]",
    "EXPR [ (1, _5, _27) (1, _28, _29) (-1, _30) 0 ]",
    "EXPR [ (2, _30, _30) (-1, _31) 0 ]",
    "EXPR [ (1, _30, _30) (-1, _32) 0 ]",
    "EXPR [ (-1, _4) (-1, _33) 1 ]",
    "EXPR [ (1, _4, _31) (1, _32, _33) (-1, _34) 0 ]",
    "EXPR [ (2, _34, _34) (-1, _35) 0 ]",
    "EXPR [ (1, _34, _34) (-1, _36) 0 ]",
    "EXPR [ (-1, _3) (-1, _37) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [(1, Witness(35), Witness(3)), (1, Witness(36), Witness(37))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(38))]",
    "EXPR [ (1, _3, _35) (1, _36, _37) (-1, _39) 0 ]",
    "EXPR [ (1, _38, _39) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [(_40, 32)] []",
    "BLACKBOX::RANGE [(_41, 32)] []",
    "EXPR [ (1, _39) (-1, _41) (-1, _42) -1 ]",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "EXPR [ (-1, _39, _40) (-1, _41) 1 ]",
    "EXPR [ (-1, _1, _40) (1, _40) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "jdLBboQgEAbgd+HswZnBbruv0jQGFTckBA2rTRrjuxf5sd09NOllUIb/iwibGmy33loXxumuru+b6qLz3t1aP/VmcVNIs9teqfO1XaK1aUo99FNqNtGGRV3D6n2lPo1f86L7bEIeFxNTt66UDUMaEzg6b4+nvfpN139HqaYSpvryE2/+n2c580JP+Y/0ZnoXn3asKC2sFOcquepcm1xfcr3k+prrW65UY0CaECfkCQBBIBAEg4AQFIbC5RugMBSGwlAYCkNhKAxFoAgUKVuBIlAEikARKAJFoGgoGoqGossfgaKhaCgaioaioTRQmqTwfhxSdKbzttytcQ39w1Vbvuazc17GOU69HdZoj0PKvXRs3w==",
  "file_map": {
    "50": {
      "source": "fn main(x: u8) {\n    // This would previously overflow in ACIR. Now it returns zero.\n    let value = 1 >> x;\n    assert_eq(value, 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_to_radix",
    "directive_invert"
  ]
}
