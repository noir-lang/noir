---
source: tooling/nargo_cli/tests/execute.rs
assertion_line: 511
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "u8",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "positive_i8",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "negative_i8",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "seven",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5795655218219125583": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 8 limbs"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _145",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 248 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(4)), Simple(Witness(5))]",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "EXPR [ (1, _3) (-256, _4) (-1, _5) 248 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [(-1, Witness(4), Witness(3))], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12), Witness(13)])]",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 1)] []",
    "EXPR [ (-1, _3, _4) (1, _3) (-1, _6) (-2, _7) (-4, _8) (-8, _9) (-16, _10) (-32, _11) (-64, _12) (-128, _13) 0 ]",
    "EXPR [ (1, _13, _13) (2, _13) (-1, _14) 1 ]",
    "EXPR [ (-1, _12) (-1, _15) 1 ]",
    "EXPR [ (2, _12, _14) (1, _14, _15) (-1, _16) 0 ]",
    "EXPR [ (1, _16, _16) (-1, _17) 0 ]",
    "EXPR [ (-1, _11) (-1, _18) 1 ]",
    "EXPR [ (2, _11, _17) (1, _17, _18) (-1, _19) 0 ]",
    "EXPR [ (1, _19, _19) (-1, _20) 0 ]",
    "EXPR [ (-1, _10) (-1, _21) 1 ]",
    "EXPR [ (2, _10, _20) (1, _20, _21) (-1, _22) 0 ]",
    "EXPR [ (1, _22, _22) (-1, _23) 0 ]",
    "EXPR [ (-1, _9) (-1, _24) 1 ]",
    "EXPR [ (2, _9, _23) (1, _23, _24) (-1, _25) 0 ]",
    "EXPR [ (1, _25, _25) (-1, _26) 0 ]",
    "EXPR [ (-1, _8) (-1, _27) 1 ]",
    "EXPR [ (2, _8, _26) (1, _26, _27) (-1, _28) 0 ]",
    "EXPR [ (1, _28, _28) (-1, _29) 0 ]",
    "EXPR [ (-1, _7) (-1, _30) 1 ]",
    "EXPR [ (2, _7, _29) (1, _29, _30) (-1, _31) 0 ]",
    "EXPR [ (1, _31, _31) (-1, _32) 0 ]",
    "EXPR [ (-1, _6) (-1, _33) 1 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [(2, Witness(32), Witness(6)), (1, Witness(32), Witness(33))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(34))]",
    "EXPR [ (2, _6, _32) (1, _32, _33) (-1, _35) 0 ]",
    "EXPR [ (1, _34, _35) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "BLACKBOX::RANGE [(_37, 8)] []",
    "EXPR [ (1, _35) (-1, _37) (-1, _38) -1 ]",
    "BLACKBOX::RANGE [(_38, 8)] []",
    "EXPR [ (-1, _35, _36) (1, _0) (-1, _37) 0 ]",
    "EXPR [ (-1, _4, _36) (1, _36) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(39), Witness(40), Witness(41), Witness(42), Witness(43), Witness(44), Witness(45), Witness(46)])]",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "EXPR [ (1, _3) (-1, _39) (-2, _40) (-4, _41) (-8, _42) (-16, _43) (-32, _44) (-64, _45) (-128, _46) 0 ]",
    "EXPR [ (1, _46, _46) (2, _46) (-1, _47) 1 ]",
    "EXPR [ (-1, _45) (-1, _48) 1 ]",
    "EXPR [ (2, _45, _47) (1, _47, _48) (-1, _49) 0 ]",
    "EXPR [ (1, _49, _49) (-1, _50) 0 ]",
    "EXPR [ (-1, _44) (-1, _51) 1 ]",
    "EXPR [ (2, _44, _50) (1, _50, _51) (-1, _52) 0 ]",
    "EXPR [ (1, _52, _52) (-1, _53) 0 ]",
    "EXPR [ (-1, _43) (-1, _54) 1 ]",
    "EXPR [ (2, _43, _53) (1, _53, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _55, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _42) (-1, _57) 1 ]",
    "EXPR [ (2, _42, _56) (1, _56, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _58, _58) (-1, _59) 0 ]",
    "EXPR [ (-1, _41) (-1, _60) 1 ]",
    "EXPR [ (2, _41, _59) (1, _59, _60) (-1, _61) 0 ]",
    "EXPR [ (1, _61, _61) (-1, _62) 0 ]",
    "EXPR [ (-1, _40) (-1, _63) 1 ]",
    "EXPR [ (2, _40, _62) (1, _62, _63) (-1, _64) 0 ]",
    "EXPR [ (1, _64, _64) (-1, _65) 0 ]",
    "EXPR [ (-1, _39) (-1, _66) 1 ]",
    "EXPR [ (-1, _4) (-1, _67) 1 ]",
    "EXPR [ (2, _39, _65) (1, _65, _66) (-1, _68) 0 ]",
    "EXPR [ (1, _67, _68) (-1, _69) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(0), Witness(69))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(70)), Simple(Witness(71))]",
    "BLACKBOX::RANGE [(_70, 246)] []",
    "EXPR [ (1, _0, _69) (-256, _70) (-1, _71) 0 ]",
    "EXPR [ (-1, _70) (-1, _72) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_72, 246)] []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(70))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(73))]",
    "EXPR [ (-1, _70, _73) (85500948718122168836900022442411230814642048439125134155071110103811751936, _73) (1, _74) -1 ]",
    "EXPR [ (-1, _70, _74) (85500948718122168836900022442411230814642048439125134155071110103811751936, _74) 0 ]",
    "EXPR [ (1, _71, _74) (-1, _75) 0 ]",
    "BLACKBOX::RANGE [(_75, 0)] []",
    "EXPR [ (1, _67) -1 ]",
    "EXPR [ (1, _71) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(76)), Simple(Witness(77))]",
    "BLACKBOX::RANGE [(_76, 1)] []",
    "BLACKBOX::RANGE [(_77, 7)] []",
    "EXPR [ (1, _1) (-128, _76) (-1, _77) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(78)), Simple(Witness(79))]",
    "BLACKBOX::RANGE [(_78, 1)] []",
    "BLACKBOX::RANGE [(_79, 9)] []",
    "EXPR [ (1, _1) (-512, _78) (-1, _79) 512 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(2, Witness(78), Witness(76))], linear_combinations: [(1, Witness(1)), (-1, Witness(76)), (-1, Witness(78))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(80)), Simple(Witness(81))]",
    "BLACKBOX::RANGE [(_80, 1)] []",
    "BLACKBOX::RANGE [(_81, 8)] []",
    "EXPR [ (2, _76, _78) (1, _1) (-1, _76) (-1, _78) (-256, _80) (-1, _81) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(82)), Simple(Witness(83))]",
    "BLACKBOX::RANGE [(_82, 1)] []",
    "BLACKBOX::RANGE [(_83, 7)] []",
    "EXPR [ (1, _35) (-128, _82) (-1, _83) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(84)), Simple(Witness(85))]",
    "BLACKBOX::RANGE [(_84, 1)] []",
    "BLACKBOX::RANGE [(_85, 7)] []",
    "EXPR [ (1, _81) (-128, _84) (-1, _85) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [(-2, Witness(35), Witness(82))], linear_combinations: [(1, Witness(35)), (256, Witness(82))], q_c: 0 })], outputs: [Simple(Witness(86))]",
    "EXPR [ (-2, _35, _82) (1, _35) (256, _82) (-1, _87) 0 ]",
    "EXPR [ (1, _86, _87) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(81), Witness(84))], linear_combinations: [(1, Witness(81)), (256, Witness(84))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 })], outputs: [Simple(Witness(88)), Simple(Witness(89))]",
    "BLACKBOX::RANGE [(_88, 8)] []",
    "BLACKBOX::RANGE [(_89, 8)] []",
    "EXPR [ (1, _87) (-1, _89) (-1, _90) -1 ]",
    "BLACKBOX::RANGE [(_90, 8)] []",
    "EXPR [ (-2, _81, _84) (-1, _87, _88) (1, _81) (256, _84) (-1, _89) 0 ]",
    "EXPR [ (-1, _88) (-1, _91) 128 ]",
    "EXPR [ (-2, _82, _84) (1, _82) (1, _84) (-1, _92) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(88))], q_c: 0 })], outputs: [Simple(Witness(93))]",
    "EXPR [ (1, _88, _93) (1, _94) -1 ]",
    "EXPR [ (1, _88, _94) 0 ]",
    "EXPR [ (2, _91, _92) (1, _88) (-1, _95) 0 ]",
    "EXPR [ (-1, _94) (-1, _96) 1 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(89))], q_c: 0 })], outputs: [Simple(Witness(97))]",
    "EXPR [ (1, _89, _97) (1, _98) -1 ]",
    "EXPR [ (1, _89, _98) 0 ]",
    "EXPR [ (-2, _84, _89) (256, _84) (1, _89) (-1, _99) 0 ]",
    "EXPR [ (-1, _98) (-1, _100) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(78), Witness(76)), (1, Witness(95), Witness(96))], linear_combinations: [(1, Witness(76)), (1, Witness(78))], q_c: 511 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(101)), Simple(Witness(102))]",
    "BLACKBOX::RANGE [(_101, 2)] []",
    "EXPR [ (-2, _76, _78) (1, _95, _96) (1, _76) (1, _78) (-256, _101) (-1, _102) 511 ]",
    "EXPR [ (1, _102) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(1), Witness(69))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(103)), Simple(Witness(104))]",
    "BLACKBOX::RANGE [(_103, 246)] []",
    "BLACKBOX::RANGE [(_104, 8)] []",
    "EXPR [ (1, _1, _69) (-256, _103) (-1, _104) 0 ]",
    "EXPR [ (-1, _103) (-1, _105) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_105, 246)] []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(103))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(106))]",
    "EXPR [ (-1, _103, _106) (85500948718122168836900022442411230814642048439125134155071110103811751936, _106) (1, _107) -1 ]",
    "EXPR [ (-1, _103, _107) (85500948718122168836900022442411230814642048439125134155071110103811751936, _107) 0 ]",
    "EXPR [ (1, _104, _107) (-1, _108) 0 ]",
    "BLACKBOX::RANGE [(_108, 0)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(109)), Simple(Witness(110))]",
    "BLACKBOX::RANGE [(_109, 1)] []",
    "EXPR [ (1, _104) (-256, _109) (-1, _110) 0 ]",
    "EXPR [ (1, _110) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(111)), Simple(Witness(112))]",
    "BLACKBOX::RANGE [(_111, 1)] []",
    "BLACKBOX::RANGE [(_112, 7)] []",
    "EXPR [ (1, _2) (-128, _111) (-1, _112) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(113)), Simple(Witness(114))]",
    "BLACKBOX::RANGE [(_113, 1)] []",
    "BLACKBOX::RANGE [(_114, 9)] []",
    "EXPR [ (1, _2) (-512, _113) (-1, _114) 512 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(2, Witness(113), Witness(111))], linear_combinations: [(1, Witness(2)), (-1, Witness(111)), (-1, Witness(113))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(115)), Simple(Witness(116))]",
    "BLACKBOX::RANGE [(_115, 1)] []",
    "BLACKBOX::RANGE [(_116, 8)] []",
    "EXPR [ (2, _111, _113) (1, _2) (-1, _111) (-1, _113) (-256, _115) (-1, _116) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(117)), Simple(Witness(118))]",
    "BLACKBOX::RANGE [(_117, 1)] []",
    "BLACKBOX::RANGE [(_118, 7)] []",
    "EXPR [ (1, _35) (-128, _117) (-1, _118) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(119)), Simple(Witness(120))]",
    "BLACKBOX::RANGE [(_119, 1)] []",
    "BLACKBOX::RANGE [(_120, 7)] []",
    "EXPR [ (1, _116) (-128, _119) (-1, _120) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [(-2, Witness(35), Witness(117))], linear_combinations: [(1, Witness(35)), (256, Witness(117))], q_c: 0 })], outputs: [Simple(Witness(121))]",
    "EXPR [ (-2, _35, _117) (1, _35) (256, _117) (-1, _122) 0 ]",
    "EXPR [ (1, _121, _122) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(116), Witness(119))], linear_combinations: [(1, Witness(116)), (256, Witness(119))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 })], outputs: [Simple(Witness(123)), Simple(Witness(124))]",
    "BLACKBOX::RANGE [(_123, 8)] []",
    "BLACKBOX::RANGE [(_124, 8)] []",
    "EXPR [ (1, _122) (-1, _124) (-1, _125) -1 ]",
    "BLACKBOX::RANGE [(_125, 8)] []",
    "EXPR [ (-2, _116, _119) (-1, _122, _123) (1, _116) (256, _119) (-1, _124) 0 ]",
    "EXPR [ (-1, _123) (-1, _126) 128 ]",
    "EXPR [ (-2, _117, _119) (1, _117) (1, _119) (-1, _127) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 })], outputs: [Simple(Witness(128))]",
    "EXPR [ (1, _123, _128) (1, _129) -1 ]",
    "EXPR [ (1, _123, _129) 0 ]",
    "EXPR [ (2, _126, _127) (1, _123) (-1, _130) 0 ]",
    "EXPR [ (-1, _129) (-1, _131) 1 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(124))], q_c: 0 })], outputs: [Simple(Witness(132))]",
    "EXPR [ (1, _124, _132) (1, _133) -1 ]",
    "EXPR [ (1, _124, _133) 0 ]",
    "EXPR [ (-2, _119, _124) (256, _119) (1, _124) (-1, _134) 0 ]",
    "EXPR [ (-1, _133) (-1, _135) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(113), Witness(111)), (1, Witness(130), Witness(131))], linear_combinations: [(1, Witness(111)), (1, Witness(113))], q_c: 511 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(136)), Simple(Witness(137))]",
    "BLACKBOX::RANGE [(_136, 2)] []",
    "EXPR [ (-2, _111, _113) (1, _130, _131) (1, _111) (1, _113) (-256, _136) (-1, _137) 511 ]",
    "EXPR [ (1, _137) -255 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(2), Witness(69))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(138)), Simple(Witness(139))]",
    "BLACKBOX::RANGE [(_138, 246)] []",
    "BLACKBOX::RANGE [(_139, 8)] []",
    "EXPR [ (1, _2, _69) (-256, _138) (-1, _139) 0 ]",
    "EXPR [ (-1, _138) (-1, _140) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_140, 246)] []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(138))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(141))]",
    "EXPR [ (-1, _138, _141) (85500948718122168836900022442411230814642048439125134155071110103811751936, _141) (1, _142) -1 ]",
    "EXPR [ (-1, _138, _142) (85500948718122168836900022442411230814642048439125134155071110103811751936, _142) 0 ]",
    "EXPR [ (1, _139, _142) (-1, _143) 0 ]",
    "BLACKBOX::RANGE [(_143, 0)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(144)), Simple(Witness(145))]",
    "BLACKBOX::RANGE [(_144, 1)] []",
    "EXPR [ (1, _139) (-256, _144) (-1, _145) 0 ]",
    "EXPR [ (1, _145) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 31 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Relative(1) }, Mov { destination: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Relative(3) }, Mov { destination: Relative(10), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 37 }, Mov { destination: Direct(0), source: Relative(0) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 36 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 31 }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U8, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 44 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(5), op: Shl, bit_size: U8, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(4), rhs: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(7), location: 50 }, Call { location: 183 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(1), location: 54 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(6), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 58 }, Jump { location: 105 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(7), location: 62 }, Jump { location: 102 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(12), source: Relative(4), bit_size: Integer(U32) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 73 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U8, lhs: Relative(11), rhs: Relative(10) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Jump { location: 67 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U8, lhs: Relative(2), rhs: Relative(9) }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(1) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(1) }, JumpIf { condition: Relative(13), location: 80 }, Jump { location: 82 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 84 }, Mov { destination: Relative(14), source: Relative(1) }, Jump { location: 84 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(11) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(11) }, JumpIf { condition: Relative(15), location: 90 }, Jump { location: 92 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 94 }, Mov { destination: Relative(16), source: Relative(11) }, Jump { location: 94 }, BinaryIntOp { destination: Relative(1), op: Div, bit_size: U8, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 98 }, Jump { location: 100 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U8, lhs: Relative(18), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(9) }, Jump { location: 104 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 255 }, Jump { location: 104 }, Jump { location: 107 }, BinaryIntOp { destination: Relative(1), op: Shr, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, Jump { location: 107 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 112 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(1), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, Mov { destination: Relative(2), source: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(1), location: 118 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(7), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(2), location: 122 }, Jump { location: 169 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(4), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 126 }, Jump { location: 166 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(14), source: Relative(4), bit_size: Integer(U32) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 137 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U8, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Jump { location: 131 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U8, lhs: Relative(3), rhs: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(20), rhs: Relative(1) }, Const { destination: Relative(21), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U8, lhs: Relative(21), rhs: Relative(1) }, JumpIf { condition: Relative(15), location: 144 }, Jump { location: 146 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 148 }, Mov { destination: Relative(16), source: Relative(1) }, Jump { location: 148 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U8, lhs: Relative(20), rhs: Relative(13) }, Const { destination: Relative(21), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U8, lhs: Relative(21), rhs: Relative(13) }, JumpIf { condition: Relative(17), location: 154 }, Jump { location: 156 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 158 }, Mov { destination: Relative(18), source: Relative(13) }, Jump { location: 158 }, BinaryIntOp { destination: Relative(1), op: Div, bit_size: U8, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 162 }, Jump { location: 164 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U8, lhs: Relative(20), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(11) }, Jump { location: 168 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 255 }, Jump { location: 168 }, Jump { location: 171 }, BinaryIntOp { destination: Relative(1), op: Shr, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, Jump { location: 171 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 255 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 176 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(1), op: Shl, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, Mov { destination: Relative(2), source: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(1), location: 182 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 3",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pdjRahtJEAXQf9GzHtRV3VXV+ZUQjGwrQSBko9gLi/G/b/fUvcnuQmAYvfhe2a4zQqin1frYPZ8e3388nK/fX37uvnz92D3ezpfL+cfD5eXp+HZ+uY7ffuwO84eU3Zey34lkaEbNaBmW4RmR0ZfQ8UhGjEe639VDRsmQDM0YZh3RMizDMyKjL9GG0kaUDMnQjKHYiJZhGZ4RGX0JO2SUDMnQjFQsFUvFUrFULBVPxVPxVDwVT8VT8VQ8FU/FU4lUIpVIJVKJVCKVSCVSiVQilZ5KT6Wn0lPpqfRUeio9lZ5KT6UcDsiCFKQiK7IhDTk0nxnInlkOyIIcXsxU5PD6zIY0pCPnG+owS0eRA0thERZlqSyNxVichbJQVspKWSkrZaWslJWyUlbKSrlSrpQr5Uq5Uq6UK+VKuVKulBvlRrlRbpQb5Ua5UW6UG+VG2SgbZaNslI2yUTbKRtkoG2WnPBdOKbMIi7JUlsYyZZnFWaass3SUuZSyTFk/P/c73tQe3m6n07yn/esuN+59r8fb6fq2+3J9v1z2u7+Ol/fln36+Hq9Lvh1v46/jyZ6uzyMH+P18Oc32uf89ffjzaCuG4Wbxa7ytnjfjxc3LnfN1y3wvmPeD3DnfNsy7COer3Dm/6fr2az7kzvkt148D50PkznnbMl+V86Z3zm+5/rifYV4Of3z/lnrnAloLbHsGa5bQWqBtAVYtorXAtmewZhmtBTY9g1ULaS1gm4A1S2ktsGUtSQ3M6/9egm/j0fHpfPvvGaDO5Tc+M2dYhmdERs+YH/OWLEhBKhJUgVWAFWgFXIEn8ASewBN4Ak/gCTyBJ/AEnsJTeApP4Sk8hafwFJ7CU3gVXoVX4VV4FV6FV+Etn+QszzTF81Azc/kY53msWVKQiqzIhjSkI+E1eAbP4Bk8g2fwDJ7BM3gGz+A5PIfn8Byew3N4Ds/hOTyHF/ACXsALeAEv4AW8gBfwAl6H1+HN80+JPACVniegJRvSkI4MZM9czkFZCouwKEtlaSzG4izBQrlQLpQL5UK5UC6UC+VCuVAulIWyUBbKQlkoC2WhLJSFslBWykpZKStlpayUlfJcRcKTkRScjJYyF1KWwiIsylJZGouxOAvlSrlRbpTnopr72HIyEsXJKEtjMRZnCZaOMhdXlsIiLJSNslE2ykbZKBtlp+yUnbJTdspO2Sk7ZafslINyUA7KQTkoB+WgHJSDclDulDvlTrlT7pQ75U55rkCps0x52QJ6FplrMEthERZlqSyNxVicJVgoF8qF8lyDYrNM2T/nJno7Hx8vp7kTzr3y/frEjXE8fPv7lX/h12evt5en0/P77TQ30d/foc1rfdWyV/uW++PX8Yrvx2v87XPuu/8A",
  "file_map": {
    "50": {
      "source": "// Prover.toml:\n// u8 = 100\n// positive_i8 = 100\n// negative_i8 = -100\n// seven = 7\n\nfn main(u8: u8, positive_i8: i8, negative_i8: i8, seven: u8) {\n    check_bitshifts(u8, positive_i8, negative_i8, seven);\n\n    // Safety: test program\n    unsafe { check_bitshifts_unconstrained_wrapper(u8, positive_i8, negative_i8, seven) };\n\n    comptime { check_bitshifts(100, 100, -100, 7) };\n}\n\nunconstrained fn check_bitshifts_unconstrained_wrapper(\n    u8: u8,\n    positive_i8: i8,\n    negative_i8: i8,\n    seven: u8,\n) {\n    check_bitshifts(u8, positive_i8, negative_i8, seven)\n}\n\nfn check_bitshifts(u8: u8, positive_i8: i8, negative_i8: i8, seven: u8) {\n    assert_eq(u8 >> seven, 0);\n    assert_eq(u8 << seven, 0);\n    assert_eq(positive_i8 >> seven, 0);\n    assert_eq(positive_i8 << seven, 0);\n    assert_eq(negative_i8 >> seven, -1);\n    assert_eq(negative_i8 << seven, 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "check_bitshifts_unconstrained_wrapper",
    "directive_integer_quotient",
    "directive_to_radix",
    "directive_invert"
  ]
}
