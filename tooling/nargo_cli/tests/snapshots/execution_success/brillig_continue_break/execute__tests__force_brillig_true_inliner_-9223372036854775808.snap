---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 13 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Integer(U1), value: 0 }, Return, Call { location: 25 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 31 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(4) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(2), location: 24 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 30 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 25 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(2), bit_size: Field, value: 0 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32835) }, Const { destination: Relative(3), bit_size: Field, value: 3 }, Const { destination: Relative(4), bit_size: Field, value: 2 }, Const { destination: Relative(5), bit_size: Field, value: 1 }, Jump { location: 43 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 59 }, Jump { location: 47 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 55 }, Jump { location: 51 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(6), rhs: Relative(5) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Jump { location: 43 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(6), rhs: Relative(5) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Jump { location: 43 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Return]"
  ],
  "debug_symbols": "pZTLioMwFIbfJWsX5h77KqWU1KYlEKKkOjAU333+GO20i4FBN/mMJ9+5KORJru4y3s8+3roHORyf5JJ8CP5+Dl1rB99FvH2SOi9UkAOtCJUFqkAXmIJmBsN5BtACVsBncOw4wAtEgSxQBbrAzBA4KQCclABiCkBMV0SiggGQswF4QW6wBnOH6Ebqhbk5Nk0VWWc7D8m5PNrbsPgEvU0uDuQQxxAq8mXDOB969DbOHGxCFBVcvIJIePPB5aep+rXrv1XFF1eZlyz/bZvVNnqDTQVbdCr4Fr95+c1ef8v0TK0+U3ynv6U+l3LxuVT7fEW39P/6/cyInX6zpX+9+lx/zn/CzrY+fVwdU86UvL0Et2xvY2zfosN3v0bWq6dPXeuuY3I509v9g/XIZMXr05Sr/QA=",
  "file_map": {
    "50": {
      "source": "fn main() {\n    // Safety: test program\n    let bug = unsafe { foo() };\n    assert(!bug);\n}\n\nunconstrained fn foo() -> bool {\n    let mut i = 0;\n    let mut bug = false;\n    loop {\n        if i == 3 {\n            break;\n            bug = true;\n        } else if i == 2 {\n            i += 1;\n            continue;\n            bug = true;\n        }\n        i += 1;\n    }\n    bug\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
