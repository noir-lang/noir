---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 1
              },
              {
                "kind": "boolean"
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 1
              },
              {
                "kind": "string",
                "length": 2
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 0,
        "type": {
          "kind": "boolean"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _24",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:1 bits []",
    "BLACKBOX::RANGE [_1]:1 bits []",
    "BLACKBOX::RANGE [_2]:1 bits []",
    "BLACKBOX::RANGE [_3]:1 bits []",
    "BLACKBOX::RANGE [_4]:8 bits []",
    "BLACKBOX::RANGE [_5]:8 bits []",
    "BLACKBOX::RANGE [_6]:1 bits []",
    "BLACKBOX::RANGE [_7]:1 bits []",
    "BLACKBOX::RANGE [_8]:1 bits []",
    "BLACKBOX::RANGE [_9]:8 bits []",
    "BLACKBOX::RANGE [_10]:8 bits []",
    "BLACKBOX::RANGE [_11]:1 bits []",
    "BLACKBOX::RANGE [_12]:1 bits []",
    "BLACKBOX::RANGE [_13]:1 bits []",
    "BLACKBOX::RANGE [_14]:8 bits []",
    "BLACKBOX::RANGE [_15]:8 bits []",
    "BLACKBOX::RANGE [_16]:1 bits []",
    "BLACKBOX::RANGE [_17]:1 bits []",
    "BLACKBOX::RANGE [_18]:1 bits []",
    "BLACKBOX::RANGE [_19]:8 bits []",
    "BLACKBOX::RANGE [_20]:8 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Simple(Witness(21)), Simple(Witness(22))]",
    "BLACKBOX::RANGE [_21]:31 bits []",
    "BLACKBOX::RANGE [_22]:1 bits []",
    "EXPR [ (2, _1) (-2, _21) (-1, _22) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 4294967294 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(23)), Simple(Witness(24))]",
    "BLACKBOX::RANGE [_23]:1 bits []",
    "BLACKBOX::RANGE [_24]:32 bits []",
    "EXPR [ (1, _22) (-4294967296, _23) (-1, _24) 4294967294 ]",
    "EXPR [ (-1, _0, _23) 0 ]",
    "EXPR [ (1, _0, _23) (-1, _23) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZLBjoMgEIbfZc4cEEWrr7LZGNSxISFoKGyyMb77jiLb9tALpw/m54NJmA0mHMK913ZeHtB9bTA4bYy+92YZldeLpeq2M0jb3jtEKsFLTtaqHFoPnQ3GMPhRJpyHHquyJ71ylHIGaCciXThrg8dqZ0+bf1aLsrnkoir+dZnlt1l+nfy6yfJl8huZ5VfJv/EMX/D28oV8f/+bdmrU7u3HQRSUMhAiooyoImREHdFE3CLaEyWHrt6PdpxWg8FriuZgx5eh8r9rStLYrW4ZcQoOj3bOjBr8Aw==",
  "file_map": {
    "50": {
      "source": "global G_A: [[bool; 0]; 2] = [[], []];\n\nfn main(a: bool, b: [(u1, bool, u1, str<2>); 4]) -> pub [bool; 0] {\n    if (a) {\n        G_A[((((b[0].0 as u8) + (b[0].0 as u8)) as u32) % 2)]\n    } else {\n        G_A[((((b[0].0 as u8) + (b[0].0 as u8)) as u32) % 2)]\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
