---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 365 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 21 }, Call { location: 371 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 26 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 30 }, Call { location: 374 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 35 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 43 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, JumpIf { condition: Relative(7), location: 43 }, Call { location: 377 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 27 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 48 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 54 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(5), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(6) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 62 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: And, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 68 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Or, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 74 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(4), op: Xor, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 80 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U32) }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U32, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(8), location: 89 }, Call { location: 380 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 72 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 94 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U32, lhs: Relative(2), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 99 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 105 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, Not { destination: Relative(1), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(2), source: Relative(6), bit_size: Field }, Not { destination: Relative(7), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(8), source: Relative(6), bit_size: Field }, Not { destination: Relative(9), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(10), source: Relative(6), bit_size: Field }, Not { destination: Relative(11), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(12), source: Relative(6), bit_size: Field }, Not { destination: Relative(13), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(14), source: Relative(6), bit_size: Field }, Not { destination: Relative(15), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(16), source: Relative(6), bit_size: Field }, Not { destination: Relative(17), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(18), source: Relative(6), bit_size: Field }, Not { destination: Relative(19), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(20), source: Relative(6), bit_size: Field }, Not { destination: Relative(21), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(22), source: Relative(6), bit_size: Field }, Const { destination: Relative(23), bit_size: Field, value: 0 }, Const { destination: Relative(24), bit_size: Field, value: 2 }, JumpIf { condition: Relative(4), location: 136 }, Jump { location: 129 }, Not { destination: Relative(25), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(26), source: Relative(6), bit_size: Field }, Cast { destination: Relative(27), source: Relative(25), bit_size: Field }, BinaryFieldOp { destination: Relative(25), op: Mul, lhs: Relative(26), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(26), op: Add, lhs: Relative(25), rhs: Relative(27) }, Mov { destination: Relative(3), source: Relative(26) }, Jump { location: 138 }, Mov { destination: Relative(3), source: Relative(23) }, Jump { location: 138 }, BinaryFieldOp { destination: Relative(26), op: Equals, lhs: Relative(3), rhs: Relative(23) }, JumpIf { condition: Relative(26), location: 142 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(27) } }, JumpIf { condition: Relative(4), location: 149 }, Jump { location: 144 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Field }, BinaryFieldOp { destination: Relative(1), op: Mul, lhs: Relative(2), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(2), op: Add, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(25), source: Relative(2) }, Jump { location: 151 }, Mov { destination: Relative(25), source: Relative(23) }, Jump { location: 151 }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(25), rhs: Relative(24) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(3), location: 156 }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(25) } }, JumpIf { condition: Relative(4), location: 163 }, Jump { location: 158 }, Cast { destination: Relative(2), source: Relative(7), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(8), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(3), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(7) }, Jump { location: 165 }, Mov { destination: Relative(1), source: Relative(23) }, Jump { location: 165 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(24) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(1), location: 170 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, JumpIf { condition: Relative(4), location: 177 }, Jump { location: 172 }, Cast { destination: Relative(1), source: Relative(9), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(10), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(3), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 179 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 179 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(23) }, JumpIf { condition: Relative(3), location: 183 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, JumpIf { condition: Relative(4), location: 190 }, Jump { location: 185 }, Cast { destination: Relative(2), source: Relative(11), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(12), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(3), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(7) }, Jump { location: 192 }, Mov { destination: Relative(1), source: Relative(23) }, Jump { location: 192 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(23) }, JumpIf { condition: Relative(3), location: 196 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, JumpIf { condition: Relative(4), location: 203 }, Jump { location: 198 }, Cast { destination: Relative(1), source: Relative(13), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(14), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(3), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 205 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 205 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(2) }, Const { destination: Relative(3), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(3) }, Not { destination: Relative(2), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(8), source: Relative(4), bit_size: Field }, Not { destination: Relative(9), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(10), source: Relative(4), bit_size: Field }, Not { destination: Relative(11), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(12), source: Relative(4), bit_size: Field }, Not { destination: Relative(13), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(14), source: Relative(4), bit_size: Field }, JumpIf { condition: Relative(7), location: 220 }, Jump { location: 233 }, JumpIf { condition: Relative(6), location: 229 }, Jump { location: 222 }, Not { destination: Relative(25), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(26), source: Relative(4), bit_size: Field }, Cast { destination: Relative(27), source: Relative(25), bit_size: Field }, BinaryFieldOp { destination: Relative(25), op: Mul, lhs: Relative(26), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(26), op: Add, lhs: Relative(25), rhs: Relative(27) }, Mov { destination: Relative(7), source: Relative(26) }, Jump { location: 231 }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 231 }, Store { destination_pointer: Relative(1), source: Relative(7) }, Jump { location: 233 }, Load { destination: Relative(25), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(25), rhs: Relative(23) }, JumpIf { condition: Relative(1), location: 238 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(26) } }, JumpIf { condition: Relative(4), location: 245 }, Jump { location: 240 }, Cast { destination: Relative(1), source: Relative(15), bit_size: Field }, BinaryFieldOp { destination: Relative(15), op: Mul, lhs: Relative(16), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(16), op: Add, lhs: Relative(15), rhs: Relative(1) }, Mov { destination: Relative(7), source: Relative(16) }, Jump { location: 247 }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 247 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(15), location: 253 }, Jump { location: 264 }, JumpIf { condition: Relative(6), location: 260 }, Jump { location: 255 }, Cast { destination: Relative(15), source: Relative(2), bit_size: Field }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(8), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(8), op: Add, lhs: Relative(2), rhs: Relative(15) }, Mov { destination: Relative(7), source: Relative(8) }, Jump { location: 262 }, Mov { destination: Relative(7), source: Relative(23) }, Jump { location: 262 }, Store { destination_pointer: Relative(1), source: Relative(7) }, Jump { location: 264 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(7), rhs: Relative(24) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 270 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, JumpIf { condition: Relative(6), location: 277 }, Jump { location: 272 }, Cast { destination: Relative(1), source: Relative(9), bit_size: Field }, BinaryFieldOp { destination: Relative(7), op: Mul, lhs: Relative(10), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(8), op: Add, lhs: Relative(7), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 279 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 279 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(2) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 285 }, Jump { location: 296 }, JumpIf { condition: Relative(4), location: 292 }, Jump { location: 287 }, Cast { destination: Relative(7), source: Relative(17), bit_size: Field }, BinaryFieldOp { destination: Relative(8), op: Mul, lhs: Relative(18), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(9), op: Add, lhs: Relative(8), rhs: Relative(7) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 294 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 294 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Jump { location: 296 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(7), rhs: Relative(24) }, JumpIf { condition: Relative(1), location: 301 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, JumpIf { condition: Relative(6), location: 308 }, Jump { location: 303 }, Cast { destination: Relative(1), source: Relative(11), bit_size: Field }, BinaryFieldOp { destination: Relative(7), op: Mul, lhs: Relative(12), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(8), op: Add, lhs: Relative(7), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 310 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 310 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(2) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 316 }, Jump { location: 327 }, JumpIf { condition: Relative(4), location: 323 }, Jump { location: 318 }, Cast { destination: Relative(7), source: Relative(19), bit_size: Field }, BinaryFieldOp { destination: Relative(8), op: Mul, lhs: Relative(20), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(9), op: Add, lhs: Relative(8), rhs: Relative(7) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 325 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 325 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Jump { location: 327 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(7), rhs: Relative(23) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 333 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, JumpIf { condition: Relative(4), location: 340 }, Jump { location: 335 }, Cast { destination: Relative(1), source: Relative(21), bit_size: Field }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(22), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(5), op: Add, lhs: Relative(4), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 342 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 342 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(2) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 348 }, Jump { location: 359 }, JumpIf { condition: Relative(6), location: 355 }, Jump { location: 350 }, Cast { destination: Relative(3), source: Relative(13), bit_size: Field }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(14), rhs: Relative(24) }, BinaryFieldOp { destination: Relative(5), op: Add, lhs: Relative(4), rhs: Relative(3) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 357 }, Mov { destination: Relative(2), source: Relative(23) }, Jump { location: 357 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Jump { location: 359 }, Load { destination: Relative(2), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(2), rhs: Relative(23) }, JumpIf { condition: Relative(1), location: 364 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 370 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tVnbbuM6DPyXPPdB1IWU+iuLxSLbzS4CBGmRbQ9wUPTfDyci3fZBPoWMvHQmjUVz6CFlx6+7X4efL39+HM+/H//u7r+97n5ejqfT8c+P0+PD/vn4eNb/vu4C/pDs7uPdjmqHdoUYOtDuPinEDqlD7lA68O6+KEiH2qFdIWkUVqAOsUPqkDtolKrAHaRD7dCukEMH6hA7aJSmkDuUDtxBOmgUIkUNQyqmBEMyjIbJUGNRViyGbKjhSNWUatg6cjAkQ8QTRcTTFDkbFkM2FENUPCii5JqnBEMyjIbJUONFrbhovKh5CRuKYTVsHSviaV6VDKMh4mmeNRsWQzYUw2qIeJpvC4ZkGA2TIXyhehqMofk2NhTDaqjxkuqgoAFTBiEn0Ulykp0gqoBo2BxAxIkGzAhIGicziC7PDURXletX8CeWw+CsWRC8zQUEhsTBcK0gIPwnOAYOvBJ4sBMyAhelCqI5CzoHPuokOylGYIGMVfCAIB+YoJPqpBnB9RNIxgXshJxEI6i9IHkUv5PspHQSUbFCIOxEnOCkAtKMUOjljRSdZCdsJPpXaGipIMmJHlwCSHHCTsQI2rIgMTRmJ80IWrPiGPRQRYZonk4QMIOwE3FSnTQjKF3F3ELpOiEniIxjUKjSQNgJAkIFHNpJ6yTBoleC+lSMNHisk+hEi1AF801T5QQiTjQgR5Bm5DoSr4ScRCOYbIw4mG2dZCeYkg3TEqMtgDQjmEKNQMhJdIIZSW9vdzuf+j+eL4cDhv6HbUA3h6f95XB+3t2fX06nu90/+9PL9aC/T/vzFZ/3F/1Wz3Y4/1LUgL+PpwPY29376jBeqiW2xSnkZXn5vJ7G64kxYK4BtJfiKMJqBuwZxJn1KS0K8lBBXlEg2QOQCE1lsCjgKQWyKKhDBbKioLInQLWFqQw8QA4zCjK5ghzHLloJQA0Ne40QQ2hTKSwS8pSEskjgsYS04mPdEV0CxTqVwiKhTklo3oollKEEXpEQY3MJsaSpFLyKJZaJ9SX7LCtZhhLaioRUoktQV8+kkLwGhWVmffUESh0aOcYVCXmZB7r90lQKZAF4qpc4LevTjJE5lv9fH9eMWNrSS0xpKgUPwDxjRK5uRG7D88c1I0rwbo4y1QssbkSJM0Ndlm1JxhtjWjNiDctQrmkuBQ8gZcaIIn4VpQ4bAecY31zQIqHFYQqJ10ZSXBo6pw+F/KqISm6lSsNuwAPLVhFtTUTNi4jGEyKy7y21DM2cabOIHG8pYllf23CDzXm7iHJDES36cG5xuD9l2S6i3lCEPvUvN91xvEeVtXtWarQ8OIy3ybLdk+WWnqSIX46sEmV4w1Ly9kpsn5OFb1oJ8UFJafwYUlZ8qc/375UY7xilba4Eh1tWIi0PM5TyOIe4uRKctlci37QSnJdKjB+KmDd3B2+fmLx5YqZb9peIDxppM/ejNfj9aE0zt+R1+Z2l8szNYK2efwszD2YfNs5cpnacGMPipPHjqayZ8f0ipkI0uIjrSXxtxOXtOtpmHXm7jrp936ubS1HT1lKszuovTqi4Xcdma65O2i8mUW+bxJd89cU9J9PnSfVdP+0fjpdPb2vfEOty3P88Hezj75fzw4dvn/998m/8be/T5fHh8OvlckCkD6989e+3pC+/koTveCeGj/oQrD9lfX/D6f8D",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "use std::cmp::Ordering;\nuse std::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Rem, Shl, Shr, Sub};\n\n// x = 3, y = 9\nfn main(x: u32, y: u32) {\n    let wx = Wrapper::new(x);\n    let wy = Wrapper::new(y);\n\n    // expected x and expected y values\n    let ex: u32 = 3;\n    let ey: u32 = 9;\n\n    assert((wx + wy).inner == ex + ey);\n    assert((wy - wx).inner == ey - ex);\n    assert((wx * wy).inner == ex * ey);\n    assert((wx / wy).inner == ex / ey);\n    assert((wx % wy).inner == ex % ey);\n\n    assert((wx & wy).inner == (ex & ey));\n    assert((wx | wy).inner == (ex | ey));\n    assert((wx ^ wy).inner == (ex ^ ey));\n\n    assert((wy << x as u8).inner == (ey << ex as u8));\n    assert((wy >> x as u8).inner == (ey >> ex as u8));\n\n    assert((wx == wy) == (ex == ey));\n    assert((wx < wy) == (ex < ey));\n    assert((wx <= wy) == (ex <= ey));\n    assert((wx > wy) == (ex > ey));\n    assert((wx >= wy) == (ex >= ey));\n    assert(wx.cmp(wy) == ex.cmp(ey));\n\n    // Ensure operator overloading still works with more complex types\n    let pair_ascending = Pair { x: wx, y: wy };\n    let pair_descending = Pair { x: wy, y: wx };\n\n    assert(pair_ascending != pair_descending);\n\n    assert(pair_ascending < pair_descending);\n    assert(pair_ascending <= pair_descending);\n    assert(pair_descending > pair_ascending);\n    assert(pair_descending >= pair_ascending);\n\n    assert(pair_ascending.cmp(pair_descending) == Ordering::less());\n}\n\nstruct Wrapper {\n    inner: u32,\n}\n\nimpl Wrapper {\n    fn new(inner: u32) -> Self {\n        Wrapper { inner }\n    }\n}\n\nimpl Add for Wrapper {\n    fn add(self, other: Self) -> Self {\n        Wrapper::new(self.inner + other.inner)\n    }\n}\n\nimpl Sub for Wrapper {\n    fn sub(self, other: Self) -> Self {\n        Wrapper::new(self.inner - other.inner)\n    }\n}\n\nimpl Mul for Wrapper {\n    fn mul(self, other: Self) -> Self {\n        Wrapper::new(self.inner * other.inner)\n    }\n}\n\nimpl Div for Wrapper {\n    fn div(self, other: Self) -> Self {\n        Wrapper::new(self.inner / other.inner)\n    }\n}\n\nimpl Rem for Wrapper {\n    fn rem(self, other: Self) -> Self {\n        Wrapper::new(self.inner % other.inner)\n    }\n}\n\nimpl BitAnd for Wrapper {\n    fn bitand(self, other: Self) -> Self {\n        Wrapper::new(self.inner & other.inner)\n    }\n}\n\nimpl BitOr for Wrapper {\n    fn bitor(self, other: Self) -> Self {\n        Wrapper::new(self.inner | other.inner)\n    }\n}\n\nimpl BitXor for Wrapper {\n    fn bitxor(self, other: Self) -> Self {\n        Wrapper::new(self.inner ^ other.inner)\n    }\n}\n\nimpl Shl for Wrapper {\n    fn shl(self, other: u8) -> Self {\n        Wrapper::new(self.inner << other)\n    }\n}\n\nimpl Shr for Wrapper {\n    fn shr(self, other: u8) -> Self {\n        Wrapper::new(self.inner >> other)\n    }\n}\n\nimpl Eq for Wrapper {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl Ord for Wrapper {\n    fn cmp(self, other: Self) -> Ordering {\n        self.inner.cmp(other.inner)\n    }\n}\n\nstruct Pair {\n    x: Wrapper,\n    y: Wrapper,\n}\n\nimpl Eq for Pair {\n    fn eq(self, o: Self) -> bool {\n        (self.x == o.x) & (self.y == o.y)\n    }\n}\n\nimpl Ord for Pair {\n    fn cmp(self, o: Self) -> Ordering {\n        let mut result = self.x.cmp(o.x);\n\n        if result == Ordering::equal() {\n            result = self.y.cmp(o.y);\n        }\n\n        result\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
