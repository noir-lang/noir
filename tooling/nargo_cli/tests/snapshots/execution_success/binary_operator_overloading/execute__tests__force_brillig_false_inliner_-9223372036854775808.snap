---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjdbhshEIXfZa99AcP8QF6lqiIn2VSWLNty7EhVlHcvZA+b5ALa4quDveHzHJgZyL5NT/PD9df97vB8fJnufrxND+fdfr/7db8/Pm4vu+Mhf/v2vpnqx/vLeZ7zV9OX53nWaXueD5fp7nDd7zfT63Z//fijl9P28KGX7Tk/dZtpPjxlzcDn3X4uo/fN52zXnkrJMDk4XqfL9/m+Pd8rRQC8CrUI3Qi0RkAj80NYHXDTAXccGFeAN/NDEawOdMiBrQ5i04F1HEStAfiY3FAEFcBuxAH76oCpnUUdgE9RQCDn0lAIqwUesiCrBW1bCJ089o6rBU9xKITVQhyykGopipOmBe1YIErVAkkYCqGuopAMzBeuvUzYmhZSx0IQqhZyVo+EEOoaiNrI/FgDkNhMZKKOBV77AYnzQyF4AHSoljSs88NIIivJ3+dTLxElrbWkPgyFUAGqI4mosSaipubvUy8RzdVqJhuqBbWaiEYjTd1C3QWTkSwwq0tosZmFodcRk1+beqJmCIF7/YDWauLwpS//ByHySkjaIHSXIdRlSCPb6P1azp7a5Rhi53gm8+sdKY50BJ/TsQYR2kc89+4IPn0G0W5L7G9OCKZbt7Prg8itPtqHDHdyKnwGEcT7oSD+aUdZb19Mu7W6+oTmdvzMH7aPu/O3/3gmyoY3U8jdbTPxdJc7nJQS2Uy6iC0SF0mLeAf1UCoZnTVzfP59z1CBKtSgEZoWpcLLi0eFl91R4eX6o1Cun1kZKlAtd7qsVm4VWWM5pbOmclRlOw7qoQQtvMwPDBWoQg0aoWlRdlAPJSh4DB6Dx+AxeAwegyfgCXgCnoAn4Al4Ap6AJ+AJeAqegqfgKXgKnoKn4Cl4Cp6CZ+AZeAaegWfgGXgGnoFn4Bl4EbxYeHlfY8m6vI8xQBkqUIUaNEJTaXs5DV0p06weWnh5f1OAMlSghZcTPBk0QtOi3hWQlUEo1/4y4DqQOtA6sHKvLoOIQamH0hp8KYhlQHVQgOW28Lo977YP+xnvGZ6vh8cvrx0uv0/1SX0xcTofH+en63kuBfvxLJfwHw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "use std::cmp::Ordering;\nuse std::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Rem, Shl, Shr, Sub};\n\n// x = 3, y = 9\nfn main(x: u32, y: u32) {\n    let wx = Wrapper::new(x);\n    let wy = Wrapper::new(y);\n\n    // expected x and expected y values\n    let ex: u32 = 3;\n    let ey: u32 = 9;\n\n    assert((wx + wy).inner == ex + ey);\n    assert((wy - wx).inner == ey - ex);\n    assert((wx * wy).inner == ex * ey);\n    assert((wx / wy).inner == ex / ey);\n    assert((wx % wy).inner == ex % ey);\n\n    assert((wx & wy).inner == (ex & ey));\n    assert((wx | wy).inner == (ex | ey));\n    assert((wx ^ wy).inner == (ex ^ ey));\n\n    assert((wy << x as u8).inner == (ey << ex as u8));\n    assert((wy >> x as u8).inner == (ey >> ex as u8));\n\n    assert((wx == wy) == (ex == ey));\n    assert((wx < wy) == (ex < ey));\n    assert((wx <= wy) == (ex <= ey));\n    assert((wx > wy) == (ex > ey));\n    assert((wx >= wy) == (ex >= ey));\n    assert(wx.cmp(wy) == ex.cmp(ey));\n\n    // Ensure operator overloading still works with more complex types\n    let pair_ascending = Pair { x: wx, y: wy };\n    let pair_descending = Pair { x: wy, y: wx };\n\n    assert(pair_ascending != pair_descending);\n\n    assert(pair_ascending < pair_descending);\n    assert(pair_ascending <= pair_descending);\n    assert(pair_descending > pair_ascending);\n    assert(pair_descending >= pair_ascending);\n\n    assert(pair_ascending.cmp(pair_descending) == Ordering::less());\n}\n\nstruct Wrapper {\n    inner: u32,\n}\n\nimpl Wrapper {\n    fn new(inner: u32) -> Self {\n        Wrapper { inner }\n    }\n}\n\nimpl Add for Wrapper {\n    fn add(self, other: Self) -> Self {\n        Wrapper::new(self.inner + other.inner)\n    }\n}\n\nimpl Sub for Wrapper {\n    fn sub(self, other: Self) -> Self {\n        Wrapper::new(self.inner - other.inner)\n    }\n}\n\nimpl Mul for Wrapper {\n    fn mul(self, other: Self) -> Self {\n        Wrapper::new(self.inner * other.inner)\n    }\n}\n\nimpl Div for Wrapper {\n    fn div(self, other: Self) -> Self {\n        Wrapper::new(self.inner / other.inner)\n    }\n}\n\nimpl Rem for Wrapper {\n    fn rem(self, other: Self) -> Self {\n        Wrapper::new(self.inner % other.inner)\n    }\n}\n\nimpl BitAnd for Wrapper {\n    fn bitand(self, other: Self) -> Self {\n        Wrapper::new(self.inner & other.inner)\n    }\n}\n\nimpl BitOr for Wrapper {\n    fn bitor(self, other: Self) -> Self {\n        Wrapper::new(self.inner | other.inner)\n    }\n}\n\nimpl BitXor for Wrapper {\n    fn bitxor(self, other: Self) -> Self {\n        Wrapper::new(self.inner ^ other.inner)\n    }\n}\n\nimpl Shl for Wrapper {\n    fn shl(self, other: u8) -> Self {\n        Wrapper::new(self.inner << other)\n    }\n}\n\nimpl Shr for Wrapper {\n    fn shr(self, other: u8) -> Self {\n        Wrapper::new(self.inner >> other)\n    }\n}\n\nimpl Eq for Wrapper {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl Ord for Wrapper {\n    fn cmp(self, other: Self) -> Ordering {\n        self.inner.cmp(other.inner)\n    }\n}\n\nstruct Pair {\n    x: Wrapper,\n    y: Wrapper,\n}\n\nimpl Eq for Pair {\n    fn eq(self, o: Self) -> bool {\n        (self.x == o.x) & (self.y == o.y)\n    }\n}\n\nimpl Ord for Pair {\n    fn cmp(self, o: Self) -> Ordering {\n        let mut result = self.x.cmp(o.x);\n\n        if result == Ordering::equal() {\n            result = self.y.cmp(o.y);\n        }\n\n        result\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
