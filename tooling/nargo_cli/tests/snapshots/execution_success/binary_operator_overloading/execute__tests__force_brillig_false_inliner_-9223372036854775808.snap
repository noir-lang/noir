---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _116",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "EXPR [ (1, _0) (1, _1) -12 ]",
    "EXPR [ (-1, _0) (1, _1) -6 ]",
    "EXPR [ (1, _0, _1) -27 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (1, _1, _5) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (1, _1) (-1, _7) (-1, _8) -1 ]",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "EXPR [ (-1, _1, _6) (1, _0) (-1, _7) 0 ]",
    "EXPR [ (1, _6) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (1, _1, _9) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(10)), Simple(Witness(11))]",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "EXPR [ (1, _1) (-1, _11) (-1, _12) -1 ]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (-1, _1, _10) (1, _0) (-1, _11) 0 ]",
    "EXPR [ (1, _11) -3 ]",
    "BLACKBOX::AND [(_0, 32), (_1, 32)] [_13]",
    "EXPR [ (1, _13) -1 ]",
    "EXPR [ (-1, _0) (-1, _14) 4294967295 ]",
    "EXPR [ (-1, _1) (-1, _15) 4294967295 ]",
    "BLACKBOX::AND [(_14, 32), (_15, 32)] [_16]",
    "EXPR [ (-1, _16) 4294967284 ]",
    "BLACKBOX::XOR [(_0, 32), (_1, 32)] [_17]",
    "EXPR [ (1, _17) -10 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 24)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "EXPR [ (1, _0) (-256, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 224 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "EXPR [ (1, _19) (-256, _20) (-1, _21) 224 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29)])]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 1)] []",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 1)] []",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 1)] []",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "EXPR [ (1, _19) (-1, _22) (-2, _23) (-4, _24) (-8, _25) (-16, _26) (-32, _27) (-64, _28) (-128, _29) 0 ]",
    "EXPR [ (1, _29, _29) (2, _29) (-1, _30) 1 ]",
    "EXPR [ (-1, _28) (-1, _31) 1 ]",
    "EXPR [ (2, _28, _30) (1, _30, _31) (-1, _32) 0 ]",
    "EXPR [ (1, _32, _32) (-1, _33) 0 ]",
    "EXPR [ (-1, _27) (-1, _34) 1 ]",
    "EXPR [ (2, _27, _33) (1, _33, _34) (-1, _35) 0 ]",
    "EXPR [ (1, _35, _35) (-1, _36) 0 ]",
    "EXPR [ (-1, _26) (-1, _37) 1 ]",
    "EXPR [ (2, _26, _36) (1, _36, _37) (-1, _38) 0 ]",
    "EXPR [ (1, _38, _38) (-1, _39) 0 ]",
    "EXPR [ (-1, _25) (-1, _40) 1 ]",
    "EXPR [ (2, _25, _39) (1, _39, _40) (-1, _41) 0 ]",
    "EXPR [ (1, _41, _41) (-1, _42) 0 ]",
    "EXPR [ (-1, _24) (-1, _43) 1 ]",
    "EXPR [ (2, _24, _42) (1, _42, _43) (-1, _44) 0 ]",
    "EXPR [ (1, _44, _44) (-1, _45) 0 ]",
    "EXPR [ (-1, _23) (-1, _46) 1 ]",
    "EXPR [ (2, _23, _45) (1, _45, _46) (-1, _47) 0 ]",
    "EXPR [ (1, _47, _47) (-1, _48) 0 ]",
    "EXPR [ (-1, _22) (-1, _49) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(2, Witness(48), Witness(22)), (1, Witness(48), Witness(49))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(50)), Simple(Witness(51))]",
    "BLACKBOX::RANGE [(_50, 222)] []",
    "BLACKBOX::RANGE [(_51, 32)] []",
    "EXPR [ (2, _22, _48) (1, _48, _49) (-4294967296, _50) (-1, _51) 0 ]",
    "EXPR [ (-1, _50) (-1, _52) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_52, 222)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(50))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(53))]",
    "EXPR [ (-1, _50, _53) (5096253676302562286669017222071363378443840053029366383258766538131, _53) (1, _54) -1 ]",
    "EXPR [ (-1, _50, _54) (5096253676302562286669017222071363378443840053029366383258766538131, _54) 0 ]",
    "EXPR [ (1, _51, _54) (1, _54, _54) (268435454, _54) (-1, _55) 0 ]",
    "BLACKBOX::RANGE [(_55, 32)] []",
    "EXPR [ (-1, _20, _51) (1, _51) (-1, _56) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(1), Witness(56))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(57)), Simple(Witness(58))]",
    "BLACKBOX::RANGE [(_57, 222)] []",
    "EXPR [ (1, _1, _56) (-4294967296, _57) (-1, _58) 0 ]",
    "EXPR [ (-1, _57) (-1, _59) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_59, 222)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(57))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(60))]",
    "EXPR [ (-1, _57, _60) (5096253676302562286669017222071363378443840053029366383258766538131, _60) (1, _61) -1 ]",
    "EXPR [ (-1, _57, _61) (5096253676302562286669017222071363378443840053029366383258766538131, _61) 0 ]",
    "EXPR [ (1, _58, _61) (1, _61, _61) (268435454, _61) (-1, _62) 0 ]",
    "BLACKBOX::RANGE [(_62, 32)] []",
    "EXPR [ (-1, _20) 0 ]",
    "EXPR [ (1, _58) -72 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(63), Witness(64), Witness(65), Witness(66), Witness(67), Witness(68), Witness(69), Witness(70)])]",
    "BLACKBOX::RANGE [(_63, 1)] []",
    "BLACKBOX::RANGE [(_64, 1)] []",
    "BLACKBOX::RANGE [(_65, 1)] []",
    "BLACKBOX::RANGE [(_66, 1)] []",
    "BLACKBOX::RANGE [(_67, 1)] []",
    "BLACKBOX::RANGE [(_68, 1)] []",
    "BLACKBOX::RANGE [(_69, 1)] []",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "EXPR [ (1, _19) (-1, _63) (-2, _64) (-4, _65) (-8, _66) (-16, _67) (-32, _68) (-64, _69) (-128, _70) 0 ]",
    "EXPR [ (1, _70, _70) (2, _70) (-1, _71) 1 ]",
    "EXPR [ (-1, _69) (-1, _72) 1 ]",
    "EXPR [ (2, _69, _71) (1, _71, _72) (-1, _73) 0 ]",
    "EXPR [ (1, _73, _73) (-1, _74) 0 ]",
    "EXPR [ (-1, _68) (-1, _75) 1 ]",
    "EXPR [ (2, _68, _74) (1, _74, _75) (-1, _76) 0 ]",
    "EXPR [ (1, _76, _76) (-1, _77) 0 ]",
    "EXPR [ (-1, _67) (-1, _78) 1 ]",
    "EXPR [ (2, _67, _77) (1, _77, _78) (-1, _79) 0 ]",
    "EXPR [ (1, _79, _79) (-1, _80) 0 ]",
    "EXPR [ (-1, _66) (-1, _81) 1 ]",
    "EXPR [ (2, _66, _80) (1, _80, _81) (-1, _82) 0 ]",
    "EXPR [ (1, _82, _82) (-1, _83) 0 ]",
    "EXPR [ (-1, _65) (-1, _84) 1 ]",
    "EXPR [ (2, _65, _83) (1, _83, _84) (-1, _85) 0 ]",
    "EXPR [ (1, _85, _85) (-1, _86) 0 ]",
    "EXPR [ (-1, _64) (-1, _87) 1 ]",
    "EXPR [ (2, _64, _86) (1, _86, _87) (-1, _88) 0 ]",
    "EXPR [ (1, _88, _88) (-1, _89) 0 ]",
    "EXPR [ (-1, _63) (-1, _90) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(2, Witness(89), Witness(63)), (1, Witness(89), Witness(90))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(91)), Simple(Witness(92))]",
    "BLACKBOX::RANGE [(_91, 222)] []",
    "BLACKBOX::RANGE [(_92, 32)] []",
    "EXPR [ (2, _63, _89) (1, _89, _90) (-4294967296, _91) (-1, _92) 0 ]",
    "EXPR [ (-1, _91) (-1, _93) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_93, 222)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(91))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (-1, _91, _94) (5096253676302562286669017222071363378443840053029366383258766538131, _94) (1, _95) -1 ]",
    "EXPR [ (-1, _91, _95) (5096253676302562286669017222071363378443840053029366383258766538131, _95) 0 ]",
    "EXPR [ (1, _92, _95) (1, _95, _95) (268435454, _95) (-1, _96) 0 ]",
    "BLACKBOX::RANGE [(_96, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 })], outputs: [Simple(Witness(97))]",
    "EXPR [ (1, _92, _97) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 })], outputs: [Simple(Witness(98)), Simple(Witness(99))]",
    "BLACKBOX::RANGE [(_99, 32)] []",
    "EXPR [ (1, _92) (-1, _99) (-1, _100) -1 ]",
    "BLACKBOX::RANGE [(_100, 32)] []",
    "EXPR [ (-1, _92, _98) (1, _1) (-1, _99) 0 ]",
    "EXPR [ (1, _98) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(101))]",
    "EXPR [ (1, _0, _101) (-1, _1, _101) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(102)), Simple(Witness(103))]",
    "BLACKBOX::RANGE [(_102, 1)] []",
    "BLACKBOX::RANGE [(_103, 32)] []",
    "EXPR [ (1, _0) (-1, _1) (-4294967296, _102) (-1, _103) 4294967296 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0)), (1, Witness(1))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(104)), Simple(Witness(105))]",
    "BLACKBOX::RANGE [(_104, 1)] []",
    "BLACKBOX::RANGE [(_105, 32)] []",
    "EXPR [ (-1, _0) (1, _1) (-4294967296, _104) (-1, _105) 4294967296 ]",
    "EXPR [ (-1, _102, _104) (2, _102) (-1, _106) 0 ]",
    "EXPR [ (1, _102, _106) 0 ]",
    "EXPR [ (-1, _102, _104) (2, _104) (-1, _107) 0 ]",
    "EXPR [ (1, _104, _107) (-1, _108) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 })], outputs: [Simple(Witness(109))]",
    "EXPR [ (1, _108, _109) (1, _110) -1 ]",
    "EXPR [ (1, _108, _110) 0 ]",
    "EXPR [ (1, _102, _110) (-1, _111) 0 ]",
    "EXPR [ (-1, _104) (-1, _112) 1 ]",
    "EXPR [ (1, _104, _111) (2, _111, _112) (-1, _113) 0 ]",
    "EXPR [ (1, _111, _113) (-1, _114) 0 ]",
    "EXPR [ (-1, _110) (-1, _115) 1 ]",
    "EXPR [ (1, _104, _107) (-1, _116) 0 ]",
    "EXPR [ (1, _110, _114) (1, _115, _116) -2 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pZjRbtswDEX/xc95ECmRlPorw1CkrTsECNIiSwYMxf59Un3pZg/yCvXpMnF1yiuTlOO36Wl+uP64P5yeX35Od9/epofz4Xg8/Lg/vjzuL4eXU/327c9u8o/3l/M816+mm+t11ev+PJ8u093pejzupl/74/X9j36+7k/vetmf69Wwm+bTU9UKfD4c5xb92X2sDv2lXAyLY0jrcvl3PfXXk3IGgFS4R9jMQD0DHlkf4+ogdR2kDQeWHEBmNJTB6kCHHNjqIHcd2IaDrJ4A5RKGMnBACiMOErmDxP0q2gBQyQICh1CGUlgtpCELslrQvoW4UccUklsgzkMprBbykIXirShBuhZ0wwJzcQsscSgF30VhGVgvyWeZJOtaKBsWorBbqFU9kkL0PRC1kfXZE5DcLWTmDQtpnQcsgYZSIAB0qJc0ruvjSCEry//X81YhSll7SSkOpeAA1ZFC1OyFqKX7/3mrEC14N7MN9YKaF6LxyFC36HfBZKQKzHwLLXerMG5NxELrUC/cTSGmrXlg60xLt0fb5wk3I0VuH1A+vw3Rt6GM3EaitZ2J++0Y88bxzEbrM1IemQhUy9GTiP0jPm09I1D5SKI/lhJ9uSASf/V2bvpgDquP/iGTNmoqfhxz9bhJQ0l86o4m/fpm2le7a5PQvx3f64f94+H8zy+eiavh3RTrdNtNabqrE05ai+wmXcQWyYuURShACcqtoqtWDtX7RAkqUIUaNEPLotx4dfO48ao7bry6Exzb42fVBBWotme6qtaeKqrmdkpXLe2oqnYClKAMbbzKjwkqUIUaNEPLoilACcpQ8BJ4CbwEXgIvgZfAE/AEPAFPwBPwBDwBT8AT8AQ8BU/BU/AUPAVPwVPwFDwFT8Ez8Aw8A8/AM/AMPAPPwDPwDLwMXgYvg5fBy+Bl8DJ4GbwMXm68WhcltJ/HVQnK0AhNUIEq1KAZWhalEDwgD9iD6EHyQDxQD8yD7IGTycnkZHIyOZmcTE4mJ5OTycnkZHYyO5mdzE5mJ7OT2cnsZHYyOzk6OTo5Ojk6OTo5Ojk6OTq5tVF7cqXWR7HNh9ZIS9DI0gL2IHqQPGhkbYF6YB5kBK2T2vsGai2U2qrWQ0uQPBAPtP0gaoF5UJaZTq2DloA8aMA2gn/tz4f9w3HGC6Ln6+nx5n3R5ferX/E3Sq/nl8f56Xqe26R9v1Zn718=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "use std::cmp::Ordering;\nuse std::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Rem, Shl, Shr, Sub};\n\n// x = 3, y = 9\nfn main(x: u32, y: u32) {\n    let wx = Wrapper::new(x);\n    let wy = Wrapper::new(y);\n\n    // expected x and expected y values\n    let ex: u32 = 3;\n    let ey: u32 = 9;\n\n    assert((wx + wy).inner == ex + ey);\n    assert((wy - wx).inner == ey - ex);\n    assert((wx * wy).inner == ex * ey);\n    assert((wx / wy).inner == ex / ey);\n    assert((wx % wy).inner == ex % ey);\n\n    assert((wx & wy).inner == (ex & ey));\n    assert((wx | wy).inner == (ex | ey));\n    assert((wx ^ wy).inner == (ex ^ ey));\n\n    assert((wy << x as u8).inner == (ey << ex as u8));\n    assert((wy >> x as u8).inner == (ey >> ex as u8));\n\n    assert((wx == wy) == (ex == ey));\n    assert((wx < wy) == (ex < ey));\n    assert((wx <= wy) == (ex <= ey));\n    assert((wx > wy) == (ex > ey));\n    assert((wx >= wy) == (ex >= ey));\n    assert(wx.cmp(wy) == ex.cmp(ey));\n\n    // Ensure operator overloading still works with more complex types\n    let pair_ascending = Pair { x: wx, y: wy };\n    let pair_descending = Pair { x: wy, y: wx };\n\n    assert(pair_ascending != pair_descending);\n\n    assert(pair_ascending < pair_descending);\n    assert(pair_ascending <= pair_descending);\n    assert(pair_descending > pair_ascending);\n    assert(pair_descending >= pair_ascending);\n\n    assert(pair_ascending.cmp(pair_descending) == Ordering::less());\n}\n\nstruct Wrapper {\n    inner: u32,\n}\n\nimpl Wrapper {\n    fn new(inner: u32) -> Self {\n        Wrapper { inner }\n    }\n}\n\nimpl Add for Wrapper {\n    fn add(self, other: Self) -> Self {\n        Wrapper::new(self.inner + other.inner)\n    }\n}\n\nimpl Sub for Wrapper {\n    fn sub(self, other: Self) -> Self {\n        Wrapper::new(self.inner - other.inner)\n    }\n}\n\nimpl Mul for Wrapper {\n    fn mul(self, other: Self) -> Self {\n        Wrapper::new(self.inner * other.inner)\n    }\n}\n\nimpl Div for Wrapper {\n    fn div(self, other: Self) -> Self {\n        Wrapper::new(self.inner / other.inner)\n    }\n}\n\nimpl Rem for Wrapper {\n    fn rem(self, other: Self) -> Self {\n        Wrapper::new(self.inner % other.inner)\n    }\n}\n\nimpl BitAnd for Wrapper {\n    fn bitand(self, other: Self) -> Self {\n        Wrapper::new(self.inner & other.inner)\n    }\n}\n\nimpl BitOr for Wrapper {\n    fn bitor(self, other: Self) -> Self {\n        Wrapper::new(self.inner | other.inner)\n    }\n}\n\nimpl BitXor for Wrapper {\n    fn bitxor(self, other: Self) -> Self {\n        Wrapper::new(self.inner ^ other.inner)\n    }\n}\n\nimpl Shl for Wrapper {\n    fn shl(self, other: u8) -> Self {\n        Wrapper::new(self.inner << other)\n    }\n}\n\nimpl Shr for Wrapper {\n    fn shr(self, other: u8) -> Self {\n        Wrapper::new(self.inner >> other)\n    }\n}\n\nimpl Eq for Wrapper {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl Ord for Wrapper {\n    fn cmp(self, other: Self) -> Ordering {\n        self.inner.cmp(other.inner)\n    }\n}\n\nstruct Pair {\n    x: Wrapper,\n    y: Wrapper,\n}\n\nimpl Eq for Pair {\n    fn eq(self, o: Self) -> bool {\n        (self.x == o.x) & (self.y == o.y)\n    }\n}\n\nimpl Ord for Pair {\n    fn cmp(self, o: Self) -> Ordering {\n        let mut result = self.x.cmp(o.x);\n\n        if result == Ordering::equal() {\n            result = self.y.cmp(o.y);\n        }\n\n        result\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
