---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "361444214588792908": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "1998584279744703196": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5421095327929394772": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "5476849662351484621": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 5 limbs"
      },
      "14990209321349310352": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _58",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "EXPR [ (1, _0) (1, _1) -12 ]",
    "EXPR [ (-1, _0) (1, _1) -6 ]",
    "EXPR [ (1, _0, _1) -27 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ]], outputs: [_5]",
    "EXPR [ (1, _1, _5) -1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ]], outputs: [_6, _7]",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (1, _1) (-1, _7) (-1, _8) -1 ]",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "EXPR [ (-1, _1, _6) (1, _0) (-1, _7) 0 ]",
    "EXPR [ (1, _6) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ]], outputs: [_9]",
    "EXPR [ (1, _1, _9) -1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ]], outputs: [_10, _11]",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "EXPR [ (1, _1) (-1, _11) (-1, _12) -1 ]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (-1, _1, _10) (1, _0) (-1, _11) 0 ]",
    "EXPR [ (1, _11) -3 ]",
    "BLACKBOX::AND [(_0, 32), (_1, 32)] [_13]",
    "EXPR [ (1, _13) -1 ]",
    "EXPR [ (-1, _0) (-1, _14) 4294967295 ]",
    "EXPR [ (-1, _1) (-1, _15) 4294967295 ]",
    "BLACKBOX::AND [(_14, 32), (_15, 32)] [_16]",
    "EXPR [ (-1, _16) 4294967284 ]",
    "BLACKBOX::XOR [(_0, 32), (_1, 32)] [_17]",
    "EXPR [ (1, _17) -10 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 4294967264 ], EXPR [ 4294967296 ]], outputs: [_18, _19]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _18) (-1, _19) 4294967264 ]",
    "EXPR [ (-1, _18) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 5 ], EXPR [ 2 ]], outputs: [[_20, _21, _22, _23, _24]]",
    "BLACKBOX::RANGE [(_20, 1)] []",
    "BLACKBOX::RANGE [(_21, 1)] []",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 1)] []",
    "EXPR [ (1, _0) (-1, _20) (-2, _21) (-4, _22) (-8, _23) (-16, _24) 0 ]",
    "EXPR [ (1, _24, _24) (2, _24) (-1, _25) 1 ]",
    "EXPR [ (-1, _23) (-1, _26) 1 ]",
    "EXPR [ (2, _23, _25) (1, _25, _26) (-1, _27) 0 ]",
    "EXPR [ (1, _27, _27) (-1, _28) 0 ]",
    "EXPR [ (-1, _22) (-1, _29) 1 ]",
    "EXPR [ (2, _22, _28) (1, _28, _29) (-1, _30) 0 ]",
    "EXPR [ (1, _30, _30) (-1, _31) 0 ]",
    "EXPR [ (-1, _21) (-1, _32) 1 ]",
    "EXPR [ (2, _21, _31) (1, _31, _32) (-1, _33) 0 ]",
    "EXPR [ (1, _33, _33) (-1, _34) 0 ]",
    "EXPR [ (-1, _20) (-1, _35) 1 ]",
    "EXPR [ (2, _20, _34) (1, _34, _35) (-1, _36) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1, _36) 0 ], EXPR [ 4294967296 ]], outputs: [_37, _38]",
    "BLACKBOX::RANGE [(_37, 32)] []",
    "EXPR [ (1, _1, _36) (-4294967296, _37) (-1, _38) 0 ]",
    "EXPR [ (1, _38) -72 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _36) 0 ]], outputs: [_39]",
    "EXPR [ (1, _36, _39) -1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1) 0 ], EXPR [ (1, _36) 0 ]], outputs: [_40, _41]",
    "BLACKBOX::RANGE [(_41, 32)] []",
    "EXPR [ (1, _36) (-1, _41) (-1, _42) -1 ]",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "EXPR [ (-1, _36, _40) (1, _1) (-1, _41) 0 ]",
    "EXPR [ (1, _40) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) (-1, _1) 0 ]], outputs: [_43]",
    "EXPR [ (1, _0, _43) (-1, _1, _43) -1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) (-1, _1) 4294967296 ], EXPR [ 4294967296 ]], outputs: [_44, _45]",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 32)] []",
    "EXPR [ (1, _0) (-1, _1) (-4294967296, _44) (-1, _45) 4294967296 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _0) (1, _1) 4294967296 ], EXPR [ 4294967296 ]], outputs: [_46, _47]",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "BLACKBOX::RANGE [(_47, 32)] []",
    "EXPR [ (-1, _0) (1, _1) (-4294967296, _46) (-1, _47) 4294967296 ]",
    "EXPR [ (-1, _44, _46) (2, _44) (-1, _48) 0 ]",
    "EXPR [ (1, _44, _48) 0 ]",
    "EXPR [ (-1, _44, _46) (2, _46) (-1, _49) 0 ]",
    "EXPR [ (1, _46, _49) (-1, _50) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _50) 0 ]], outputs: [_51]",
    "EXPR [ (1, _50, _51) (1, _52) -1 ]",
    "EXPR [ (1, _50, _52) 0 ]",
    "EXPR [ (1, _44, _52) (-1, _53) 0 ]",
    "EXPR [ (-1, _46) (-1, _54) 1 ]",
    "EXPR [ (1, _46, _53) (2, _53, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _53, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _52) (-1, _57) 1 ]",
    "EXPR [ (1, _46, _49) (-1, _58) 0 ]",
    "EXPR [ (1, _52, _56) (1, _57, _58) -2 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
