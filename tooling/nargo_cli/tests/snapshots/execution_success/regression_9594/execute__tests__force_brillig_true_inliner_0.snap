---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "15839565830707987292": {
        "error_kind": "string",
        "string": "attempt to calculate the remainder with a divisor of zero"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ]], outputs: [_3]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U1) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 18 }, Call { location: 19 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 36 }, JumpIf { condition: Relative(1), location: 26 }, Jump { location: 22 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 25 }, Return, Const { destination: Relative(1), bit_size: Integer(U32), value: 1132210792 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 1 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 36 }, Call { location: 42 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 41 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15839565830707987292 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "dZDBDoMgDIbfpWcOosxtvooxBrUuJAQNwpLF8O4rotEddulHKf9f2hUG7PyrVWacFqjqFTqrtFavVk+9dGoydLtCFkNeQsUZ5PeER8JzQ5El8IQ8oUgQCTdCCAwO59ZZxGh8aUUfmKVF46AyXmsGb6n99miZpdnopKVqxgDNQCTDUWmMp8BOdfZfynm5i7k45TfSN5TJXtmf4UN0skp2Gvd09Ka/VN1nPirH8mY79Th4i9Hp3CCnWBclE7xhwGlXtciZEE2Irb8=",
  "file_map": {
    "50": {
      "source": "fn main(a: bool, mut b: bool, c: i32) -> pub i32 {\n    if a {\n        let mut e: [&mut bool] = &[];\n        b = *e[(1132210792_u32 % e.len())];\n        c\n    } else {\n        2\n    }\n}\n",
      "path": ""
    }
  },
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
