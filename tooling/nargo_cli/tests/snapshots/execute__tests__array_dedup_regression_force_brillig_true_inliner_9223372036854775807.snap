---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "11672664376849664676",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1azW7TQBDeNHZSO80PtFBKn4CbHTtxcuuBF3HzI3FBCPEAfiYkOHHiwAtw5MCBI0hcQEJCQshlx/46GYe/2TaHrlTtenf2m29mZ8fbrFumLi1be+zZCDJnto7+r8SKWJFIdFshmWPbCOzzHoy3FY0NmF5N/FmUTgLBPkX+SWAxXfqHMB3gR12L87Co8bktBmqS43PK8b5tY5yRzL4dp/bAtgM2x8X6O1yf6FDgT7p61tbPzNY2+EeJRxUnnj72mLB9fexq/3T0sVPC7upjTyjW9wG7xdYZc5tizE1bTJ8xl/ODYfpDxlU7R7WYPuLD/UP7gnwXClxHwhjahmOoJxT0SFieIpaviNVRxKJ4H5pN/9F68HyhnRdbzEce2MF1kj3cp5hvfNb3wNalPV9hDs+vbaGP+47vC/QPj70zFf9k54GRY0gHfzzmeVUXf3rOc6sy/lzKoYr4K8IP3eBX756eE/wkJ/wDN/yr80TfTfxX8Tlwg1/Fz9AJ/nhB+CM3/q/wb7nBr87Ft93gZ4R/6GZ9q/115Ib/jPDvOMFPKv/fdeOfiPCP3fhnSvj33PBf0hnxxNSFn6/vQ7/e2SVJ//R8TfpDxtXV+fo+48P9w8/XpwLXkTDGzzingp5TQY+E5StidRSxuopYgSJWqIil6fvejvI6UMTq7yiWpo0DRSzNdRzuKK+RItYtRSzNnHNbEetQEetIEWtXc+EdRaxd3UOaMaGZv+4qYmnu7V2N1Ztz4fXl6Jtz4d9hHStiacaEZp7QPJvsanzdc4Dl+g5d+i1fEX/i7o50Fkm/47v4foF/56GNH7rBj+i3FOmbiHI9nkN/+Ud3W76p4xXn+jCO8i8B84Vtl7l2yOTKNr/D67lZu+oOj/4fxTs81Enc9pg8ttFm6ntla+kOD79jaAt92+7wvD/AaoHMHpMnfp0Gea/Bntdgzzfblu5RNHMDcRsAJ+metc84k/wb4Pzdtkm2XdTzMebK4hVO7JmWen4Aj40YAr1olzG13SjP13YgyOPakM9GTB7z71CYdwL+4fNc7En63w/3JOrsg/0oj+2y+Kzvra2lPdnf4jvShb47Efj867oNBXnpt+8DU+fYJ08fPX5mWMFkwF9MfKNIBBI2P2zAxblY/IYxek624PRBl/RyaYMOlP9k6zKA3zFM/vLgiaPbwAGTI8p4DRze27oMrCNr2HUmR7S7KTl+AM7fG/xgjE7iIT7SCx/noqwvyPJ/jmnME+Zj/HKsj7aWPjTQTGj4Y6Qxmy/gTw32GCPvAYpF6eDmAe5zsO/CP4W+fdnsV8K+4FrUfsaPkQzT7zP5L/aZH3DJnrN/5LnO8nid5Ot8ki+X6SLn62DM5Q9ZtfXnWTJbjNNFdj5J8mR65frTSZ4t8iyO52m8SuPJVetfzebLaL5e5XEcj5fR6nf66f3TKepxPKCVpWuf6f3A5QnPZ/J7FqDcF55tVzlR0FfKHW6RazXUFxhCn1dc7guKTfl2sSlPusNikyON9WAMD49lObDP6C/EIh4+kx9ZAFqTfZhD80eC/n2m/xJvoQ9zF8dqC30kX65PYCdV+R10a3+ccKGT4WMf50ax42JfjWez6Xx8HqXZcrFepsnv9tVPmc/Sre4zAAA=",
  "debug_symbols": "zZzNSiNREEbfpddZ3K/uv68yDBI1SiAkEuPAIL77dEvihKQVaiNnI2mtQ8qUnu5FffdteFjdvT7drrePu5fh5tfbsNndLw/r3Xa8entfDHf79Wazfro9//YQpi/KH/Uvz8vtdPlyWO4Pw01ui2G1fRhf9JF+XG9W48vw/nsxqDjrq7O+Oeu7r96Cs17OenPWR2d9ctY752vO+ZpzvuacrznnG53zjc75Rud8o3O+0TnfODtfqR4BqV0SxU1UN9HcRPcSKbgJuQlzE7PzVk4nouRzYnFV2rqOpd3iZ6mZp3TqI0H6yJA+CqSPCumjQfrojD5ygPQhSB8G6QPi0wzxaYb4NEN8miE+zRCfZohPC8SnBeLTAvFpgfi0QHxaID4tEJ8WiE8LxKcF4tMK8WmF+LRCfFohPq0Qn1aITyvEpxXi0wrxaYX4tEF82iA+bRCfNohPG8SnDeLTBvFpg/i0QXzaID7tEJ92iE87xKcd4tMO8WmH+LRDfNohPu0Qn3aITxUgQlWAGFUBolQFiFMVIFJVgFhVAaJVBYhXFSBiVaCYVRSzimJWUcwqillFMasoZhXFrKKYVRSzimJWo5jVKGY1ilmNYlajmNUoZjWKWY1iVqOY1ShmjRSzRopZI8WskWLWSDFrpJg1UswaKWaNFLNGilkTxayJYtZEMSslSyVKmEqUNJUocSpR8lSiBKpESVSJEqkSJVMlSqhKlFSVKLEqUXJVogSrRElWiRKtEiVbJUq4SpR0lSjxKlHyVaIErERJWIkSsRIlYyVKyEqUlJXmYxK1H4kWztuYgOY+IURfrLh/iyQ/kv1I8SPVjzQ/4j4cRl/sI0c7IbFeIfIj5keiH5mfvvVP5PrXz36k+JHqR5of6V7Evlie/BaRHzE/Ev1I8iOQW65R1vGMso5nlHU8o6zjGWUdzyjreEZZx7OfXMer6XQ3r2dPWadGEqWRTGlk3qyfT6rj89/lXWF+TWz8/zsiY8ElMr/Q9T0iP2J+ZPYvc9T8CbFwhSQ/kv1I8SPVjzQ/0t3I/NLJOVKvEPkR8yPRjyQ/UnzI+3j1Z7lfL+82q+O5u4+v2/uzY3gPf59XFyfyPu9396uH1/1qOpv3/7G80ydvo1Ws5ukR+OMy9oWlNF1OH7LVMv60je86vvM/",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "unconstrained fn main(x: u32) {\n    let a1 = [1, 2, 3, 4, 5];\n\n    for i in 0..5 {\n        let mut a2 = [1, 2, 3, 4, 5];\n        a2[x + i] = 128;\n        println(a2);\n\n        if i != 0 {\n            assert(a2[x + i - 1] != 128);\n        }\n    }\n\n    // Can't use `== [1, 2, 3, 4, 5]` here, that make_array may get\n    // deduplicated to equal a1 in the bugged version\n    assert_eq(a1[0], 1);\n    assert_eq(a1[1], 2);\n    assert_eq(a1[2], 3);\n    assert_eq(a1[3], 4);\n    assert_eq(a1[4], 5);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/array_dedup_regression/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
