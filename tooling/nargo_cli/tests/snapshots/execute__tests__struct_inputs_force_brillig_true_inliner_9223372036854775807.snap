---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "17650260341982951292",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "struct",
          "path": "myStruct",
          "fields": [
            {
              "name": "foo",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "bar",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "z",
        "type": {
          "kind": "struct",
          "path": "foo::bar::barStruct",
          "fields": [
            {
              "name": "val",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "array",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "a",
        "type": {
          "kind": "struct",
          "path": "foo::fooStruct",
          "fields": [
            {
              "name": "bar_struct",
              "type": {
                "kind": "struct",
                "path": "foo::bar::barStruct",
                "fields": [
                  {
                    "name": "val",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "array",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "message",
                    "type": {
                      "kind": "string",
                      "length": 5
                    }
                  }
                ]
              }
            },
            {
              "name": "baz",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZvdauMwEIXfxde5kGY0+umrLEtJW7cEQlLSdGEpffeVs3EbYmM4OOPOTamLvy+HHMmSa/zRPLUP7y/3m93z/q25+/XRbPeP6+Nmv6tHH5+r5uGw2W43L/eXf25c98O7dALeXte77vjtuD4cmzsSt2ra3VP3m6+C5822be6EPn+vKpJxpMCIdzjicYRwhHEk4IjgSMQRvH2Pt+/x9glvn/D2CW+f8PYJb5/w9glvn/D2CW+f8PYZb5/x9hlvn/H2ebz9VM4IO75EVoNTE/f2JDKwi6o9qtqTqj3PtGcfz6dmTgN70bQHp2r3c+3B9/bheA+kaufbfTMj9qBqF1V7VLUn1RGpOleD6lwVpzneRXWuCmmOGVGdq6I6V0V1rsroXOWYzkhwg+VMEo5kHCkwEh2OeBwhHGEcCTgiODLafiDpEeEBknAk40iBkTTavng+I0JDxOMI4QjjSMARwZGIIwlHMo4UGMl4+xlvP+PtZ7z9PN4+5x6RPH3Fp+C+bgODv/D/14uuPurqk64+6+qLqr44Xb3X1dNsfeAvvaRrPevqg65edPVRV5909VlXXzT15ObP2li+9CVc6JFzT1G8nShkJwrbiZIXjFKnbX/LXqeYv4ri/aJRSn8XW0dGvI6CjZUTwjgScGT8qp3ojERfZqyYNP6c7Xb6pKvPuvqiqh9/Lng7vdfVk66eZ+unVszx55i304uuPurqk64+6+qLqp6drn7+rL3VToHJThS2EyUuGGV6/8Rl0ShT+6eAzYoT4nGEcETM1BWWHDn1nvC7rsHqGpKdKNlOlGImijg7UbydKGQnyqIrkvPp+9or11GCnShiJ0q0EyXZiZLtRClmosSfu9rG6Q0FudBvKOo/U65jezP7v0h2orCdKPOfidxq8xnTglGml86Y7UQpZqIkZyeKtxOF7ERhO1HColGmls4kdqJEO1GSnSjZTpRiJkp2dqL83NV2zuYz06J7m6ltVmY7UYKNKJ/14M/6sFk/bNvzi7PP77vHi/doj39f26tXal8P+8f26f3Qdi/Xfr9X2327Jay8C7+711/rEeW0okLdYTd4qXA9lPqh9YP/AQ==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "52": {
      "source": "mod foo;\n\nstruct myStruct {\n    foo: u32,\n    bar: Field,\n    message: str<5>,\n}\n\nfn main(x: Field, y: pub myStruct, z: pub foo::bar::barStruct, a: pub foo::fooStruct) -> pub Field {\n    let struct_from_bar = foo::bar::barStruct { val: 1, array: [0, 1], message: \"hello\" };\n\n    check_inner_struct(a, z);\n\n    for i in 0..struct_from_bar.array.len() {\n        assert(struct_from_bar.array[i] == z.array[i]);\n    }\n    assert(z.val == struct_from_bar.val);\n\n    assert((struct_from_bar.val * x) == x);\n\n    assert(x != y.bar);\n\n    assert(y.message == \"hello\");\n    assert(a.bar_struct.message == struct_from_bar.message);\n\n    a.bar_struct.array[1]\n}\n\nfn check_inner_struct(a: foo::fooStruct, z: foo::bar::barStruct) {\n    assert(a.bar_struct.val == z.val);\n    for i in 0..a.bar_struct.array.len() {\n        assert(a.bar_struct.array[i] == z.array[i]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
