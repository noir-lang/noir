---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "5107866433976502701",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12442740014039576758": {
        "error_kind": "string",
        "string": "New HashMap should be empty."
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13848700712118281102": {
        "error_kind": "string",
        "string": "New hashmap should be empty."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15535192719431679058": {
        "error_kind": "string",
        "string": "HashMap after clear() should be empty."
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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CGqCBiDdCBKCjl+Ffbo63xfzvROUBBVBTRD4boPbRpAQZAQtboz1uhecve8IHXL5K22+uDHwj/v9c+/v9+3m3y83/369+ffbzb/fb/79cfPvz5t//83Hr187fr+auW5iA0aAUWAMGAcmgElgChjQQYAOEnSQoIPFTabr+Vz5GOLsjQHjwAQwCUwB08DMdbO4mfTn5riDfN00uQ6MAmPAODABTAJTwDQwoIMGHSzuFf25AeeDBueDBueDBueDBueDBueDBh0cT0k/N4vbT39uwPlgwPlgwPlgwPlgwPlgQAcDOhjwvDDXzwexbcAIMAqMAePAXO8gtgSmgGlgrp8PQjZgBBgFxoA5Hn1FPW88UClvZd9QEdQEDUCLxY4nSAhSgowgJygIIkUoKUJJEUqKMFKEkSIWqwlHtyeav7iF6dXBSCxWHv7ADdTdG+i7NzA3b2CxUvIHbkDu3oDevQG7ewN+9wbuPpL97iPZ7z6S/e4j2e8+kuPuIznuPpLj7iM57j6S4+4jOe4+kuPikfwVFUFN0ACUG0FCkBJkBDlBQRApIkkRSYpIUkSRIooUUaSIIkUUKaJIEUWKKFLE4poBk29UskOHj15v/RwI9TaxQ07Q4aPX0s+PzVqmdygJKoKaoAHoeLR8hoQgJcgIcoJIEUOKGFLEkCIGFJHbRpAQpAQZQU5QEJQEFUFNEClCSBFCihBShJAihBQhpAghRQgpQkgRQopQUoSSIpQUoaQIJUUoKUJJEUqKUFKEkiKMFGGkCCNFGCnCSBFGijBShJEijBRhpAgnRTgpwkkRTopwUoSTIpwU4aQIJ0U4KSJIEUGKCFJEkCKCFBGkiCBFBCkiSBFBikhSRJIikhSRpIgkRSQpIkkRSYpIUkSSIooUUaSIIkUUKaJIEUWKKFJEkSKKFFGkiCZFNCmiSRFNimhSBJlZJplZJplZJplZJplZJplZJplZJplZJplZJplZJplZJplZJplZJplZJplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZFplZ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u/2yuGLdp8SuE79O4jrJ66Quk+yrr5MlF7er+YTUdp3IdaLXiV0nfp3EdZLXSV0n1/d+Xd/7fWm//P7gJWW9XlK+/2Vs33673frb/dbfHrf+9rz1t9etv71v/e1z52+fW3ufW3ufW3ufW3ufW3ufW3ufW3ufO3vXTW/97Xbrb/dbf3vc+tvz1t9et/72vvW339q73Nq73Nq73Nq73Nq73Nq73Nq73Nq73Nq7Xn5fpWrXiV8ncZ3kdVLXSV8nl99XqV3+9Ent+iNm1x+x4+mgvu6Dre070tfJXCbH08HPiVwnep3YdXJ4vNj2uuzx9xdTepC4TvI6qeukr5O5TGK7To73/ut7Zrbt9svqrhmfEbtO/DqJ6ySvk7pO+jqZy+R48drn5PreX9wX430Jc9s1trgpxqfEr5O4TvI6qeukr5O5TBb3v/iUyHVyfe/X9b2/uOfFZ8/7ixtefEryOqnrpC+TvnpdrAfx6ySuk8uf2GjXdXL9teXxWrDPPuHUud7YXG9sLq850qnrpK+Ty2uObNuuE7lO9Dqx68Svk7hO8jqp66Svk+t7//qKM5Pre//6ijO7vuLMrq84s+srzuz6ijO7vuLMFivOPiVzmSxWnH1K5Dq5vvf1+t7X63tfr+/96yvO7PqKM7u+4sz08npDs+06ketErxO7Tvw6ievk+t6363vfru99u773/fre9+t736/vfb++9/363vfre9+v732/vvf98npD88vrDS2260SuE71O7Drx6ySuk7xO6jq5vvfj+t7P63s/r+/9vL738/rez+t7P6/v/by+9/P63s/rez+v7/26vvfr8lpjW6w3/GTlrFVcJ3md1HXS18nltcbW23Ui14leJ3adXN/7fX3vX59c2fXJlS0mV5+SuUyOvyv5OZHrRK+Ty5+92vVvMdq1ZWpfSV8nf+OCg3h9hpIfPkP5tuDAt+3W3y63/na99bfbrb/db/3tcetvz1t/+629y629y629y629y629y629y629y6296+Vv3/j1VWKul1e9+GKV2KckrpO8Tuo66evk8pont+06ketEr5Pre9+u7327vvft+t6/vuLNr694c7u85sl9u07kOtHrxK4Tv07iOsnrpK6Tvk6u7/3rK948ru/9uL73r6948+sr3vz6ije/vuLNr6948+sr3vz6ije/vuLNr69489Tr5Prez+t7P6/v/by+9/P63s/rez+v7/26vvfr+t6v63u/ru/9ur736/J6R6+8Tuo66evk8npH7+06ketErxO7Tvw6ub73+/re7+t7v6/v/b6+9+f63p/re3+u7/25vvfn+t6f63t/ru/9ub735/JqV1+sRPyExGIl4qdErhO9TvwyOR6NVT7n7JXvM/+3CyzG8dBo8rmwbir3xoEJYBKY48uCfn6h9FhcDv9MDVG6ISVIKVKGlCMVSCVSqA1FbShqA90cINDNAcJQG4baMNSGoTYMtXE8Yfr83Hk8YprXFPcxhtiZ4xnT5+e04/HPyXYcmAAmgSnwGDQwc90E2D/HY6ATo8CA5+rjSdD0s+sZ25sAJoEpYBqYuW6O50En5qyDIwM6SNBBgtdsCV6zJXjNluB8kOB8kOB8UOB8UOB8UKCDAh0U6KBAB3Wxgz8//tf/+w9/+sM//OMf/+U/H+LL//G//+2f/usP//5v3/7nf/1///H8v/zjn/7wxz/+4V///j/+9O//9C///N9/+pe//+O//9OX/9vvtm//z//J2Oz3+XhR+vhrvjxMar83e/z85T+/5zFu70l9/O/f3jNJ+e+l5sv//LLrurR/32Xb4696/GX/Pw==",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
