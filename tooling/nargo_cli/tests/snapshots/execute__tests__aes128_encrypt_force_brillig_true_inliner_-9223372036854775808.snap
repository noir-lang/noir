---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10355665750043800061",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdaiM5EIbhe/GxDySVVCrlVpZlyI8zGIwTnGRhCbn3ac+4nWAp7XnrJKDAY7f7k7qlkt5XD5u7t58/tvvHp5fVzT/vq93T/e3r9mk/td4/1qu7w3a32/788fXfq3D8E0v8DV6eb/fH9svr7eF1dVMtrFeb/cPqxkqdPuBxu9usbkr4+Hc9kcSJcJI5KZwoJ5UT46RhooETnr7y9JWnrzx95ekrT195+srTV55+HabfRE6kldiRyEniRDjJnBROlJPKiXHSMDGevvH0jadvPH3j6ds4fdWZmHVEOamcGCcNkxY4iZwkToSTzAlPvw3Tj0HnThZjbB2qHmQe1DhKIXhQ9KDkQeJB2YOKB6kHVQ8yD/L0iOjpEdHTI6KnR8Rxj4iSz6iGDmUPKh6kHlQ9yDyoOVAKHhQ9KHmQp0fIMNxk6WSSSUeUk8qJcdIwyYGTyEniRDjJnPD0M08/8/QzTz/z9AtPv/D0C09/XPKRYCci0TqSOSmcKCeVE+OkYTIu+SyT8c+XM5HuPT2uRuQwz69z/2oflxakzNMBKd2FjUsLy0SuEO265bi0sEwaJuPleI5yvmPdbxkvx7OUmWTtSOJEOMmcFE6Uk8rJcFTmlM6kdqRhMl6OL5PISeJEOMmclCukpI4oJ5UT46RRIiFwEjlJnIzTr3Um1pPMSeFEORmnr3Ym0hHjpGEyXnIvk8hJ4kQ4Gadfzg9Yyx0pnCgnlRPjpGEyXl4vk2tjf0ASJ8JJ5qTQiaIk5aRyYpzgSa9I4CRykjgRTjInPH3h6Y/LHRrjiWi3TJBxuWOZJE7G5cJWZzNtBXzZuPpjxjW81uYbMJXa9cKMl+/L3/PN+j2Ez++JcmnEYbLDFIdRh6kOYw4zLuKEWD8zLRdmvI6/YqLDJIcRh8kOUxzmL/rB1/Gz7sfNtMU0j5upeH/5+ZWPz/FxjyvG8RwYFz8WH1Hj4scyKZwoJ5UT46RhYvxtY/xtY/xtYzx94+kbT994+sbTN56+8fQbT7/x9MdliTIPfdUONAbyd/v181Q+xtQR4WQ8ATovfqKWjlROjJOGyTc754tkfMfSeQdcpCOZk8KJclIxGS9KzzUcqx0QCjIFhQIl4GNq/Xd72N7e7Tang9aPb/v7L+euX/9/3lwcwX4+PN1vHt4Om+Nh7M9z2MfulqWuc7HjCJ9acapjx1ym1u++mFJZJwnH5vEJk0tbZ43TNUzX8Qs=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
