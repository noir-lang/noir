---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "8953992224835750546",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndndTuMwEIbhe8lxDuIZ/4x7K6sVKlBQpapFpay0Qtz7JohkReOGvD4MzYPSfpNkxn5vHnf3b893++PT6bXZ/HpvDqeH7WV/OvZH702Kn397fdkeh8PXy/Z8aTbJurbZHR+bjYX00TZP+8Ou2YTu43fbpFQSWfVL5OCuhWGRqbAOC4eFYKFYeCwCFhELnLnhzA1nnnHmGWeeceYZZ57Lmcc4CrNrEbCIWCQsDItMhes6Thwnwoly4jkJnEROEifGCU/fFdPvv+J4dznn8gy5GiQ1SGuQr0GhBsUalGqQ1aBcgaSmIqSmIqSmIqSmIqSmIqSmIqSmIqRcEU79hFI3Q1aDcgXSrga5GiQ1SGuQr0GhBsUaVFMRWlMRWlMRvqYifE1FeFwR/cH9eX847J/vvg1m3ed0VkxQTL7+m5heXUF5nlsUCQvDIlNRnucWhcNCsFAsPBY4c8OZG87ccOaGM88484wzzzjz8jynnX0JdbOpxmMRsIhYJCwMi0zFjXlumZSvSyeiK0cA342jhl/by2sYOyMNtq6TXybhBxJ1XRe/SMr97jIp3ije6fSL2bpe12sYiY/rOt1lEjiJnCROjJOMSbm79SITSet622UinCgnnpPASeQk/UCCrOtml0nGxHecOE6EE+XEc1JOP6WR2JxEThInxkk5/WgTmT2TQ8eJ40Q4UU48J4GTcvphesCan5HEiXGSMYkdJ44T4eSne79APCeBk8hJwo1iNE4yJqnjhDe9SThRTjwngZPICU8/8fTL82EYRZz1fOXxcAncWH6XaRVq9jrKmRIpb5K56VHR37Izopx4TgInkZPyLybT0rlev47kxvbVInGcCCfKSbHGpo7H0gxkCMpbO0vAUSAE9AduOO3GakJ0brwhC3O+cKKceE4CJ5GTxIlxkjEp19gy4ekLT194+sLTF56+8PSFpy88fYHpf/RHf7bn/fb+sBu2XIYP344P4w5Mf3j5+zJ+Mu7RvJxPD7vHt/Nu2K35v1EzVJGothJ8fylDdFHaJMNlDR85c62z+Fmjw5n9a0VCmh4ow/nZ2n5hcwIqbb8KMYJ+daHtZ//+kvvL/gc=",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
