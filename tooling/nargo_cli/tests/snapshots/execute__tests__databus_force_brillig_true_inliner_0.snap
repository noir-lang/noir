---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "11116238942191758489",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "databus"
      },
      {
        "name": "z",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "databus"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VXW27bMBAkJVKJHAQp2gsU6F/bD7KRa/ujhYE8nOQWTGyfQ0ePiOzGoxWFALEYIAsIpLjD2eFySctavVjVPZr6htpSDY0xa2rdceYn5HI5deoJdWrIcS69RYa8Tq2x/AQazSfQaCeuTbZq0CHxsbji5sXkWOFL4aM9UFtTW4B/wkLwtYg7Jf/SNY+16tvE+i9r4jR5+P8yv83D706I57o98ONaOG4pcHJOCZgbwNyMYG4BczuC2QBmM4K5A8zdCOYeMPcCc059PEi8LvYVarieGjiQb03v7gjr6jb3vje8Nvxh4xxw7CpP7LkW8ZTIoxLxZyrrGfNaxGM9Mj9cB+eMaft60Gfa4TrYZ8HH+3vaPd8BJ2vLAO4X9H8L7of2MEfuZ447vKvVkPMsxP35NqJfwRpPWvVq7CthjHPOeTpFvPDV4DNtP86M3g3EQS7WYQX+J71fUFvBHJ7/JRG/EvF7uhNjmCPJVSbGGB9r9Af1z+iJ9fWf56i895E8g1YdziDeCRb8iPeci+65BjzOUcCJf5YKgU/dA1Zgol2o4b1UiXzl+K5xcGeVCa1FQqvMRTWCZz4r8CtqY343glMnNJgEpxbxqhG8FhoY/y+hIdYpf+OZth9zTePuCFssDx/ZfE9Ylf6zbcCP+Ct6n8EaFax7/U6d+0Xw+8uwD/Ow3TZP4avgV5C7swzxd8vV1q32u+C9/7N1u4+O38zD4iksvF81ftf4+VvxnwG6cMv2PREAAA==",
  "debug_symbols": "tZTdisMgEIXfZa698C/a5lWWpZjEFEFMMMnCEvLu6ywtDW1u5iI34pH5joOMZ4XON8v9FlI/TFB/rRCH1s1hSEWtG4MmhxjD/bY/Bo6Lrv7rp9EllNPs8gy14JyBTx3udOH7ED3UFd++GWhDJiyZuJCJK5WoOJkQZEIeEko8CWX3BPsolUY+SqWx7+bqTHN9pnl1prk50/x4lKU9NkfiQiauVMJwGrEV9eNycE30j4Tol9TuAmP+Hf1bdox5aH23ZI8p8goQHEIlmZalD4F9lNczFgX+FiuYVeW+cucf",
  "file_map": {
    "50": {
      "source": "fn main(mut x: u32, y: call_data(0) u32, z: call_data(0) [u32; 4]) -> return_data u32 {\n    let a = z[x];\n    unsafe {\n        a + foo(y)\n    }\n}\n\n// Use an unconstrained function to force the compiler to avoid inlining\nunconstrained fn foo(x: u32) -> u32 {\n    x + 1\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/databus/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
