---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "9558946300811596045",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZ3dTiM5EIXfJde5sKvKLptXWY1G/IRRJBRQgJVWiHffZIb8TDJxNJ0+zrlBNLjqfBAfu2I73R+Th9nd+4/v88Xj8+vk5p+PydPz/e3b/Hmxuvr4nE7ulvOnp/mP7/s/noT1F7ef7V9fbhfry9e32+Xb5CZqqNPJbPGw/tbqKsPj/Gk2uUnhc3rU2K18tfXs+02/TSeesOkzNr1j0xds+gpNXwI2fcSml4vTxyC2aRwkHwroCAIh7wTioYChBRJaIKMFHC1Q0AIVLFADWiCiBQQtgHZyRTu5op1c0U6uaCdXtJMr2smr38IVIlxB4ApjuNl9q1DykYLBFRJcIcMVHK4whqVr2CpUOVIYw9O57P6Gwyo1xgBXiHAFgSsoXMHgCgmukOEKDlcocAW4pwXuaYF7WuCeFrinBe5pgXta4J4WuKcF7mmBe1rhnla4pxXuaYV7WuGeVrinFe5phXta4Z5WuKcN7mmDe9rgnja4p+3PnpayXX3XUNoKWuNXWxM513Tzji/Z0eKBJR6UzIPiNChJe6LE6pu2sZY9mF8suS9L3Sx7yW+7Ub9YLn+JTDeOthIueYkKD0qlQcnSE6XdcXPqy9LquPlyE1n17f/9opfIeVAKDYrHnijtjuvWl6XVcf28iVI4+mfmIUE+JKgMCaoDgk6cEzkTFIcEyZAgHRJ04m1m2Ra9pulM79Fsu8ZHmxenDl+MqJDhCg5XKHCFilY4dQJjRIUIV5CLFXLZDKYejiaZU0cwRstv4PwJnD+D8zs4fwHnr9D8Ei73cOuwooQIzi/g/ArOb+D8CZw/g/M7OH8B56/Y/BHs3wj2bwT7N4L9G8H+jWD/RrB/I9i/EezfCPavgP0rYP8K2L8C9u+poxS7Nw1a+uwAyKkzF9dAyTwotSdKc5VOTp0zQLE0Vunk1ImEv2AZaQdA1HhQEg9K6YnS7rintutRLK2Oa5ebaKQdADHlQTEeFO+J0u64KfRlaXXcdNZEx+uLkmRIkA4JsiFBaUhQHhLkQ4LKkKA6IChHnk6fu46QsvvU0Wq1Tg9ZlIjFiFgSEUsmYnEilkLEUvuyRN9NZOmAxQMRSyRiESIWJWIxIpZExHLFcXe/OP3DkpfrZsmrHJax7jwltRcilsrDUkYYicZaOyhdF5ras2gxIpZExJKJWJyIpRCxVB6WGvqytGbRGolYhIhFiViMiCURsWQiliuOu8Or0dp5l6RVddVKw6IhELFcPhKNtQWrwXqyNGdRDYmIJROxOBFLIWKpPCwxELHEviyNWVSjELEoEYsRsSQilkzE4kQsVxx3B1ejGjsfNmtVXRKIWCIRi5392GOvj+2qpJ4s7VlUMhGLE7EUIpbKw6KBiCUSsUhfltYsqkrEYkQsiYglE7E4EUshYrniuDu8GrXQt9JpVV0WiViEiKXzHYda1egIN1Yba4dRzYlYChFL5WFJgYglErEIEYv2ZWnNosmIWBIRSyZicSKWQsRSeVjyFcfd4dVojn0rnVbV1fuek00WJWLpfOPWVjWau95btz2LjnDXyfFYKg+LByKWSMQiRCxKxGJ9WVqzqCcilkzE4kQshYil8rCUQMRyxXF3eDVapG+l06q6ihKxGAnL5+ri39vl/Pbuafb1LPfH98X93qPd3/57mR085f1l+Xw/e3hfztbPe9896n3tFq11ahLWf+PqKsepx2/rBxmuf1V8qlXWl+u+bBJXLXVFsKL4Hw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/brillig_cow/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
