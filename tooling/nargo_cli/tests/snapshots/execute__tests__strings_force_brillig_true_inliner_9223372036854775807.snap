---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "3868090896738146956",
  "abi": {
    "parameters": [
      {
        "name": "message",
        "type": {
          "kind": "string",
          "length": 11
        },
        "visibility": "public"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_string",
        "type": {
          "kind": "string",
          "length": 4
        },
        "visibility": "private"
      },
      {
        "name": "hex_as_field",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Test global string literals\nglobal HELLO_WORLD: str<11> = \"hello world\";\n\nfn main(message: pub str<11>, y: Field, hex_as_string: str<4>, hex_as_field: Field) {\n    let mut bad_message = \"hello world\";\n\n    assert(message == \"hello world\");\n    assert(message == HELLO_WORLD);\n    let x = 10;\n    let z = x * 5;\n    std::println(10);\n    std::print(10);\n\n    std::println(z); // x * 5 in println not yet supported\n    std::print(z);\n    std::println(x);\n    std::print(x);\n\n    let array = [1, 2, 3, 5, 8];\n    assert(y == 5); // Change to y != 5 to see how the later print statements are not called\n    std::println(array);\n    std::print(array);\n\n    bad_message = \"hell\\0\\\"world\";\n    std::println(bad_message);\n    std::print(bad_message);\n    assert(message != bad_message);\n\n    let hash = std::hash::pedersen_commitment([x]);\n    std::println(hash);\n    std::print(hash);\n\n    assert(hex_as_string == \"0x41\");\n    // assert(hex_as_string != 0x41); This will fail with a type mismatch between str[4] and Field\n    assert(hex_as_field == 0x41);\n\n    // Single digit & odd length hex literals are valid\n    assert(hex_as_field == 0x041);\n    assert(hex_as_field != 0x1);\n}\n\n#[test]\nfn test_prints_strings() {\n    let message = \"hello world!\";\n\n    std::println(message);\n    std::println(\"goodbye world\");\n\n    std::print(message);\n    std::print(\"\\n\");\n    std::print(\"goodbye world\\n\");\n}\n\n#[test]\nfn test_prints_array() {\n    let array = [1, 2, 3, 5, 8];\n\n    let s = Test { a: 1, b: 2, c: [3, 4] };\n    std::println(s);\n\n    std::println(array);\n\n    let hash = std::hash::pedersen_commitment(array);\n    std::println(hash);\n}\n\nfn failed_constraint(hex_as_field: Field) {\n    // When this method is called from a test method or with constant values\n    // a `Failed constraint` compile error will be caught before this `println`\n    // is executed as the input will be a constant.\n    std::println(hex_as_field);\n    assert(hex_as_field != 0x41);\n}\n\n#[test]\nfn test_failed_constraint() {\n    failed_constraint(0x41);\n}\n\nstruct Test {\n    a: Field,\n    b: Field,\n    c: [Field; 2],\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/strings/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
