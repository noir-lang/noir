---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10355665750043800061",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZzRauMwEEX/xc950GhGo1F/ZVmWtE1LIKQlTReW0n9fJxu72Sg1yPINfimo6J65ZDRS5CH+aB5X9+/Pv9bbp5e35u7HR7N5eVju1y/bdvTxuWjud+vNZv386/zfjTv8IbGj4O11uT2M3/bL3b65i+YWzWr72NxZiC3gab1ZNXfBff5ctJJULAmuXELlEl8u4XKJlEtCuUTLJbFcUp79UJ59Lc++lmdfy7Ov5dnX8uxrefa1PPt6NfuJ+SRJgc4li2yqN3+a6o0zukHpCUmPDkonKN1D6QylC5QeoHSF0qG1GqG1GqG1atBaNWitGrRWDVqrBq1Vq61VdnaaymQZXaH0CKUblJ6Q9OSgdILSPZDuXfV6557OKaPXrhlxepoqlNPL1sxBQq5cQuUSXy7hcomUS0K5RMsl1/ch7VKZzIazrkSnqRqyFUsGpSck3TsoXSrplGKHp2Rnef2Hj9X41M31zuslviyvR0kqlrArl1zdAMhpVwJE+d7EfoyIx4hkjCiMEekYURwjsjGiq6uBiKUXRVdRXuLAfALzpZo/vEFInCDA0BZx/QnwQICjKI0QBTdG5MEf8PVHwEUBvHNfHzDxZQBBBwjoAIoOENEBDB0ggQOomyAAxa99IFwGIHQAjw7A6ACCDhDQARQdYOpKPj+urmzt3vXg9op0acbAZ6cmcIDo0AEYer2Jtben4U3xmybAZHjF4iMWb1h8guLNYfFUjR/aBr/pBUyGZyxesPiAxSsWH7H4aau25vi0VH02DB09yWHxhMVL7TP+0E3l/LFCClC6TkdXzui1HbOh/gQ7D/TOrrbLKsS9d8votWtGOHR00YweoHSF0iOUblB6QtLJQem1XVbxvqfH4amhq2rNbcjtbJDz/d3JZ0biDY2ELjGkITNiczGSZmLEu7kY4Rsa8X1zhrPDystcjIS5GNGZGOEb7quxu01YzGz4edjgediQediY8IwJ2QnGBqUnJF0clE5QuofSGUoXKL36dOiLSSynK5QeoXSD0qtrVa2nZydccFA6QekeSmcoXaD0AKVX12r/vVxMRt82Q7qdjcHbpvobGhm60ijPxYjMxUiYixG7oZGhK42mmRip/j3fZEZoLkZuuK8OXGyqf9Y2kQ2bh400Cxs24b3kfxtHOkPpAqUHKL26Joe6YAbtsZlB6QlJr/5V2jCdoHQPpTOULlB6gNKhtQrsh3+2o9/L3Xp5v1md3vXy9L59OHv1y/7P6+riLTCvu5eH1eP7bnV4H8zXq2AOdSOeFiL+4LodUds5JAnt6NiEFOcW4o7DQxUI+YWQtB5aH38B",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/aes128_encrypt/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
