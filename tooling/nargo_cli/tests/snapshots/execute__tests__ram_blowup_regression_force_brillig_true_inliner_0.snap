---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "15234459811814335946",
  "abi": {
    "parameters": [
      {
        "name": "tx_effects_hash_input",
        "type": {
          "kind": "array",
          "length": 256,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZvbbuIwEED/Jc88eG6+9FdWq4q2aYWEoKJ0pVXVf98E4RTFCchexcxL1bQ+wwljxrGxv5qX9unz7XGze91/NA+/vprt/nl93Ox33dXX96p5Omy2283b4+WfG9P/IH9q//G+3vWXH8f14dg8BC+rpt299L/Zjn/dbNvmQcz371VDIZdgk01ANoHZBGUTnE1INmGzCZdNZOecs3Mu2TmX7JxLds4lO+eSnXPJzrmdvHMwHBEwjsbMpBegsZFBwTEzaQaEHBmycMmsksaO/Lmtc2Yc3i4b3i0b3i8bPiwa3pllw8Oy4XHZ8PT/4UMM78lfb4pszk2RYWzCakxEjYlVY+KqmliMJm5cqZ1XYxK0mHijxgSqmoRoQiYxQTUmpMUkVO0nhBBNcPyMFqq+JwKxsgm7sUnVcUdCDGuNjE1EjYlVY+LuZAI8NvFqTEJdExpMwsgETNWCIt5dUQE9KqhHpWqdtRTHHssmUalaaC3aKypWyzjYLV/UVGGI7wqjS1SqVjg2flDxiUpQowJGjwroUUE9KqRHhfWoyJ1UKKkrYPWo1K22Jo7MzJioVK62cEUlqFHButVWhuHQJiMzgh4V1KNSd+I+PMUJpX2F9aiIHhWrR6Xu5B38oJJ2W69HJahRIaNHBfSooB4V0qPCd1JJHxKobrUFN7t43L2QlnVsIKdHxatRmd4u1U2lhw0kwJxAWAJRCcQlkJRAtgRyJZC/CYm9nlIbhkmCDfCTVPATjT1y7Fe++27ysvFJJ6jSmd79dT8d0KWDunRIlw7r0hFdOtMVDjGO393kNVknk5nq4MNwD2G8GQYs5u8whJkthjde6fY9SQq5EsiXQKEAmtmQhzJ0G/QpBCUQlkBUAnEJJCWQLYFcQYed2Wl1AwoF0Mz+pRsQlEAln9yZDTw3IC6BpASyJVBJj/AlPcJn94jv7urP+rBZP23b8ymN18/d88WhjePf93Z0fuP9sH9uXz4PbX+S4+cQR9+zsFuHR/SdTJ/IbhJC3Iv1/4KAKwiuv4RTS1ihoc6gs/gH",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\npub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let blake3_hashed = std::hash::blake3(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(blake3_hashed);\n\n    hash_in_a_field\n}\n\nfn main(tx_effects_hash_input: [Field; TX_EFFECTS_HASH_INPUT_FIELDS]) -> pub Field {\n    let mut hash_input_flattened = [0; TX_EFFECTS_HASH_INPUT_FIELDS * 32];\n    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = blake3_to_field(hash_input_flattened);\n    blake3_digest\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
