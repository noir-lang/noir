---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "13861609594193487779",
  "abi": {
    "parameters": [
      {
        "name": "sorted_index",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91XzU7DMAx2t6ZbN02b4ITEDbinP/s7sQODC0hIPEG3ts/RR2eBuHPdrEgsGRKWqvzY8ffZc9zOg2/x9KPEJ3s49qApqNvoUZ4nkUVf0hVHzwHHL+kZEmsS1H3oMWTnlb5vMeCQ4dr0v5LpIjTEZ5F/EkKzeC37j0Pi04F/OdB+nqqjfx4LkBHt+Jk+sdkSmy2zwXgc/d6p43zFE2g3K4wFsX032InH8IDFCQx/BE5rM/IYHvLh+cH5BG2qIx+P6fyqHQfqRNWMQ8nw8NwQO15bPWJ3T+YPeu64HheO+4O87ogZ9wYV1FLfZ7KHecU8D6k904VE51dNnJFe+wSH+kIegtnf6fVUjwE5g+dnBvyA4Td4G/Z4XkKDfWiwDw7PrZ6P9aNq6AXPQLvmN3qUZ0my5P3Mnm+5w/tC7y/vZYLs/0Uvq2sFnPbWupcJxofnh/YypQsMXGcGHa09qqM4gQHH5KuuVXD6rou6uHoGPlNo10xwGa4x5yoIV9GRO6oDi7kTjM9aj6pvvBHM/5pfHv8jif+dxd83xG+6c135onELli/PkK9TfE3vUcFsn/Xo+HtPXhG/wLDGcPxv5lf28ZcrKREXvwEENH8rYPiC2b/q9ehEHJtf8iyXWVQmWZnNszxP9xnPk5IeyZNt/P18sdun80wWkVrGl8YvVutcrssii6IozmXxE/4nAftJuoERAAA=",
  "debug_symbols": "lZXdioUgFIXfxWsv1HRbvcowHPqxgxAWVgND9O6jQwciulk30Y7vY0tLWDvrXbu9Xz4M08Lqr52NU9esfgpp2g/O2ujH0b9f189M5EdR/vPL3IQ8LmsTV1ZbxZkLfXrRyR786FhtxPHNWVFhvBYgL0FegXwB8hrkDcgTyFuQB/PVj/kqUZ2CUnfDCNiQsPGYstL0MUjejQI2NGwY2CDYsPC/KmGjQk9FAjYkbMCZE5w5wZkTnDk9Zq6FPA0t73mQhY0SNirMONL000TftKM7S2XYQnfpmPV3dre6mePUuX6LLhfPpXPSamV4YdI5ZL5JVnJLeciXxFpuq7Qv7fwD",
  "file_map": {
    "50": {
      "source": "unconstrained fn main(sorted_index: [u32; 2]) {\n    let original = [55, 11];\n\n    let mut sorted = original; // Stores the constant \"original\" into the sorted reference\n    for i in 0..2 {\n        let index = sorted_index[i];\n        let value = original[index];\n        sorted[i] = value; // On first iteration, we should not mutate the original constant array, RC should be > 1\n    }\n\n    assert_eq(sorted[1], 55);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
