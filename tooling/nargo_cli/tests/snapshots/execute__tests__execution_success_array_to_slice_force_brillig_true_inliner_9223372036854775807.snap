---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10882471991489596736",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
