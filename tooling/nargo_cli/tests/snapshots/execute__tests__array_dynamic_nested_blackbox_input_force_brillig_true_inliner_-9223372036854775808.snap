---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "4450009109511397893",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndnbaupAFIDhd8l1LmbNmqOvstkUD7EERMXDho347k1arWIG2n9uSkf4NPhnxehcmlW3OL+/9dv17tjM/lyazW45P/W77bC6XNtmceg3m/797fnhxox/rHGf4Lifb8f18TQ/nJqZVW2bbrsa/0vDE6z7TdfMvLn+bQfiOQmcxDKRb5InJHGSMRHDiXBiOVFOHCeek3L98F0/+AmJnCROMibWcCKcWE6UE8eJ54TXt7y+5fUtr6989pXPvvLZVz77ymdf+exr4IRf+ZVf+ZVf+R2v73h9V66f76elGpkQ5cRx4jkJnEROEicZE284EU54fc/re17f8/qe1/fF+s6HG3FRJyRxkjEJhhPhxHKinDhOPCeBE14/8PqhXD+7G/F2QqLhRDixnCgnjhPPSeAkcpI44fUTr594/cTrJ14/8fqpWN9rvhMfJiRwEjlJnGRMsuFEOLGcKCeOE14/8/qZ18+8fsb11RhOhBPLCa6vroI4TvAJo+Vba8nx/jVJcnq6VfwyWjb5/slvjQ2vxle8Tvkm1pjH64i+mlhhUoXJ3JRvZH8wUmFshSl/kzESH039q3EVxleYUGFihUkVJnMTf3EePM9PO52bYfPgPjfDD7avzy98Pss3wD8Yeh24Dot/80M/X2y62/7I+rxdPm2XnP7vu5edk/1ht+xW50M37qE8tk/G91CtadXJeCzDSpK0ksfV5z6BGt+qmHE5vh8qMix1OIbhOD4A",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/array_dynamic_nested_blackbox_input/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
