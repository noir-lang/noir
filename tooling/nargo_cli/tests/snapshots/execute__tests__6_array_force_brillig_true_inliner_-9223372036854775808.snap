---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10190580946026949980",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdzbbuM4DAbgd8l1LySSksi+ymIw6CEdBCjaoocFFkXffZ1u7XQtRsbP3gyaQb4q1i+rFiP7fXe7v3778/vwcPf4srv86313/3hz9Xp4fJhevX9c7K6fD/f3hz+/v//3Lh3/qfL5/penq4fjy5fXq+fX3WXO+WK3f7g9/lQmf3e43+8uS/r4dbGrBRYVFg0VjVwhbRaia+Efh5ZZWF4L9zgopy9Bua5Fg4XCwlChbl9xki/Bad276vaVJP0SUnkt3L4SpVlYW4sGC4WFocISLLInitQvUaa3rYTbu6XOvVuqrYV75NXm0d6oa8M98iY2i7JuI6eEk4wTwgnjxJ3mms5Dvql2xO1jTXOOmtbJT/OTS9o8WNRqR9zDN5pnIePSEcaJ4KTgpOLEn+hT4nkWTrnvM40gCyBKEZQjiCKII0gi6EyX1+Xva6rdGcQUQRxBEkElgmoEtQgKdbkFkKQIyhEUGRESGRESGRESGRESGRFyJic7nYQma1TozFVxXS6LmTpUIi3VCGoRpBEU6b2aIihHUCSnyhEkEVQiqEZQC6CW4Ouu5l930RySUk8IJ4wTwUnBScVJw4l/PczzOlO5OxH8pemQaMJJxgnhhHEiONlK3yEVJw0nihODib/aHpOME8KJn37WARGcFJxUnPjpt3Z+lerXG8bEUEJ+wWFM4BU3+QWHMWGcCE789Ntc1lCVjlScNJwoTrbS13UpYCpY4iTjhHDCOBGcFJz46aueH2N+vWVMFCcGE7/SMiYZJ4STrfQdIjgpOKk4afCkRIoTgwknnOAzP+MzP8OlefIrRGUZY8WoIw0nihODiV8ZGpOME8KJe1YWKwvpcvErQmNScFJx0nCiODGYlM30e5JxQjhhnAhOCk4qThpOzpz7MiAGk5pwknHipl9lnpNr6wnjRHBScFJx0nCiODGY+FW40TfM5FfhxoRwwjgRnBScVJw0nChODCaKp694+oqnr3j6iqevePqKp694+oqnr3j6hqdvePqGp294+oanb3j6fn2Maa70cvc1B/n1Ma7LJixdV+DZr4+NScYJ4YRxIjgpOKk4cc9K1rnYxcYdUZwYTPz62JhknBBOGCd++sseOe6+VGW/PjYmFScNJ4oTg4lfHxuTjBM3fSnz+SJFO8I4EZwUnFScNJwoTvxNqMtWZYf49bExyTghnDBOBCcFJxUnfvo0z2NSqSOKE4OJX4Ubk4wTwgnjRHACbz5nvwo3Jg0nihODiV+FG5OME8IJ40Rw4u8hGtzYwWf2lNVlz1bticHkzH6yIck4IZwwTgQnBSf+HrK23NXTSkcaThQnBhO/PjYmGSeEk630HSI4KTipOGk4UZwYTDThxE9/cLsZ+/WxMWGcCE4KTipKxF+9TrX85c62Kqdupum64b2vwCynyvTj6c2Z/muBNltQ+97CJ+IIEh8ZLejbjWShYymbH8v6j+Xf0ViXrXDT9wCpQy2CNIIsgPyV8hbKEUQR5OekNF/QTDVu+tFI8Be+0689tSA/bKFtHoNId+D+CNDTjar6/9P5E1kA+avlLZQjiCKII0giyM9J0rzaomli+tFI8BfA0689tUA/bME2j4Hq+sD9FTPxaboVah3KEUQRxBEkEVQiqEaQX9Mch+uvbbdQRtHH9Orvq+fD1fX9/uuJCHdvDzffHpDw+s/TfvWshKfnx5v97dvz/vjUhNMDE47RiV0U+3W8R3h6cSx0T6XU48vjB5PULqbBObU5tfsv",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/6_array/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
