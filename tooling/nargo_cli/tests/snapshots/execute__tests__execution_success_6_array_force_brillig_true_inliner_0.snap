---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10190580946026949980",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdzbbuM4DAbgd8l1LiSSosi+ymIw6CEdBCjaoocFFkXffZ3ZOulajIJfmdwMmkE+2dYvKzZ9+FjdbW7ef/3cPt4/va6u/vpYPTzdXr9tnx6nTx+f69XNy/bhYfvr5/f/XqXdPyq/v//6fP24+/j6dv3ytrrKOa9Xm8e73V9l8vfbh83qqqTPH+uVFlgoLCoqKoVC6izEliLeDiuz8LwU4XZQTl+Csi5FhYXBwlFhYV9xki/Badm7FvaVJPsSorwUYV+J0Sy8LkWFhcHCUeEJFjkSRfRLlOlrCxH2btG5d4v6UoRbrj6P9krNMsItr+KzKMtl5JRwknFCOGGchNNctXnIV7OGhH1sac7R0jL5aX4KSZ0Hi7k2JNx8p3kWci4NYZwITgpOFCfxRJ8Sz7Nwym2f2QjyAURpBOURRCOIR5CMoCNdrvvf16TNHsQ0gngEyQgqI0hHUB1BQ13uA0jSCMojaGREyMiIkJERISMjQkZGhBzJyQ87ocsSFTpyVKz7w2KmBpWRJekIqiPIRtBI72kaQXkEjeSkPIJkBJURpCOoDqCa4OOuGh930RySUUsIJ4wTwUnBieKk4iQ+Hub5PNO42RHiU9MusYSTjBPCCeNEcHIq/YAoTipODCcOk/hsu08yTggncfrZOkRwUnCiOInTr/X4WWpcb+gTRwnFBYc+gc+4KS449AnjRHASp1/nsoaZNERxUnFiODmVvi1LAVPBEicZJ4QTxongpOAkTt/s+BiL6y19YjhxmMSVlj7JOCGcnEo/IIKTghPFSYUnJTKcOEw44QSf+Rmf+RkuzVNcISr7MVacGlJxYjhxmMSVoT7JOCGchHtl8bInTS5xRahPCk4UJxUnhhOHSTmZfksyTggnjBPBScGJ4qTi5Mi+Lx3iMNGEk4yTMH2VeU7W2hLGieCk4ERxUnFiOHGYxFW43hVmiqtwfUI4YZwITgpOFCcVJ4YTh4nh6RuevuHpG56+4ekbnr7h6RuevuHpG56+4+k7nr7j6TuevuPpO55+XB9jmiu93FzmoLg+xrq/CcuWFXiO62N9knFCOGGcCE4KThQn4V7JNhe72LkhhhOHSVwf65OME8IJ4yROf3+PHDcXVTmuj/WJ4qTixHDiMInrY32ScRKmL2XeX6RYQxgngpOCE8VJxYnhJL4JdX+rckDi+lifZJwQThgngpOCE8VJnD7N85goNcRw4jCJq3B9knFCOGGcCE6wm8/XzVenMubc/FSePEx6RMGXp0lgfspg+vNwzSXTfyujZ69MPqwMnbky9U/2DOn3lfndvp3bPjsd2q9N+37Z9uMC5h9sP1+4fbpw+3zh9uXC7cOPpXBRnMR3G3YeLeIj9xrq/q5BbUnGCeGEcSI4KThRnFScxHeb7ifZXEtDHCZx7bRPMk4IJ4wTwcmp9AOiOKk4MZw4TCzhJOOEcBKn33ngkePaaZ8UnChOKk4MJRJXNqarSftnK1XKOUdwEhdC/rcE88XPnsSlkFMofnhVDz+w6vW8baknV8vb1Yqfd9X9zZjTlajUIB9AcQXlFMojiEYQjyAZQXFORvMBzXSVhc4aCXFRZGr2sAQ5cwl+chtElhseV1GmK1fpgEqD8giiEcQjSEZQGUE6guJKZz/cuN5xCmUUfU6f/r5+2V7fPGy+3pNw//54++21CW//PG8Wb1B4fnm63dy9v2x271I4vEZhF534uviP3ZPD0wf2vGbX3cfdiu3OsyXnaZnTcv8F",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
