---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10882471991489596736",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91dPWwrSxUe27txbMdx4vy89xCioQIEsuP8PSREEO9Ch4RoeKVvblI8iQYBtRsEDUgIAQWiQDSI1yJEQYcELdITDUhICCQqoKCkQZs7Z/P587eTXTzj5L6RorVnzpy/OXO+2dlZp+Velpb/K0rmr223Wozmyl8n65VpRF6TlHq2EulZKoqfW67a8X/zo9Jzy4NUtHciGtwTOsXifzk5vewJ+yLqP+sBzwT8T4x/lob/pOv5fG6xzN+R3KFbnrzYx9pwIn/et237dvu87z/3iF+KcUedYvvtQOjfBtuK8tlFGtnG/y3g71z8Ofksjf7TgY+FnfZyLFisxbal4J3H513Oza34vMu80o3Pe2LzdRt4WwyZXMzLEcf+TGFPh+pQfp90jR2LLZJn+rB/bG6b7/pC1z3RtgWfsQ3l9IUcxSuPyCuLyMtidORWY8d82BP9YuZEs2Pg+WXCDtStTfT4uSg51X3EXwt7xu37PlWx0wv4blvoMxT9WhVXk8N1bdIBbWOctfHYgf5X/jpZp8xuSuzdJZlR+E8mp2bPyPPLK2zehXakn/lrMQ5H3mm2Ruks7vtj7BYlWySx56yQ8zro0QJ97vQHuWiXc/d2Iz2uedBupMexMZ/tET3Gh7Xh3EaZ+D134bURyy/Klb9O1ixscyb0C8XGZ0jPPegTM1+NyX6UlXj+TBLbNqsbdyZfxXyT3Iey+m51rFOsF5Rtag6qOYU+qOI1asirJ9pSjGko96D8kbB1uBldyxxg8ZUJv6Jubbc6H/bAzpzqvuSvai2g/IN1PJYqJ6Wdn9Opzbd9t1qsbQx1dh9rbQeg15D6HQb6HYl+LbdaOvQdfVH4/BOE2U7wMpkYf2ZTTm3P/fUp5PxEssv74HEa/mV+wJjqCJvGFePDfsGr8eI2k9V3SfFyGrItNLf3QR/0QRWv/Ya8eqItxZjuBexG+cOArsoOW5uNhI92N2NjiRUWl4gVyo62W51HmCtzqvuGvyqsUH7FOo4BtXZKO6+nM875WFTOf7ZYbsOcv0v9jgP9XhP96mKF+aIpVmD8mU2M/d/019RrdIUVm1kf3O9rHqThP+M555zGigMan3WwwmRtCiuUbSGswPFmrFC8xg15bQr/H8IKxn+lq7Iji+gT20etgzuJ/FXijsV4JuxQuINzEnNyTnU/9tfUuJM6Bx0m4T89Y3zCwviEdobwydpeD/R7Q/Sri2vmi6a4hjFjNnG8vOuv72Ncm6WNqfsciPNS4dohjc86uGayNoVryrYQrmHsMa4pXgcNeW1qrfIQrvFaRemq7Mgi+iQFrzoYmcj3JUbafMmEHQojcX7jvUlOdb/111cUI8t8dpSE//Rc3adZUTjIWIc4yBj5RqDfB0S/uhhpvmiKkRgzZhPHy3v++hQwMhGGnRr/4zT8y3yK666OsOmYxmcdjDRZm8JIZVsII3H+og+qeB015JU2T9yP6WHAbpQ/DOiq7NiK6JM8Iq8sIi8+Q4NxwM/NEo1jibc29zJhB+rWdqu5ArEip7p/+qvCWxU7hwHfDYU+aj+ySa5QckLPs44jykEfmm0jt2orn6dC/E0RC4bhGAuvCV3bRI+fi5JT3X/9VcXCkHzHdaHzVDxXEp0DOB0CTysWH1smEGzqgx861Bf1zIn+3617nh3/eST6W5yOhE+OySdpnrs3e66MNqt7Jl4v8noH2zA3od1c1HrRfNF0vYhnCvm5srWNfcfE7wjI9aLJUrFiZ7gSn8ksz+nZmHRc+GzpY55hQR+Y/HXPZKKsPvGKbNs0ZFvoLCquz9AHVbx2G/J6zDFFX4/INnXmqiNsU+dCR9SWQdsuteWLVZ8U8+ELhHn9B/S3e2Q1n7EvYw3T7lCb0X6MctVj3NvW9cUwki/yCl9MyRc7G/SFyUqMGWctklfla8aRvtCVv+eCNqM2o718AnGXGAfP6+aoPvl6R+jqqF8uaLvUZrSfbm3EXulrxoNEOHiaeM7O6uYokz+kMWG/4NV4VfmuT7xSrSGUbah/6F0g9EEVr7rvFW1onVqOaS9gN8pv+g5YK6JPYr63FfN9MtujGwk9zYc9ITfFnoXpgnsWufBhm+jxs3P3+dPq3vYDqfYsMuG7LOC7rtAn4XuwZwnfVT1PPT8Trw1mobUQ2sR7EuvcF5qsTd0XhtZ5ReH4RPzkXKZ47TTk9VRxWumq7GhH9EkWkRfn4RCeprqvMTtsvmTCDtSt7VbnN653+X2NrwfycFMMU+vvV2mftEttuE/Kz9VxnxTt5vLQPunba+6TqndzzKaRW/X9U3sXwHRr+i7AtwNx2/QdwF2hD/OyZw1Fwd8i4T0Ro/8O6Pdd0i90nhljTY0f9sXveYX+2Ga03/cNqc8cqXvXA9JPvXeOz5mq/PtD4d/Ea6eLuuPHew+h8at6dxpxkXP2T2j8Up2rVuM3JtvQbr43Sf1OqsotoXdS6+aWnwVyS9N9/K7Qpyf6XcXxzVzZh7kA5ar9eNO3sP17gE3IoyjZYtmWxzgHjDbxWR91BgJzD/9OA/bnGMcx5HXfII3dwRhHmaZb0xj/ZSDGu8J3oT2rntCn6juu9TOSkVXQFe0qVk2uilW0PfN9HjNWcVyaxqr5RcUq59w0977N3l1EDFfr5Ra11X03hPEIi1pnY3w0WWdjHPJ5KMwFZpPlCcxHmxmXcJ7g/eOiNM0TfwjkCfRdR9SFsLDlNK+qdTY/8zL6P4J+ddbZqAOvs1Enxs+9CvmIp/x+65890WOu06r8i3M05N+/BPyrzpapPX7lX/59mn6FfMQCfhb6d/JvovNp0r8oq8q/uFdZ5d9/CP/2hA8i2nPZIv2c0+Nn8kc0DtyX7WfarQrb/0Xj9xhnugYu+f1KeXZrH/ygYmREfjL6/0CMHNXY61C/tcg6ID3b7Zze89ynNuzHZyZxj+eYdBgHdECd1ZoPf/O2KNliWfcrXz9Zr0wLH75La8qld4QXy214Nn3Lt6mz6ZwT0b8HYFvCeJxwLFTdP/OeMo4pxhHHa+79FmNP+UDoE7pnU2fAec9J6YD57Nni5ZXPJWNfPJecMhYvLl+O152unn/uVte7KD8n+n3vVIw1u2Zr6Hl7MZ/ezua387P5ixen13O1PrfxHCSQP7+YXV6fnF5fPD+bzWfnG5d/c/nmi8mbtzfz6XR68mJy85B8m1uWH4qCua0oXf/d5iTT41oI6T/oG4q4/BDd6+RCXkH38QBdq+J6x0PUZYvlut5ilb6zWKU32f3Fqo7WNoC2nOTs+O/oL+RleuRE/1Fve/ksBvpY/z0hf5vkL+kt6hB/mVdH1Bl9MT4fpnmLtsd+rn0nk/hjHetmscO/P245Vp0bUeuvdc90oV7qPnOL5OBvl+M7JmcV+uNajc/4WDvSfxLm4SXEGNtvOg6cfs+kW8H/U4CtG3ruETzThfHNZxseOi/Avx2zFeCFZzTVeHTIX0b/VsBfifZug+clcG+Jf1N6IOj7AX/1BC/2H8cP98M2HMttwSs0v5gX2oBzjtdWueDF87EohnPG9+4KdTnwLQrmc8YTxKZssSzHcjfiCfIyPXKi/zLhCeZN678n5GPOZVlKPuOJwtmeoC98+sWKnG1jgWO3bg7muEA5rYhysJ+1qf0KPheY6NxveW9l8wfxryt0bbvV+Yb37znV3Qburdpu2Xdcx75Tz1sewsl3KmTWzctG/1XAya8QTqq9I/V+SlVcKXvU3tVA6PW1AF4k+r8ZJV6o5244Rttk+7agxxhjvFD5XT3jZJ+zXPwcOuftXHgvZ0P/E0Du5SA2I3YwlvJeDmJ2KN/w+bdXNd98K2K+6Qt9FF7w+X+MOV4XKh3qrjcQG99JtEdyfXb+/Pr0bD65mRZfT+ruEVhM3tm1WO5jMYlrFKTnPQKj/wHk3B/BfLjjJeQVdL+AHFgUvP+NGMcnddd5Jn8k6O1zYl1nIV27Qlfl41bFFXlhXXexXPfQ/kqXZNfdX8lIzv+7v/LzV2B/5ac05zOQHRN/cB7hHF+KH5BdZUdH2KH8O6jBaxDg1Qvw6tfkFZKNumbE3+Jnq4J/j+iH/jvGZ1fow/H5K8iFv28v0xjPXwPNb2rsqZpOu9gm6BH7mN5sLWT+jnLvCOSkyGdKb4wFkx9jv9hkbWpvM8aYhHjt1uRl/sTxLT6/t5mxPmEb2k7PM5NfrsXS6FPG3mgR9qnJjxF7JmtTsadsC8Ue0nPsKV6jmrzMnyrehml8MOO87ip8gPLxO+Z1td/HOfuv7WU+yl+IYbxG24O2PrXtQ9sO6TterOqLvEak75j0NexVMb8n5O+SfJSl5DMu7wv6fUFfxMqfyKdboi+Or/m0WOv8D7WLXSGtfAAA",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "// Converts an array into a slice.\nfn as_slice_push<T, let N: u32>(xs: [T; N]) -> [T] {\n    let mut slice = &[];\n    for elem in xs {\n        slice = slice.push_back(elem);\n    }\n    slice\n}\n\n// Expected that x == 0 and y == 1\nfn main(x: Field, y: pub Field) {\n    let xs: [Field; 0] = [];\n    let ys: [Field; 1] = [1];\n    let zs: [Field; 2] = [1, 2];\n    let ws: [Field; 3] = [1; 3];\n    let qs: [Field; 4] = [3, 2, 1, 0];\n\n    let mut dynamic: [Field; 4] = [3, 2, 1, 0];\n    let dynamic_expected: [Field; 4] = [1000, 2, 1, 0];\n    dynamic[x] = 1000;\n\n    assert(x != y);\n    assert(xs.as_slice() == as_slice_push(xs));\n    assert(ys.as_slice() == as_slice_push(ys));\n    assert(zs.as_slice() == as_slice_push(zs));\n    assert(ws.as_slice() == as_slice_push(ws));\n    assert(qs.as_slice() == as_slice_push(qs));\n\n    assert(dynamic.as_slice()[0] == dynamic_expected[0]);\n    assert(dynamic.as_slice()[1] == dynamic_expected[1]);\n    assert(dynamic.as_slice()[2] == dynamic_expected[2]);\n    assert(dynamic.as_slice()[3] == dynamic_expected[3]);\n    assert(dynamic.as_slice().len() == 4);\n\n    regression_4609_append_slices(x, y);\n    regression_4609_append_dynamic_slices(x, y);\n}\n\nfn regression_4609_append_slices(x: Field, y: Field) {\n    let sl = [x, 1, 2, 3].as_slice();\n    let sl2 = [y, 5, 6].as_slice();\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == x);\n    assert(sl3[4] == y);\n}\n\nfn regression_4609_append_dynamic_slices(x: Field, y: Field) {\n    let mut sl = [x, 1, 2, 3].as_slice();\n    sl[x] = x + 10;\n    let mut sl2 = [y, 5, 6].as_slice();\n    sl2[y] = y + 5;\n    let sl3 = sl.append(sl2);\n    assert(sl3[0] == 10);\n    assert(sl3[4] == y);\n    assert(sl3[5] == 6);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/array_to_slice/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
