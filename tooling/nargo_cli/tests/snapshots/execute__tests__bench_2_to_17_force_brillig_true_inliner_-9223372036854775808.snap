---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "5767612707075568125",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvdTuMwEAXgd8l1L2zPjGfMq6xWqEBBlaqCCqy0Qrz7uisSUO0kmiP1BhHo56iZk59xko/hYXf3/nS7Pz4+vw43vz6Gw/P99m3/fKxLH5+b4e60Pxz2T7c//zyE8w/i/59/fdkez4uvb9vT23ATE22G3fGh/pal+sf9YTfcSPjcNB8lDV8fZeLpoyl8/t4MJNccPF9zcL3m4HbNwcsVB+dwzcHjNQdP1xycuoOrjYNb/jn4WbBbiFtkt1CvkO46UpTyRVLUy60lOmNsMmaXxgDT3RNSRaNJRBcmB8BEwCTAEGAYMAKYDBgFjAEGyIECOVAgBwrkQIEcKJADBXKgQA4UyIECOVAgBwbkwIAcGJADA3JgQA4MyIEBOTAgBwbkwIAcFCAHBchBAXJQgBwUIAcFyEEBclBm6iPfJucLE0P/C2ngEWnUBgmCMoIUQYagAqAYEBQRlBBECEISEWeKy2FCwg1SBBmCCoBSQFBEUEIQIYgRJAiaOSvZFKNUGkT9TU5JR0QkDYoISggiBDGCBEEZQf06UaQJpeas0Z+JWUMFQBwQFBGUEEQIYgQJgjKCkOJKd+sJj9ETtoaQn7CfiJ9kP1E/MT8pbtKfmFkm0U/81e/PyojFkVhqCPuJ+En2E/UT85PiJv3pmGXSrX6eGo/c9B2xPxmzTMhP2E/ET7KfqJ+YnxQ36U/CLBN/9c1fffNXv9+s1/Z1vAatXV9pECOof8OgnntGVAPfoIwgRZAhqH9zq96XGFEKlxsihf6tH07j0aP+mhpECGIECYL6dRKetp5obJAiyBBUANSfhFhDEUEJQYQgRpAgCElEnElE+b4tGqlBhqACoBQQFBGUEEQIYgT1i0s0IZLmGNGfuVhDhqACoP4cyRqKCEoIIgQxggRBSCIIScTM0yqUp6cCyJoDy8xTKMto5umSFRQRlBBECGIEIZcEM497rCBFkAFIgLnh1J9aqU3ndFLT0K6JESQIygiaecimjJMMtXnJDTIEFQD1J1rWUERQQhAhiBEkCMoIQhKRkURkJBGKJEKRRCiSCEUS0Z+Eqd35dCYs3CLxI+r3T5rHw57m5gnOfk9T8riaos1a+h3NMiE/YT8R/9QFzfQyK0gRZAgqAJrpZVZQRFBCECGIEYQkIiGJSEgiEpKIhCSCkEQQkghCEkFIIghJBCGJ6Pcyi8fVfidT0jhdW7glxX3E6/cWi2vpdxbLhP1E/CT7v776ifmJvy4S/MR/Ihb/ibjf5BQbk1wKNYT9RPwk+4n6iflJcZO8Vv0O8Vc/+6uf/Zdh2X8Z1m9mlol/38/+fT/79/3s3/fVv++rv/rqr776q6/+6quz+p916c/2tN/eHXZfbxA+vh/vf7xQ+Pb3ZXfxbuHL6fl+9/B+2p3fMvx+wfC85VPdMynE3+fHU+sil43weeG8iSmk+j+u66zr/Qc=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
