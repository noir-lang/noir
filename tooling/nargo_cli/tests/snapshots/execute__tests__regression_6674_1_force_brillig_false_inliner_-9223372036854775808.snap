---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "4994172137108916992",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1azY7jRBAuJ3F+JgyJ4MSJAzdOcWJvEnFg0O4MJxBIiLuZyTwBR5AseAguSDwLN65IvAM3jkggITE925V8/lx2EuIetKuUFHW7u1w/X1dXt7sTyY4iX/bkBFIhX/jKyD93oL/78Lvyz7PTKBmR3jblr2bpcmT416L9i5GXGYWRP1P5gfCfDbycj4udfPRF9Q4ffmOoT2UXH6H81/EL6f/bDT5r7Dwvwo2toxdevgSQfR3G9u28vWnf9mTsY+xbKcdYL0wMZJdeZixVioy2rsGjtjm7v/f1S4NPoI/jrk99GPMD6utC39DXJ1LFSeUrhjH0tRnLEfnQ8/JZp9rWIX6si38H2971pfP1R/IPF7yu0aY4TqWKufJdGu9FNaXq4TbWY40Dj3sbeqzcxTHUhh7OwY5GUo3HFuPqmfqBsSHk4wB083gOoY/HAPce6BuTNd+1zcn/CeQyH9tqjXvgNS47ZLxR/4UE3dMkkVRjsytVfDiWu4atU+pz9KLY8XFf12h7lWVpzsfY0TkwkXrcAq+pjesB61Rfj1kPbnxprQfH4mrlNQs7nq/9wNgNDOz6Uo8d5kGtI3ba9qm0hx3niDrsOO4GgbEbGtgNpB47XCe0jthp25fSHnZN6+kwDD5rXvuQtO+C/BIohXxEQrtd+TPIZT7WibGi+idSH2OBcdrGkeKEcWTtKTpS3VMgxjG1bWSHE8cRr9N16yKvC1aOCrQvOzqOTtlfHRNHGCscR004jUj3lX+enUgR2YJxxDoddaSK3QX4GVPb14BTiFwe+HxrzvigrR3yx5E1lvgu8sZS9VnPK2Li/caXDsdffX0sMP+L9v1frl7Gx6PPYBfPB9QfE/93/hnjRcveCXbeL/PkfpHf51l+d5fe5m+RfEcdwAnPa87fOls6f+u0KMv61nmi9W6bx/XbpWf4gbZ1iB/rjmJq+8GXVh63YgfbjjkPsnC1zor0zNvN7bZzS75crG7n6e3yq2yRL54dlVv+z7NgPotCrK2zKMae96oiZZ+VrP0Qni//BnKZT+mM0xknpTNOZZtFwuHE+ep1XrN+AWxCrFmB94qpdeejxPHINjJZsYN357+DXOZTCrLWZrP5YjVPs3m6yJJ8/V/W2kB3hkff7fCcx3nNc976tj503NRfJ/+daCeX+dhWnDdqd+A5/mR5E31j2nd+894BGNblzaYzm9B3F4rpoXcXOE9wPGJq+wOwCXFmY+31o5pSxJ4fx5wxsg1X/nl2GqXWd8l18bJ0Mf0n2aRjo2codesur2N/y07mX74+hndiwqrOJms9eQ72/kO29A17Mb46ZK/yd6KdTInKutHfGPxSrCZSzQlPdKaeqt+jPX4PyW/lH3hfXf8qKmOJdzZ8V/aImZT5Rwa/le8UL8yTI8Ir0NnxFq8LA6+OYQ+fDb9p4KU5WM8PEaeQZ50PlDk7PqB4Ld21gd59YyRSHVPrDNn6j8eU+HF8rXzH9z19Qw/O+bp8gO9iPrDWPeu/Q9oXGz41zWv2kW1xpOfiTf+Rsu4tY+rrGvqa/us2bsn/wPfKKecZnIux4TPfG79/4FzsgT+OekUQf8y5WPq/Bejl2Dkkv1r5GMeG46buG53jmDF3dE22KoZ9scdI5fE+IIMx+jwq22fFbtM9fohvuc1qfTdb32/yJEnmd7PNvm+5ieJQ7Pox1hwN/LPucZkf9yDI/yHsQT6ieI4NfY7vswa+qKZ8lGG09Ypy26io8neLKr/qviiqNmrfGPpwHjh6wz8jXihL7YiJ/xMvQMdkCO/o+1ND/5D0l+w22viefWzwjw1+Nz43/qXtfgN0t30n9qiT5GMb26axE2JepVm+vM2XSbJOk02aZPvm1b8lLgtsdTMAAA==",
  "debug_symbols": "ndvRTiJBEIXhd5lrLrq7qquqfZXNxqCiISFoUDfZGN99h42MhpmGnHNjHMMnYP3gzNDzMTxs7t6fbrf7x+fX4ebXx7B7vl+/bZ/349bH52q4O2x3u+3T7c8fD+n4Jfv/27++rPfHzde39eFtuMlWymrY7B+O36qMv+Fxu9sMNzV9/l4NOQjTcFMSYTJhCmGEMEqYShgjDNFBITooRAdCdCBEB0J0IEQHQnQgRAdCdCBEB0J0IEQHSnSgRAfa6UDbZFo5N0IYJUwljBHGCROEabipyx1405PxVs9NJkwhjBBGCVMJY4RxwgRhGm6M6MCIDozowIgOjOjAiA6M6MCIDozowIgOnOjAiQ6c6MCJDpzowIkOnOjAiQ6c6MCJDoLoIIgOguggiA6C6CCIDoLoIIgOYrmDVtLJtBrnpuGmJcJkwhTCCGGUMJUwRhgnDNFBIzrIKTEoM6gwaLGFkpJ8oZJ0jpRBlUHGIGdQMKgRKCcGZQYVBjFFZKaIzBSRmSIyU0TuFGH1hMY/8Aw1ApXEoHwd1RkqDBICLZ/IsnL632wye0bL57EuE8VJxYnhxHESOGkwWT6BdZlknODTV3z6ik9f8ekrPn3Fp6/49BWffsWnX/HpV3z6y+dR2kSazUnGScGJ4ERxUnFiOHGcBE4aTByfvuPTd3z6jk/f8ek7Pn3Hp+/49B2fvuPTD3z6gU8/8OkHPv3Apx/49AOffuDTD3z6gU+/4dNv+PSbEvuwrTLIGOQMCgY1HJWUGJQZtHwSQ2T6LE5svkZDGKQMqgwyBjmBlo/dveYv4xYzojipODGcOE4CJw0my0frl0nGyeILwaeTeT7e7pwIThQnFSeGE8dJ4KTBpLNARzVOr0vVNkPCIGVQZZAxyBkUDGoE6izUuYIyg5giOuth9PuzK519dlU6i06qTKjK7I2ksxqk5unh1Tx7eJ3lE1fQ8pyq5gnp7Dl1FlBcQZlBhUHCIGVQZZARRXTWUVxBwaBGIGcq76yluIIKg4RByqDKIKYIZ4pwpojAd2sC360JfLems2gh2bS/ncJmyBjkDAoCdRYHXEHCoOXD6+m9q8yPVToH1xeJ4cRxEjhpKJHOIfVFknFScCI4UZwsTz9Or9AxwxkxnDhOAicNJp01AF3yOW79WR+267vd5ut6msf3/f2Py2ve/r5szq60eTk8328e3g+b4zU335fbHO9acl2J2O/jGoZxM5e6ypKOm8fGSmqr8eTMeK/jPf8D",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests_inner(&mut self) {\n        self.public_call_requests.push(self.next_counter());\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push via a method call\n            self.append_public_call_requests_inner();\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.l2_to_l1_msgs = sort_by(output_composer.l2_to_l1_msgs);\n    output_composer.public_call_requests = sort_by(output_composer.public_call_requests);\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
