---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(x: Field) -> pub Field {
    let closure_without_captures: fn(Field) -> Field = |x: Field| -> Field { x + x };
    let a: Field = closure_without_captures(1);
    let closure_capturing_a_param: fn[(Field,)](Field) -> Field = |y: Field| -> Field { y + x };
    let b: Field = closure_capturing_a_param(2);
    let closure_capturing_a_local_var: fn[(Field,)](Field) -> Field = |y: Field| -> Field { y + b };
    let c: Field = closure_capturing_a_local_var(3);
    let closure_with_transitive_captures: fn[(Field, Field, Field)](Field) -> Field = |y: Field| -> Field {
        let d: Field = 5;
        let nested_closure: fn[(Field, Field, Field, Field, Field)](Field) -> Field = |z: Field| -> Field {
            let doubly_nested_closure: fn[(Field, Field)](Field) -> Field =
                |w: Field| -> Field { (w + x) + b };
            ((((((a + z) + y) + d) + x) + doubly_nested_closure(4)) + x) + y
        };
        let res: Field = nested_closure(5);
        res
    };
    ((a + b) + c) + closure_with_transitive_captures(6)
}
