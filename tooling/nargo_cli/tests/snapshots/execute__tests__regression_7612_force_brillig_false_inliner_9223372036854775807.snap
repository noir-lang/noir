---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "4550974181173491707",
  "abi": {
    "parameters": [
      {
        "name": "array",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "struct",
            "path": "Data",
            "fields": [
              {
                "name": "fields",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              }
            ]
          }
        },
        "visibility": "databus"
      },
      {
        "name": "x",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/9VYUZKCMAwtFFcR+Fr99whtAS1/XmUd8f5HWBkbN2arP7zOaGY6KW2JLy9pa8jUTZpr+w797Np00FPbibE86IKtl0Jjx6Bbs++68eBG29of44aT703Xn/beetv7/ux8246+84fhNBzMYLt2tJd+aC/mJjmzZeaJ5Xh1SsA6kKWA4DXQVgH0NxWHRcSumScPfpuZohIm/eJDcH4BY5MS5xKH09FhSAfIFKuJh+UL/GaeONoPGsTLeLlJDuQYeaasgHmVq/hFBbJvEsXcrj4AY4nESJdmrh43UiaeERuAJ22p8Jd1CcS4BpIs+VVYv5MlGpKDVBgrJEb69yM3Azr5qzclIlxQZ4VPVksdzm0ddENE0zVfq79TiMamRbvEQdEYZ+9OV/MxuoDR1kB/G3CypCgZ6gRxrnEYDa/J73Wt+n+ASKG5Uugtex9ZdpL9TRr7Zhnxccv6G+En5+YIwkD2eHnwjPeFWLsS+DI8Piux6MhvkdB3oQ0b2z7BumZ2gDF1ZL9KYz+aM2vWr8Qcxa6IvJc9ec6FfrX21Te1JjJHNilWHC/58QvcT6UI7BMAAA==",
  "debug_symbols": "ldNNCoMwEAXgu8zahdHGv6uUIlGjBEIiMRaKePdGURAplLebN49vdrNQJ5t5qJXp7UTVcyFtW+GVNSEtlOyraRRmS5MXzlPFeBmRNF2YsnKNqFdaUsXj9RVRioIHCvhPUOQHSOL0BjIU5CgoUFCigMWwYLBIYJHC4vFHMH4XHBYZLHJYFJgIoXFKazXU1/8K67dwSjRaHrGfTXtp/Wc8m9OPzraym53cLu1dOP8F",
  "file_map": {
    "50": {
      "source": "pub struct Data {\n    fields: [Field; 1],\n    counter: u32,\n}\n\nfn main(array: call_data(0) [Data; 1], x: bool) {\n    let index = if x { 0 } else { 1 };\n    if index != 0 {\n        assert(array[index - 1].counter < 3);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
