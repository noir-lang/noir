---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "7969957169502339280",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: Field) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/nested_array_in_slice/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
