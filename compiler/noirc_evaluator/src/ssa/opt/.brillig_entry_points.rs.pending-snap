{"run_id":"1756323368-888265212","line":625,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":625,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756323502-81298161","line":624,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":624,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756324046-503218220","line":627,"new":null,"old":null}
{"run_id":"1756324219-333465419","line":627,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":627,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f2(v3, v4)\n    call f3(v4, v3)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756324353-797307890","line":627,"new":null,"old":null}
{"run_id":"1756325129-323122427","line":644,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":644,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f2(v3, v4)\n    call f3(v4, v3)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756325856-747133587","line":643,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":643,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756326296-581401623","line":726,"new":null,"old":null}
{"run_id":"1756326530-834045616","line":728,"new":null,"old":null}
{"run_id":"1756326564-505950293","line":716,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":716,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756326566-574474435","line":602,"new":null,"old":null}
{"run_id":"1756326566-574474435","line":508,"new":null,"old":null}
{"run_id":"1756326566-574474435","line":948,"new":null,"old":null}
{"run_id":"1756326566-574474435","line":822,"new":null,"old":null}
{"run_id":"1756326566-574474435","line":716,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":716,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756326597-580913020","line":948,"new":null,"old":null}
{"run_id":"1756326597-580913020","line":822,"new":null,"old":null}
{"run_id":"1756326597-580913020","line":508,"new":null,"old":null}
{"run_id":"1756326597-580913020","line":602,"new":null,"old":null}
{"run_id":"1756326597-580913020","line":716,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":716,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756326657-137488155","line":718,"new":null,"old":null}
{"run_id":"1756326657-170745348","line":510,"new":null,"old":null}
{"run_id":"1756326657-170745348","line":718,"new":null,"old":null}
{"run_id":"1756326657-170745348","line":604,"new":null,"old":null}
{"run_id":"1756326657-170745348","line":950,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points_indirect_recursion","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":950,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f3(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f4(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) fn bar f3 {\n  b0(v0: Field):\n    call f1(Field 1)\n    call f3(Field 1)\n    return\n}\nbrillig(inline) fn foo f4 {\n  b0(v0: Field):\n    call f2(v0)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}\nbrillig(inline) fn foo f3 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) fn bar f4 {\n  b0(v0: Field):\n    call f3(Field 1)\n    call f4(Field 1)\n    return\n}\nbrillig(inline) fn foo f5 {\n  b0(v0: Field):\n    call f6(v0)\n    return\n}\nbrillig(inline) fn bar f6 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}"}}
{"run_id":"1756326657-170745348","line":824,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":824,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756326705-722233152","line":604,"new":null,"old":null}
{"run_id":"1756326705-722233152","line":718,"new":null,"old":null}
{"run_id":"1756326705-722233152","line":510,"new":null,"old":null}
{"run_id":"1756326705-722233152","line":824,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":824,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756326705-722233152","line":950,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points_indirect_recursion","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":950,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f3(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f4(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) fn bar f3 {\n  b0(v0: Field):\n    call f1(Field 1)\n    call f3(Field 1)\n    return\n}\nbrillig(inline) fn foo f4 {\n  b0(v0: Field):\n    call f2(v0)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}\nbrillig(inline) fn foo f3 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) fn bar f4 {\n  b0(v0: Field):\n    call f3(Field 1)\n    call f4(Field 1)\n    return\n}\nbrillig(inline) fn foo f5 {\n  b0(v0: Field):\n    call f6(v0)\n    return\n}\nbrillig(inline) fn bar f6 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}"}}
{"run_id":"1756326728-780266709","line":604,"new":null,"old":null}
{"run_id":"1756326728-780266709","line":718,"new":null,"old":null}
{"run_id":"1756326728-780266709","line":510,"new":null,"old":null}
{"run_id":"1756326728-780266709","line":824,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":824,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756326728-780266709","line":950,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points_indirect_recursion","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":950,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f3(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f4(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) fn bar f3 {\n  b0(v0: Field):\n    call f1(Field 1)\n    call f3(Field 1)\n    return\n}\nbrillig(inline) fn foo f4 {\n  b0(v0: Field):\n    call f2(v0)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}\nbrillig(inline) fn foo f3 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) fn bar f4 {\n  b0(v0: Field):\n    call f3(Field 1)\n    call f4(Field 1)\n    return\n}\nbrillig(inline) fn foo f5 {\n  b0(v0: Field):\n    call f6(v0)\n    return\n}\nbrillig(inline) fn bar f6 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}"}}
{"run_id":"1756326789-60369718","line":825,"new":null,"old":null}
{"run_id":"1756327067-428056592","line":828,"new":null,"old":null}
{"run_id":"1756327073-990439229","line":608,"new":null,"old":null}
{"run_id":"1756327073-990439229","line":954,"new":null,"old":null}
{"run_id":"1756327073-990439229","line":722,"new":null,"old":null}
{"run_id":"1756327073-990439229","line":514,"new":null,"old":null}
{"run_id":"1756327073-990439229","line":828,"new":null,"old":null}
{"run_id":"1756327474-726252908","line":607,"new":null,"old":null}
{"run_id":"1756327474-726252908","line":721,"new":null,"old":null}
{"run_id":"1756327474-726252908","line":513,"new":null,"old":null}
{"run_id":"1756327474-726252908","line":827,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":827,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756327474-726252908","line":953,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points_indirect_recursion","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":953,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f3(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f4(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) fn bar f3 {\n  b0(v0: Field):\n    call f1(Field 1)\n    call f3(Field 1)\n    return\n}\nbrillig(inline) fn foo f4 {\n  b0(v0: Field):\n    call f2(v0)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}\nbrillig(inline) fn foo f3 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) fn bar f4 {\n  b0(v0: Field):\n    call f3(Field 1)\n    call f4(Field 1)\n    return\n}\nbrillig(inline) fn foo f5 {\n  b0(v0: Field):\n    call f6(v0)\n    return\n}\nbrillig(inline) fn bar f6 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}"}}
{"run_id":"1756327524-181288400","line":828,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":828,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756327576-514027327","line":828,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":828,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f3(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f4(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756327754-974449859","line":828,"new":null,"old":null}
{"run_id":"1756327803-345188700","line":958,"new":null,"old":null}
{"run_id":"1756327803-345188700","line":518,"new":null,"old":null}
{"run_id":"1756327803-345188700","line":612,"new":null,"old":null}
{"run_id":"1756327803-345188700","line":726,"new":null,"old":null}
{"run_id":"1756327803-345188700","line":832,"new":null,"old":null}
{"run_id":"1756391196-476904243","line":958,"new":null,"old":null}
{"run_id":"1756391196-476904243","line":832,"new":null,"old":null}
{"run_id":"1756391196-476904243","line":726,"new":null,"old":null}
{"run_id":"1756391196-476904243","line":518,"new":null,"old":null}
{"run_id":"1756391196-476904243","line":612,"new":null,"old":null}
{"run_id":"1756391614-195896758","line":625,"new":null,"old":null}
{"run_id":"1756391614-195896758","line":845,"new":null,"old":null}
{"run_id":"1756391614-195896758","line":531,"new":null,"old":null}
{"run_id":"1756391614-195896758","line":739,"new":null,"old":null}
{"run_id":"1756391614-195896758","line":971,"new":null,"old":null}
{"run_id":"1756391636-312730661","line":532,"new":null,"old":null}
{"run_id":"1756391636-312730661","line":626,"new":null,"old":null}
{"run_id":"1756391636-312730661","line":846,"new":null,"old":null}
{"run_id":"1756391636-312730661","line":972,"new":null,"old":null}
{"run_id":"1756391636-312730661","line":740,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":740,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f7(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f6 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f7 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn entry_point_one_global f8 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f9 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756391925-466950323","line":628,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_inner_call_with_multiple_entry_points_nested","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":628,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\n\nacir(inline) fn main f0 {\n  b0(v2: Field, v3: Field):\n    call f1(v2, v3)\n    call f2(v2, v3)\n    return\n}\nbrillig(inline) fn entry_point_one f1 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f3(v2, v3)\n    return\n}\nbrillig(inline) fn entry_point_two f2 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f3(v2, v3)\n    return\n}\nbrillig(inline) fn inner_func f3 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f4(v2, v3)\n    return\n}\nbrillig(inline) fn nested_inner_func f4 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 3, v2\n    v5 = add v4, v3\n    constrain v5 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\n\nacir(inline) fn main f0 {\n  b0(v2: Field, v3: Field):\n    call f1(v2, v3)\n    call f2(v2, v3)\n    return\n}\nbrillig(inline) fn entry_point_one f1 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f4(v2, v3)\n    return\n}\nbrillig(inline) fn entry_point_two f2 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f6(v2, v3)\n    return\n}\nbrillig(inline) fn nested_inner_func f3 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 3, v2\n    v5 = add v4, v3\n    constrain v5 == Field 4\n    return\n}\nbrillig(inline) fn inner_func f4 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f3(v2, v3)\n    return\n}\nbrillig(inline) fn nested_inner_func f5 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 3, v2\n    v5 = add v4, v3\n    constrain v5 == Field 4\n    return\n}\nbrillig(inline) fn inner_func f6 {\n  b0(v2: Field, v3: Field):\n    v4 = add Field 2, v2\n    v5 = add v4, v3\n    constrain v5 == Field 3\n    call f5(v2, v3)\n    return\n}"}}
{"run_id":"1756391925-466950323","line":974,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points_indirect_recursion","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":974,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f2(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    call f1(Field 1)\n    call f2(Field 1)\n    return\n}\nbrillig(inline) impure fn foo f1 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) impure fn bar f2 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}\nbrillig(inline) fn foo f3 {\n  b0(v0: Field):\n    call f4(v0)\n    return\n}\nbrillig(inline) fn bar f4 {\n  b0(v0: Field):\n    call f3(Field 1)\n    call f4(Field 1)\n    return\n}\nbrillig(inline) fn foo f5 {\n  b0(v0: Field):\n    call f6(v0)\n    return\n}\nbrillig(inline) fn bar f6 {\n  b0(v0: Field):\n    call f5(Field 1)\n    call f6(Field 1)\n    return\n}"}}
{"run_id":"1756391925-466950323","line":534,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_inner_call_with_multiple_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":534,"expression":"ssa_string"},"snapshot":"g0 = Field 1\ng1 = Field 2\ng2 = Field 3\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one f1 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_two f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn inner_func f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 1\ng1 = Field 2\ng2 = Field 3\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one f1 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_two f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn inner_func f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn inner_func f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756391925-466950323","line":848,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_recursive_shared_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":848,"expression":"ssa_string"},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f2(v0, v6) -> u1\n    v10 = call f1(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"acir(inline) impure fn main f0 {\n  b0():\n    v3 = call f1(u1 1, u32 5) -> u1\n    constrain v3 == u1 0\n    v6 = call f2(u1 1, u32 5) -> u1\n    constrain v6 == u1 0\n    return\n}\nbrillig(inline) impure fn func_1 f1 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) impure fn func_2 f2 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f3 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f4 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f4(v0, v6) -> u1\n    v10 = call f3(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_1 f5 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}\nbrillig(inline) fn func_2 f6 {\n  b0(v0: u1, v1: u32):\n    v4 = eq v1, u32 0\n    jmpif v4 then: b1, else: b2\n  b1():\n    jmp b3(u1 0)\n  b2():\n    v6 = sub v1, u32 1\n    v8 = call f6(v0, v6) -> u1\n    v10 = call f5(v8, v6) -> u1\n    jmp b3(v10)\n  b3(v2: u1):\n    return v2\n}"}}
{"run_id":"1756391925-466950323","line":742,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_entry_point_called_from_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":742,"expression":"ssa_string"},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f2(v3, v4)\n    call f3(v4, v3)\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 2\ng1 = Field 3\ng2 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_inner_func_globals f1 {\n  b0(v3: Field, v4: Field):\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one_global f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn wrapper f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f5(v3, v4)\n    call f6(v4, v3)\n    return\n}\nbrillig(inline) fn entry_point_one_global f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    return\n}\nbrillig(inline) fn entry_point_one_diff_global f6 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756392063-674629020","line":983,"new":null,"old":null}
{"run_id":"1756392070-239144396","line":751,"new":null,"old":null}
{"run_id":"1756392070-239144396","line":857,"new":null,"old":null}
{"run_id":"1756392070-239144396","line":543,"new":null,"old":null}
{"run_id":"1756392070-239144396","line":637,"new":null,"old":null}
{"run_id":"1756392070-239144396","line":983,"new":null,"old":null}
{"run_id":"1756392140-582788204","line":999,"new":null,"old":null}
{"run_id":"1756392140-582788204","line":653,"new":null,"old":null}
{"run_id":"1756392140-582788204","line":873,"new":null,"old":null}
{"run_id":"1756392140-582788204","line":767,"new":null,"old":null}
{"run_id":"1756392140-582788204","line":559,"new":null,"old":null}
{"run_id":"1756393256-512603652","line":524,"new":null,"old":null}
{"run_id":"1756393256-512603652","line":964,"new":null,"old":null}
{"run_id":"1756393256-512603652","line":618,"new":null,"old":null}
{"run_id":"1756393256-512603652","line":732,"new":null,"old":null}
{"run_id":"1756393256-512603652","line":838,"new":null,"old":null}
{"run_id":"1756393728-142472916","line":838,"new":null,"old":null}
{"run_id":"1756393728-142472916","line":618,"new":null,"old":null}
{"run_id":"1756393728-142472916","line":964,"new":null,"old":null}
{"run_id":"1756393728-142472916","line":524,"new":null,"old":null}
{"run_id":"1756393728-142472916","line":732,"new":null,"old":null}
{"run_id":"1756393827-521401988","line":831,"new":null,"old":null}
{"run_id":"1756393827-521401988","line":957,"new":null,"old":null}
{"run_id":"1756393827-521401988","line":725,"new":null,"old":null}
{"run_id":"1756393827-521401988","line":611,"new":null,"old":null}
{"run_id":"1756393827-521401988","line":517,"new":null,"old":null}
{"run_id":"1756394104-7087857","line":648,"new":null,"old":null}
{"run_id":"1756394104-7087857","line":880,"new":null,"old":null}
{"run_id":"1756394104-7087857","line":534,"new":null,"old":null}
{"run_id":"1756394104-7087857","line":440,"new":null,"old":null}
{"run_id":"1756394104-7087857","line":754,"new":null,"old":null}
{"run_id":"1756394204-739833550","line":878,"new":null,"old":null}
{"run_id":"1756394204-739833550","line":752,"new":null,"old":null}
{"run_id":"1756394204-739833550","line":438,"new":null,"old":null}
{"run_id":"1756394204-739833550","line":532,"new":null,"old":null}
{"run_id":"1756394204-739833550","line":646,"new":null,"old":null}
{"run_id":"1756394706-981225808","line":642,"new":null,"old":null}
{"run_id":"1756394706-981225808","line":874,"new":null,"old":null}
{"run_id":"1756394706-981225808","line":437,"new":null,"old":null}
{"run_id":"1756394706-981225808","line":748,"new":null,"old":null}
{"run_id":"1756394706-981225808","line":531,"new":null,"old":null}
{"run_id":"1756395364-742657039","line":437,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"duplicate_inner_call_with_multiple_entry_points","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":437,"expression":"ssa_string"},"snapshot":"g0 = Field 1\ng1 = Field 2\ng2 = Field 3\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one f1 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_two f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    call f5(v3, v4)\n    return\n}\nbrillig(inline) fn inner_func f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn inner_func f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn inner_func f5 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 1\ng1 = Field 2\ng2 = Field 3\n\nacir(inline) fn main f0 {\n  b0(v3: Field, v4: Field):\n    call f1(v3, v4)\n    call f2(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_one f1 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 1, v3\n    v6 = add v5, v4\n    constrain v6 == Field 2\n    call f3(v3, v4)\n    return\n}\nbrillig(inline) fn entry_point_two f2 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 2, v3\n    v6 = add v5, v4\n    constrain v6 == Field 3\n    call f4(v3, v4)\n    return\n}\nbrillig(inline) fn inner_func f3 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}\nbrillig(inline) fn inner_func f4 {\n  b0(v3: Field, v4: Field):\n    v5 = add Field 3, v3\n    v6 = add v5, v4\n    constrain v6 == Field 4\n    return\n}"}}
{"run_id":"1756395408-751814112","line":437,"new":null,"old":null}
{"run_id":"1756395509-717214863","line":959,"new":null,"old":null}
{"run_id":"1756395509-717214863","line":1004,"new":null,"old":null}
{"run_id":"1756395883-187322468","line":872,"new":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","snapshot_name":"functions_reachable_from_single_entry_point_are_not_duplicated","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/brillig_entry_points.rs","assertion_line":872,"expression":"ssa_string"},"snapshot":"g0 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v1: Field):\n    call f1(v1)\n    return\n}\nbrillig(inline) fn entry_point f1 {\n  b0(v1: Field):\n    call f2(v1)\n    return\n}\nbrillig(inline) fn helper_func f2 {\n  b0(v1: Field):\n    v2 = add Field 1, v1\n    return\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__brillig_entry_points__tests","metadata":{},"snapshot":"g0 = Field 1\n\nacir(inline) fn main f0 {\n  b0(v1: Field):\n    call f1(v1)\n    return\n}\n\nbrillig(inline) fn entry_point f1 {\n  b0(v1: Field):\n    call f2(v1)\n    return\n}\n\nbrillig(inline) fn helper_func f2 {\n  b0(v1: Field):\n    v2 = add Field 1, v1\n    return\n}"}}
{"run_id":"1756396049-681207406","line":921,"new":null,"old":null}
