acir(inline) predicate_pure fn main f0 {
  b0(v0: u128, v1: u128, v2: u8):
    v3 = add v0, v1
    v5 = eq v3, u128 2358023
    constrain v3 == u128 2358023
    v6 = sub v1, v0
    v8 = eq v6, u128 2333333
    constrain v6 == u128 2333333
    v9 = mul v0, v1
    v11 = eq v9, u128 28957394910
    constrain v9 == u128 28957394910
    v12 = div v1, v0
    v14 = eq v12, u128 190
    constrain v12 == u128 190
    v15 = mod v1, v0
    v17 = eq v15, u128 128
    constrain v15 == u128 128
    v18 = not v0
    v20 = eq v18, u128 340282366920938463463374607431768199110
    constrain v18 == u128 340282366920938463463374607431768199110
    v21 = xor v0, v1
    v23 = eq v21, u128 2358007
    constrain v21 == u128 2358007
    v24 = and v0, v1
    v26 = eq v24, u128 8
    constrain v24 == u128 8
    v27 = or v0, v1
    v29 = eq v27, u128 2358015
    constrain v27 == u128 2358015
    v31 = call to_le_bits(v2) -> [u1; 8]
    v33 = array_get v31, index Field 7 -> u1
    v34 = not v33
    v35 = cast v33 as Field
    v36 = cast v34 as Field
    v38 = mul Field 2, v35
    v39 = add v38, v36
    v40 = mul v39, v39
    v41 = mul v40, Field 2
    v43 = array_get v31, index Field 6 -> u1
    v44 = not v43
    v45 = cast v43 as Field
    v46 = cast v44 as Field
    v47 = mul v41, v45
    v48 = mul v40, v46
    v49 = add v47, v48
    v50 = mul v49, v49
    v51 = mul v50, Field 2
    v53 = array_get v31, index Field 5 -> u1
    v54 = not v53
    v55 = cast v53 as Field
    v56 = cast v54 as Field
    v57 = mul v51, v55
    v58 = mul v50, v56
    v59 = add v57, v58
    v60 = mul v59, v59
    v61 = mul v60, Field 2
    v63 = array_get v31, index Field 4 -> u1
    v64 = not v63
    v65 = cast v63 as Field
    v66 = cast v64 as Field
    v67 = mul v61, v65
    v68 = mul v60, v66
    v69 = add v67, v68
    v70 = mul v69, v69
    v71 = mul v70, Field 2
    v73 = array_get v31, index Field 3 -> u1
    v74 = not v73
    v75 = cast v73 as Field
    v76 = cast v74 as Field
    v77 = mul v71, v75
    v78 = mul v70, v76
    v79 = add v77, v78
    v80 = mul v79, v79
    v81 = mul v80, Field 2
    v82 = array_get v31, index Field 2 -> u1
    v83 = not v82
    v84 = cast v82 as Field
    v85 = cast v83 as Field
    v86 = mul v81, v84
    v87 = mul v80, v85
    v88 = add v86, v87
    v89 = mul v88, v88
    v90 = mul v89, Field 2
    v92 = array_get v31, index Field 1 -> u1
    v93 = not v92
    v94 = cast v92 as Field
    v95 = cast v93 as Field
    v96 = mul v90, v94
    v97 = mul v89, v95
    v98 = add v96, v97
    v99 = mul v98, v98
    v100 = mul v99, Field 2
    v102 = array_get v31, index Field 0 -> u1
    v103 = not v102
    v104 = cast v102 as Field
    v105 = cast v103 as Field
    v106 = mul v100, v104
    v107 = mul v99, v105
    v108 = add v106, v107
    v110 = lt v2, u8 128
    v111 = not v110
    v112 = cast v110 as Field
    v113 = cast v111 as Field
    v114 = mul v112, v108
    v116 = mul v113, Field 340282366920938463463374607431768211455
    v117 = add v114, v116
    v118 = cast v117 as u128
    v119 = div v0, v118
    v121 = eq v119, u128 3086
    constrain v119 == u128 3086
    v122 = cast v110 as u128
    v123 = call to_le_bits(v2) -> [u1; 8]
    v124 = array_get v123, index Field 7 -> u1
    v125 = not v124
    v126 = cast v124 as Field
    v127 = cast v125 as Field
    v128 = mul Field 2, v126
    v129 = add v128, v127
    v130 = mul v129, v129
    v131 = mul v130, Field 2
    v132 = array_get v123, index Field 6 -> u1
    v133 = not v132
    v134 = cast v132 as Field
    v135 = cast v133 as Field
    v136 = mul v131, v134
    v137 = mul v130, v135
    v138 = add v136, v137
    v139 = mul v138, v138
    v140 = mul v139, Field 2
    v141 = array_get v123, index Field 5 -> u1
    v142 = not v141
    v143 = cast v141 as Field
    v144 = cast v142 as Field
    v145 = mul v140, v143
    v146 = mul v139, v144
    v147 = add v145, v146
    v148 = mul v147, v147
    v149 = mul v148, Field 2
    v150 = array_get v123, index Field 4 -> u1
    v151 = not v150
    v152 = cast v150 as Field
    v153 = cast v151 as Field
    v154 = mul v149, v152
    v155 = mul v148, v153
    v156 = add v154, v155
    v157 = mul v156, v156
    v158 = mul v157, Field 2
    v159 = array_get v123, index Field 3 -> u1
    v160 = not v159
    v161 = cast v159 as Field
    v162 = cast v160 as Field
    v163 = mul v158, v161
    v164 = mul v157, v162
    v165 = add v163, v164
    v166 = mul v165, v165
    v167 = mul v166, Field 2
    v168 = array_get v123, index Field 2 -> u1
    v169 = not v168
    v170 = cast v168 as Field
    v171 = cast v169 as Field
    v172 = mul v167, v170
    v173 = mul v166, v171
    v174 = add v172, v173
    v175 = mul v174, v174
    v176 = mul v175, Field 2
    v177 = array_get v123, index Field 1 -> u1
    v178 = not v177
    v179 = cast v177 as Field
    v180 = cast v178 as Field
    v181 = mul v176, v179
    v182 = mul v175, v180
    v183 = add v181, v182
    v184 = mul v183, v183
    v185 = mul v184, Field 2
    v186 = array_get v123, index Field 0 -> u1
    v187 = not v186
    v188 = cast v186 as Field
    v189 = cast v187 as Field
    v190 = mul v185, v188
    v191 = mul v184, v189
    v192 = add v190, v191
    v193 = cast v192 as u128
    v194 = unchecked_mul v122, v193
    v195 = cast v0 as Field
    v196 = cast v194 as Field
    v197 = mul v195, v196
    v198 = truncate v197 to 128 bits, max_bit_size: 254
    v199 = cast v198 as u128
    constrain v110 == u1 1, "attempt to bit-shift with overflow"
    v201 = truncate v199 to 128 bits, max_bit_size: 129
    v203 = eq v199, u128 49380
    constrain v199 == u128 49380
    v204 = lt v0, v1
    constrain v204 == u1 1
    v205 = lt v1, v0
    v206 = not v205
    constrain v205 == u1 0
    v208 = eq v0, v1
    v209 = not v208
    constrain v208 == u1 0
    constrain v204 == u1 1
    constrain v205 == u1 0
    return
}
