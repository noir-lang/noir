acir(inline) predicate_pure fn main f0 {
  b0(v0: u128, v1: u128, v2: u8):
    v3 = add v0, v1
    constrain v3 == u128 2358023
    v5 = sub v1, v0
    constrain v5 == u128 2333333
    v7 = mul v0, v1
    v9 = div v0, u128 18446744073709551616
    v10 = div v1, u128 18446744073709551616
    v11 = unchecked_mul v9, v10
    constrain v11 == u128 0, "attempt to multiply with overflow"
    constrain v7 == u128 28957394910
    v14 = div v1, v0
    constrain v14 == u128 190
    v16 = mod v1, v0
    constrain v16 == u128 128
    v18 = not v0
    constrain v18 == u128 340282366920938463463374607431768199110
    v20 = xor v0, v1
    constrain v20 == u128 2358007
    v22 = and v0, v1
    constrain v22 == u128 8
    v24 = or v0, v1
    constrain v24 == u128 2358015
    v27 = call to_le_bits(v2) -> [u1; 8]
    v29 = array_get v27, index Field 7 -> u1
    v30 = not v29
    v31 = cast v29 as Field
    v32 = cast v30 as Field
    v34 = mul Field 2, v31
    v35 = add v34, v32
    v36 = mul v35, v35
    v37 = mul v36, Field 2
    v39 = array_get v27, index Field 6 -> u1
    v40 = not v39
    v41 = cast v39 as Field
    v42 = cast v40 as Field
    v43 = mul v37, v41
    v44 = mul v36, v42
    v45 = add v43, v44
    v46 = mul v45, v45
    v47 = mul v46, Field 2
    v49 = array_get v27, index Field 5 -> u1
    v50 = not v49
    v51 = cast v49 as Field
    v52 = cast v50 as Field
    v53 = mul v47, v51
    v54 = mul v46, v52
    v55 = add v53, v54
    v56 = mul v55, v55
    v57 = mul v56, Field 2
    v59 = array_get v27, index Field 4 -> u1
    v60 = not v59
    v61 = cast v59 as Field
    v62 = cast v60 as Field
    v63 = mul v57, v61
    v64 = mul v56, v62
    v65 = add v63, v64
    v66 = mul v65, v65
    v67 = mul v66, Field 2
    v69 = array_get v27, index Field 3 -> u1
    v70 = not v69
    v71 = cast v69 as Field
    v72 = cast v70 as Field
    v73 = mul v67, v71
    v74 = mul v66, v72
    v75 = add v73, v74
    v76 = mul v75, v75
    v77 = mul v76, Field 2
    v78 = array_get v27, index Field 2 -> u1
    v79 = not v78
    v80 = cast v78 as Field
    v81 = cast v79 as Field
    v82 = mul v77, v80
    v83 = mul v76, v81
    v84 = add v82, v83
    v85 = mul v84, v84
    v86 = mul v85, Field 2
    v88 = array_get v27, index Field 1 -> u1
    v89 = not v88
    v90 = cast v88 as Field
    v91 = cast v89 as Field
    v92 = mul v86, v90
    v93 = mul v85, v91
    v94 = add v92, v93
    v95 = mul v94, v94
    v96 = mul v95, Field 2
    v98 = array_get v27, index Field 0 -> u1
    v99 = not v98
    v100 = cast v98 as Field
    v101 = cast v99 as Field
    v102 = mul v96, v100
    v103 = mul v95, v101
    v104 = add v102, v103
    v106 = lt v2, u8 128
    v107 = not v106
    v108 = cast v106 as Field
    v109 = cast v107 as Field
    v110 = mul v108, v104
    v112 = mul v109, Field 340282366920938463463374607431768211455
    v113 = add v110, v112
    v114 = cast v113 as u128
    v115 = div v0, v114
    constrain v115 == u128 3086
    v117 = cast v106 as u128
    v118 = cast v104 as u128
    v119 = unchecked_mul v117, v118
    v120 = cast v0 as Field
    v121 = cast v119 as Field
    v122 = mul v120, v121
    v123 = truncate v122 to 128 bits, max_bit_size: 254
    v124 = cast v123 as u128
    constrain v106 == u1 1, "attempt to bit-shift with overflow"
    constrain v124 == u128 49380
    v127 = lt v0, v1
    constrain v127 == u1 1
    v128 = lt v1, v0
    constrain v128 == u1 0
    constrain v0 != v1
    return
}
