{"run_id":"1745522007-314516620","line":577,"new":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","snapshot_name":"apply_inherits_caller_runtime","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/defunctionalize.rs","assertion_line":577,"expression":"mut_ssa"},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f4(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f4 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b3, else: b2\n  b1(v2: u32):\n    return v2\n  b2():\n    constrain v0 == Field 3\n    v9 = call f3(v1) -> u32\n    jmp b1(v9)\n  b3():\n    v6 = call f2(v1) -> u32\n    jmp b1(v6)\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","metadata":{},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f4(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f4 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    constrain v0 == Field 3\n    v9 = call f3(v1) -> u32\n    jmp b3(v9)\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n}"}}
{"run_id":"1745522386-366319398","line":584,"new":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","snapshot_name":"apply_inherits_caller_runtime","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/defunctionalize.rs","assertion_line":584,"expression":"mut_ssa"},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    constrain v12 == v13\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_two f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","metadata":{},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f4(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f4 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    constrain v0 == Field 3\n    v9 = call f3(v1) -> u32\n    jmp b3(v9)\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n}"}}
{"run_id":"1745522451-196741027","line":586,"new":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","snapshot_name":"apply_inherits_caller_runtime","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/defunctionalize.rs","assertion_line":586,"expression":"mut_ssa"},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    constrain v12 == v13\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_two f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","metadata":{},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f4(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_two f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f4 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    constrain v0 == Field 3\n    v9 = call f3(v1) -> u32\n    jmp b3(v9)\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n}"}}
{"run_id":"1745522494-860358144","line":586,"new":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","snapshot_name":"apply_inherits_caller_runtime","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/defunctionalize.rs","assertion_line":586,"expression":"mut_ssa"},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    constrain v12 == v13\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_two f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","metadata":{},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f4(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_two f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v3 = eq v0, Field 2\n    jmpif v3 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v4: u32):\n    return v4\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"}}
{"run_id":"1745522629-986000851","line":587,"new":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","snapshot_name":"apply_inherits_caller_runtime","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/defunctionalize.rs","assertion_line":587,"expression":"mut_ssa"},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    constrain v12 == v13\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","metadata":{},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"}}
{"run_id":"1745522658-254969830","line":587,"new":null,"old":null}
{"run_id":"1745522724-24542810","line":586,"new":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","snapshot_name":"apply_inherits_caller_runtime","metadata":{"source":"compiler/noirc_evaluator/src/ssa/opt/defunctionalize.rs","assertion_line":586,"expression":"mut_ssa"},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    constrain v12 == v13\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b3, else: b2\n  b1(v2: u32):\n    return v2\n  b2():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b3():\n    v6 = call f2(v1) -> u32\n    jmp b1(v6)\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b1(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b1(v10)\n}"},"old":{"module_name":"noirc_evaluator__ssa__opt__defunctionalize__tests","metadata":{},"snapshot":"brillig(inline) fn main f0 {\n  b0(v0: u32):\n    v3 = call f1(Field 2, v0) -> u32\n    v5 = add v0, u32 1\n    v6 = eq v3, v5\n    constrain v3 == v5\n    v8 = call f1(Field 3, v0) -> u32\n    v9 = add v0, u32 1\n    v10 = eq v8, v9\n    constrain v8 == v9\n    v12 = call f1(Field 4, v0) -> u32\n    v13 = add v0, u32 1\n    constrain v12 == v13\n    return\n}\nbrillig(inline) fn wrapper f1 {\n  b0(v0: Field, v1: u32):\n    v3 = call f5(v0, v1) -> u32\n    return v3\n}\nbrillig(inline) fn increment f2 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_acir f3 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline) fn increment_three f4 {\n  b0(v0: u32):\n    v2 = add v0, u32 1\n    return v2\n}\nbrillig(inline_always) fn apply f5 {\n  b0(v0: Field, v1: u32):\n    v4 = eq v0, Field 2\n    jmpif v4 then: b2, else: b1\n  b1():\n    v8 = eq v0, Field 3\n    jmpif v8 then: b5, else: b4\n  b2():\n    v6 = call f2(v1) -> u32\n    jmp b3(v6)\n  b3(v2: u32):\n    return v2\n  b4():\n    constrain v0 == Field 4\n    v13 = call f4(v1) -> u32\n    jmp b3(v13)\n  b5():\n    v10 = call f3(v1) -> u32\n    jmp b3(v10)\n}"}}
{"run_id":"1745522805-209653504","line":586,"new":null,"old":null}
