Compiled ACIR for main (unoptimized):
current witness index : 100
public parameters indices : []
return value indices : []
BLACKBOX::RANGE [(_1, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_2, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_3, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_4, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_5, num_bits: 8)] [ ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(7)), Simple(Witness(8))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 255, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 255, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 255, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_7, num_bits: 190)] [ ]
BLACKBOX::RANGE [(_8, num_bits: 64)] [ ]
EXPR [ (1, _6) (-2⁶⁴, _7) (-1, _8) 0 ]
EXPR [ (1, _7) (-1, _9) -1186564023676924939888766319973246049704924238154051448977 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 })]
outputs: [Simple(Witness(10))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _9, _10) (1, _11) -1 ]
EXPR [ (1, _9, _11) 0 ]
EXPR [ (-1, _8, _11) (2¹⁶×74637766815744, _11) (-1, _12) 0 ]
BLACKBOX::RANGE [(_12, num_bits: 65)] [ ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551621 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(13)), Simple(Witness(14))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_14, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _13) (-1, _14) 18446744073709551621 ]
EXPR [ (-1, _13) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })]
outputs: [Simple(Witness(15)), Simple(Witness(16))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 5, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 5, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 5, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_15, num_bits: 3)] [ ]
EXPR [ (1, _16, _16) (-1, _16) 0 ]
EXPR [ (1, _1) (-2, _15) (-1, _16) 0 ]
EXPR [ (-1, _17) 15 ]
BLACKBOX::AND [(_1, num_bits: 8), (_17, num_bits: 8)] [ _18]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(19)), Simple(Witness(20))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_19, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_20, num_bits: 4)] [ ]
EXPR [ (1, _18) (-2⁴, _19) (-1, _20) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551617 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(21)), Simple(Witness(22))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _21, _21) (-1, _21) 0 ]
BLACKBOX::RANGE [(_22, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _21) (-1, _22) 18446744073709551617 ]
EXPR [ (-1, _21) (-1, _23) 1 ]
BLACKBOX::AND [(_2, num_bits: 8), (_17, num_bits: 8)] [ _24]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(25)), Simple(Witness(26))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_25, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_26, num_bits: 4)] [ ]
EXPR [ (1, _24) (-2⁴, _25) (-1, _26) 0 ]
EXPR [ (-1, _23) (-1, _27) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551618 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(28)), Simple(Witness(29))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _28, _28) (-1, _28) 0 ]
BLACKBOX::RANGE [(_29, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _28) (-1, _29) 18446744073709551618 ]
EXPR [ (-1, _28) (-1, _30) 1 ]
BLACKBOX::AND [(_3, num_bits: 8), (_17, num_bits: 8)] [ _31]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(32)), Simple(Witness(33))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_32, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_33, num_bits: 4)] [ ]
EXPR [ (1, _31) (-2⁴, _32) (-1, _33) 0 ]
EXPR [ (1, _20, _23) (1, _20, _27) (-1, _34) 0 ]
EXPR [ (-1, _30) (-1, _35) 1 ]
EXPR [ (1, _2, _23) (-1, _36) 0 ]
EXPR [ (1, _23, _26) (-1, _37) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551619 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(38)), Simple(Witness(39))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _38, _38) (-1, _38) 0 ]
BLACKBOX::RANGE [(_39, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _38) (-1, _39) 18446744073709551619 ]
EXPR [ (-1, _38) (-1, _40) 1 ]
EXPR [ (1, _30, _34) (1, _34, _35) (-1, _41) 0 ]
EXPR [ (-1, _40) (-1, _42) 1 ]
EXPR [ (1, _30, _36) (1, _35, _36) (-1, _43) 0 ]
EXPR [ (1, _30, _37) (1, _35, _37) (-1, _44) 0 ]
EXPR [ (1, _3, _30) (-1, _45) 0 ]
EXPR [ (1, _30, _33) (-1, _46) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551620 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(47)), Simple(Witness(48))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _47, _47) (-1, _47) 0 ]
BLACKBOX::RANGE [(_48, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _47) (-1, _48) 18446744073709551620 ]
EXPR [ (-1, _47) (-1, _49) 1 ]
EXPR [ (1, _40, _41) (1, _41, _42) (-1, _50) 0 ]
EXPR [ (-1, _49) (-1, _51) 1 ]
EXPR [ (1, _40, _43) (1, _42, _43) (-1, _52) 0 ]
EXPR [ (1, _40, _44) (1, _42, _44) (-1, _53) 0 ]
EXPR [ (1, _40, _45) (1, _42, _45) (-1, _54) 0 ]
EXPR [ (1, _40, _46) (1, _42, _46) (-1, _55) 0 ]
EXPR [ (1, _8) (-1, _56) -1 ]
EXPR [ (-1, _16) (-1, _57) 1 ]
EXPR [ (1, _56, _57) (-1, _58) 0 ]
BLACKBOX::RANGE [(_58, num_bits: 64)] [ ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(56))], q_c: 2⁶⁴ }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(59)), Simple(Witness(60))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _59, _59) (-1, _59) 0 ]
BLACKBOX::RANGE [(_60, num_bits: 64)] [ ]
EXPR [ (-1, _56) (-2⁶⁴, _59) (-1, _60) 2⁶⁴ ]
EXPR [ (-1, _59) (-1, _61) 1 ]
BLACKBOX::AND [(_2, num_bits: 8), (_17, num_bits: 8)] [ _62]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(63)), Simple(Witness(64))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_63, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_64, num_bits: 4)] [ ]
EXPR [ (1, _62) (-2⁴, _63) (-1, _64) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(56))], q_c: 18446744073709551617 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(65)), Simple(Witness(66))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _65, _65) (-1, _65) 0 ]
BLACKBOX::RANGE [(_66, num_bits: 64)] [ ]
EXPR [ (-1, _56) (-2⁶⁴, _65) (-1, _66) 18446744073709551617 ]
EXPR [ (-1, _65) (-1, _67) 1 ]
BLACKBOX::AND [(_3, num_bits: 8), (_17, num_bits: 8)] [ _68]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(69)), Simple(Witness(70))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_69, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_70, num_bits: 4)] [ ]
EXPR [ (1, _68) (-2⁴, _69) (-1, _70) 0 ]
EXPR [ (1, _2, _61) (-1, _71) 0 ]
EXPR [ (-1, _67) (-1, _72) 1 ]
EXPR [ (1, _61, _64) (-1, _73) 0 ]
EXPR [ (1, _49, _50) (1, _50, _51) (-1, _74) 0 ]
EXPR [ (1, _67, _71) (1, _71, _72) (-1, _75) 0 ]
EXPR [ (1, _49, _52) (1, _51, _52) (-1, _76) 0 ]
EXPR [ (1, _67, _73) (1, _72, _73) (-1, _77) 0 ]
EXPR [ (1, _49, _53) (1, _51, _53) (-1, _78) 0 ]
EXPR [ (1, _3, _67) (-1, _79) 0 ]
EXPR [ (1, _49, _54) (1, _51, _54) (-1, _80) 0 ]
EXPR [ (1, _67, _70) (-1, _81) 0 ]
EXPR [ (1, _49, _55) (1, _51, _55) (-1, _82) 0 ]
EXPR [ (2, _6) (1, _16) -7 ]
EXPR [ (-1, _16, _74) (-1, _57, _75) (-1, _83) 15 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(83))], q_c: 0 })]
outputs: [Simple(Witness(84))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _83, _84) (1, _85) -1 ]
EXPR [ (1, _83, _85) 0 ]
EXPR [ (-1, _16, _76) (-1, _57, _77) (-1, _86) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 })]
outputs: [Simple(Witness(87))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _86, _87) (1, _88) -1 ]
EXPR [ (1, _86, _88) 0 ]
EXPR [ (-1, _16, _78) (-1, _57, _79) (-1, _89) 12 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(89))], q_c: 0 })]
outputs: [Simple(Witness(90))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _89, _90) (1, _91) -1 ]
EXPR [ (1, _89, _91) 0 ]
EXPR [ (1, _85, _88) (-1, _92) 0 ]
EXPR [ (-1, _16, _80) (-1, _57, _81) (-1, _93) 11 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 })]
outputs: [Simple(Witness(94))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _93, _94) (1, _95) -1 ]
EXPR [ (1, _93, _95) 0 ]
EXPR [ (1, _91, _92) (-1, _96) 0 ]
EXPR [ (-1, _16, _82) (-1, _97) 8 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(97))], q_c: 0 })]
outputs: [Simple(Witness(98))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _97, _98) (1, _99) -1 ]
EXPR [ (1, _97, _99) 0 ]
EXPR [ (1, _95, _96) (-1, _100) 0 ]
EXPR [ (1, _99, _100) -1 ]

