Compiled ACIR for main (unoptimized):
current witness index : 132
public parameters indices : []
return value indices : []
BLACKBOX::RANGE [(_1, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_2, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_3, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_4, num_bits: 8)] [ ]
BLACKBOX::RANGE [(_5, num_bits: 8)] [ ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(7)), Simple(Witness(8))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 255, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 255, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 255, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_7, num_bits: 190)] [ ]
BLACKBOX::RANGE [(_8, num_bits: 64)] [ ]
EXPR [ (1, _6) (-2⁶⁴, _7) (-1, _8) 0 ]
EXPR [ (1, _7) (-1, _9) -1186564023676924939888766319973246049704924238154051448977 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 })]
outputs: [Simple(Witness(10))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _9, _10) (1, _11) -1 ]
EXPR [ (1, _9, _11) 0 ]
EXPR [ (-1, _8, _11) (2¹⁶×74637766815744, _11) (-1, _12) 0 ]
BLACKBOX::RANGE [(_12, num_bits: 65)] [ ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551621 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(13)), Simple(Witness(14))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_14, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _13) (-1, _14) 18446744073709551621 ]
EXPR [ (-1, _13) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(15)), Simple(Witness(16))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_15, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_16, num_bits: 4)] [ ]
EXPR [ (1, _1) (-2⁴, _15) (-1, _16) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(17)), Simple(Witness(18))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_17, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_18, num_bits: 4)] [ ]
EXPR [ (1, _15) (-2⁴, _17) (-1, _18) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })]
outputs: [Simple(Witness(19)), Simple(Witness(20))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 5, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 5, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 5, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_19, num_bits: 3)] [ ]
EXPR [ (1, _20, _20) (-1, _20) 0 ]
EXPR [ (1, _18) (-2, _19) (-1, _20) 0 ]
EXPR [ (-1, _21) 15 ]
BLACKBOX::AND [(_1, num_bits: 8), (_21, num_bits: 8)] [ _22]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(23)), Simple(Witness(24))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_23, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_24, num_bits: 4)] [ ]
EXPR [ (1, _22) (-2⁴, _23) (-1, _24) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551617 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(25)), Simple(Witness(26))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _25, _25) (-1, _25) 0 ]
BLACKBOX::RANGE [(_26, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _25) (-1, _26) 18446744073709551617 ]
EXPR [ (-1, _25) (-1, _27) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(28)), Simple(Witness(29))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_28, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_29, num_bits: 5)] [ ]
EXPR [ (1, _20, _27) (1, _29) (-1, _30) 15 ]
BLACKBOX::RANGE [(_30, num_bits: 5)] [ ]
EXPR [ (2⁴, _28) (1, _29) (-1, _31) 0 ]
EXPR [ (1, _20, _27) (-1, _32) 0 ]
EXPR [ (1, _2, _32) (-1, _31, _32) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(33)), Simple(Witness(34))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_33, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_34, num_bits: 4)] [ ]
EXPR [ (1, _28) (-2⁴, _33) (-1, _34) 0 ]
BLACKBOX::AND [(_2, num_bits: 8), (_21, num_bits: 8)] [ _35]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(36)), Simple(Witness(37))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_36, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_37, num_bits: 4)] [ ]
EXPR [ (1, _35) (-2⁴, _36) (-1, _37) 0 ]
EXPR [ (-1, _27) (-1, _38) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551618 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(39)), Simple(Witness(40))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _39, _39) (-1, _39) 0 ]
BLACKBOX::RANGE [(_40, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _39) (-1, _40) 18446744073709551618 ]
EXPR [ (-1, _39) (-1, _41) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(42)), Simple(Witness(43))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_42, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_43, num_bits: 5)] [ ]
EXPR [ (1, _20, _41) (1, _43) (-1, _44) 15 ]
BLACKBOX::RANGE [(_44, num_bits: 5)] [ ]
EXPR [ (2⁴, _42) (1, _43) (-1, _45) 0 ]
EXPR [ (1, _20, _41) (-1, _46) 0 ]
EXPR [ (1, _3, _46) (-1, _45, _46) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(42))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(47)), Simple(Witness(48))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_47, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_48, num_bits: 4)] [ ]
EXPR [ (1, _42) (-2⁴, _47) (-1, _48) 0 ]
BLACKBOX::AND [(_3, num_bits: 8), (_21, num_bits: 8)] [ _49]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(50)), Simple(Witness(51))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_50, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_51, num_bits: 4)] [ ]
EXPR [ (1, _49) (-2⁴, _50) (-1, _51) 0 ]
EXPR [ (1, _24, _27) (1, _24, _38) (-1, _52) 0 ]
EXPR [ (-1, _41) (-1, _53) 1 ]
EXPR [ (1, _27, _34) (-1, _54) 0 ]
EXPR [ (1, _27, _37) (-1, _55) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551619 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(56)), Simple(Witness(57))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _56, _56) (-1, _56) 0 ]
BLACKBOX::RANGE [(_57, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _56) (-1, _57) 18446744073709551619 ]
EXPR [ (-1, _56) (-1, _58) 1 ]
EXPR [ (1, _41, _52) (1, _52, _53) (-1, _59) 0 ]
EXPR [ (-1, _58) (-1, _60) 1 ]
EXPR [ (1, _41, _54) (1, _53, _54) (-1, _61) 0 ]
EXPR [ (1, _41, _55) (1, _53, _55) (-1, _62) 0 ]
EXPR [ (1, _41, _48) (-1, _63) 0 ]
EXPR [ (1, _41, _51) (-1, _64) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 18446744073709551620 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(65)), Simple(Witness(66))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _65, _65) (-1, _65) 0 ]
BLACKBOX::RANGE [(_66, num_bits: 64)] [ ]
EXPR [ (-1, _8) (-2⁶⁴, _65) (-1, _66) 18446744073709551620 ]
EXPR [ (-1, _65) (-1, _67) 1 ]
EXPR [ (1, _58, _59) (1, _59, _60) (-1, _68) 0 ]
EXPR [ (-1, _67) (-1, _69) 1 ]
EXPR [ (1, _58, _61) (1, _60, _61) (-1, _70) 0 ]
EXPR [ (1, _58, _62) (1, _60, _62) (-1, _71) 0 ]
EXPR [ (1, _58, _63) (1, _60, _63) (-1, _72) 0 ]
EXPR [ (1, _58, _64) (1, _60, _64) (-1, _73) 0 ]
EXPR [ (1, _8) (-1, _74) -1 ]
EXPR [ (-1, _20) (-1, _75) 1 ]
EXPR [ (1, _74, _75) (-1, _76) 0 ]
BLACKBOX::RANGE [(_76, num_bits: 64)] [ ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(74))], q_c: 2⁶⁴ }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(77)), Simple(Witness(78))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _77, _77) (-1, _77) 0 ]
BLACKBOX::RANGE [(_78, num_bits: 64)] [ ]
EXPR [ (-1, _74) (-2⁶⁴, _77) (-1, _78) 2⁶⁴ ]
EXPR [ (-1, _77) (-1, _79) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(80)), Simple(Witness(81))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_80, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_81, num_bits: 5)] [ ]
EXPR [ (1, _75, _79) (1, _81) (-1, _82) 15 ]
BLACKBOX::RANGE [(_82, num_bits: 5)] [ ]
EXPR [ (2⁴, _80) (1, _81) (-1, _83) 0 ]
EXPR [ (1, _75, _79) (-1, _84) 0 ]
EXPR [ (1, _2, _84) (-1, _83, _84) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(85)), Simple(Witness(86))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_85, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_86, num_bits: 4)] [ ]
EXPR [ (1, _80) (-2⁴, _85) (-1, _86) 0 ]
BLACKBOX::AND [(_2, num_bits: 8), (_21, num_bits: 8)] [ _87]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(88)), Simple(Witness(89))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_88, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_89, num_bits: 4)] [ ]
EXPR [ (1, _87) (-2⁴, _88) (-1, _89) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(74))], q_c: 18446744073709551617 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁶⁴ })]
outputs: [Simple(Witness(90)), Simple(Witness(91))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 66, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 66, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

EXPR [ (1, _90, _90) (-1, _90) 0 ]
BLACKBOX::RANGE [(_91, num_bits: 64)] [ ]
EXPR [ (-1, _74) (-2⁶⁴, _90) (-1, _91) 18446744073709551617 ]
EXPR [ (-1, _90) (-1, _92) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(93)), Simple(Witness(94))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_93, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_94, num_bits: 5)] [ ]
EXPR [ (1, _75, _92) (1, _94) (-1, _95) 15 ]
BLACKBOX::RANGE [(_95, num_bits: 5)] [ ]
EXPR [ (2⁴, _93) (1, _94) (-1, _96) 0 ]
EXPR [ (1, _75, _92) (-1, _97) 0 ]
EXPR [ (1, _3, _97) (-1, _96, _97) 0 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(98)), Simple(Witness(99))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_98, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_99, num_bits: 4)] [ ]
EXPR [ (1, _93) (-2⁴, _98) (-1, _99) 0 ]
BLACKBOX::AND [(_3, num_bits: 8), (_21, num_bits: 8)] [ _100]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(100))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2⁴ })]
outputs: [Simple(Witness(101)), Simple(Witness(102))]
[BinaryIntOp { destination: RegisterIndex(2), op: UnsignedDiv, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Mul, bit_size: 9, lhs: RegisterIndex(2), rhs: RegisterIndex(1) }, BinaryIntOp { destination: RegisterIndex(1), op: Sub, bit_size: 9, lhs: RegisterIndex(0), rhs: RegisterIndex(1) }, Mov { destination: RegisterIndex(0), source: RegisterIndex(2) }, Stop]

BLACKBOX::RANGE [(_101, num_bits: 4)] [ ]
BLACKBOX::RANGE [(_102, num_bits: 4)] [ ]
EXPR [ (1, _100) (-2⁴, _101) (-1, _102) 0 ]
EXPR [ (1, _79, _86) (-1, _103) 0 ]
EXPR [ (-1, _92) (-1, _104) 1 ]
EXPR [ (1, _79, _89) (-1, _105) 0 ]
EXPR [ (1, _67, _68) (1, _68, _69) (-1, _106) 0 ]
EXPR [ (1, _92, _103) (1, _103, _104) (-1, _107) 0 ]
EXPR [ (1, _67, _70) (1, _69, _70) (-1, _108) 0 ]
EXPR [ (1, _92, _105) (1, _104, _105) (-1, _109) 0 ]
EXPR [ (1, _67, _71) (1, _69, _71) (-1, _110) 0 ]
EXPR [ (1, _92, _99) (-1, _111) 0 ]
EXPR [ (1, _67, _72) (1, _69, _72) (-1, _112) 0 ]
EXPR [ (1, _92, _102) (-1, _113) 0 ]
EXPR [ (1, _67, _73) (1, _69, _73) (-1, _114) 0 ]
EXPR [ (2, _6) (1, _20) -7 ]
EXPR [ (-1, _20, _106) (-1, _75, _107) (-1, _115) 15 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(115))], q_c: 0 })]
outputs: [Simple(Witness(116))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _115, _116) (1, _117) -1 ]
EXPR [ (1, _115, _117) 0 ]
EXPR [ (-1, _20, _108) (-1, _75, _109) (-1, _118) 1 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(118))], q_c: 0 })]
outputs: [Simple(Witness(119))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _118, _119) (1, _120) -1 ]
EXPR [ (1, _118, _120) 0 ]
EXPR [ (-1, _20, _110) (-1, _75, _111) (-1, _121) 12 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(121))], q_c: 0 })]
outputs: [Simple(Witness(122))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _121, _122) (1, _123) -1 ]
EXPR [ (1, _121, _123) 0 ]
EXPR [ (1, _117, _120) (-1, _124) 0 ]
EXPR [ (-1, _20, _112) (-1, _75, _113) (-1, _125) 11 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: 0 })]
outputs: [Simple(Witness(126))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _125, _126) (1, _127) -1 ]
EXPR [ (1, _125, _127) 0 ]
EXPR [ (1, _123, _124) (-1, _128) 0 ]
EXPR [ (-1, _20, _114) (-1, _129) 8 ]
BRILLIG: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 })]
outputs: [Simple(Witness(130))]
[JumpIfNot { condition: RegisterIndex(0), location: 3 }, Const { destination: RegisterIndex(1), value: Value { inner: 1 } }, BinaryFieldOp { destination: RegisterIndex(0), op: Div, lhs: RegisterIndex(1), rhs: RegisterIndex(0) }, Stop]

EXPR [ (1, _129, _130) (1, _131) -1 ]
EXPR [ (1, _129, _131) 0 ]
EXPR [ (1, _127, _128) (-1, _132) 0 ]
EXPR [ (1, _131, _132) -1 ]

