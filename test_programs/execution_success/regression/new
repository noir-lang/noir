Initial SSA:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    v3, v4 = call f1(v0, v1)
    inc_rc v3
    inc_rc v3
    v6 = eq v4, Field 5
    constrain v4 == Field 5
    v10 = array_get v3, index Field 0
    v11 = array_get v3, index Field 1
    v13 = array_get v3, index Field 2
    v15 = array_get v3, index Field 3
    v17 = array_get v3, index Field 4
    v25 = allocate
    store u1 1 at v25
    jmp b1(Field 0)
  b1(v26: Field):
    v27 = lt v26, Field 5
    jmpif v27 then: b2, else: b3
  b2():
    v28 = array_get [v10, v11, v13, v15, v17], index v26
    v29 = array_get [u4 15, u4 1, u4 12, u4 11, u4 8], index v26
    v30 = eq v28, v29
    v31 = load v25
    v32 = mul v31, v30
    store v32 at v25
    v33 = add v26, Field 1
    jmp b1(v33)
  b3():
    v34 = load v25
    constrain v34 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v57, v58 = call f2([u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], Field 20)
    inc_rc v57
    v61 = allocate
    store u1 1 at v61
    jmp b4(Field 0)
  b4(v62: Field):
    v64 = lt v62, Field 2⁵
    jmpif v64 then: b5, else: b6
  b5():
    v65 = array_get v57, index v62
    v66 = array_get [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v62
    v67 = eq v65, v66
    v68 = load v61
    v69 = mul v68, v67
    store v69 at v61
    v70 = add v62, Field 1
    jmp b4(v70)
  b6():
    v71 = load v61
    constrain v71 == u1 1
    v73 = eq v58, Field 21
    constrain v58 == Field 21
    v75 = call f3()
    v77 = eq v75, u64 1
    constrain v75 == u64 1
    v79 = call f4()
    v81 = eq v79, u64 2⁴
    constrain v79 == u64 2⁴
    v84 = call f5(u64 0)
    v85 = eq v84, u64 1
    constrain v84 == u64 1
    v88 = call f5(u64 4)
    v89 = eq v88, u64 2⁴
    constrain v88 == u64 2⁴
    return 
}
acir fn compact_decode f1 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    v11 = truncate v1 to 64 bits, max_bit_size: 254
    v12 = cast v11 as u64
    inc_rc v0
    v13 = lt u64 5, v12
    v14 = not v13
    constrain v13 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v18 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v18
    v20 = array_get v0, index Field 0
    v31 = div v20, Field 2⁴
    v32 = cast v20 as u4
    v33 = truncate v32 to 1 bits, max_bit_size: 4
    v34 = cast v33 as u1
    jmpif v34 then: b1, else: b2
  b1():
    v35 = load v18
    v36 = array_get v0, index Field 0
    v38 = and v36, u8 15
    v39 = truncate v38 to 4 bits, max_bit_size: 8
    v40 = cast v39 as u4
    v41 = array_set v35, index Field 0, value v40
    store v41 at v18
    inc_rc v0
    jmp b3(Field 1)
  b3(v42: Field):
    v43 = lt v42, Field 5
    jmpif v43 then: b4, else: b5
  b4():
    v44 = truncate v42 to 64 bits, max_bit_size: 254
    v45 = cast v44 as u64
    v46 = truncate v1 to 64 bits, max_bit_size: 254
    v47 = cast v46 as u64
    v48 = lt v45, v47
    jmpif v48 then: b6, else: b7
  b6():
    v49 = array_get v0, index v42
    v50 = load v18
    v51 = mul Field 2, v42
    v52 = sub v51, Field 1
    v54 = div v49, Field 2⁴
    v55 = cast v49 as u4
    v56 = array_set v50, index v52, value v55
    v57 = add v52, Field 1
    store v56 at v18
    v58 = load v18
    v59 = mul Field 2, v42
    v60 = and v49, u8 15
    v61 = truncate v60 to 4 bits, max_bit_size: 8
    v62 = cast v61 as u4
    v63 = array_set v58, index v59, value v62
    v64 = add v59, Field 1
    store v63 at v18
    jmp b7()
  b7():
    v65 = add v42, Field 1
    jmp b3(v65)
  b5():
    jmp b8()
  b8():
    v92 = load v18
    v93 = mul Field 2, v1
    v94 = cast v34 as Field
    v95 = add v93, v94
    v96 = sub v95, Field 2
    inc_rc v92
    return v92, v96
  b2():
    jmp b9(u64 0)
  b9(v66: u64):
    v68 = lt v66, u64 2
    jmpif v68 then: b10, else: b11
  b10():
    v69 = truncate v1 to 64 bits, max_bit_size: 254
    v70 = cast v69 as u64
    v72 = sub v70, u64 1
    range_check v72 to 64 bits
    v73 = lt v66, v72
    jmpif v73 then: b12, else: b13
  b12():
    v74 = add v66, u64 1
    range_check v74 to 64 bits
    v75 = array_get v0, index v74
    v76 = load v18
    v77 = mul u64 2, v66
    range_check v77 to 64 bits
    v79 = div v75, Field 2⁴
    v80 = cast v75 as u4
    v81 = array_set v76, index v77, value v80
    v82 = add v77, Field 1
    store v81 at v18
    v83 = load v18
    v84 = mul u64 2, v66
    range_check v84 to 64 bits
    v85 = add v84, u64 1
    range_check v85 to 64 bits
    v86 = and v75, u8 15
    v87 = truncate v86 to 4 bits, max_bit_size: 8
    v88 = cast v87 as u4
    v89 = array_set v83, index v85, value v88
    v90 = add v85, Field 1
    store v89 at v18
    jmp b13()
  b13():
    v91 = add v66, Field 1
    jmp b9(v91)
  b11():
    jmp b8()
}
acir fn enc f2 {
  b0(v0: [u8; 32], v1: Field):
    inc_rc v0
    v5 = truncate v1 to 8 bits, max_bit_size: 254
    v6 = cast v5 as u8
    v7 = lt u8 2⁵, v6
    v8 = not v7
    constrain v7 == u1 0
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v13 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v13
    v15 = eq v1, Field 0
    jmpif v15 then: b1, else: b2
  b1():
    v16 = load v13
    inc_rc v16
    jmp b3(v16, v1)
  b3(v41: [u8; 32], v42: Field):
    return v41, v42
  b2():
    v17 = truncate v1 to 8 bits, max_bit_size: 254
    v18 = cast v17 as u8
    v20 = lt v18, u8 31
    jmpif v20 then: b4, else: b5
  b4():
    v21 = load v13
    v23 = truncate v1 to 8 bits, max_bit_size: 254
    v24 = cast v23 as u8
    v25 = add u8 2⁷, v24
    range_check v25 to 8 bits
    v27 = array_set v21, index Field 0, value v25
    store v27 at v13
    inc_rc v0
    jmp b6(Field 1)
  b6(v28: Field):
    v29 = lt v28, Field 2⁵
    jmpif v29 then: b7, else: b8
  b7():
    v30 = load v13
    v31 = sub v28, Field 1
    v32 = array_get v0, index v31
    v33 = array_set v30, index v28, value v32
    v34 = add v28, Field 1
    store v33 at v13
    v35 = add v28, Field 1
    jmp b6(v35)
  b8():
    v36 = load v13
    v37 = add v1, Field 1
    inc_rc v36
    jmp b9(v36, v37)
  b9(v39: [u8; 32], v40: Field):
    jmp b3(v39, v40)
  b5():
    v38 = load v13
    inc_rc v38
    jmp b9(v38, Field 2⁵)
}
acir fn bitshift_literal_0 f3 {
  b0():
    v1 = allocate
    store u64 0 at v1
    v2 = load v1
    v7 = or v2, u64 1
    store v7 at v1
    v8 = load v1
    return v8
}
acir fn bitshift_literal_4 f4 {
  b0():
    v1 = allocate
    store u64 0 at v1
    v2 = load v1
    v9 = or v2, u64 2⁴
    store v9 at v1
    v10 = load v1
    return v10
}
acir fn bitshift_variable f5 {
  b0(v0: u64):
    v2 = allocate
    store u64 0 at v2
    v3 = load v2
    v7 = lt v0, u64 2⁶
    v9 = cast v7 as u64
    v12, v13 = call to_le_bits(v0, Field 2⁶)
    v16 = array_get v13, index Field 63
    v17 = mul Field 2, v16
    v18 = sub Field 1, v16
    v19 = add v17, v18
    v20 = mul v19, v19
    v21 = mul v20, Field 2
    v23 = array_get v13, index Field 62
    v24 = mul v21, v23
    v25 = sub Field 1, v23
    v26 = mul v25, v20
    v27 = add v24, v26
    v28 = mul v27, v27
    v29 = mul v28, Field 2
    v31 = array_get v13, index Field 61
    v32 = mul v29, v31
    v33 = sub Field 1, v31
    v34 = mul v33, v28
    v35 = add v32, v34
    v36 = mul v35, v35
    v37 = mul v36, Field 2
    v39 = array_get v13, index Field 60
    v40 = mul v37, v39
    v41 = sub Field 1, v39
    v42 = mul v41, v36
    v43 = add v40, v42
    v44 = mul v43, v43
    v45 = mul v44, Field 2
    v47 = array_get v13, index Field 59
    v48 = mul v45, v47
    v49 = sub Field 1, v47
    v50 = mul v49, v44
    v51 = add v48, v50
    v52 = mul v51, v51
    v53 = mul v52, Field 2
    v55 = array_get v13, index Field 58
    v56 = mul v53, v55
    v57 = sub Field 1, v55
    v58 = mul v57, v52
    v59 = add v56, v58
    v60 = mul v59, v59
    v61 = mul v60, Field 2
    v63 = array_get v13, index Field 57
    v64 = mul v61, v63
    v65 = sub Field 1, v63
    v66 = mul v65, v60
    v67 = add v64, v66
    v68 = mul v67, v67
    v69 = mul v68, Field 2
    v71 = array_get v13, index Field 56
    v72 = mul v69, v71
    v73 = sub Field 1, v71
    v74 = mul v73, v68
    v75 = add v72, v74
    v76 = mul v75, v75
    v77 = mul v76, Field 2
    v79 = array_get v13, index Field 55
    v80 = mul v77, v79
    v81 = sub Field 1, v79
    v82 = mul v81, v76
    v83 = add v80, v82
    v84 = mul v83, v83
    v85 = mul v84, Field 2
    v87 = array_get v13, index Field 54
    v88 = mul v85, v87
    v89 = sub Field 1, v87
    v90 = mul v89, v84
    v91 = add v88, v90
    v92 = mul v91, v91
    v93 = mul v92, Field 2
    v95 = array_get v13, index Field 53
    v96 = mul v93, v95
    v97 = sub Field 1, v95
    v98 = mul v97, v92
    v99 = add v96, v98
    v100 = mul v99, v99
    v101 = mul v100, Field 2
    v103 = array_get v13, index Field 52
    v104 = mul v101, v103
    v105 = sub Field 1, v103
    v106 = mul v105, v100
    v107 = add v104, v106
    v108 = mul v107, v107
    v109 = mul v108, Field 2
    v111 = array_get v13, index Field 51
    v112 = mul v109, v111
    v113 = sub Field 1, v111
    v114 = mul v113, v108
    v115 = add v112, v114
    v116 = mul v115, v115
    v117 = mul v116, Field 2
    v119 = array_get v13, index Field 50
    v120 = mul v117, v119
    v121 = sub Field 1, v119
    v122 = mul v121, v116
    v123 = add v120, v122
    v124 = mul v123, v123
    v125 = mul v124, Field 2
    v127 = array_get v13, index Field 49
    v128 = mul v125, v127
    v129 = sub Field 1, v127
    v130 = mul v129, v124
    v131 = add v128, v130
    v132 = mul v131, v131
    v133 = mul v132, Field 2
    v135 = array_get v13, index Field 2⁴×3
    v136 = mul v133, v135
    v137 = sub Field 1, v135
    v138 = mul v137, v132
    v139 = add v136, v138
    v140 = mul v139, v139
    v141 = mul v140, Field 2
    v143 = array_get v13, index Field 47
    v144 = mul v141, v143
    v145 = sub Field 1, v143
    v146 = mul v145, v140
    v147 = add v144, v146
    v148 = mul v147, v147
    v149 = mul v148, Field 2
    v151 = array_get v13, index Field 46
    v152 = mul v149, v151
    v153 = sub Field 1, v151
    v154 = mul v153, v148
    v155 = add v152, v154
    v156 = mul v155, v155
    v157 = mul v156, Field 2
    v159 = array_get v13, index Field 45
    v160 = mul v157, v159
    v161 = sub Field 1, v159
    v162 = mul v161, v156
    v163 = add v160, v162
    v164 = mul v163, v163
    v165 = mul v164, Field 2
    v167 = array_get v13, index Field 44
    v168 = mul v165, v167
    v169 = sub Field 1, v167
    v170 = mul v169, v164
    v171 = add v168, v170
    v172 = mul v171, v171
    v173 = mul v172, Field 2
    v175 = array_get v13, index Field 43
    v176 = mul v173, v175
    v177 = sub Field 1, v175
    v178 = mul v177, v172
    v179 = add v176, v178
    v180 = mul v179, v179
    v181 = mul v180, Field 2
    v183 = array_get v13, index Field 42
    v184 = mul v181, v183
    v185 = sub Field 1, v183
    v186 = mul v185, v180
    v187 = add v184, v186
    v188 = mul v187, v187
    v189 = mul v188, Field 2
    v191 = array_get v13, index Field 41
    v192 = mul v189, v191
    v193 = sub Field 1, v191
    v194 = mul v193, v188
    v195 = add v192, v194
    v196 = mul v195, v195
    v197 = mul v196, Field 2
    v199 = array_get v13, index Field 40
    v200 = mul v197, v199
    v201 = sub Field 1, v199
    v202 = mul v201, v196
    v203 = add v200, v202
    v204 = mul v203, v203
    v205 = mul v204, Field 2
    v207 = array_get v13, index Field 39
    v208 = mul v205, v207
    v209 = sub Field 1, v207
    v210 = mul v209, v204
    v211 = add v208, v210
    v212 = mul v211, v211
    v213 = mul v212, Field 2
    v215 = array_get v13, index Field 38
    v216 = mul v213, v215
    v217 = sub Field 1, v215
    v218 = mul v217, v212
    v219 = add v216, v218
    v220 = mul v219, v219
    v221 = mul v220, Field 2
    v223 = array_get v13, index Field 37
    v224 = mul v221, v223
    v225 = sub Field 1, v223
    v226 = mul v225, v220
    v227 = add v224, v226
    v228 = mul v227, v227
    v229 = mul v228, Field 2
    v231 = array_get v13, index Field 36
    v232 = mul v229, v231
    v233 = sub Field 1, v231
    v234 = mul v233, v228
    v235 = add v232, v234
    v236 = mul v235, v235
    v237 = mul v236, Field 2
    v239 = array_get v13, index Field 35
    v240 = mul v237, v239
    v241 = sub Field 1, v239
    v242 = mul v241, v236
    v243 = add v240, v242
    v244 = mul v243, v243
    v245 = mul v244, Field 2
    v247 = array_get v13, index Field 34
    v248 = mul v245, v247
    v249 = sub Field 1, v247
    v250 = mul v249, v244
    v251 = add v248, v250
    v252 = mul v251, v251
    v253 = mul v252, Field 2
    v255 = array_get v13, index Field 33
    v256 = mul v253, v255
    v257 = sub Field 1, v255
    v258 = mul v257, v252
    v259 = add v256, v258
    v260 = mul v259, v259
    v261 = mul v260, Field 2
    v263 = array_get v13, index Field 2⁵
    v264 = mul v261, v263
    v265 = sub Field 1, v263
    v266 = mul v265, v260
    v267 = add v264, v266
    v268 = mul v267, v267
    v269 = mul v268, Field 2
    v271 = array_get v13, index Field 31
    v272 = mul v269, v271
    v273 = sub Field 1, v271
    v274 = mul v273, v268
    v275 = add v272, v274
    v276 = mul v275, v275
    v277 = mul v276, Field 2
    v279 = array_get v13, index Field 30
    v280 = mul v277, v279
    v281 = sub Field 1, v279
    v282 = mul v281, v276
    v283 = add v280, v282
    v284 = mul v283, v283
    v285 = mul v284, Field 2
    v287 = array_get v13, index Field 29
    v288 = mul v285, v287
    v289 = sub Field 1, v287
    v290 = mul v289, v284
    v291 = add v288, v290
    v292 = mul v291, v291
    v293 = mul v292, Field 2
    v295 = array_get v13, index Field 28
    v296 = mul v293, v295
    v297 = sub Field 1, v295
    v298 = mul v297, v292
    v299 = add v296, v298
    v300 = mul v299, v299
    v301 = mul v300, Field 2
    v303 = array_get v13, index Field 27
    v304 = mul v301, v303
    v305 = sub Field 1, v303
    v306 = mul v305, v300
    v307 = add v304, v306
    v308 = mul v307, v307
    v309 = mul v308, Field 2
    v311 = array_get v13, index Field 26
    v312 = mul v309, v311
    v313 = sub Field 1, v311
    v314 = mul v313, v308
    v315 = add v312, v314
    v316 = mul v315, v315
    v317 = mul v316, Field 2
    v319 = array_get v13, index Field 25
    v320 = mul v317, v319
    v321 = sub Field 1, v319
    v322 = mul v321, v316
    v323 = add v320, v322
    v324 = mul v323, v323
    v325 = mul v324, Field 2
    v327 = array_get v13, index Field 24
    v328 = mul v325, v327
    v329 = sub Field 1, v327
    v330 = mul v329, v324
    v331 = add v328, v330
    v332 = mul v331, v331
    v333 = mul v332, Field 2
    v335 = array_get v13, index Field 23
    v336 = mul v333, v335
    v337 = sub Field 1, v335
    v338 = mul v337, v332
    v339 = add v336, v338
    v340 = mul v339, v339
    v341 = mul v340, Field 2
    v343 = array_get v13, index Field 22
    v344 = mul v341, v343
    v345 = sub Field 1, v343
    v346 = mul v345, v340
    v347 = add v344, v346
    v348 = mul v347, v347
    v349 = mul v348, Field 2
    v351 = array_get v13, index Field 21
    v352 = mul v349, v351
    v353 = sub Field 1, v351
    v354 = mul v353, v348
    v355 = add v352, v354
    v356 = mul v355, v355
    v357 = mul v356, Field 2
    v359 = array_get v13, index Field 20
    v360 = mul v357, v359
    v361 = sub Field 1, v359
    v362 = mul v361, v356
    v363 = add v360, v362
    v364 = mul v363, v363
    v365 = mul v364, Field 2
    v367 = array_get v13, index Field 19
    v368 = mul v365, v367
    v369 = sub Field 1, v367
    v370 = mul v369, v364
    v371 = add v368, v370
    v372 = mul v371, v371
    v373 = mul v372, Field 2
    v375 = array_get v13, index Field 18
    v376 = mul v373, v375
    v377 = sub Field 1, v375
    v378 = mul v377, v372
    v379 = add v376, v378
    v380 = mul v379, v379
    v381 = mul v380, Field 2
    v383 = array_get v13, index Field 17
    v384 = mul v381, v383
    v385 = sub Field 1, v383
    v386 = mul v385, v380
    v387 = add v384, v386
    v388 = mul v387, v387
    v389 = mul v388, Field 2
    v391 = array_get v13, index Field 2⁴
    v392 = mul v389, v391
    v393 = sub Field 1, v391
    v394 = mul v393, v388
    v395 = add v392, v394
    v396 = mul v395, v395
    v397 = mul v396, Field 2
    v399 = array_get v13, index Field 15
    v400 = mul v397, v399
    v401 = sub Field 1, v399
    v402 = mul v401, v396
    v403 = add v400, v402
    v404 = mul v403, v403
    v405 = mul v404, Field 2
    v407 = array_get v13, index Field 14
    v408 = mul v405, v407
    v409 = sub Field 1, v407
    v410 = mul v409, v404
    v411 = add v408, v410
    v412 = mul v411, v411
    v413 = mul v412, Field 2
    v415 = array_get v13, index Field 13
    v416 = mul v413, v415
    v417 = sub Field 1, v415
    v418 = mul v417, v412
    v419 = add v416, v418
    v420 = mul v419, v419
    v421 = mul v420, Field 2
    v423 = array_get v13, index Field 12
    v424 = mul v421, v423
    v425 = sub Field 1, v423
    v426 = mul v425, v420
    v427 = add v424, v426
    v428 = mul v427, v427
    v429 = mul v428, Field 2
    v431 = array_get v13, index Field 11
    v432 = mul v429, v431
    v433 = sub Field 1, v431
    v434 = mul v433, v428
    v435 = add v432, v434
    v436 = mul v435, v435
    v437 = mul v436, Field 2
    v439 = array_get v13, index Field 10
    v440 = mul v437, v439
    v441 = sub Field 1, v439
    v442 = mul v441, v436
    v443 = add v440, v442
    v444 = mul v443, v443
    v445 = mul v444, Field 2
    v447 = array_get v13, index Field 9
    v448 = mul v445, v447
    v449 = sub Field 1, v447
    v450 = mul v449, v444
    v451 = add v448, v450
    v452 = mul v451, v451
    v453 = mul v452, Field 2
    v455 = array_get v13, index Field 8
    v456 = mul v453, v455
    v457 = sub Field 1, v455
    v458 = mul v457, v452
    v459 = add v456, v458
    v460 = mul v459, v459
    v461 = mul v460, Field 2
    v463 = array_get v13, index Field 7
    v464 = mul v461, v463
    v465 = sub Field 1, v463
    v466 = mul v465, v460
    v467 = add v464, v466
    v468 = mul v467, v467
    v469 = mul v468, Field 2
    v471 = array_get v13, index Field 6
    v472 = mul v469, v471
    v473 = sub Field 1, v471
    v474 = mul v473, v468
    v475 = add v472, v474
    v476 = mul v475, v475
    v477 = mul v476, Field 2
    v479 = array_get v13, index Field 5
    v480 = mul v477, v479
    v481 = sub Field 1, v479
    v482 = mul v481, v476
    v483 = add v480, v482
    v484 = mul v483, v483
    v485 = mul v484, Field 2
    v487 = array_get v13, index Field 4
    v488 = mul v485, v487
    v489 = sub Field 1, v487
    v490 = mul v489, v484
    v491 = add v488, v490
    v492 = mul v491, v491
    v493 = mul v492, Field 2
    v495 = array_get v13, index Field 3
    v496 = mul v493, v495
    v497 = sub Field 1, v495
    v498 = mul v497, v492
    v499 = add v496, v498
    v500 = mul v499, v499
    v501 = mul v500, Field 2
    v502 = array_get v13, index Field 2
    v503 = mul v501, v502
    v504 = sub Field 1, v502
    v505 = mul v504, v500
    v506 = add v503, v505
    v507 = mul v506, v506
    v508 = mul v507, Field 2
    v509 = array_get v13, index Field 1
    v510 = mul v508, v509
    v511 = sub Field 1, v509
    v512 = mul v511, v507
    v513 = add v510, v512
    v514 = mul v513, v513
    v515 = mul v514, Field 2
    v517 = array_get v13, index Field 0
    v518 = mul v515, v517
    v519 = sub Field 1, v517
    v520 = mul v519, v514
    v521 = add v518, v520
    v522 = truncate v521 to 64 bits, max_bit_size: 254
    v523 = cast v522 as u64
    v524 = mul v9, v523
    v525 = truncate v524 to 64 bits, max_bit_size: 254
    v526 = lt v0, u64 2⁶
    constrain v526 == u1 1 'attempt to bit-shift with overflow'
    v527 = or v3, v525
    store v527 at v2
    v528 = load v2
    return v528
}

After Defunctionalization:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    v3, v4 = call f1(v0, v1)
    inc_rc v3
    inc_rc v3
    v6 = eq v4, Field 5
    constrain v4 == Field 5
    v10 = array_get v3, index Field 0
    v11 = array_get v3, index Field 1
    v13 = array_get v3, index Field 2
    v15 = array_get v3, index Field 3
    v17 = array_get v3, index Field 4
    v25 = allocate
    store u1 1 at v25
    jmp b1(Field 0)
  b1(v26: Field):
    v27 = lt v26, Field 5
    jmpif v27 then: b2, else: b3
  b2():
    v28 = array_get [v10, v11, v13, v15, v17], index v26
    v29 = array_get [u4 15, u4 1, u4 12, u4 11, u4 8], index v26
    v30 = eq v28, v29
    v31 = load v25
    v32 = mul v31, v30
    store v32 at v25
    v33 = add v26, Field 1
    jmp b1(v33)
  b3():
    v34 = load v25
    constrain v34 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v57, v58 = call f2([u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], Field 20)
    inc_rc v57
    v61 = allocate
    store u1 1 at v61
    jmp b4(Field 0)
  b4(v62: Field):
    v64 = lt v62, Field 2⁵
    jmpif v64 then: b5, else: b6
  b5():
    v65 = array_get v57, index v62
    v66 = array_get [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v62
    v67 = eq v65, v66
    v68 = load v61
    v69 = mul v68, v67
    store v69 at v61
    v70 = add v62, Field 1
    jmp b4(v70)
  b6():
    v71 = load v61
    constrain v71 == u1 1
    v73 = eq v58, Field 21
    constrain v58 == Field 21
    v75 = call f3()
    v77 = eq v75, u64 1
    constrain v75 == u64 1
    v79 = call f4()
    v81 = eq v79, u64 2⁴
    constrain v79 == u64 2⁴
    v84 = call f5(u64 0)
    v85 = eq v84, u64 1
    constrain v84 == u64 1
    v88 = call f5(u64 4)
    v89 = eq v88, u64 2⁴
    constrain v88 == u64 2⁴
    return 
}
acir fn compact_decode f1 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    v11 = truncate v1 to 64 bits, max_bit_size: 254
    v12 = cast v11 as u64
    inc_rc v0
    v13 = lt u64 5, v12
    v14 = not v13
    constrain v13 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v18 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v18
    v20 = array_get v0, index Field 0
    v31 = div v20, Field 2⁴
    v32 = cast v20 as u4
    v33 = truncate v32 to 1 bits, max_bit_size: 4
    v34 = cast v33 as u1
    jmpif v34 then: b1, else: b2
  b1():
    v35 = load v18
    v36 = array_get v0, index Field 0
    v38 = and v36, u8 15
    v39 = truncate v38 to 4 bits, max_bit_size: 8
    v40 = cast v39 as u4
    v41 = array_set v35, index Field 0, value v40
    store v41 at v18
    inc_rc v0
    jmp b3(Field 1)
  b3(v42: Field):
    v43 = lt v42, Field 5
    jmpif v43 then: b4, else: b5
  b4():
    v44 = truncate v42 to 64 bits, max_bit_size: 254
    v45 = cast v44 as u64
    v46 = truncate v1 to 64 bits, max_bit_size: 254
    v47 = cast v46 as u64
    v48 = lt v45, v47
    jmpif v48 then: b6, else: b7
  b6():
    v49 = array_get v0, index v42
    v50 = load v18
    v51 = mul Field 2, v42
    v52 = sub v51, Field 1
    v54 = div v49, Field 2⁴
    v55 = cast v49 as u4
    v56 = array_set v50, index v52, value v55
    v57 = add v52, Field 1
    store v56 at v18
    v58 = load v18
    v59 = mul Field 2, v42
    v60 = and v49, u8 15
    v61 = truncate v60 to 4 bits, max_bit_size: 8
    v62 = cast v61 as u4
    v63 = array_set v58, index v59, value v62
    v64 = add v59, Field 1
    store v63 at v18
    jmp b7()
  b7():
    v65 = add v42, Field 1
    jmp b3(v65)
  b5():
    jmp b8()
  b8():
    v92 = load v18
    v93 = mul Field 2, v1
    v94 = cast v34 as Field
    v95 = add v93, v94
    v96 = sub v95, Field 2
    inc_rc v92
    return v92, v96
  b2():
    jmp b9(u64 0)
  b9(v66: u64):
    v68 = lt v66, u64 2
    jmpif v68 then: b10, else: b11
  b10():
    v69 = truncate v1 to 64 bits, max_bit_size: 254
    v70 = cast v69 as u64
    v72 = sub v70, u64 1
    range_check v72 to 64 bits
    v73 = lt v66, v72
    jmpif v73 then: b12, else: b13
  b12():
    v74 = add v66, u64 1
    range_check v74 to 64 bits
    v75 = array_get v0, index v74
    v76 = load v18
    v77 = mul u64 2, v66
    range_check v77 to 64 bits
    v79 = div v75, Field 2⁴
    v80 = cast v75 as u4
    v81 = array_set v76, index v77, value v80
    v82 = add v77, Field 1
    store v81 at v18
    v83 = load v18
    v84 = mul u64 2, v66
    range_check v84 to 64 bits
    v85 = add v84, u64 1
    range_check v85 to 64 bits
    v86 = and v75, u8 15
    v87 = truncate v86 to 4 bits, max_bit_size: 8
    v88 = cast v87 as u4
    v89 = array_set v83, index v85, value v88
    v90 = add v85, Field 1
    store v89 at v18
    jmp b13()
  b13():
    v91 = add v66, Field 1
    jmp b9(v91)
  b11():
    jmp b8()
}
acir fn enc f2 {
  b0(v0: [u8; 32], v1: Field):
    inc_rc v0
    v5 = truncate v1 to 8 bits, max_bit_size: 254
    v6 = cast v5 as u8
    v7 = lt u8 2⁵, v6
    v8 = not v7
    constrain v7 == u1 0
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v13 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v13
    v15 = eq v1, Field 0
    jmpif v15 then: b1, else: b2
  b1():
    v16 = load v13
    inc_rc v16
    jmp b3(v16, v1)
  b3(v41: [u8; 32], v42: Field):
    return v41, v42
  b2():
    v17 = truncate v1 to 8 bits, max_bit_size: 254
    v18 = cast v17 as u8
    v20 = lt v18, u8 31
    jmpif v20 then: b4, else: b5
  b4():
    v21 = load v13
    v23 = truncate v1 to 8 bits, max_bit_size: 254
    v24 = cast v23 as u8
    v25 = add u8 2⁷, v24
    range_check v25 to 8 bits
    v27 = array_set v21, index Field 0, value v25
    store v27 at v13
    inc_rc v0
    jmp b6(Field 1)
  b6(v28: Field):
    v29 = lt v28, Field 2⁵
    jmpif v29 then: b7, else: b8
  b7():
    v30 = load v13
    v31 = sub v28, Field 1
    v32 = array_get v0, index v31
    v33 = array_set v30, index v28, value v32
    v34 = add v28, Field 1
    store v33 at v13
    v35 = add v28, Field 1
    jmp b6(v35)
  b8():
    v36 = load v13
    v37 = add v1, Field 1
    inc_rc v36
    jmp b9(v36, v37)
  b9(v39: [u8; 32], v40: Field):
    jmp b3(v39, v40)
  b5():
    v38 = load v13
    inc_rc v38
    jmp b9(v38, Field 2⁵)
}
acir fn bitshift_literal_0 f3 {
  b0():
    v1 = allocate
    store u64 0 at v1
    v2 = load v1
    v7 = or v2, u64 1
    store v7 at v1
    v8 = load v1
    return v8
}
acir fn bitshift_literal_4 f4 {
  b0():
    v1 = allocate
    store u64 0 at v1
    v2 = load v1
    v9 = or v2, u64 2⁴
    store v9 at v1
    v10 = load v1
    return v10
}
acir fn bitshift_variable f5 {
  b0(v0: u64):
    v2 = allocate
    store u64 0 at v2
    v3 = load v2
    v7 = lt v0, u64 2⁶
    v9 = cast v7 as u64
    v12, v13 = call to_le_bits(v0, Field 2⁶)
    v16 = array_get v13, index Field 63
    v17 = mul Field 2, v16
    v18 = sub Field 1, v16
    v19 = add v17, v18
    v20 = mul v19, v19
    v21 = mul v20, Field 2
    v23 = array_get v13, index Field 62
    v24 = mul v21, v23
    v25 = sub Field 1, v23
    v26 = mul v25, v20
    v27 = add v24, v26
    v28 = mul v27, v27
    v29 = mul v28, Field 2
    v31 = array_get v13, index Field 61
    v32 = mul v29, v31
    v33 = sub Field 1, v31
    v34 = mul v33, v28
    v35 = add v32, v34
    v36 = mul v35, v35
    v37 = mul v36, Field 2
    v39 = array_get v13, index Field 60
    v40 = mul v37, v39
    v41 = sub Field 1, v39
    v42 = mul v41, v36
    v43 = add v40, v42
    v44 = mul v43, v43
    v45 = mul v44, Field 2
    v47 = array_get v13, index Field 59
    v48 = mul v45, v47
    v49 = sub Field 1, v47
    v50 = mul v49, v44
    v51 = add v48, v50
    v52 = mul v51, v51
    v53 = mul v52, Field 2
    v55 = array_get v13, index Field 58
    v56 = mul v53, v55
    v57 = sub Field 1, v55
    v58 = mul v57, v52
    v59 = add v56, v58
    v60 = mul v59, v59
    v61 = mul v60, Field 2
    v63 = array_get v13, index Field 57
    v64 = mul v61, v63
    v65 = sub Field 1, v63
    v66 = mul v65, v60
    v67 = add v64, v66
    v68 = mul v67, v67
    v69 = mul v68, Field 2
    v71 = array_get v13, index Field 56
    v72 = mul v69, v71
    v73 = sub Field 1, v71
    v74 = mul v73, v68
    v75 = add v72, v74
    v76 = mul v75, v75
    v77 = mul v76, Field 2
    v79 = array_get v13, index Field 55
    v80 = mul v77, v79
    v81 = sub Field 1, v79
    v82 = mul v81, v76
    v83 = add v80, v82
    v84 = mul v83, v83
    v85 = mul v84, Field 2
    v87 = array_get v13, index Field 54
    v88 = mul v85, v87
    v89 = sub Field 1, v87
    v90 = mul v89, v84
    v91 = add v88, v90
    v92 = mul v91, v91
    v93 = mul v92, Field 2
    v95 = array_get v13, index Field 53
    v96 = mul v93, v95
    v97 = sub Field 1, v95
    v98 = mul v97, v92
    v99 = add v96, v98
    v100 = mul v99, v99
    v101 = mul v100, Field 2
    v103 = array_get v13, index Field 52
    v104 = mul v101, v103
    v105 = sub Field 1, v103
    v106 = mul v105, v100
    v107 = add v104, v106
    v108 = mul v107, v107
    v109 = mul v108, Field 2
    v111 = array_get v13, index Field 51
    v112 = mul v109, v111
    v113 = sub Field 1, v111
    v114 = mul v113, v108
    v115 = add v112, v114
    v116 = mul v115, v115
    v117 = mul v116, Field 2
    v119 = array_get v13, index Field 50
    v120 = mul v117, v119
    v121 = sub Field 1, v119
    v122 = mul v121, v116
    v123 = add v120, v122
    v124 = mul v123, v123
    v125 = mul v124, Field 2
    v127 = array_get v13, index Field 49
    v128 = mul v125, v127
    v129 = sub Field 1, v127
    v130 = mul v129, v124
    v131 = add v128, v130
    v132 = mul v131, v131
    v133 = mul v132, Field 2
    v135 = array_get v13, index Field 2⁴×3
    v136 = mul v133, v135
    v137 = sub Field 1, v135
    v138 = mul v137, v132
    v139 = add v136, v138
    v140 = mul v139, v139
    v141 = mul v140, Field 2
    v143 = array_get v13, index Field 47
    v144 = mul v141, v143
    v145 = sub Field 1, v143
    v146 = mul v145, v140
    v147 = add v144, v146
    v148 = mul v147, v147
    v149 = mul v148, Field 2
    v151 = array_get v13, index Field 46
    v152 = mul v149, v151
    v153 = sub Field 1, v151
    v154 = mul v153, v148
    v155 = add v152, v154
    v156 = mul v155, v155
    v157 = mul v156, Field 2
    v159 = array_get v13, index Field 45
    v160 = mul v157, v159
    v161 = sub Field 1, v159
    v162 = mul v161, v156
    v163 = add v160, v162
    v164 = mul v163, v163
    v165 = mul v164, Field 2
    v167 = array_get v13, index Field 44
    v168 = mul v165, v167
    v169 = sub Field 1, v167
    v170 = mul v169, v164
    v171 = add v168, v170
    v172 = mul v171, v171
    v173 = mul v172, Field 2
    v175 = array_get v13, index Field 43
    v176 = mul v173, v175
    v177 = sub Field 1, v175
    v178 = mul v177, v172
    v179 = add v176, v178
    v180 = mul v179, v179
    v181 = mul v180, Field 2
    v183 = array_get v13, index Field 42
    v184 = mul v181, v183
    v185 = sub Field 1, v183
    v186 = mul v185, v180
    v187 = add v184, v186
    v188 = mul v187, v187
    v189 = mul v188, Field 2
    v191 = array_get v13, index Field 41
    v192 = mul v189, v191
    v193 = sub Field 1, v191
    v194 = mul v193, v188
    v195 = add v192, v194
    v196 = mul v195, v195
    v197 = mul v196, Field 2
    v199 = array_get v13, index Field 40
    v200 = mul v197, v199
    v201 = sub Field 1, v199
    v202 = mul v201, v196
    v203 = add v200, v202
    v204 = mul v203, v203
    v205 = mul v204, Field 2
    v207 = array_get v13, index Field 39
    v208 = mul v205, v207
    v209 = sub Field 1, v207
    v210 = mul v209, v204
    v211 = add v208, v210
    v212 = mul v211, v211
    v213 = mul v212, Field 2
    v215 = array_get v13, index Field 38
    v216 = mul v213, v215
    v217 = sub Field 1, v215
    v218 = mul v217, v212
    v219 = add v216, v218
    v220 = mul v219, v219
    v221 = mul v220, Field 2
    v223 = array_get v13, index Field 37
    v224 = mul v221, v223
    v225 = sub Field 1, v223
    v226 = mul v225, v220
    v227 = add v224, v226
    v228 = mul v227, v227
    v229 = mul v228, Field 2
    v231 = array_get v13, index Field 36
    v232 = mul v229, v231
    v233 = sub Field 1, v231
    v234 = mul v233, v228
    v235 = add v232, v234
    v236 = mul v235, v235
    v237 = mul v236, Field 2
    v239 = array_get v13, index Field 35
    v240 = mul v237, v239
    v241 = sub Field 1, v239
    v242 = mul v241, v236
    v243 = add v240, v242
    v244 = mul v243, v243
    v245 = mul v244, Field 2
    v247 = array_get v13, index Field 34
    v248 = mul v245, v247
    v249 = sub Field 1, v247
    v250 = mul v249, v244
    v251 = add v248, v250
    v252 = mul v251, v251
    v253 = mul v252, Field 2
    v255 = array_get v13, index Field 33
    v256 = mul v253, v255
    v257 = sub Field 1, v255
    v258 = mul v257, v252
    v259 = add v256, v258
    v260 = mul v259, v259
    v261 = mul v260, Field 2
    v263 = array_get v13, index Field 2⁵
    v264 = mul v261, v263
    v265 = sub Field 1, v263
    v266 = mul v265, v260
    v267 = add v264, v266
    v268 = mul v267, v267
    v269 = mul v268, Field 2
    v271 = array_get v13, index Field 31
    v272 = mul v269, v271
    v273 = sub Field 1, v271
    v274 = mul v273, v268
    v275 = add v272, v274
    v276 = mul v275, v275
    v277 = mul v276, Field 2
    v279 = array_get v13, index Field 30
    v280 = mul v277, v279
    v281 = sub Field 1, v279
    v282 = mul v281, v276
    v283 = add v280, v282
    v284 = mul v283, v283
    v285 = mul v284, Field 2
    v287 = array_get v13, index Field 29
    v288 = mul v285, v287
    v289 = sub Field 1, v287
    v290 = mul v289, v284
    v291 = add v288, v290
    v292 = mul v291, v291
    v293 = mul v292, Field 2
    v295 = array_get v13, index Field 28
    v296 = mul v293, v295
    v297 = sub Field 1, v295
    v298 = mul v297, v292
    v299 = add v296, v298
    v300 = mul v299, v299
    v301 = mul v300, Field 2
    v303 = array_get v13, index Field 27
    v304 = mul v301, v303
    v305 = sub Field 1, v303
    v306 = mul v305, v300
    v307 = add v304, v306
    v308 = mul v307, v307
    v309 = mul v308, Field 2
    v311 = array_get v13, index Field 26
    v312 = mul v309, v311
    v313 = sub Field 1, v311
    v314 = mul v313, v308
    v315 = add v312, v314
    v316 = mul v315, v315
    v317 = mul v316, Field 2
    v319 = array_get v13, index Field 25
    v320 = mul v317, v319
    v321 = sub Field 1, v319
    v322 = mul v321, v316
    v323 = add v320, v322
    v324 = mul v323, v323
    v325 = mul v324, Field 2
    v327 = array_get v13, index Field 24
    v328 = mul v325, v327
    v329 = sub Field 1, v327
    v330 = mul v329, v324
    v331 = add v328, v330
    v332 = mul v331, v331
    v333 = mul v332, Field 2
    v335 = array_get v13, index Field 23
    v336 = mul v333, v335
    v337 = sub Field 1, v335
    v338 = mul v337, v332
    v339 = add v336, v338
    v340 = mul v339, v339
    v341 = mul v340, Field 2
    v343 = array_get v13, index Field 22
    v344 = mul v341, v343
    v345 = sub Field 1, v343
    v346 = mul v345, v340
    v347 = add v344, v346
    v348 = mul v347, v347
    v349 = mul v348, Field 2
    v351 = array_get v13, index Field 21
    v352 = mul v349, v351
    v353 = sub Field 1, v351
    v354 = mul v353, v348
    v355 = add v352, v354
    v356 = mul v355, v355
    v357 = mul v356, Field 2
    v359 = array_get v13, index Field 20
    v360 = mul v357, v359
    v361 = sub Field 1, v359
    v362 = mul v361, v356
    v363 = add v360, v362
    v364 = mul v363, v363
    v365 = mul v364, Field 2
    v367 = array_get v13, index Field 19
    v368 = mul v365, v367
    v369 = sub Field 1, v367
    v370 = mul v369, v364
    v371 = add v368, v370
    v372 = mul v371, v371
    v373 = mul v372, Field 2
    v375 = array_get v13, index Field 18
    v376 = mul v373, v375
    v377 = sub Field 1, v375
    v378 = mul v377, v372
    v379 = add v376, v378
    v380 = mul v379, v379
    v381 = mul v380, Field 2
    v383 = array_get v13, index Field 17
    v384 = mul v381, v383
    v385 = sub Field 1, v383
    v386 = mul v385, v380
    v387 = add v384, v386
    v388 = mul v387, v387
    v389 = mul v388, Field 2
    v391 = array_get v13, index Field 2⁴
    v392 = mul v389, v391
    v393 = sub Field 1, v391
    v394 = mul v393, v388
    v395 = add v392, v394
    v396 = mul v395, v395
    v397 = mul v396, Field 2
    v399 = array_get v13, index Field 15
    v400 = mul v397, v399
    v401 = sub Field 1, v399
    v402 = mul v401, v396
    v403 = add v400, v402
    v404 = mul v403, v403
    v405 = mul v404, Field 2
    v407 = array_get v13, index Field 14
    v408 = mul v405, v407
    v409 = sub Field 1, v407
    v410 = mul v409, v404
    v411 = add v408, v410
    v412 = mul v411, v411
    v413 = mul v412, Field 2
    v415 = array_get v13, index Field 13
    v416 = mul v413, v415
    v417 = sub Field 1, v415
    v418 = mul v417, v412
    v419 = add v416, v418
    v420 = mul v419, v419
    v421 = mul v420, Field 2
    v423 = array_get v13, index Field 12
    v424 = mul v421, v423
    v425 = sub Field 1, v423
    v426 = mul v425, v420
    v427 = add v424, v426
    v428 = mul v427, v427
    v429 = mul v428, Field 2
    v431 = array_get v13, index Field 11
    v432 = mul v429, v431
    v433 = sub Field 1, v431
    v434 = mul v433, v428
    v435 = add v432, v434
    v436 = mul v435, v435
    v437 = mul v436, Field 2
    v439 = array_get v13, index Field 10
    v440 = mul v437, v439
    v441 = sub Field 1, v439
    v442 = mul v441, v436
    v443 = add v440, v442
    v444 = mul v443, v443
    v445 = mul v444, Field 2
    v447 = array_get v13, index Field 9
    v448 = mul v445, v447
    v449 = sub Field 1, v447
    v450 = mul v449, v444
    v451 = add v448, v450
    v452 = mul v451, v451
    v453 = mul v452, Field 2
    v455 = array_get v13, index Field 8
    v456 = mul v453, v455
    v457 = sub Field 1, v455
    v458 = mul v457, v452
    v459 = add v456, v458
    v460 = mul v459, v459
    v461 = mul v460, Field 2
    v463 = array_get v13, index Field 7
    v464 = mul v461, v463
    v465 = sub Field 1, v463
    v466 = mul v465, v460
    v467 = add v464, v466
    v468 = mul v467, v467
    v469 = mul v468, Field 2
    v471 = array_get v13, index Field 6
    v472 = mul v469, v471
    v473 = sub Field 1, v471
    v474 = mul v473, v468
    v475 = add v472, v474
    v476 = mul v475, v475
    v477 = mul v476, Field 2
    v479 = array_get v13, index Field 5
    v480 = mul v477, v479
    v481 = sub Field 1, v479
    v482 = mul v481, v476
    v483 = add v480, v482
    v484 = mul v483, v483
    v485 = mul v484, Field 2
    v487 = array_get v13, index Field 4
    v488 = mul v485, v487
    v489 = sub Field 1, v487
    v490 = mul v489, v484
    v491 = add v488, v490
    v492 = mul v491, v491
    v493 = mul v492, Field 2
    v495 = array_get v13, index Field 3
    v496 = mul v493, v495
    v497 = sub Field 1, v495
    v498 = mul v497, v492
    v499 = add v496, v498
    v500 = mul v499, v499
    v501 = mul v500, Field 2
    v502 = array_get v13, index Field 2
    v503 = mul v501, v502
    v504 = sub Field 1, v502
    v505 = mul v504, v500
    v506 = add v503, v505
    v507 = mul v506, v506
    v508 = mul v507, Field 2
    v509 = array_get v13, index Field 1
    v510 = mul v508, v509
    v511 = sub Field 1, v509
    v512 = mul v511, v507
    v513 = add v510, v512
    v514 = mul v513, v513
    v515 = mul v514, Field 2
    v517 = array_get v13, index Field 0
    v518 = mul v515, v517
    v519 = sub Field 1, v517
    v520 = mul v519, v514
    v521 = add v518, v520
    v522 = truncate v521 to 64 bits, max_bit_size: 254
    v523 = cast v522 as u64
    v524 = mul v9, v523
    v525 = truncate v524 to 64 bits, max_bit_size: 254
    v526 = lt v0, u64 2⁶
    constrain v526 == u1 1 'attempt to bit-shift with overflow'
    v527 = or v3, v525
    store v527 at v2
    v528 = load v2
    return v528
}

After Inlining:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v3 = truncate v1 to 64 bits, max_bit_size: 254
    v4 = cast v3 as u64
    inc_rc v0
    v6 = lt u64 5, v4
    v7 = not v6
    constrain v6 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v11 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v11
    v13 = array_get v0, index Field 0
    v15 = div v13, Field 2⁴
    v16 = cast v13 as u4
    v17 = truncate v16 to 1 bits, max_bit_size: 4
    v18 = cast v17 as u1
    jmpif v18 then: b1, else: b2
  b1():
    v53 = load v11
    v54 = array_get v0, index Field 0
    v55 = and v54, u8 15
    v56 = truncate v55 to 4 bits, max_bit_size: 8
    v57 = cast v56 as u4
    v58 = array_set v53, index Field 0, value v57
    store v58 at v11
    inc_rc v0
    jmp b9(Field 1)
  b9(v59: Field):
    v61 = lt v59, Field 5
    jmpif v61 then: b10, else: b11
  b10():
    v62 = truncate v59 to 64 bits, max_bit_size: 254
    v63 = cast v62 as u64
    v64 = truncate v1 to 64 bits, max_bit_size: 254
    v65 = cast v64 as u64
    v66 = lt v63, v65
    jmpif v66 then: b12, else: b13
  b12():
    v68 = array_get v0, index v59
    v69 = load v11
    v70 = mul Field 2, v59
    v71 = sub v70, Field 1
    v72 = div v68, Field 2⁴
    v73 = cast v68 as u4
    v74 = array_set v69, index v71, value v73
    v75 = add v71, Field 1
    store v74 at v11
    v76 = load v11
    v77 = mul Field 2, v59
    v78 = and v68, u8 15
    v79 = truncate v78 to 4 bits, max_bit_size: 8
    v80 = cast v79 as u4
    v81 = array_set v76, index v77, value v80
    v82 = add v77, Field 1
    store v81 at v11
    jmp b13()
  b13():
    v67 = add v59, Field 1
    jmp b9(v67)
  b11():
    jmp b6()
  b6():
    v23 = load v11
    v25 = mul Field 2, v1
    v26 = cast v18 as Field
    v27 = add v25, v26
    v28 = sub v27, Field 2
    inc_rc v23
    inc_rc v23
    inc_rc v23
    v83 = eq v28, Field 5
    constrain v28 == Field 5
    v84 = array_get v23, index Field 0
    v85 = array_get v23, index Field 1
    v86 = array_get v23, index Field 2
    v88 = array_get v23, index Field 3
    v90 = array_get v23, index Field 4
    v91 = allocate
    store u1 1 at v91
    jmp b14(Field 0)
  b14(v93: Field):
    v94 = lt v93, Field 5
    jmpif v94 then: b15, else: b16
  b15():
    v239 = array_get [v84, v85, v86, v88, v90], index v93
    v246 = array_get [u4 15, u4 1, u4 12, u4 11, u4 8], index v93
    v247 = eq v239, v246
    v248 = load v91
    v249 = mul v248, v247
    store v249 at v91
    v250 = add v93, Field 1
    jmp b14(v250)
  b16():
    v95 = load v91
    constrain v95 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v121 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v121
    jmp b17()
  b17():
    jmp b18()
  b18():
    v123 = load v121
    range_check u8 148 to 8 bits
    v125 = array_set v123, index Field 0, value u8 148
    store v125 at v121
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    jmp b19(Field 1)
  b19(v126: Field):
    v128 = lt v126, Field 2⁵
    jmpif v128 then: b20, else: b21
  b20():
    v135 = load v121
    v136 = sub v126, Field 1
    v137 = array_get [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v136
    v138 = array_set v135, index v126, value v137
    v139 = add v126, Field 1
    store v138 at v121
    v140 = add v126, Field 1
    jmp b19(v140)
  b21():
    v129 = load v121
    inc_rc v129
    jmp b22(v129, Field 21)
  b22(v131: [u8; 32], v132: Field):
    jmp b23(v131, v132)
  b23(v133: [u8; 32], v134: Field):
    inc_rc v133
    v141 = allocate
    store u1 1 at v141
    jmp b24(Field 0)
  b24(v142: Field):
    v143 = lt v142, Field 2⁵
    jmpif v143 then: b25, else: b26
  b25():
    v231 = array_get v133, index v142
    v233 = array_get [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v142
    v234 = eq v231, v233
    v235 = load v141
    v236 = mul v235, v234
    store v236 at v141
    v237 = add v142, Field 1
    jmp b24(v237)
  b26():
    v144 = load v141
    constrain v144 == u1 1
    v145 = eq v134, Field 21
    constrain v134 == Field 21
    v147 = allocate
    store u64 0 at v147
    v148 = load v147
    v149 = or v148, u64 1
    store v149 at v147
    v150 = load v147
    v151 = eq v150, u64 1
    constrain v150 == u64 1
    v153 = allocate
    store u64 0 at v153
    v154 = load v153
    v156 = or v154, u64 2⁴
    store v156 at v153
    v157 = load v153
    v158 = eq v157, u64 2⁴
    constrain v157 == u64 2⁴
    v160 = allocate
    store u64 0 at v160
    v161 = load v160
    v220 = or v161, u64 1
    store v220 at v160
    v221 = load v160
    v222 = eq v221, u64 1
    constrain v221 == u64 1
    v225 = allocate
    store u64 0 at v225
    v226 = load v225
    v228 = or v226, u64 2⁴
    store v228 at v225
    v229 = load v225
    v230 = eq v229, u64 2⁴
    constrain v229 == u64 2⁴
    return 
  b2():
    jmp b3(u64 0)
  b3(v19: u64):
    v22 = lt v19, u64 2
    jmpif v22 then: b4, else: b5
  b4():
    v29 = truncate v1 to 64 bits, max_bit_size: 254
    v30 = cast v29 as u64
    v32 = sub v30, u64 1
    range_check v32 to 64 bits
    v33 = lt v19, v32
    jmpif v33 then: b7, else: b8
  b7():
    v36 = add v19, u64 1
    range_check v36 to 64 bits
    v37 = array_get v0, index v36
    v38 = load v11
    v39 = mul u64 2, v19
    range_check v39 to 64 bits
    v40 = div v37, Field 2⁴
    v41 = cast v37 as u4
    v42 = array_set v38, index v39, value v41
    v43 = add v39, Field 1
    store v42 at v11
    v44 = load v11
    v45 = mul u64 2, v19
    range_check v45 to 64 bits
    v46 = add v45, u64 1
    range_check v46 to 64 bits
    v48 = and v37, u8 15
    v49 = truncate v48 to 4 bits, max_bit_size: 8
    v50 = cast v49 as u4
    v51 = array_set v44, index v46, value v50
    v52 = add v46, Field 1
    store v51 at v11
    jmp b8()
  b8():
    v35 = add v19, Field 1
    jmp b3(v35)
  b5():
    jmp b6()
}

After Mem2Reg:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v251 = truncate v1 to 64 bits, max_bit_size: 254
    v252 = cast v251 as u64
    inc_rc v0
    v253 = lt u64 5, v252
    v254 = not v253
    constrain v253 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v256 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    v258 = array_get v0, index Field 0
    v259 = div v258, Field 2⁴
    v260 = cast v258 as u4
    v261 = truncate v260 to 1 bits, max_bit_size: 4
    v262 = cast v261 as u1
    jmpif v262 then: b1, else: b2
  b1():
    v286 = array_get v0, index Field 0
    v287 = and v286, u8 15
    v288 = truncate v287 to 4 bits, max_bit_size: 8
    v289 = cast v288 as u4
    store [v289, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    inc_rc v0
    jmp b9(Field 1)
  b9(v59: Field):
    v293 = lt v59, Field 5
    jmpif v293 then: b10, else: b11
  b10():
    v359 = truncate v59 to 64 bits, max_bit_size: 254
    v360 = cast v359 as u64
    v361 = truncate v1 to 64 bits, max_bit_size: 254
    v362 = cast v361 as u64
    v363 = lt v360, v362
    jmpif v363 then: b12, else: b13
  b12():
    v364 = array_get v0, index v59
    v365 = load v256
    v366 = mul Field 2, v59
    v367 = sub v366, Field 1
    v368 = div v364, Field 2⁴
    v369 = cast v364 as u4
    v370 = array_set v365, index v367, value v369
    v371 = add v367, Field 1
    v373 = mul Field 2, v59
    v374 = and v364, u8 15
    v375 = truncate v374 to 4 bits, max_bit_size: 8
    v376 = cast v375 as u4
    v377 = array_set v370, index v373, value v376
    v378 = add v373, Field 1
    store v377 at v256
    jmp b13()
  b13():
    v379 = add v59, Field 1
    jmp b9(v379)
  b11():
    jmp b6()
  b6():
    v294 = load v256
    v295 = mul Field 2, v1
    v296 = cast v262 as Field
    v297 = add v295, v296
    v298 = sub v297, Field 2
    inc_rc v294
    inc_rc v294
    inc_rc v294
    v299 = eq v298, Field 5
    constrain v298 == Field 5
    v300 = array_get v294, index Field 0
    v301 = array_get v294, index Field 1
    v302 = array_get v294, index Field 2
    v303 = array_get v294, index Field 3
    v304 = array_get v294, index Field 4
    v305 = allocate
    store u1 1 at v305
    jmp b14(Field 0)
  b14(v93: Field):
    v306 = lt v93, Field 5
    jmpif v306 then: b15, else: b16
  b15():
    v352 = array_get [v300, v301, v302, v303, v304], index v93
    v354 = array_get [u4 15, u4 1, u4 12, u4 11, u4 8], index v93
    v355 = eq v352, v354
    v356 = load v305
    v357 = mul v356, v355
    store v357 at v305
    v358 = add v93, Field 1
    jmp b14(v358)
  b16():
    v307 = load v305
    constrain v307 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v312 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    jmp b17()
  b17():
    jmp b18()
  b18():
    range_check u8 148 to 8 bits
    store [u8 148, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    jmp b19(Field 1)
  b19(v126: Field):
    v319 = lt v126, Field 2⁵
    jmpif v319 then: b20, else: b21
  b20():
    v344 = load v312
    v345 = sub v126, Field 1
    v347 = array_get [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v345
    v348 = array_set v344, index v126, value v347
    v349 = add v126, Field 1
    store v348 at v312
    v350 = add v126, Field 1
    jmp b19(v350)
  b21():
    v320 = load v312
    inc_rc v320
    jmp b22(v320, Field 21)
  b22(v131: [u8; 32], v132: Field):
    jmp b23(v131, v132)
  b23(v133: [u8; 32], v134: Field):
    inc_rc v133
    v321 = allocate
    store u1 1 at v321
    jmp b24(Field 0)
  b24(v142: Field):
    v322 = lt v142, Field 2⁵
    jmpif v322 then: b25, else: b26
  b25():
    v337 = array_get v133, index v142
    v339 = array_get [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v142
    v340 = eq v337, v339
    v341 = load v321
    v342 = mul v341, v340
    store v342 at v321
    v343 = add v142, Field 1
    jmp b24(v343)
  b26():
    v323 = load v321
    constrain v323 == u1 1
    v324 = eq v134, Field 21
    constrain v134 == Field 21
    v325 = allocate
    store u64 1 at v325
    v328 = allocate
    store u64 2⁴ at v328
    v331 = allocate
    store u64 1 at v331
    v334 = allocate
    store u64 2⁴ at v334
    return 
  b2():
    jmp b3(u64 0)
  b3(v19: u64):
    v263 = lt v19, u64 2
    jmpif v263 then: b4, else: b5
  b4():
    v264 = truncate v1 to 64 bits, max_bit_size: 254
    v265 = cast v264 as u64
    v266 = sub v265, u64 1
    range_check v266 to 64 bits
    v267 = lt v19, v266
    jmpif v267 then: b7, else: b8
  b7():
    v268 = add v19, u64 1
    range_check v268 to 64 bits
    v269 = array_get v0, index v268
    v270 = load v256
    v271 = mul u64 2, v19
    range_check v271 to 64 bits
    v272 = div v269, Field 2⁴
    v273 = cast v269 as u4
    v274 = array_set v270, index v271, value v273
    v275 = add v271, Field 1
    v277 = mul u64 2, v19
    range_check v277 to 64 bits
    v278 = add v277, u64 1
    range_check v278 to 64 bits
    v279 = and v269, u8 15
    v280 = truncate v279 to 4 bits, max_bit_size: 8
    v281 = cast v280 as u4
    v282 = array_set v274, index v278, value v281
    v283 = add v278, Field 1
    store v282 at v256
    jmp b8()
  b8():
    v284 = add v19, Field 1
    jmp b3(v284)
  b5():
    jmp b6()
}

After Assert Constant:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v251 = truncate v1 to 64 bits, max_bit_size: 254
    v252 = cast v251 as u64
    inc_rc v0
    v253 = lt u64 5, v252
    v254 = not v253
    constrain v253 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v256 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    v258 = array_get v0, index Field 0
    v259 = div v258, Field 2⁴
    v260 = cast v258 as u4
    v261 = truncate v260 to 1 bits, max_bit_size: 4
    v262 = cast v261 as u1
    jmpif v262 then: b1, else: b2
  b1():
    v286 = array_get v0, index Field 0
    v287 = and v286, u8 15
    v288 = truncate v287 to 4 bits, max_bit_size: 8
    v289 = cast v288 as u4
    store [v289, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    inc_rc v0
    jmp b9(Field 1)
  b9(v59: Field):
    v293 = lt v59, Field 5
    jmpif v293 then: b10, else: b11
  b10():
    v359 = truncate v59 to 64 bits, max_bit_size: 254
    v360 = cast v359 as u64
    v361 = truncate v1 to 64 bits, max_bit_size: 254
    v362 = cast v361 as u64
    v363 = lt v360, v362
    jmpif v363 then: b12, else: b13
  b12():
    v364 = array_get v0, index v59
    v365 = load v256
    v366 = mul Field 2, v59
    v367 = sub v366, Field 1
    v368 = div v364, Field 2⁴
    v369 = cast v364 as u4
    v370 = array_set v365, index v367, value v369
    v371 = add v367, Field 1
    v373 = mul Field 2, v59
    v374 = and v364, u8 15
    v375 = truncate v374 to 4 bits, max_bit_size: 8
    v376 = cast v375 as u4
    v377 = array_set v370, index v373, value v376
    v378 = add v373, Field 1
    store v377 at v256
    jmp b13()
  b13():
    v379 = add v59, Field 1
    jmp b9(v379)
  b11():
    jmp b6()
  b6():
    v294 = load v256
    v295 = mul Field 2, v1
    v296 = cast v262 as Field
    v297 = add v295, v296
    v298 = sub v297, Field 2
    inc_rc v294
    inc_rc v294
    inc_rc v294
    v299 = eq v298, Field 5
    constrain v298 == Field 5
    v300 = array_get v294, index Field 0
    v301 = array_get v294, index Field 1
    v302 = array_get v294, index Field 2
    v303 = array_get v294, index Field 3
    v304 = array_get v294, index Field 4
    v305 = allocate
    store u1 1 at v305
    jmp b14(Field 0)
  b14(v93: Field):
    v306 = lt v93, Field 5
    jmpif v306 then: b15, else: b16
  b15():
    v352 = array_get [v300, v301, v302, v303, v304], index v93
    v354 = array_get [u4 15, u4 1, u4 12, u4 11, u4 8], index v93
    v355 = eq v352, v354
    v356 = load v305
    v357 = mul v356, v355
    store v357 at v305
    v358 = add v93, Field 1
    jmp b14(v358)
  b16():
    v307 = load v305
    constrain v307 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v312 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    jmp b17()
  b17():
    jmp b18()
  b18():
    range_check u8 148 to 8 bits
    store [u8 148, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    jmp b19(Field 1)
  b19(v126: Field):
    v319 = lt v126, Field 2⁵
    jmpif v319 then: b20, else: b21
  b20():
    v344 = load v312
    v345 = sub v126, Field 1
    v347 = array_get [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v345
    v348 = array_set v344, index v126, value v347
    v349 = add v126, Field 1
    store v348 at v312
    v350 = add v126, Field 1
    jmp b19(v350)
  b21():
    v320 = load v312
    inc_rc v320
    jmp b22(v320, Field 21)
  b22(v131: [u8; 32], v132: Field):
    jmp b23(v131, v132)
  b23(v133: [u8; 32], v134: Field):
    inc_rc v133
    v321 = allocate
    store u1 1 at v321
    jmp b24(Field 0)
  b24(v142: Field):
    v322 = lt v142, Field 2⁵
    jmpif v322 then: b25, else: b26
  b25():
    v337 = array_get v133, index v142
    v339 = array_get [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0], index v142
    v340 = eq v337, v339
    v341 = load v321
    v342 = mul v341, v340
    store v342 at v321
    v343 = add v142, Field 1
    jmp b24(v343)
  b26():
    v323 = load v321
    constrain v323 == u1 1
    v324 = eq v134, Field 21
    constrain v134 == Field 21
    v325 = allocate
    store u64 1 at v325
    v328 = allocate
    store u64 2⁴ at v328
    v331 = allocate
    store u64 1 at v331
    v334 = allocate
    store u64 2⁴ at v334
    return 
  b2():
    jmp b3(u64 0)
  b3(v19: u64):
    v263 = lt v19, u64 2
    jmpif v263 then: b4, else: b5
  b4():
    v264 = truncate v1 to 64 bits, max_bit_size: 254
    v265 = cast v264 as u64
    v266 = sub v265, u64 1
    range_check v266 to 64 bits
    v267 = lt v19, v266
    jmpif v267 then: b7, else: b8
  b7():
    v268 = add v19, u64 1
    range_check v268 to 64 bits
    v269 = array_get v0, index v268
    v270 = load v256
    v271 = mul u64 2, v19
    range_check v271 to 64 bits
    v272 = div v269, Field 2⁴
    v273 = cast v269 as u4
    v274 = array_set v270, index v271, value v273
    v275 = add v271, Field 1
    v277 = mul u64 2, v19
    range_check v277 to 64 bits
    v278 = add v277, u64 1
    range_check v278 to 64 bits
    v279 = and v269, u8 15
    v280 = truncate v279 to 4 bits, max_bit_size: 8
    v281 = cast v280 as u4
    v282 = array_set v274, index v278, value v281
    v283 = add v278, Field 1
    store v282 at v256
    jmp b8()
  b8():
    v284 = add v19, Field 1
    jmp b3(v284)
  b5():
    jmp b6()
}

After Unrolling:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v251 = truncate v1 to 64 bits, max_bit_size: 254
    v252 = cast v251 as u64
    inc_rc v0
    v253 = lt u64 5, v252
    v254 = not v253
    constrain v253 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v256 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    v258 = array_get v0, index Field 0
    v259 = div v258, Field 2⁴
    v260 = cast v258 as u4
    v261 = truncate v260 to 1 bits, max_bit_size: 4
    v262 = cast v261 as u1
    jmpif v262 then: b1, else: b2
  b1():
    v286 = array_get v0, index Field 0
    v287 = and v286, u8 15
    v288 = truncate v287 to 4 bits, max_bit_size: 8
    v289 = cast v288 as u4
    store [v289, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    inc_rc v0
    v381 = truncate v1 to 64 bits, max_bit_size: 254
    v382 = cast v381 as u64
    v383 = lt u64 1, v382
    jmpif v383 then: b29, else: b30
  b29():
    v385 = array_get v0, index Field 1
    v386 = load v256
    v387 = div v385, Field 2⁴
    v388 = cast v385 as u4
    v389 = array_set v386, index Field 1, value v388
    v390 = and v385, u8 15
    v391 = truncate v390 to 4 bits, max_bit_size: 8
    v392 = cast v391 as u4
    v393 = array_set v389, index Field 2, value v392
    store v393 at v256
    jmp b30()
  b30():
    v394 = truncate v1 to 64 bits, max_bit_size: 254
    v395 = cast v394 as u64
    v396 = lt u64 2, v395
    jmpif v396 then: b34, else: b35
  b34():
    v398 = array_get v0, index Field 2
    v399 = load v256
    v400 = div v398, Field 2⁴
    v401 = cast v398 as u4
    v402 = array_set v399, index Field 3, value v401
    v403 = and v398, u8 15
    v404 = truncate v403 to 4 bits, max_bit_size: 8
    v405 = cast v404 as u4
    v406 = array_set v402, index Field 4, value v405
    store v406 at v256
    jmp b35()
  b35():
    v408 = truncate v1 to 64 bits, max_bit_size: 254
    v409 = cast v408 as u64
    v410 = lt u64 3, v409
    jmpif v410 then: b39, else: b40
  b39():
    v412 = array_get v0, index Field 3
    v413 = load v256
    v414 = div v412, Field 2⁴
    v415 = cast v412 as u4
    v416 = array_set v413, index Field 5, value v415
    v417 = and v412, u8 15
    v418 = truncate v417 to 4 bits, max_bit_size: 8
    v419 = cast v418 as u4
    v420 = array_set v416, index Field 6, value v419
    store v420 at v256
    jmp b40()
  b40():
    v421 = truncate v1 to 64 bits, max_bit_size: 254
    v422 = cast v421 as u64
    v423 = lt u64 4, v422
    jmpif v423 then: b44, else: b45
  b44():
    v425 = array_get v0, index Field 4
    v426 = load v256
    v427 = div v425, Field 2⁴
    v428 = cast v425 as u4
    v429 = array_set v426, index Field 7, value v428
    v430 = and v425, u8 15
    v431 = truncate v430 to 4 bits, max_bit_size: 8
    v432 = cast v431 as u4
    v433 = array_set v429, index Field 8, value v432
    store v433 at v256
    jmp b45()
  b45():
    jmp b11()
  b11():
    jmp b6()
  b6():
    v294 = load v256
    v295 = mul Field 2, v1
    v296 = cast v262 as Field
    v297 = add v295, v296
    v298 = sub v297, Field 2
    inc_rc v294
    inc_rc v294
    inc_rc v294
    v299 = eq v298, Field 5
    constrain v298 == Field 5
    v300 = array_get v294, index Field 0
    v301 = array_get v294, index Field 1
    v302 = array_get v294, index Field 2
    v303 = array_get v294, index Field 3
    v304 = array_get v294, index Field 4
    v305 = allocate
    store u1 1 at v305
    v780 = eq v300, u4 15
    v781 = load v305
    v782 = mul v781, v780
    store v782 at v305
    v786 = eq v301, u4 1
    v787 = load v305
    v788 = mul v787, v786
    store v788 at v305
    v792 = eq v302, u4 12
    v793 = load v305
    v794 = mul v793, v792
    store v794 at v305
    v798 = eq v303, u4 11
    v799 = load v305
    v800 = mul v799, v798
    store v800 at v305
    v804 = eq v304, u4 8
    v805 = load v305
    v806 = mul v805, v804
    store v806 at v305
    jmp b16()
  b16():
    v307 = load v305
    constrain v307 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v312 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    jmp b17()
  b17():
    jmp b18()
  b18():
    range_check u8 148 to 8 bits
    store [u8 148, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v654 = load v312
    v656 = array_set v654, index Field 1, value u8 184
    store v656 at v312
    v658 = load v312
    v660 = array_set v658, index Field 2, value u8 143
    store v660 at v312
    v662 = load v312
    v664 = array_set v662, index Field 3, value u8 97
    store v664 at v312
    v666 = load v312
    v668 = array_set v666, index Field 4, value u8 230
    store v668 at v312
    v670 = load v312
    v672 = array_set v670, index Field 5, value u8 251
    store v672 at v312
    v674 = load v312
    v676 = array_set v674, index Field 6, value u8 218
    store v676 at v312
    v678 = load v312
    v680 = array_set v678, index Field 7, value u8 131
    store v680 at v312
    v682 = load v312
    v684 = array_set v682, index Field 8, value u8 251
    store v684 at v312
    v686 = load v312
    v688 = array_set v686, index Field 9, value u8 255
    store v688 at v312
    v690 = load v312
    v692 = array_set v690, index Field 10, value u8 250
    store v692 at v312
    v694 = load v312
    v696 = array_set v694, index Field 11, value u8 190
    store v696 at v312
    v698 = load v312
    v700 = array_set v698, index Field 12, value u8 54
    store v700 at v312
    v702 = load v312
    v704 = array_set v702, index Field 13, value u8 65
    store v704 at v312
    v706 = load v312
    v708 = array_set v706, index Field 14, value u8 18
    store v708 at v312
    v710 = load v312
    v712 = array_set v710, index Field 15, value u8 19
    store v712 at v312
    v714 = load v312
    v716 = array_set v714, index Field 2⁴, value u8 116
    store v716 at v312
    v718 = load v312
    v720 = array_set v718, index Field 17, value u8 2⁷
    store v720 at v312
    v722 = load v312
    v724 = array_set v722, index Field 18, value u8 57
    store v724 at v312
    v726 = load v312
    v728 = array_set v726, index Field 19, value u8 2⁷
    store v728 at v312
    v730 = load v312
    v732 = array_set v730, index Field 20, value u8 24
    store v732 at v312
    v734 = load v312
    v736 = array_set v734, index Field 21, value u8 0
    store v736 at v312
    v738 = load v312
    v740 = array_set v738, index Field 22, value u8 0
    store v740 at v312
    v742 = load v312
    v744 = array_set v742, index Field 23, value u8 0
    store v744 at v312
    v746 = load v312
    v748 = array_set v746, index Field 24, value u8 0
    store v748 at v312
    v750 = load v312
    v752 = array_set v750, index Field 25, value u8 0
    store v752 at v312
    v754 = load v312
    v756 = array_set v754, index Field 26, value u8 0
    store v756 at v312
    v758 = load v312
    v760 = array_set v758, index Field 27, value u8 0
    store v760 at v312
    v762 = load v312
    v764 = array_set v762, index Field 28, value u8 0
    store v764 at v312
    v766 = load v312
    v768 = array_set v766, index Field 29, value u8 0
    store v768 at v312
    v770 = load v312
    v772 = array_set v770, index Field 30, value u8 0
    store v772 at v312
    v774 = load v312
    v776 = array_set v774, index Field 31, value u8 0
    store v776 at v312
    jmp b21()
  b21():
    v320 = load v312
    inc_rc v320
    jmp b22(v320, Field 21)
  b22(v131: [u8; 32], v132: Field):
    jmp b23(v131, v132)
  b23(v133: [u8; 32], v134: Field):
    inc_rc v133
    v321 = allocate
    store u1 1 at v321
    v462 = array_get v133, index Field 0
    v464 = eq v462, u8 148
    v465 = load v321
    v466 = mul v465, v464
    store v466 at v321
    v468 = array_get v133, index Field 1
    v470 = eq v468, u8 184
    v471 = load v321
    v472 = mul v471, v470
    store v472 at v321
    v474 = array_get v133, index Field 2
    v476 = eq v474, u8 143
    v477 = load v321
    v478 = mul v477, v476
    store v478 at v321
    v480 = array_get v133, index Field 3
    v482 = eq v480, u8 97
    v483 = load v321
    v484 = mul v483, v482
    store v484 at v321
    v486 = array_get v133, index Field 4
    v488 = eq v486, u8 230
    v489 = load v321
    v490 = mul v489, v488
    store v490 at v321
    v492 = array_get v133, index Field 5
    v494 = eq v492, u8 251
    v495 = load v321
    v496 = mul v495, v494
    store v496 at v321
    v498 = array_get v133, index Field 6
    v500 = eq v498, u8 218
    v501 = load v321
    v502 = mul v501, v500
    store v502 at v321
    v504 = array_get v133, index Field 7
    v506 = eq v504, u8 131
    v507 = load v321
    v508 = mul v507, v506
    store v508 at v321
    v510 = array_get v133, index Field 8
    v512 = eq v510, u8 251
    v513 = load v321
    v514 = mul v513, v512
    store v514 at v321
    v516 = array_get v133, index Field 9
    v518 = eq v516, u8 255
    v519 = load v321
    v520 = mul v519, v518
    store v520 at v321
    v522 = array_get v133, index Field 10
    v524 = eq v522, u8 250
    v525 = load v321
    v526 = mul v525, v524
    store v526 at v321
    v528 = array_get v133, index Field 11
    v530 = eq v528, u8 190
    v531 = load v321
    v532 = mul v531, v530
    store v532 at v321
    v534 = array_get v133, index Field 12
    v536 = eq v534, u8 54
    v537 = load v321
    v538 = mul v537, v536
    store v538 at v321
    v540 = array_get v133, index Field 13
    v542 = eq v540, u8 65
    v543 = load v321
    v544 = mul v543, v542
    store v544 at v321
    v546 = array_get v133, index Field 14
    v548 = eq v546, u8 18
    v549 = load v321
    v550 = mul v549, v548
    store v550 at v321
    v552 = array_get v133, index Field 15
    v554 = eq v552, u8 19
    v555 = load v321
    v556 = mul v555, v554
    store v556 at v321
    v558 = array_get v133, index Field 2⁴
    v560 = eq v558, u8 116
    v561 = load v321
    v562 = mul v561, v560
    store v562 at v321
    v564 = array_get v133, index Field 17
    v566 = eq v564, u8 2⁷
    v567 = load v321
    v568 = mul v567, v566
    store v568 at v321
    v570 = array_get v133, index Field 18
    v572 = eq v570, u8 57
    v573 = load v321
    v574 = mul v573, v572
    store v574 at v321
    v576 = array_get v133, index Field 19
    v578 = eq v576, u8 2⁷
    v579 = load v321
    v580 = mul v579, v578
    store v580 at v321
    v582 = array_get v133, index Field 20
    v584 = eq v582, u8 24
    v585 = load v321
    v586 = mul v585, v584
    store v586 at v321
    v588 = array_get v133, index Field 21
    v590 = eq v588, u8 0
    v591 = load v321
    v592 = mul v591, v590
    store v592 at v321
    v594 = array_get v133, index Field 22
    v596 = eq v594, u8 0
    v597 = load v321
    v598 = mul v597, v596
    store v598 at v321
    v600 = array_get v133, index Field 23
    v602 = eq v600, u8 0
    v603 = load v321
    v604 = mul v603, v602
    store v604 at v321
    v606 = array_get v133, index Field 24
    v608 = eq v606, u8 0
    v609 = load v321
    v610 = mul v609, v608
    store v610 at v321
    v612 = array_get v133, index Field 25
    v614 = eq v612, u8 0
    v615 = load v321
    v616 = mul v615, v614
    store v616 at v321
    v618 = array_get v133, index Field 26
    v620 = eq v618, u8 0
    v621 = load v321
    v622 = mul v621, v620
    store v622 at v321
    v624 = array_get v133, index Field 27
    v626 = eq v624, u8 0
    v627 = load v321
    v628 = mul v627, v626
    store v628 at v321
    v630 = array_get v133, index Field 28
    v632 = eq v630, u8 0
    v633 = load v321
    v634 = mul v633, v632
    store v634 at v321
    v636 = array_get v133, index Field 29
    v638 = eq v636, u8 0
    v639 = load v321
    v640 = mul v639, v638
    store v640 at v321
    v642 = array_get v133, index Field 30
    v644 = eq v642, u8 0
    v645 = load v321
    v646 = mul v645, v644
    store v646 at v321
    v648 = array_get v133, index Field 31
    v650 = eq v648, u8 0
    v651 = load v321
    v652 = mul v651, v650
    store v652 at v321
    jmp b26()
  b26():
    v323 = load v321
    constrain v323 == u1 1
    v324 = eq v134, Field 21
    constrain v134 == Field 21
    v325 = allocate
    store u64 1 at v325
    v328 = allocate
    store u64 2⁴ at v328
    v331 = allocate
    store u64 1 at v331
    v334 = allocate
    store u64 2⁴ at v334
    return 
  b2():
    v434 = truncate v1 to 64 bits, max_bit_size: 254
    v435 = cast v434 as u64
    v436 = sub v435, u64 1
    range_check v436 to 64 bits
    v437 = lt u64 0, v436
    jmpif v437 then: b51, else: b52
  b51():
    v439 = array_get v0, index u64 1
    v440 = load v256
    v441 = div v439, Field 2⁴
    v442 = cast v439 as u4
    v443 = array_set v440, index u64 0, value v442
    v444 = and v439, u8 15
    v445 = truncate v444 to 4 bits, max_bit_size: 8
    v446 = cast v445 as u4
    v447 = array_set v443, index u64 1, value v446
    store v447 at v256
    jmp b52()
  b52():
    v448 = truncate v1 to 64 bits, max_bit_size: 254
    v449 = cast v448 as u64
    v450 = sub v449, u64 1
    range_check v450 to 64 bits
    v451 = lt u64 1, v450
    jmpif v451 then: b56, else: b57
  b56():
    v453 = array_get v0, index u64 2
    v454 = load v256
    v455 = div v453, Field 2⁴
    v456 = cast v453 as u4
    v457 = array_set v454, index u64 2, value v456
    v458 = and v453, u8 15
    v459 = truncate v458 to 4 bits, max_bit_size: 8
    v460 = cast v459 as u4
    v461 = array_set v457, index u64 3, value v460
    store v461 at v256
    jmp b57()
  b57():
    jmp b5()
  b5():
    jmp b6()
}

After Simplifying:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v251 = truncate v1 to 64 bits, max_bit_size: 254
    v252 = cast v251 as u64
    inc_rc v0
    v253 = lt u64 5, v252
    v254 = not v253
    constrain v253 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v256 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    v258 = array_get v0, index Field 0
    v259 = div v258, Field 2⁴
    v260 = cast v258 as u4
    v261 = truncate v260 to 1 bits, max_bit_size: 4
    v262 = cast v261 as u1
    jmpif v262 then: b1, else: b2
  b1():
    v286 = array_get v0, index Field 0
    v287 = and v286, u8 15
    v288 = truncate v287 to 4 bits, max_bit_size: 8
    v289 = cast v288 as u4
    store [v289, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v256
    inc_rc v0
    v381 = truncate v1 to 64 bits, max_bit_size: 254
    v382 = cast v381 as u64
    v383 = lt u64 1, v382
    jmpif v383 then: b29, else: b30
  b29():
    v385 = array_get v0, index Field 1
    v386 = load v256
    v387 = div v385, Field 2⁴
    v388 = cast v385 as u4
    v389 = array_set v386, index Field 1, value v388
    v390 = and v385, u8 15
    v391 = truncate v390 to 4 bits, max_bit_size: 8
    v392 = cast v391 as u4
    v393 = array_set v389, index Field 2, value v392
    store v393 at v256
    jmp b30()
  b30():
    v394 = truncate v1 to 64 bits, max_bit_size: 254
    v395 = cast v394 as u64
    v396 = lt u64 2, v395
    jmpif v396 then: b34, else: b35
  b34():
    v398 = array_get v0, index Field 2
    v399 = load v256
    v400 = div v398, Field 2⁴
    v401 = cast v398 as u4
    v402 = array_set v399, index Field 3, value v401
    v403 = and v398, u8 15
    v404 = truncate v403 to 4 bits, max_bit_size: 8
    v405 = cast v404 as u4
    v406 = array_set v402, index Field 4, value v405
    store v406 at v256
    jmp b35()
  b35():
    v408 = truncate v1 to 64 bits, max_bit_size: 254
    v409 = cast v408 as u64
    v410 = lt u64 3, v409
    jmpif v410 then: b39, else: b40
  b39():
    v412 = array_get v0, index Field 3
    v413 = load v256
    v414 = div v412, Field 2⁴
    v415 = cast v412 as u4
    v416 = array_set v413, index Field 5, value v415
    v417 = and v412, u8 15
    v418 = truncate v417 to 4 bits, max_bit_size: 8
    v419 = cast v418 as u4
    v420 = array_set v416, index Field 6, value v419
    store v420 at v256
    jmp b40()
  b40():
    v421 = truncate v1 to 64 bits, max_bit_size: 254
    v422 = cast v421 as u64
    v423 = lt u64 4, v422
    jmpif v423 then: b44, else: b45
  b44():
    v425 = array_get v0, index Field 4
    v426 = load v256
    v427 = div v425, Field 2⁴
    v428 = cast v425 as u4
    v429 = array_set v426, index Field 7, value v428
    v430 = and v425, u8 15
    v431 = truncate v430 to 4 bits, max_bit_size: 8
    v432 = cast v431 as u4
    v433 = array_set v429, index Field 8, value v432
    store v433 at v256
    jmp b45()
  b45():
    jmp b6()
  b6():
    v294 = load v256
    v295 = mul Field 2, v1
    v296 = cast v262 as Field
    v297 = add v295, v296
    v298 = sub v297, Field 2
    inc_rc v294
    inc_rc v294
    inc_rc v294
    v299 = eq v298, Field 5
    constrain v298 == Field 5
    v300 = array_get v294, index Field 0
    v301 = array_get v294, index Field 1
    v302 = array_get v294, index Field 2
    v303 = array_get v294, index Field 3
    v304 = array_get v294, index Field 4
    v305 = allocate
    store u1 1 at v305
    v780 = eq v300, u4 15
    v781 = load v305
    v782 = mul v781, v780
    store v782 at v305
    v786 = eq v301, u4 1
    v787 = load v305
    v788 = mul v787, v786
    store v788 at v305
    v792 = eq v302, u4 12
    v793 = load v305
    v794 = mul v793, v792
    store v794 at v305
    v798 = eq v303, u4 11
    v799 = load v305
    v800 = mul v799, v798
    store v800 at v305
    v804 = eq v304, u4 8
    v805 = load v305
    v806 = mul v805, v804
    store v806 at v305
    v307 = load v305
    constrain v307 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v312 = allocate
    store [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    range_check u8 148 to 8 bits
    store [u8 148, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v312
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v654 = load v312
    v656 = array_set v654, index Field 1, value u8 184
    store v656 at v312
    v658 = load v312
    v660 = array_set v658, index Field 2, value u8 143
    store v660 at v312
    v662 = load v312
    v664 = array_set v662, index Field 3, value u8 97
    store v664 at v312
    v666 = load v312
    v668 = array_set v666, index Field 4, value u8 230
    store v668 at v312
    v670 = load v312
    v672 = array_set v670, index Field 5, value u8 251
    store v672 at v312
    v674 = load v312
    v676 = array_set v674, index Field 6, value u8 218
    store v676 at v312
    v678 = load v312
    v680 = array_set v678, index Field 7, value u8 131
    store v680 at v312
    v682 = load v312
    v684 = array_set v682, index Field 8, value u8 251
    store v684 at v312
    v686 = load v312
    v688 = array_set v686, index Field 9, value u8 255
    store v688 at v312
    v690 = load v312
    v692 = array_set v690, index Field 10, value u8 250
    store v692 at v312
    v694 = load v312
    v696 = array_set v694, index Field 11, value u8 190
    store v696 at v312
    v698 = load v312
    v700 = array_set v698, index Field 12, value u8 54
    store v700 at v312
    v702 = load v312
    v704 = array_set v702, index Field 13, value u8 65
    store v704 at v312
    v706 = load v312
    v708 = array_set v706, index Field 14, value u8 18
    store v708 at v312
    v710 = load v312
    v712 = array_set v710, index Field 15, value u8 19
    store v712 at v312
    v714 = load v312
    v716 = array_set v714, index Field 2⁴, value u8 116
    store v716 at v312
    v718 = load v312
    v720 = array_set v718, index Field 17, value u8 2⁷
    store v720 at v312
    v722 = load v312
    v724 = array_set v722, index Field 18, value u8 57
    store v724 at v312
    v726 = load v312
    v728 = array_set v726, index Field 19, value u8 2⁷
    store v728 at v312
    v730 = load v312
    v732 = array_set v730, index Field 20, value u8 24
    store v732 at v312
    v734 = load v312
    v736 = array_set v734, index Field 21, value u8 0
    store v736 at v312
    v738 = load v312
    v740 = array_set v738, index Field 22, value u8 0
    store v740 at v312
    v742 = load v312
    v744 = array_set v742, index Field 23, value u8 0
    store v744 at v312
    v746 = load v312
    v748 = array_set v746, index Field 24, value u8 0
    store v748 at v312
    v750 = load v312
    v752 = array_set v750, index Field 25, value u8 0
    store v752 at v312
    v754 = load v312
    v756 = array_set v754, index Field 26, value u8 0
    store v756 at v312
    v758 = load v312
    v760 = array_set v758, index Field 27, value u8 0
    store v760 at v312
    v762 = load v312
    v764 = array_set v762, index Field 28, value u8 0
    store v764 at v312
    v766 = load v312
    v768 = array_set v766, index Field 29, value u8 0
    store v768 at v312
    v770 = load v312
    v772 = array_set v770, index Field 30, value u8 0
    store v772 at v312
    v774 = load v312
    v776 = array_set v774, index Field 31, value u8 0
    store v776 at v312
    v320 = load v312
    inc_rc v320
    inc_rc v320
    v321 = allocate
    store u1 1 at v321
    v462 = array_get v320, index Field 0
    v464 = eq v462, u8 148
    v465 = load v321
    v466 = mul v465, v464
    store v466 at v321
    v468 = array_get v320, index Field 1
    v470 = eq v468, u8 184
    v471 = load v321
    v472 = mul v471, v470
    store v472 at v321
    v474 = array_get v320, index Field 2
    v476 = eq v474, u8 143
    v477 = load v321
    v478 = mul v477, v476
    store v478 at v321
    v480 = array_get v320, index Field 3
    v482 = eq v480, u8 97
    v483 = load v321
    v484 = mul v483, v482
    store v484 at v321
    v486 = array_get v320, index Field 4
    v488 = eq v486, u8 230
    v489 = load v321
    v490 = mul v489, v488
    store v490 at v321
    v492 = array_get v320, index Field 5
    v494 = eq v492, u8 251
    v495 = load v321
    v496 = mul v495, v494
    store v496 at v321
    v498 = array_get v320, index Field 6
    v500 = eq v498, u8 218
    v501 = load v321
    v502 = mul v501, v500
    store v502 at v321
    v504 = array_get v320, index Field 7
    v506 = eq v504, u8 131
    v507 = load v321
    v508 = mul v507, v506
    store v508 at v321
    v510 = array_get v320, index Field 8
    v512 = eq v510, u8 251
    v513 = load v321
    v514 = mul v513, v512
    store v514 at v321
    v516 = array_get v320, index Field 9
    v518 = eq v516, u8 255
    v519 = load v321
    v520 = mul v519, v518
    store v520 at v321
    v522 = array_get v320, index Field 10
    v524 = eq v522, u8 250
    v525 = load v321
    v526 = mul v525, v524
    store v526 at v321
    v528 = array_get v320, index Field 11
    v530 = eq v528, u8 190
    v531 = load v321
    v532 = mul v531, v530
    store v532 at v321
    v534 = array_get v320, index Field 12
    v536 = eq v534, u8 54
    v537 = load v321
    v538 = mul v537, v536
    store v538 at v321
    v540 = array_get v320, index Field 13
    v542 = eq v540, u8 65
    v543 = load v321
    v544 = mul v543, v542
    store v544 at v321
    v546 = array_get v320, index Field 14
    v548 = eq v546, u8 18
    v549 = load v321
    v550 = mul v549, v548
    store v550 at v321
    v552 = array_get v320, index Field 15
    v554 = eq v552, u8 19
    v555 = load v321
    v556 = mul v555, v554
    store v556 at v321
    v558 = array_get v320, index Field 2⁴
    v560 = eq v558, u8 116
    v561 = load v321
    v562 = mul v561, v560
    store v562 at v321
    v564 = array_get v320, index Field 17
    v566 = eq v564, u8 2⁷
    v567 = load v321
    v568 = mul v567, v566
    store v568 at v321
    v570 = array_get v320, index Field 18
    v572 = eq v570, u8 57
    v573 = load v321
    v574 = mul v573, v572
    store v574 at v321
    v576 = array_get v320, index Field 19
    v578 = eq v576, u8 2⁷
    v579 = load v321
    v580 = mul v579, v578
    store v580 at v321
    v582 = array_get v320, index Field 20
    v584 = eq v582, u8 24
    v585 = load v321
    v586 = mul v585, v584
    store v586 at v321
    v588 = array_get v320, index Field 21
    v590 = eq v588, u8 0
    v591 = load v321
    v592 = mul v591, v590
    store v592 at v321
    v594 = array_get v320, index Field 22
    v596 = eq v594, u8 0
    v597 = load v321
    v598 = mul v597, v596
    store v598 at v321
    v600 = array_get v320, index Field 23
    v602 = eq v600, u8 0
    v603 = load v321
    v604 = mul v603, v602
    store v604 at v321
    v606 = array_get v320, index Field 24
    v608 = eq v606, u8 0
    v609 = load v321
    v610 = mul v609, v608
    store v610 at v321
    v612 = array_get v320, index Field 25
    v614 = eq v612, u8 0
    v615 = load v321
    v616 = mul v615, v614
    store v616 at v321
    v618 = array_get v320, index Field 26
    v620 = eq v618, u8 0
    v621 = load v321
    v622 = mul v621, v620
    store v622 at v321
    v624 = array_get v320, index Field 27
    v626 = eq v624, u8 0
    v627 = load v321
    v628 = mul v627, v626
    store v628 at v321
    v630 = array_get v320, index Field 28
    v632 = eq v630, u8 0
    v633 = load v321
    v634 = mul v633, v632
    store v634 at v321
    v636 = array_get v320, index Field 29
    v638 = eq v636, u8 0
    v639 = load v321
    v640 = mul v639, v638
    store v640 at v321
    v642 = array_get v320, index Field 30
    v644 = eq v642, u8 0
    v645 = load v321
    v646 = mul v645, v644
    store v646 at v321
    v648 = array_get v320, index Field 31
    v650 = eq v648, u8 0
    v651 = load v321
    v652 = mul v651, v650
    store v652 at v321
    v323 = load v321
    constrain v323 == u1 1
    v324 = eq Field 21, Field 21
    constrain Field 21 == Field 21
    v325 = allocate
    store u64 1 at v325
    v328 = allocate
    store u64 2⁴ at v328
    v331 = allocate
    store u64 1 at v331
    v334 = allocate
    store u64 2⁴ at v334
    return 
  b2():
    v434 = truncate v1 to 64 bits, max_bit_size: 254
    v435 = cast v434 as u64
    v436 = sub v435, u64 1
    range_check v436 to 64 bits
    v437 = lt u64 0, v436
    jmpif v437 then: b51, else: b52
  b51():
    v439 = array_get v0, index u64 1
    v440 = load v256
    v441 = div v439, Field 2⁴
    v442 = cast v439 as u4
    v443 = array_set v440, index u64 0, value v442
    v444 = and v439, u8 15
    v445 = truncate v444 to 4 bits, max_bit_size: 8
    v446 = cast v445 as u4
    v447 = array_set v443, index u64 1, value v446
    store v447 at v256
    jmp b52()
  b52():
    v448 = truncate v1 to 64 bits, max_bit_size: 254
    v449 = cast v448 as u64
    v450 = sub v449, u64 1
    range_check v450 to 64 bits
    v451 = lt u64 1, v450
    jmpif v451 then: b56, else: b57
  b56():
    v453 = array_get v0, index u64 2
    v454 = load v256
    v455 = div v453, Field 2⁴
    v456 = cast v453 as u4
    v457 = array_set v454, index u64 2, value v456
    v458 = and v453, u8 15
    v459 = truncate v458 to 4 bits, max_bit_size: 8
    v460 = cast v459 as u4
    v461 = array_set v457, index u64 3, value v460
    store v461 at v256
    jmp b57()
  b57():
    jmp b6()
}

After Mem2Reg:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v808 = truncate v1 to 64 bits, max_bit_size: 254
    v809 = cast v808 as u64
    inc_rc v0
    v810 = lt u64 5, v809
    v811 = not v810
    constrain v810 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v813 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    v815 = array_get v0, index Field 0
    v816 = div v815, Field 2⁴
    v817 = cast v815 as u4
    v818 = truncate v817 to 1 bits, max_bit_size: 4
    v819 = cast v818 as u1
    jmpif v819 then: b1, else: b2
  b1():
    v849 = array_get v0, index Field 0
    v850 = and v849, u8 15
    v851 = truncate v850 to 4 bits, max_bit_size: 8
    v852 = cast v851 as u4
    store [v852, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    inc_rc v0
    v854 = truncate v1 to 64 bits, max_bit_size: 254
    v855 = cast v854 as u64
    v856 = lt u64 1, v855
    jmpif v856 then: b29, else: b30
  b29():
    v857 = array_get v0, index Field 1
    v859 = div v857, Field 2⁴
    v860 = cast v857 as u4
    v863 = and v857, u8 15
    v864 = truncate v863 to 4 bits, max_bit_size: 8
    v865 = cast v864 as u4
    store [v852, v860, v865, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    jmp b30()
  b30():
    v869 = truncate v1 to 64 bits, max_bit_size: 254
    v870 = cast v869 as u64
    v871 = lt u64 2, v870
    jmpif v871 then: b34, else: b35
  b34():
    v872 = array_get v0, index Field 2
    v873 = load v813
    v874 = div v872, Field 2⁴
    v875 = cast v872 as u4
    v876 = array_set v873, index Field 3, value v875
    v877 = and v872, u8 15
    v878 = truncate v877 to 4 bits, max_bit_size: 8
    v879 = cast v878 as u4
    v880 = array_set v876, index Field 4, value v879
    store v880 at v813
    jmp b35()
  b35():
    v881 = truncate v1 to 64 bits, max_bit_size: 254
    v882 = cast v881 as u64
    v883 = lt u64 3, v882
    jmpif v883 then: b39, else: b40
  b39():
    v884 = array_get v0, index Field 3
    v885 = load v813
    v886 = div v884, Field 2⁴
    v887 = cast v884 as u4
    v888 = array_set v885, index Field 5, value v887
    v889 = and v884, u8 15
    v890 = truncate v889 to 4 bits, max_bit_size: 8
    v891 = cast v890 as u4
    v892 = array_set v888, index Field 6, value v891
    store v892 at v813
    jmp b40()
  b40():
    v893 = truncate v1 to 64 bits, max_bit_size: 254
    v894 = cast v893 as u64
    v895 = lt u64 4, v894
    jmpif v895 then: b44, else: b45
  b44():
    v896 = array_get v0, index Field 4
    v897 = load v813
    v898 = div v896, Field 2⁴
    v899 = cast v896 as u4
    v900 = array_set v897, index Field 7, value v899
    v901 = and v896, u8 15
    v902 = truncate v901 to 4 bits, max_bit_size: 8
    v903 = cast v902 as u4
    v904 = array_set v900, index Field 8, value v903
    store v904 at v813
    jmp b45()
  b45():
    jmp b6()
  b6():
    v905 = load v813
    v906 = mul Field 2, v1
    v907 = cast v819 as Field
    v908 = add v906, v907
    v909 = sub v908, Field 2
    inc_rc v905
    inc_rc v905
    inc_rc v905
    v910 = eq v909, Field 5
    constrain v909 == Field 5
    v911 = array_get v905, index Field 0
    v912 = array_get v905, index Field 1
    v913 = array_get v905, index Field 2
    v914 = array_get v905, index Field 3
    v915 = array_get v905, index Field 4
    v916 = allocate
    v917 = eq v911, u4 15
    v919 = eq v912, u4 1
    v921 = mul v917, v919
    v922 = eq v913, u4 12
    v924 = mul v921, v922
    v925 = eq v914, u4 11
    v927 = mul v924, v925
    v928 = eq v915, u4 8
    v930 = mul v927, v928
    store v930 at v916
    constrain v930 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v936 = allocate
    range_check u8 148 to 8 bits
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    store [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v936
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v1067 = allocate
    store u1 1 at v1067
    v1133 = allocate
    store u64 1 at v1133
    v1134 = allocate
    store u64 2⁴ at v1134
    v1135 = allocate
    store u64 1 at v1135
    v1136 = allocate
    store u64 2⁴ at v1136
    return 
  b2():
    v820 = truncate v1 to 64 bits, max_bit_size: 254
    v821 = cast v820 as u64
    v822 = sub v821, u64 1
    range_check v822 to 64 bits
    v823 = lt u64 0, v822
    jmpif v823 then: b51, else: b52
  b51():
    v824 = array_get v0, index u64 1
    v826 = div v824, Field 2⁴
    v827 = cast v824 as u4
    v830 = and v824, u8 15
    v831 = truncate v830 to 4 bits, max_bit_size: 8
    v832 = cast v831 as u4
    store [v827, v832, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    jmp b52()
  b52():
    v836 = truncate v1 to 64 bits, max_bit_size: 254
    v837 = cast v836 as u64
    v838 = sub v837, u64 1
    range_check v838 to 64 bits
    v839 = lt u64 1, v838
    jmpif v839 then: b56, else: b57
  b56():
    v840 = array_get v0, index u64 2
    v841 = load v813
    v842 = div v840, Field 2⁴
    v843 = cast v840 as u4
    v844 = array_set v841, index u64 2, value v843
    v845 = and v840, u8 15
    v846 = truncate v845 to 4 bits, max_bit_size: 8
    v847 = cast v846 as u4
    v848 = array_set v844, index u64 3, value v847
    store v848 at v813
    jmp b57()
  b57():
    jmp b6()
}

After Flattening:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v808 = truncate v1 to 64 bits, max_bit_size: 254
    v809 = cast v808 as u64
    inc_rc v0
    v810 = lt u64 5, v809
    v811 = not v810
    constrain v810 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v813 = allocate
    store [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    v815 = array_get v0, index Field 0
    v816 = div v815, Field 2⁴
    v817 = cast v815 as u4
    v818 = truncate v817 to 1 bits, max_bit_size: 4
    v819 = cast v818 as u1
    enable_side_effects v819
    v1139 = array_get v0, index Field 0
    v1140 = and v1139, u8 15
    v1141 = truncate v1140 to 4 bits, max_bit_size: 8
    v1142 = cast v1141 as u4
    v1144 = load v813
    store [v1142, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    inc_rc v0
    v1145 = truncate v1 to 64 bits, max_bit_size: 254
    v1146 = cast v1145 as u64
    v1147 = lt u64 1, v1146
    v1149 = mul v819, v1147
    enable_side_effects v1149
    v1150 = array_get v0, index Field 1
    v1151 = div v1150, Field 2⁴
    v1152 = cast v1150 as u4
    v1153 = and v1150, u8 15
    v1154 = truncate v1153 to 4 bits, max_bit_size: 8
    v1155 = cast v1154 as u4
    v1157 = load v813
    store [v1142, v1152, v1155, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    v1158 = not v1147
    store v1157 at v813
    enable_side_effects v819
    v1159 = array_get v1157, index Field 0
    v1160 = cast v1147 as u4
    v1161 = cast v1158 as u4
    v1162 = mul v1160, v1142
    v1163 = mul v1161, v1159
    v1164 = add v1162, v1163
    v1165 = array_get v1157, index Field 1
    v1166 = cast v1147 as u4
    v1167 = cast v1158 as u4
    v1168 = mul v1166, v1152
    v1169 = mul v1167, v1165
    v1170 = add v1168, v1169
    v1171 = array_get v1157, index Field 2
    v1172 = cast v1147 as u4
    v1173 = cast v1158 as u4
    v1174 = mul v1172, v1155
    v1175 = mul v1173, v1171
    v1176 = add v1174, v1175
    v1177 = array_get v1157, index Field 3
    v1178 = cast v1147 as u4
    v1179 = cast v1158 as u4
    v1180 = mul v1179, v1177
    v1181 = array_get v1157, index Field 4
    v1182 = cast v1147 as u4
    v1183 = cast v1158 as u4
    v1184 = mul v1183, v1181
    v1185 = array_get v1157, index Field 5
    v1186 = cast v1147 as u4
    v1187 = cast v1158 as u4
    v1188 = mul v1187, v1185
    v1189 = array_get v1157, index Field 6
    v1190 = cast v1147 as u4
    v1191 = cast v1158 as u4
    v1192 = mul v1191, v1189
    v1193 = array_get v1157, index Field 7
    v1194 = cast v1147 as u4
    v1195 = cast v1158 as u4
    v1196 = mul v1195, v1193
    v1197 = array_get v1157, index Field 8
    v1198 = cast v1147 as u4
    v1199 = cast v1158 as u4
    v1200 = mul v1199, v1197
    v1201 = array_get v1157, index Field 9
    v1202 = cast v1147 as u4
    v1203 = cast v1158 as u4
    v1204 = mul v1203, v1201
    v1205 = array_get v1157, index Field 10
    v1206 = cast v1147 as u4
    v1207 = cast v1158 as u4
    v1208 = mul v1207, v1205
    v1209 = array_get v1157, index Field 11
    v1210 = cast v1147 as u4
    v1211 = cast v1158 as u4
    v1212 = mul v1211, v1209
    v1213 = array_get v1157, index Field 12
    v1214 = cast v1147 as u4
    v1215 = cast v1158 as u4
    v1216 = mul v1215, v1213
    v1217 = array_get v1157, index Field 13
    v1218 = cast v1147 as u4
    v1219 = cast v1158 as u4
    v1220 = mul v1219, v1217
    v1221 = array_get v1157, index Field 14
    v1222 = cast v1147 as u4
    v1223 = cast v1158 as u4
    v1224 = mul v1223, v1221
    v1225 = array_get v1157, index Field 15
    v1226 = cast v1147 as u4
    v1227 = cast v1158 as u4
    v1228 = mul v1227, v1225
    store [v1164, v1170, v1176, v1180, v1184, v1188, v1192, v1196, v1200, v1204, v1208, v1212, v1216, v1220, v1224, v1228] at v813
    v1230 = truncate v1 to 64 bits, max_bit_size: 254
    v1231 = cast v1230 as u64
    v1232 = lt u64 2, v1231
    v1233 = mul v819, v1232
    enable_side_effects v1233
    v1234 = array_get v0, index Field 2
    v1235 = load v813
    v1236 = div v1234, Field 2⁴
    v1237 = cast v1234 as u4
    v1238 = array_set v1235, index Field 3, value v1237
    v1239 = and v1234, u8 15
    v1240 = truncate v1239 to 4 bits, max_bit_size: 8
    v1241 = cast v1240 as u4
    v1242 = array_set v1238, index Field 4, value v1241
    v1243 = load v813
    store v1242 at v813
    v1244 = not v1232
    store v1243 at v813
    enable_side_effects v819
    v1245 = array_get v1242, index Field 0
    v1246 = array_get v1243, index Field 0
    v1247 = cast v1232 as u4
    v1248 = cast v1244 as u4
    v1249 = mul v1247, v1245
    v1250 = mul v1248, v1246
    v1251 = add v1249, v1250
    v1252 = array_get v1242, index Field 1
    v1253 = array_get v1243, index Field 1
    v1254 = cast v1232 as u4
    v1255 = cast v1244 as u4
    v1256 = mul v1254, v1252
    v1257 = mul v1255, v1253
    v1258 = add v1256, v1257
    v1259 = array_get v1242, index Field 2
    v1260 = array_get v1243, index Field 2
    v1261 = cast v1232 as u4
    v1262 = cast v1244 as u4
    v1263 = mul v1261, v1259
    v1264 = mul v1262, v1260
    v1265 = add v1263, v1264
    v1266 = array_get v1242, index Field 3
    v1267 = array_get v1243, index Field 3
    v1268 = cast v1232 as u4
    v1269 = cast v1244 as u4
    v1270 = mul v1268, v1266
    v1271 = mul v1269, v1267
    v1272 = add v1270, v1271
    v1273 = array_get v1242, index Field 4
    v1274 = array_get v1243, index Field 4
    v1275 = cast v1232 as u4
    v1276 = cast v1244 as u4
    v1277 = mul v1275, v1273
    v1278 = mul v1276, v1274
    v1279 = add v1277, v1278
    v1280 = array_get v1242, index Field 5
    v1281 = array_get v1243, index Field 5
    v1282 = cast v1232 as u4
    v1283 = cast v1244 as u4
    v1284 = mul v1282, v1280
    v1285 = mul v1283, v1281
    v1286 = add v1284, v1285
    v1287 = array_get v1242, index Field 6
    v1288 = array_get v1243, index Field 6
    v1289 = cast v1232 as u4
    v1290 = cast v1244 as u4
    v1291 = mul v1289, v1287
    v1292 = mul v1290, v1288
    v1293 = add v1291, v1292
    v1294 = array_get v1242, index Field 7
    v1295 = array_get v1243, index Field 7
    v1296 = cast v1232 as u4
    v1297 = cast v1244 as u4
    v1298 = mul v1296, v1294
    v1299 = mul v1297, v1295
    v1300 = add v1298, v1299
    v1301 = array_get v1242, index Field 8
    v1302 = array_get v1243, index Field 8
    v1303 = cast v1232 as u4
    v1304 = cast v1244 as u4
    v1305 = mul v1303, v1301
    v1306 = mul v1304, v1302
    v1307 = add v1305, v1306
    v1308 = array_get v1242, index Field 9
    v1309 = array_get v1243, index Field 9
    v1310 = cast v1232 as u4
    v1311 = cast v1244 as u4
    v1312 = mul v1310, v1308
    v1313 = mul v1311, v1309
    v1314 = add v1312, v1313
    v1315 = array_get v1242, index Field 10
    v1316 = array_get v1243, index Field 10
    v1317 = cast v1232 as u4
    v1318 = cast v1244 as u4
    v1319 = mul v1317, v1315
    v1320 = mul v1318, v1316
    v1321 = add v1319, v1320
    v1322 = array_get v1242, index Field 11
    v1323 = array_get v1243, index Field 11
    v1324 = cast v1232 as u4
    v1325 = cast v1244 as u4
    v1326 = mul v1324, v1322
    v1327 = mul v1325, v1323
    v1328 = add v1326, v1327
    v1329 = array_get v1242, index Field 12
    v1330 = array_get v1243, index Field 12
    v1331 = cast v1232 as u4
    v1332 = cast v1244 as u4
    v1333 = mul v1331, v1329
    v1334 = mul v1332, v1330
    v1335 = add v1333, v1334
    v1336 = array_get v1242, index Field 13
    v1337 = array_get v1243, index Field 13
    v1338 = cast v1232 as u4
    v1339 = cast v1244 as u4
    v1340 = mul v1338, v1336
    v1341 = mul v1339, v1337
    v1342 = add v1340, v1341
    v1343 = array_get v1242, index Field 14
    v1344 = array_get v1243, index Field 14
    v1345 = cast v1232 as u4
    v1346 = cast v1244 as u4
    v1347 = mul v1345, v1343
    v1348 = mul v1346, v1344
    v1349 = add v1347, v1348
    v1350 = array_get v1242, index Field 15
    v1351 = array_get v1243, index Field 15
    v1352 = cast v1232 as u4
    v1353 = cast v1244 as u4
    v1354 = mul v1352, v1350
    v1355 = mul v1353, v1351
    v1356 = add v1354, v1355
    store [v1251, v1258, v1265, v1272, v1279, v1286, v1293, v1300, v1307, v1314, v1321, v1328, v1335, v1342, v1349, v1356] at v813
    v1358 = truncate v1 to 64 bits, max_bit_size: 254
    v1359 = cast v1358 as u64
    v1360 = lt u64 3, v1359
    v1361 = mul v819, v1360
    enable_side_effects v1361
    v1362 = array_get v0, index Field 3
    v1363 = load v813
    v1364 = div v1362, Field 2⁴
    v1365 = cast v1362 as u4
    v1366 = array_set v1363, index Field 5, value v1365
    v1367 = and v1362, u8 15
    v1368 = truncate v1367 to 4 bits, max_bit_size: 8
    v1369 = cast v1368 as u4
    v1370 = array_set v1366, index Field 6, value v1369
    v1371 = load v813
    store v1370 at v813
    v1372 = not v1360
    store v1371 at v813
    enable_side_effects v819
    v1373 = array_get v1370, index Field 0
    v1374 = array_get v1371, index Field 0
    v1375 = cast v1360 as u4
    v1376 = cast v1372 as u4
    v1377 = mul v1375, v1373
    v1378 = mul v1376, v1374
    v1379 = add v1377, v1378
    v1380 = array_get v1370, index Field 1
    v1381 = array_get v1371, index Field 1
    v1382 = cast v1360 as u4
    v1383 = cast v1372 as u4
    v1384 = mul v1382, v1380
    v1385 = mul v1383, v1381
    v1386 = add v1384, v1385
    v1387 = array_get v1370, index Field 2
    v1388 = array_get v1371, index Field 2
    v1389 = cast v1360 as u4
    v1390 = cast v1372 as u4
    v1391 = mul v1389, v1387
    v1392 = mul v1390, v1388
    v1393 = add v1391, v1392
    v1394 = array_get v1370, index Field 3
    v1395 = array_get v1371, index Field 3
    v1396 = cast v1360 as u4
    v1397 = cast v1372 as u4
    v1398 = mul v1396, v1394
    v1399 = mul v1397, v1395
    v1400 = add v1398, v1399
    v1401 = array_get v1370, index Field 4
    v1402 = array_get v1371, index Field 4
    v1403 = cast v1360 as u4
    v1404 = cast v1372 as u4
    v1405 = mul v1403, v1401
    v1406 = mul v1404, v1402
    v1407 = add v1405, v1406
    v1408 = array_get v1370, index Field 5
    v1409 = array_get v1371, index Field 5
    v1410 = cast v1360 as u4
    v1411 = cast v1372 as u4
    v1412 = mul v1410, v1408
    v1413 = mul v1411, v1409
    v1414 = add v1412, v1413
    v1415 = array_get v1370, index Field 6
    v1416 = array_get v1371, index Field 6
    v1417 = cast v1360 as u4
    v1418 = cast v1372 as u4
    v1419 = mul v1417, v1415
    v1420 = mul v1418, v1416
    v1421 = add v1419, v1420
    v1422 = array_get v1370, index Field 7
    v1423 = array_get v1371, index Field 7
    v1424 = cast v1360 as u4
    v1425 = cast v1372 as u4
    v1426 = mul v1424, v1422
    v1427 = mul v1425, v1423
    v1428 = add v1426, v1427
    v1429 = array_get v1370, index Field 8
    v1430 = array_get v1371, index Field 8
    v1431 = cast v1360 as u4
    v1432 = cast v1372 as u4
    v1433 = mul v1431, v1429
    v1434 = mul v1432, v1430
    v1435 = add v1433, v1434
    v1436 = array_get v1370, index Field 9
    v1437 = array_get v1371, index Field 9
    v1438 = cast v1360 as u4
    v1439 = cast v1372 as u4
    v1440 = mul v1438, v1436
    v1441 = mul v1439, v1437
    v1442 = add v1440, v1441
    v1443 = array_get v1370, index Field 10
    v1444 = array_get v1371, index Field 10
    v1445 = cast v1360 as u4
    v1446 = cast v1372 as u4
    v1447 = mul v1445, v1443
    v1448 = mul v1446, v1444
    v1449 = add v1447, v1448
    v1450 = array_get v1370, index Field 11
    v1451 = array_get v1371, index Field 11
    v1452 = cast v1360 as u4
    v1453 = cast v1372 as u4
    v1454 = mul v1452, v1450
    v1455 = mul v1453, v1451
    v1456 = add v1454, v1455
    v1457 = array_get v1370, index Field 12
    v1458 = array_get v1371, index Field 12
    v1459 = cast v1360 as u4
    v1460 = cast v1372 as u4
    v1461 = mul v1459, v1457
    v1462 = mul v1460, v1458
    v1463 = add v1461, v1462
    v1464 = array_get v1370, index Field 13
    v1465 = array_get v1371, index Field 13
    v1466 = cast v1360 as u4
    v1467 = cast v1372 as u4
    v1468 = mul v1466, v1464
    v1469 = mul v1467, v1465
    v1470 = add v1468, v1469
    v1471 = array_get v1370, index Field 14
    v1472 = array_get v1371, index Field 14
    v1473 = cast v1360 as u4
    v1474 = cast v1372 as u4
    v1475 = mul v1473, v1471
    v1476 = mul v1474, v1472
    v1477 = add v1475, v1476
    v1478 = array_get v1370, index Field 15
    v1479 = array_get v1371, index Field 15
    v1480 = cast v1360 as u4
    v1481 = cast v1372 as u4
    v1482 = mul v1480, v1478
    v1483 = mul v1481, v1479
    v1484 = add v1482, v1483
    store [v1379, v1386, v1393, v1400, v1407, v1414, v1421, v1428, v1435, v1442, v1449, v1456, v1463, v1470, v1477, v1484] at v813
    v1486 = truncate v1 to 64 bits, max_bit_size: 254
    v1487 = cast v1486 as u64
    v1488 = lt u64 4, v1487
    v1489 = mul v819, v1488
    enable_side_effects v1489
    v1490 = array_get v0, index Field 4
    v1491 = load v813
    v1492 = div v1490, Field 2⁴
    v1493 = cast v1490 as u4
    v1494 = array_set v1491, index Field 7, value v1493
    v1495 = and v1490, u8 15
    v1496 = truncate v1495 to 4 bits, max_bit_size: 8
    v1497 = cast v1496 as u4
    v1498 = array_set v1494, index Field 8, value v1497
    v1499 = load v813
    store v1498 at v813
    v1500 = not v1488
    store v1499 at v813
    enable_side_effects v819
    v1501 = array_get v1498, index Field 0
    v1502 = array_get v1499, index Field 0
    v1503 = cast v1488 as u4
    v1504 = cast v1500 as u4
    v1505 = mul v1503, v1501
    v1506 = mul v1504, v1502
    v1507 = add v1505, v1506
    v1508 = array_get v1498, index Field 1
    v1509 = array_get v1499, index Field 1
    v1510 = cast v1488 as u4
    v1511 = cast v1500 as u4
    v1512 = mul v1510, v1508
    v1513 = mul v1511, v1509
    v1514 = add v1512, v1513
    v1515 = array_get v1498, index Field 2
    v1516 = array_get v1499, index Field 2
    v1517 = cast v1488 as u4
    v1518 = cast v1500 as u4
    v1519 = mul v1517, v1515
    v1520 = mul v1518, v1516
    v1521 = add v1519, v1520
    v1522 = array_get v1498, index Field 3
    v1523 = array_get v1499, index Field 3
    v1524 = cast v1488 as u4
    v1525 = cast v1500 as u4
    v1526 = mul v1524, v1522
    v1527 = mul v1525, v1523
    v1528 = add v1526, v1527
    v1529 = array_get v1498, index Field 4
    v1530 = array_get v1499, index Field 4
    v1531 = cast v1488 as u4
    v1532 = cast v1500 as u4
    v1533 = mul v1531, v1529
    v1534 = mul v1532, v1530
    v1535 = add v1533, v1534
    v1536 = array_get v1498, index Field 5
    v1537 = array_get v1499, index Field 5
    v1538 = cast v1488 as u4
    v1539 = cast v1500 as u4
    v1540 = mul v1538, v1536
    v1541 = mul v1539, v1537
    v1542 = add v1540, v1541
    v1543 = array_get v1498, index Field 6
    v1544 = array_get v1499, index Field 6
    v1545 = cast v1488 as u4
    v1546 = cast v1500 as u4
    v1547 = mul v1545, v1543
    v1548 = mul v1546, v1544
    v1549 = add v1547, v1548
    v1550 = array_get v1498, index Field 7
    v1551 = array_get v1499, index Field 7
    v1552 = cast v1488 as u4
    v1553 = cast v1500 as u4
    v1554 = mul v1552, v1550
    v1555 = mul v1553, v1551
    v1556 = add v1554, v1555
    v1557 = array_get v1498, index Field 8
    v1558 = array_get v1499, index Field 8
    v1559 = cast v1488 as u4
    v1560 = cast v1500 as u4
    v1561 = mul v1559, v1557
    v1562 = mul v1560, v1558
    v1563 = add v1561, v1562
    v1564 = array_get v1498, index Field 9
    v1565 = array_get v1499, index Field 9
    v1566 = cast v1488 as u4
    v1567 = cast v1500 as u4
    v1568 = mul v1566, v1564
    v1569 = mul v1567, v1565
    v1570 = add v1568, v1569
    v1571 = array_get v1498, index Field 10
    v1572 = array_get v1499, index Field 10
    v1573 = cast v1488 as u4
    v1574 = cast v1500 as u4
    v1575 = mul v1573, v1571
    v1576 = mul v1574, v1572
    v1577 = add v1575, v1576
    v1578 = array_get v1498, index Field 11
    v1579 = array_get v1499, index Field 11
    v1580 = cast v1488 as u4
    v1581 = cast v1500 as u4
    v1582 = mul v1580, v1578
    v1583 = mul v1581, v1579
    v1584 = add v1582, v1583
    v1585 = array_get v1498, index Field 12
    v1586 = array_get v1499, index Field 12
    v1587 = cast v1488 as u4
    v1588 = cast v1500 as u4
    v1589 = mul v1587, v1585
    v1590 = mul v1588, v1586
    v1591 = add v1589, v1590
    v1592 = array_get v1498, index Field 13
    v1593 = array_get v1499, index Field 13
    v1594 = cast v1488 as u4
    v1595 = cast v1500 as u4
    v1596 = mul v1594, v1592
    v1597 = mul v1595, v1593
    v1598 = add v1596, v1597
    v1599 = array_get v1498, index Field 14
    v1600 = array_get v1499, index Field 14
    v1601 = cast v1488 as u4
    v1602 = cast v1500 as u4
    v1603 = mul v1601, v1599
    v1604 = mul v1602, v1600
    v1605 = add v1603, v1604
    v1606 = array_get v1498, index Field 15
    v1607 = array_get v1499, index Field 15
    v1608 = cast v1488 as u4
    v1609 = cast v1500 as u4
    v1610 = mul v1608, v1606
    v1611 = mul v1609, v1607
    v1612 = add v1610, v1611
    store [v1507, v1514, v1521, v1528, v1535, v1542, v1549, v1556, v1563, v1570, v1577, v1584, v1591, v1598, v1605, v1612] at v813
    v1614 = not v819
    store v1144 at v813
    enable_side_effects v1614
    v1615 = truncate v1 to 64 bits, max_bit_size: 254
    v1616 = cast v1615 as u64
    v1617 = sub v1616, u64 1
    v1618 = cast v1614 as u64
    v1619 = mul v1617, v1618
    range_check v1619 to 64 bits
    v1620 = lt u64 0, v1617
    v1621 = mul v1614, v1620
    enable_side_effects v1621
    v1622 = array_get v0, index u64 1
    v1623 = div v1622, Field 2⁴
    v1624 = cast v1622 as u4
    v1625 = and v1622, u8 15
    v1626 = truncate v1625 to 4 bits, max_bit_size: 8
    v1627 = cast v1626 as u4
    v1629 = load v813
    store [v1624, v1627, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0] at v813
    v1630 = not v1620
    store v1629 at v813
    enable_side_effects v1614
    v1631 = array_get v1629, index Field 0
    v1632 = cast v1620 as u4
    v1633 = cast v1630 as u4
    v1634 = mul v1632, v1624
    v1635 = mul v1633, v1631
    v1636 = add v1634, v1635
    v1637 = array_get v1629, index Field 1
    v1638 = cast v1620 as u4
    v1639 = cast v1630 as u4
    v1640 = mul v1638, v1627
    v1641 = mul v1639, v1637
    v1642 = add v1640, v1641
    v1643 = array_get v1629, index Field 2
    v1644 = cast v1620 as u4
    v1645 = cast v1630 as u4
    v1646 = mul v1645, v1643
    v1647 = array_get v1629, index Field 3
    v1648 = cast v1620 as u4
    v1649 = cast v1630 as u4
    v1650 = mul v1649, v1647
    v1651 = array_get v1629, index Field 4
    v1652 = cast v1620 as u4
    v1653 = cast v1630 as u4
    v1654 = mul v1653, v1651
    v1655 = array_get v1629, index Field 5
    v1656 = cast v1620 as u4
    v1657 = cast v1630 as u4
    v1658 = mul v1657, v1655
    v1659 = array_get v1629, index Field 6
    v1660 = cast v1620 as u4
    v1661 = cast v1630 as u4
    v1662 = mul v1661, v1659
    v1663 = array_get v1629, index Field 7
    v1664 = cast v1620 as u4
    v1665 = cast v1630 as u4
    v1666 = mul v1665, v1663
    v1667 = array_get v1629, index Field 8
    v1668 = cast v1620 as u4
    v1669 = cast v1630 as u4
    v1670 = mul v1669, v1667
    v1671 = array_get v1629, index Field 9
    v1672 = cast v1620 as u4
    v1673 = cast v1630 as u4
    v1674 = mul v1673, v1671
    v1675 = array_get v1629, index Field 10
    v1676 = cast v1620 as u4
    v1677 = cast v1630 as u4
    v1678 = mul v1677, v1675
    v1679 = array_get v1629, index Field 11
    v1680 = cast v1620 as u4
    v1681 = cast v1630 as u4
    v1682 = mul v1681, v1679
    v1683 = array_get v1629, index Field 12
    v1684 = cast v1620 as u4
    v1685 = cast v1630 as u4
    v1686 = mul v1685, v1683
    v1687 = array_get v1629, index Field 13
    v1688 = cast v1620 as u4
    v1689 = cast v1630 as u4
    v1690 = mul v1689, v1687
    v1691 = array_get v1629, index Field 14
    v1692 = cast v1620 as u4
    v1693 = cast v1630 as u4
    v1694 = mul v1693, v1691
    v1695 = array_get v1629, index Field 15
    v1696 = cast v1620 as u4
    v1697 = cast v1630 as u4
    v1698 = mul v1697, v1695
    store [v1636, v1642, v1646, v1650, v1654, v1658, v1662, v1666, v1670, v1674, v1678, v1682, v1686, v1690, v1694, v1698] at v813
    v1700 = truncate v1 to 64 bits, max_bit_size: 254
    v1701 = cast v1700 as u64
    v1702 = sub v1701, u64 1
    v1703 = cast v1614 as u64
    v1704 = mul v1702, v1703
    range_check v1704 to 64 bits
    v1705 = lt u64 1, v1702
    v1706 = mul v1614, v1705
    enable_side_effects v1706
    v1707 = array_get v0, index u64 2
    v1708 = load v813
    v1709 = div v1707, Field 2⁴
    v1710 = cast v1707 as u4
    v1711 = array_set v1708, index u64 2, value v1710
    v1712 = and v1707, u8 15
    v1713 = truncate v1712 to 4 bits, max_bit_size: 8
    v1714 = cast v1713 as u4
    v1715 = array_set v1711, index u64 3, value v1714
    v1716 = load v813
    store v1715 at v813
    v1717 = not v1705
    store v1716 at v813
    enable_side_effects v1614
    v1718 = array_get v1715, index Field 0
    v1719 = array_get v1716, index Field 0
    v1720 = cast v1705 as u4
    v1721 = cast v1717 as u4
    v1722 = mul v1720, v1718
    v1723 = mul v1721, v1719
    v1724 = add v1722, v1723
    v1725 = array_get v1715, index Field 1
    v1726 = array_get v1716, index Field 1
    v1727 = cast v1705 as u4
    v1728 = cast v1717 as u4
    v1729 = mul v1727, v1725
    v1730 = mul v1728, v1726
    v1731 = add v1729, v1730
    v1732 = array_get v1715, index Field 2
    v1733 = array_get v1716, index Field 2
    v1734 = cast v1705 as u4
    v1735 = cast v1717 as u4
    v1736 = mul v1734, v1732
    v1737 = mul v1735, v1733
    v1738 = add v1736, v1737
    v1739 = array_get v1715, index Field 3
    v1740 = array_get v1716, index Field 3
    v1741 = cast v1705 as u4
    v1742 = cast v1717 as u4
    v1743 = mul v1741, v1739
    v1744 = mul v1742, v1740
    v1745 = add v1743, v1744
    v1746 = array_get v1715, index Field 4
    v1747 = array_get v1716, index Field 4
    v1748 = cast v1705 as u4
    v1749 = cast v1717 as u4
    v1750 = mul v1748, v1746
    v1751 = mul v1749, v1747
    v1752 = add v1750, v1751
    v1753 = array_get v1715, index Field 5
    v1754 = array_get v1716, index Field 5
    v1755 = cast v1705 as u4
    v1756 = cast v1717 as u4
    v1757 = mul v1755, v1753
    v1758 = mul v1756, v1754
    v1759 = add v1757, v1758
    v1760 = array_get v1715, index Field 6
    v1761 = array_get v1716, index Field 6
    v1762 = cast v1705 as u4
    v1763 = cast v1717 as u4
    v1764 = mul v1762, v1760
    v1765 = mul v1763, v1761
    v1766 = add v1764, v1765
    v1767 = array_get v1715, index Field 7
    v1768 = array_get v1716, index Field 7
    v1769 = cast v1705 as u4
    v1770 = cast v1717 as u4
    v1771 = mul v1769, v1767
    v1772 = mul v1770, v1768
    v1773 = add v1771, v1772
    v1774 = array_get v1715, index Field 8
    v1775 = array_get v1716, index Field 8
    v1776 = cast v1705 as u4
    v1777 = cast v1717 as u4
    v1778 = mul v1776, v1774
    v1779 = mul v1777, v1775
    v1780 = add v1778, v1779
    v1781 = array_get v1715, index Field 9
    v1782 = array_get v1716, index Field 9
    v1783 = cast v1705 as u4
    v1784 = cast v1717 as u4
    v1785 = mul v1783, v1781
    v1786 = mul v1784, v1782
    v1787 = add v1785, v1786
    v1788 = array_get v1715, index Field 10
    v1789 = array_get v1716, index Field 10
    v1790 = cast v1705 as u4
    v1791 = cast v1717 as u4
    v1792 = mul v1790, v1788
    v1793 = mul v1791, v1789
    v1794 = add v1792, v1793
    v1795 = array_get v1715, index Field 11
    v1796 = array_get v1716, index Field 11
    v1797 = cast v1705 as u4
    v1798 = cast v1717 as u4
    v1799 = mul v1797, v1795
    v1800 = mul v1798, v1796
    v1801 = add v1799, v1800
    v1802 = array_get v1715, index Field 12
    v1803 = array_get v1716, index Field 12
    v1804 = cast v1705 as u4
    v1805 = cast v1717 as u4
    v1806 = mul v1804, v1802
    v1807 = mul v1805, v1803
    v1808 = add v1806, v1807
    v1809 = array_get v1715, index Field 13
    v1810 = array_get v1716, index Field 13
    v1811 = cast v1705 as u4
    v1812 = cast v1717 as u4
    v1813 = mul v1811, v1809
    v1814 = mul v1812, v1810
    v1815 = add v1813, v1814
    v1816 = array_get v1715, index Field 14
    v1817 = array_get v1716, index Field 14
    v1818 = cast v1705 as u4
    v1819 = cast v1717 as u4
    v1820 = mul v1818, v1816
    v1821 = mul v1819, v1817
    v1822 = add v1820, v1821
    v1823 = array_get v1715, index Field 15
    v1824 = array_get v1716, index Field 15
    v1825 = cast v1705 as u4
    v1826 = cast v1717 as u4
    v1827 = mul v1825, v1823
    v1828 = mul v1826, v1824
    v1829 = add v1827, v1828
    store [v1724, v1731, v1738, v1745, v1752, v1759, v1766, v1773, v1780, v1787, v1794, v1801, v1808, v1815, v1822, v1829] at v813
    enable_side_effects u1 1
    v1831 = cast v819 as u4
    v1832 = cast v1614 as u4
    v1833 = mul v1831, v1507
    v1834 = mul v1832, v1724
    v1835 = add v1833, v1834
    v1836 = cast v819 as u4
    v1837 = cast v1614 as u4
    v1838 = mul v1836, v1514
    v1839 = mul v1837, v1731
    v1840 = add v1838, v1839
    v1841 = cast v819 as u4
    v1842 = cast v1614 as u4
    v1843 = mul v1841, v1521
    v1844 = mul v1842, v1738
    v1845 = add v1843, v1844
    v1846 = cast v819 as u4
    v1847 = cast v1614 as u4
    v1848 = mul v1846, v1528
    v1849 = mul v1847, v1745
    v1850 = add v1848, v1849
    v1851 = cast v819 as u4
    v1852 = cast v1614 as u4
    v1853 = mul v1851, v1535
    v1854 = mul v1852, v1752
    v1855 = add v1853, v1854
    v1856 = cast v819 as u4
    v1857 = cast v1614 as u4
    v1858 = mul v1856, v1542
    v1859 = mul v1857, v1759
    v1860 = add v1858, v1859
    v1861 = cast v819 as u4
    v1862 = cast v1614 as u4
    v1863 = mul v1861, v1549
    v1864 = mul v1862, v1766
    v1865 = add v1863, v1864
    v1866 = cast v819 as u4
    v1867 = cast v1614 as u4
    v1868 = mul v1866, v1556
    v1869 = mul v1867, v1773
    v1870 = add v1868, v1869
    v1871 = cast v819 as u4
    v1872 = cast v1614 as u4
    v1873 = mul v1871, v1563
    v1874 = mul v1872, v1780
    v1875 = add v1873, v1874
    v1876 = cast v819 as u4
    v1877 = cast v1614 as u4
    v1878 = mul v1876, v1570
    v1879 = mul v1877, v1787
    v1880 = add v1878, v1879
    v1881 = cast v819 as u4
    v1882 = cast v1614 as u4
    v1883 = mul v1881, v1577
    v1884 = mul v1882, v1794
    v1885 = add v1883, v1884
    v1886 = cast v819 as u4
    v1887 = cast v1614 as u4
    v1888 = mul v1886, v1584
    v1889 = mul v1887, v1801
    v1890 = add v1888, v1889
    v1891 = cast v819 as u4
    v1892 = cast v1614 as u4
    v1893 = mul v1891, v1591
    v1894 = mul v1892, v1808
    v1895 = add v1893, v1894
    v1896 = cast v819 as u4
    v1897 = cast v1614 as u4
    v1898 = mul v1896, v1598
    v1899 = mul v1897, v1815
    v1900 = add v1898, v1899
    v1901 = cast v819 as u4
    v1902 = cast v1614 as u4
    v1903 = mul v1901, v1605
    v1904 = mul v1902, v1822
    v1905 = add v1903, v1904
    v1906 = cast v819 as u4
    v1907 = cast v1614 as u4
    v1908 = mul v1906, v1612
    v1909 = mul v1907, v1829
    v1910 = add v1908, v1909
    store [v1835, v1840, v1845, v1850, v1855, v1860, v1865, v1870, v1875, v1880, v1885, v1890, v1895, v1900, v1905, v1910] at v813
    v1912 = load v813
    v1913 = mul Field 2, v1
    v1914 = cast v819 as Field
    v1915 = add v1913, v1914
    v1916 = sub v1915, Field 2
    inc_rc v1912
    inc_rc v1912
    inc_rc v1912
    v1917 = eq v1916, Field 5
    constrain v1916 == Field 5
    v1918 = array_get v1912, index Field 0
    v1919 = array_get v1912, index Field 1
    v1920 = array_get v1912, index Field 2
    v1921 = array_get v1912, index Field 3
    v1922 = array_get v1912, index Field 4
    v1923 = allocate
    v1924 = eq v1918, u4 15
    v1925 = eq v1919, u4 1
    v1926 = mul v1924, v1925
    v1927 = eq v1920, u4 12
    v1928 = mul v1926, v1927
    v1929 = eq v1921, u4 11
    v1930 = mul v1928, v1929
    v1931 = eq v1922, u4 8
    v1932 = mul v1930, v1931
    store v1932 at v1923
    constrain v1932 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v1937 = allocate
    range_check u8 148 to 8 bits
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    store [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0] at v1937
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v1942 = allocate
    store u1 1 at v1942
    v1943 = allocate
    store u64 1 at v1943
    v1944 = allocate
    store u64 2⁴ at v1944
    v1945 = allocate
    store u64 1 at v1945
    v1946 = allocate
    store u64 2⁴ at v1946
    return 
}

After Mem2Reg:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v1947 = truncate v1 to 64 bits, max_bit_size: 254
    v1948 = cast v1947 as u64
    inc_rc v0
    v1949 = lt u64 5, v1948
    v1950 = not v1949
    constrain v1949 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v1952 = allocate
    v1954 = array_get v0, index Field 0
    v1955 = div v1954, Field 2⁴
    v1956 = cast v1954 as u4
    v1957 = truncate v1956 to 1 bits, max_bit_size: 4
    v1958 = cast v1957 as u1
    enable_side_effects v1958
    v1959 = array_get v0, index Field 0
    v1960 = and v1959, u8 15
    v1961 = truncate v1960 to 4 bits, max_bit_size: 8
    v1962 = cast v1961 as u4
    inc_rc v0
    v1965 = truncate v1 to 64 bits, max_bit_size: 254
    v1966 = cast v1965 as u64
    v1967 = lt u64 1, v1966
    v1968 = mul v1958, v1967
    enable_side_effects v1968
    v1969 = array_get v0, index Field 1
    v1970 = div v1969, Field 2⁴
    v1971 = cast v1969 as u4
    v1972 = and v1969, u8 15
    v1973 = truncate v1972 to 4 bits, max_bit_size: 8
    v1974 = cast v1973 as u4
    v1977 = not v1967
    enable_side_effects v1958
    v1980 = cast v1967 as u4
    v1981 = cast v1977 as u4
    v1982 = mul v1980, v1962
    v1983 = mul v1981, v1962
    v1984 = add v1982, v1983
    v1986 = cast v1967 as u4
    v1987 = cast v1977 as u4
    v1988 = mul v1986, v1971
    v1990 = cast v1967 as u4
    v1991 = cast v1977 as u4
    v1992 = mul v1990, v1974
    v1994 = cast v1967 as u4
    v1995 = cast v1977 as u4
    v1997 = cast v1967 as u4
    v1998 = cast v1977 as u4
    v2000 = cast v1967 as u4
    v2001 = cast v1977 as u4
    v2003 = cast v1967 as u4
    v2004 = cast v1977 as u4
    v2006 = cast v1967 as u4
    v2007 = cast v1977 as u4
    v2009 = cast v1967 as u4
    v2010 = cast v1977 as u4
    v2012 = cast v1967 as u4
    v2013 = cast v1977 as u4
    v2015 = cast v1967 as u4
    v2016 = cast v1977 as u4
    v2018 = cast v1967 as u4
    v2019 = cast v1977 as u4
    v2021 = cast v1967 as u4
    v2022 = cast v1977 as u4
    v2024 = cast v1967 as u4
    v2025 = cast v1977 as u4
    v2027 = cast v1967 as u4
    v2028 = cast v1977 as u4
    v2030 = cast v1967 as u4
    v2031 = cast v1977 as u4
    v2033 = truncate v1 to 64 bits, max_bit_size: 254
    v2034 = cast v2033 as u64
    v2035 = lt u64 2, v2034
    v2036 = mul v1958, v2035
    enable_side_effects v2036
    v2037 = array_get v0, index Field 2
    v2039 = div v2037, Field 2⁴
    v2040 = cast v2037 as u4
    v2043 = and v2037, u8 15
    v2044 = truncate v2043 to 4 bits, max_bit_size: 8
    v2045 = cast v2044 as u4
    v2050 = not v2035
    enable_side_effects v1958
    v2054 = cast v2035 as u4
    v2055 = cast v2050 as u4
    v2056 = mul v2054, v1984
    v2057 = mul v2055, v1984
    v2058 = add v2056, v2057
    v2061 = cast v2035 as u4
    v2062 = cast v2050 as u4
    v2063 = mul v2061, v1988
    v2064 = mul v2062, v1988
    v2065 = add v2063, v2064
    v2068 = cast v2035 as u4
    v2069 = cast v2050 as u4
    v2070 = mul v2068, v1992
    v2071 = mul v2069, v1992
    v2072 = add v2070, v2071
    v2075 = cast v2035 as u4
    v2076 = cast v2050 as u4
    v2077 = mul v2075, v2040
    v2080 = cast v2035 as u4
    v2081 = cast v2050 as u4
    v2082 = mul v2080, v2045
    v2085 = cast v2035 as u4
    v2086 = cast v2050 as u4
    v2089 = cast v2035 as u4
    v2090 = cast v2050 as u4
    v2093 = cast v2035 as u4
    v2094 = cast v2050 as u4
    v2097 = cast v2035 as u4
    v2098 = cast v2050 as u4
    v2101 = cast v2035 as u4
    v2102 = cast v2050 as u4
    v2105 = cast v2035 as u4
    v2106 = cast v2050 as u4
    v2109 = cast v2035 as u4
    v2110 = cast v2050 as u4
    v2113 = cast v2035 as u4
    v2114 = cast v2050 as u4
    v2117 = cast v2035 as u4
    v2118 = cast v2050 as u4
    v2121 = cast v2035 as u4
    v2122 = cast v2050 as u4
    v2125 = cast v2035 as u4
    v2126 = cast v2050 as u4
    v2128 = truncate v1 to 64 bits, max_bit_size: 254
    v2129 = cast v2128 as u64
    v2130 = lt u64 3, v2129
    v2131 = mul v1958, v2130
    enable_side_effects v2131
    v2132 = array_get v0, index Field 3
    v2134 = div v2132, Field 2⁴
    v2135 = cast v2132 as u4
    v2138 = and v2132, u8 15
    v2139 = truncate v2138 to 4 bits, max_bit_size: 8
    v2140 = cast v2139 as u4
    v2145 = not v2130
    enable_side_effects v1958
    v2149 = cast v2130 as u4
    v2150 = cast v2145 as u4
    v2151 = mul v2149, v2058
    v2152 = mul v2150, v2058
    v2153 = add v2151, v2152
    v2156 = cast v2130 as u4
    v2157 = cast v2145 as u4
    v2158 = mul v2156, v2065
    v2159 = mul v2157, v2065
    v2160 = add v2158, v2159
    v2163 = cast v2130 as u4
    v2164 = cast v2145 as u4
    v2165 = mul v2163, v2072
    v2166 = mul v2164, v2072
    v2167 = add v2165, v2166
    v2170 = cast v2130 as u4
    v2171 = cast v2145 as u4
    v2172 = mul v2170, v2077
    v2173 = mul v2171, v2077
    v2174 = add v2172, v2173
    v2177 = cast v2130 as u4
    v2178 = cast v2145 as u4
    v2179 = mul v2177, v2082
    v2180 = mul v2178, v2082
    v2181 = add v2179, v2180
    v2184 = cast v2130 as u4
    v2185 = cast v2145 as u4
    v2186 = mul v2184, v2135
    v2189 = cast v2130 as u4
    v2190 = cast v2145 as u4
    v2191 = mul v2189, v2140
    v2194 = cast v2130 as u4
    v2195 = cast v2145 as u4
    v2198 = cast v2130 as u4
    v2199 = cast v2145 as u4
    v2202 = cast v2130 as u4
    v2203 = cast v2145 as u4
    v2206 = cast v2130 as u4
    v2207 = cast v2145 as u4
    v2210 = cast v2130 as u4
    v2211 = cast v2145 as u4
    v2214 = cast v2130 as u4
    v2215 = cast v2145 as u4
    v2218 = cast v2130 as u4
    v2219 = cast v2145 as u4
    v2222 = cast v2130 as u4
    v2223 = cast v2145 as u4
    v2226 = cast v2130 as u4
    v2227 = cast v2145 as u4
    v2229 = truncate v1 to 64 bits, max_bit_size: 254
    v2230 = cast v2229 as u64
    v2231 = lt u64 4, v2230
    v2232 = mul v1958, v2231
    enable_side_effects v2232
    v2233 = array_get v0, index Field 4
    v2235 = div v2233, Field 2⁴
    v2236 = cast v2233 as u4
    v2239 = and v2233, u8 15
    v2240 = truncate v2239 to 4 bits, max_bit_size: 8
    v2241 = cast v2240 as u4
    v2246 = not v2231
    enable_side_effects v1958
    v2250 = cast v2231 as u4
    v2251 = cast v2246 as u4
    v2252 = mul v2250, v2153
    v2253 = mul v2251, v2153
    v2254 = add v2252, v2253
    v2257 = cast v2231 as u4
    v2258 = cast v2246 as u4
    v2259 = mul v2257, v2160
    v2260 = mul v2258, v2160
    v2261 = add v2259, v2260
    v2264 = cast v2231 as u4
    v2265 = cast v2246 as u4
    v2266 = mul v2264, v2167
    v2267 = mul v2265, v2167
    v2268 = add v2266, v2267
    v2271 = cast v2231 as u4
    v2272 = cast v2246 as u4
    v2273 = mul v2271, v2174
    v2274 = mul v2272, v2174
    v2275 = add v2273, v2274
    v2278 = cast v2231 as u4
    v2279 = cast v2246 as u4
    v2280 = mul v2278, v2181
    v2281 = mul v2279, v2181
    v2282 = add v2280, v2281
    v2285 = cast v2231 as u4
    v2286 = cast v2246 as u4
    v2287 = mul v2285, v2186
    v2288 = mul v2286, v2186
    v2289 = add v2287, v2288
    v2292 = cast v2231 as u4
    v2293 = cast v2246 as u4
    v2294 = mul v2292, v2191
    v2295 = mul v2293, v2191
    v2296 = add v2294, v2295
    v2299 = cast v2231 as u4
    v2300 = cast v2246 as u4
    v2301 = mul v2299, v2236
    v2304 = cast v2231 as u4
    v2305 = cast v2246 as u4
    v2306 = mul v2304, v2241
    v2309 = cast v2231 as u4
    v2310 = cast v2246 as u4
    v2313 = cast v2231 as u4
    v2314 = cast v2246 as u4
    v2317 = cast v2231 as u4
    v2318 = cast v2246 as u4
    v2321 = cast v2231 as u4
    v2322 = cast v2246 as u4
    v2325 = cast v2231 as u4
    v2326 = cast v2246 as u4
    v2329 = cast v2231 as u4
    v2330 = cast v2246 as u4
    v2333 = cast v2231 as u4
    v2334 = cast v2246 as u4
    v2336 = not v1958
    enable_side_effects v2336
    v2338 = truncate v1 to 64 bits, max_bit_size: 254
    v2339 = cast v2338 as u64
    v2340 = sub v2339, u64 1
    v2341 = cast v2336 as u64
    v2342 = mul v2340, v2341
    range_check v2342 to 64 bits
    v2343 = lt u64 0, v2340
    v2344 = mul v2336, v2343
    enable_side_effects v2344
    v2345 = array_get v0, index u64 1
    v2346 = div v2345, Field 2⁴
    v2347 = cast v2345 as u4
    v2348 = and v2345, u8 15
    v2349 = truncate v2348 to 4 bits, max_bit_size: 8
    v2350 = cast v2349 as u4
    v2353 = not v2343
    enable_side_effects v2336
    v2356 = cast v2343 as u4
    v2357 = cast v2353 as u4
    v2358 = mul v2356, v2347
    v2360 = cast v2343 as u4
    v2361 = cast v2353 as u4
    v2362 = mul v2360, v2350
    v2364 = cast v2343 as u4
    v2365 = cast v2353 as u4
    v2367 = cast v2343 as u4
    v2368 = cast v2353 as u4
    v2370 = cast v2343 as u4
    v2371 = cast v2353 as u4
    v2373 = cast v2343 as u4
    v2374 = cast v2353 as u4
    v2376 = cast v2343 as u4
    v2377 = cast v2353 as u4
    v2379 = cast v2343 as u4
    v2380 = cast v2353 as u4
    v2382 = cast v2343 as u4
    v2383 = cast v2353 as u4
    v2385 = cast v2343 as u4
    v2386 = cast v2353 as u4
    v2388 = cast v2343 as u4
    v2389 = cast v2353 as u4
    v2391 = cast v2343 as u4
    v2392 = cast v2353 as u4
    v2394 = cast v2343 as u4
    v2395 = cast v2353 as u4
    v2397 = cast v2343 as u4
    v2398 = cast v2353 as u4
    v2400 = cast v2343 as u4
    v2401 = cast v2353 as u4
    v2403 = cast v2343 as u4
    v2404 = cast v2353 as u4
    v2406 = truncate v1 to 64 bits, max_bit_size: 254
    v2407 = cast v2406 as u64
    v2408 = sub v2407, u64 1
    v2409 = cast v2336 as u64
    v2410 = mul v2408, v2409
    range_check v2410 to 64 bits
    v2411 = lt u64 1, v2408
    v2412 = mul v2336, v2411
    enable_side_effects v2412
    v2413 = array_get v0, index u64 2
    v2415 = div v2413, Field 2⁴
    v2416 = cast v2413 as u4
    v2419 = and v2413, u8 15
    v2420 = truncate v2419 to 4 bits, max_bit_size: 8
    v2421 = cast v2420 as u4
    v2426 = not v2411
    enable_side_effects v2336
    v2430 = cast v2411 as u4
    v2431 = cast v2426 as u4
    v2432 = mul v2430, v2358
    v2433 = mul v2431, v2358
    v2434 = add v2432, v2433
    v2437 = cast v2411 as u4
    v2438 = cast v2426 as u4
    v2439 = mul v2437, v2362
    v2440 = mul v2438, v2362
    v2441 = add v2439, v2440
    v2444 = cast v2411 as u4
    v2445 = cast v2426 as u4
    v2446 = mul v2444, v2416
    v2449 = cast v2411 as u4
    v2450 = cast v2426 as u4
    v2451 = mul v2449, v2421
    v2454 = cast v2411 as u4
    v2455 = cast v2426 as u4
    v2458 = cast v2411 as u4
    v2459 = cast v2426 as u4
    v2462 = cast v2411 as u4
    v2463 = cast v2426 as u4
    v2466 = cast v2411 as u4
    v2467 = cast v2426 as u4
    v2470 = cast v2411 as u4
    v2471 = cast v2426 as u4
    v2474 = cast v2411 as u4
    v2475 = cast v2426 as u4
    v2478 = cast v2411 as u4
    v2479 = cast v2426 as u4
    v2482 = cast v2411 as u4
    v2483 = cast v2426 as u4
    v2486 = cast v2411 as u4
    v2487 = cast v2426 as u4
    v2490 = cast v2411 as u4
    v2491 = cast v2426 as u4
    v2494 = cast v2411 as u4
    v2495 = cast v2426 as u4
    v2498 = cast v2411 as u4
    v2499 = cast v2426 as u4
    enable_side_effects u1 1
    v2501 = cast v1958 as u4
    v2502 = cast v2336 as u4
    v2503 = mul v2501, v2254
    v2504 = mul v2502, v2434
    v2505 = add v2503, v2504
    v2506 = cast v1958 as u4
    v2507 = cast v2336 as u4
    v2508 = mul v2506, v2261
    v2509 = mul v2507, v2441
    v2510 = add v2508, v2509
    v2511 = cast v1958 as u4
    v2512 = cast v2336 as u4
    v2513 = mul v2511, v2268
    v2514 = mul v2512, v2446
    v2515 = add v2513, v2514
    v2516 = cast v1958 as u4
    v2517 = cast v2336 as u4
    v2518 = mul v2516, v2275
    v2519 = mul v2517, v2451
    v2520 = add v2518, v2519
    v2521 = cast v1958 as u4
    v2522 = cast v2336 as u4
    v2523 = mul v2521, v2282
    v2524 = cast v1958 as u4
    v2525 = cast v2336 as u4
    v2526 = mul v2524, v2289
    v2527 = cast v1958 as u4
    v2528 = cast v2336 as u4
    v2529 = mul v2527, v2296
    v2530 = cast v1958 as u4
    v2531 = cast v2336 as u4
    v2532 = mul v2530, v2301
    v2533 = cast v1958 as u4
    v2534 = cast v2336 as u4
    v2535 = mul v2533, v2306
    v2536 = cast v1958 as u4
    v2537 = cast v2336 as u4
    v2538 = cast v1958 as u4
    v2539 = cast v2336 as u4
    v2540 = cast v1958 as u4
    v2541 = cast v2336 as u4
    v2542 = cast v1958 as u4
    v2543 = cast v2336 as u4
    v2544 = cast v1958 as u4
    v2545 = cast v2336 as u4
    v2546 = cast v1958 as u4
    v2547 = cast v2336 as u4
    v2548 = cast v1958 as u4
    v2549 = cast v2336 as u4
    v2552 = mul Field 2, v1
    v2553 = cast v1958 as Field
    v2554 = add v2552, v2553
    v2555 = sub v2554, Field 2
    inc_rc [v2505, v2510, v2515, v2520, v2523, v2526, v2529, v2532, v2535, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    inc_rc [v2505, v2510, v2515, v2520, v2523, v2526, v2529, v2532, v2535, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    inc_rc [v2505, v2510, v2515, v2520, v2523, v2526, v2529, v2532, v2535, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v2559 = eq v2555, Field 5
    constrain v2555 == Field 5
    v2565 = allocate
    v2566 = eq v2505, u4 15
    v2567 = eq v2510, u4 1
    v2568 = mul v2566, v2567
    v2569 = eq v2515, u4 12
    v2570 = mul v2568, v2569
    v2571 = eq v2520, u4 11
    v2572 = mul v2570, v2571
    v2573 = eq v2523, u4 8
    v2574 = mul v2572, v2573
    constrain v2574 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v2579 = allocate
    range_check u8 148 to 8 bits
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v2584 = allocate
    v2585 = allocate
    v2586 = allocate
    v2587 = allocate
    v2588 = allocate
    return 
}

After Constant Folding:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v2589 = truncate v1 to 64 bits, max_bit_size: 254
    v2590 = cast v2589 as u64
    inc_rc v0
    v2591 = lt u64 5, v2590
    v2592 = not v2591
    constrain v2591 == u1 0
    inc_rc [u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v2593 = allocate
    v2594 = array_get v0, index Field 0
    v2595 = div v2594, Field 2⁴
    v2596 = cast v2594 as u4
    v2597 = truncate v2596 to 1 bits, max_bit_size: 4
    v2598 = cast v2597 as u1
    enable_side_effects v2598
    v2599 = and v2594, u8 15
    v2600 = truncate v2599 to 4 bits, max_bit_size: 8
    v2601 = cast v2600 as u4
    inc_rc v0
    v2602 = lt u64 1, v2590
    v2603 = mul v2598, v2602
    enable_side_effects v2603
    v2604 = array_get v0, index Field 1
    v2605 = div v2604, Field 2⁴
    v2606 = cast v2604 as u4
    v2607 = and v2604, u8 15
    v2608 = truncate v2607 to 4 bits, max_bit_size: 8
    v2609 = cast v2608 as u4
    v2610 = not v2602
    enable_side_effects v2598
    v2611 = cast v2602 as u4
    v2612 = cast v2610 as u4
    v2613 = mul v2611, v2601
    v2614 = mul v2612, v2601
    v2615 = add v2613, v2614
    v2616 = mul v2611, v2606
    v2617 = mul v2611, v2609
    v2618 = lt u64 2, v2590
    v2619 = mul v2598, v2618
    enable_side_effects v2619
    v2620 = array_get v0, index Field 2
    v2621 = div v2620, Field 2⁴
    v2622 = cast v2620 as u4
    v2623 = and v2620, u8 15
    v2624 = truncate v2623 to 4 bits, max_bit_size: 8
    v2625 = cast v2624 as u4
    v2626 = not v2618
    enable_side_effects v2598
    v2627 = cast v2618 as u4
    v2628 = cast v2626 as u4
    v2629 = mul v2627, v2615
    v2630 = mul v2628, v2615
    v2631 = add v2629, v2630
    v2632 = mul v2627, v2616
    v2633 = mul v2628, v2616
    v2634 = add v2632, v2633
    v2635 = mul v2627, v2617
    v2636 = mul v2628, v2617
    v2637 = add v2635, v2636
    v2638 = mul v2627, v2622
    v2639 = mul v2627, v2625
    v2640 = lt u64 3, v2590
    v2641 = mul v2598, v2640
    enable_side_effects v2641
    v2642 = array_get v0, index Field 3
    v2643 = div v2642, Field 2⁴
    v2644 = cast v2642 as u4
    v2645 = and v2642, u8 15
    v2646 = truncate v2645 to 4 bits, max_bit_size: 8
    v2647 = cast v2646 as u4
    v2648 = not v2640
    enable_side_effects v2598
    v2649 = cast v2640 as u4
    v2650 = cast v2648 as u4
    v2651 = mul v2649, v2631
    v2652 = mul v2650, v2631
    v2653 = add v2651, v2652
    v2654 = mul v2649, v2634
    v2655 = mul v2650, v2634
    v2656 = add v2654, v2655
    v2657 = mul v2649, v2637
    v2658 = mul v2650, v2637
    v2659 = add v2657, v2658
    v2660 = mul v2649, v2638
    v2661 = mul v2650, v2638
    v2662 = add v2660, v2661
    v2663 = mul v2649, v2639
    v2664 = mul v2650, v2639
    v2665 = add v2663, v2664
    v2666 = mul v2649, v2644
    v2667 = mul v2649, v2647
    v2668 = lt u64 4, v2590
    v2669 = mul v2598, v2668
    enable_side_effects v2669
    v2670 = array_get v0, index Field 4
    v2671 = div v2670, Field 2⁴
    v2672 = cast v2670 as u4
    v2673 = and v2670, u8 15
    v2674 = truncate v2673 to 4 bits, max_bit_size: 8
    v2675 = cast v2674 as u4
    v2676 = not v2668
    enable_side_effects v2598
    v2677 = cast v2668 as u4
    v2678 = cast v2676 as u4
    v2679 = mul v2677, v2653
    v2680 = mul v2678, v2653
    v2681 = add v2679, v2680
    v2682 = mul v2677, v2656
    v2683 = mul v2678, v2656
    v2684 = add v2682, v2683
    v2685 = mul v2677, v2659
    v2686 = mul v2678, v2659
    v2687 = add v2685, v2686
    v2688 = mul v2677, v2662
    v2689 = mul v2678, v2662
    v2690 = add v2688, v2689
    v2691 = mul v2677, v2665
    v2692 = mul v2678, v2665
    v2693 = add v2691, v2692
    v2694 = mul v2677, v2666
    v2695 = mul v2678, v2666
    v2696 = add v2694, v2695
    v2697 = mul v2677, v2667
    v2698 = mul v2678, v2667
    v2699 = add v2697, v2698
    v2700 = mul v2677, v2672
    v2701 = mul v2677, v2675
    v2702 = not v2598
    enable_side_effects v2702
    v2703 = sub v2590, u64 1
    v2704 = cast v2702 as u64
    v2705 = mul v2703, v2704
    range_check v2705 to 64 bits
    v2706 = lt u64 0, v2703
    v2707 = mul v2702, v2706
    enable_side_effects v2707
    v2708 = array_get v0, index u64 1
    v2709 = div v2708, Field 2⁴
    v2710 = cast v2708 as u4
    v2711 = and v2708, u8 15
    v2712 = truncate v2711 to 4 bits, max_bit_size: 8
    v2713 = cast v2712 as u4
    v2714 = not v2706
    enable_side_effects v2702
    v2715 = cast v2706 as u4
    v2716 = cast v2714 as u4
    v2717 = mul v2715, v2710
    v2718 = mul v2715, v2713
    range_check v2705 to 64 bits
    v2719 = lt u64 1, v2703
    v2720 = mul v2702, v2719
    enable_side_effects v2720
    v2721 = array_get v0, index u64 2
    v2722 = div v2721, Field 2⁴
    v2723 = cast v2721 as u4
    v2724 = and v2721, u8 15
    v2725 = truncate v2724 to 4 bits, max_bit_size: 8
    v2726 = cast v2725 as u4
    v2727 = not v2719
    enable_side_effects v2702
    v2728 = cast v2719 as u4
    v2729 = cast v2727 as u4
    v2730 = mul v2728, v2717
    v2731 = mul v2729, v2717
    v2732 = add v2730, v2731
    v2733 = mul v2728, v2718
    v2734 = mul v2729, v2718
    v2735 = add v2733, v2734
    v2736 = mul v2728, v2723
    v2737 = mul v2728, v2726
    enable_side_effects u1 1
    v2738 = cast v2598 as u4
    v2739 = cast v2702 as u4
    v2740 = mul v2738, v2681
    v2741 = mul v2739, v2732
    v2742 = add v2740, v2741
    v2743 = mul v2738, v2684
    v2744 = mul v2739, v2735
    v2745 = add v2743, v2744
    v2746 = mul v2738, v2687
    v2747 = mul v2739, v2736
    v2748 = add v2746, v2747
    v2749 = mul v2738, v2690
    v2750 = mul v2739, v2737
    v2751 = add v2749, v2750
    v2752 = mul v2738, v2693
    v2753 = mul v2738, v2696
    v2754 = mul v2738, v2699
    v2755 = mul v2738, v2700
    v2756 = mul v2738, v2701
    v2757 = mul Field 2, v1
    v2758 = cast v2598 as Field
    v2759 = add v2757, v2758
    v2760 = sub v2759, Field 2
    inc_rc [v2742, v2745, v2748, v2751, v2752, v2753, v2754, v2755, v2756, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    inc_rc [v2742, v2745, v2748, v2751, v2752, v2753, v2754, v2755, v2756, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    inc_rc [v2742, v2745, v2748, v2751, v2752, v2753, v2754, v2755, v2756, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0, u4 0]
    v2761 = eq v2760, Field 5
    constrain v2760 == Field 5
    v2762 = allocate
    v2763 = eq v2742, u4 15
    v2764 = eq v2745, u4 1
    v2765 = mul v2763, v2764
    v2766 = eq v2748, u4 12
    v2767 = mul v2765, v2766
    v2768 = eq v2751, u4 11
    v2769 = mul v2767, v2768
    v2770 = eq v2752, u4 8
    v2771 = mul v2769, v2770
    constrain v2771 == u1 1
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v2772 = allocate
    range_check u8 148 to 8 bits
    inc_rc [u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    inc_rc [u8 148, u8 184, u8 143, u8 97, u8 230, u8 251, u8 218, u8 131, u8 251, u8 255, u8 250, u8 190, u8 54, u8 65, u8 18, u8 19, u8 116, u8 2⁷, u8 57, u8 2⁷, u8 24, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0, u8 0]
    v2773 = allocate
    v2774 = allocate
    v2775 = allocate
    v2776 = allocate
    v2777 = allocate
    return 
}

After Dead Instruction Elimination:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v2589 = truncate v1 to 64 bits, max_bit_size: 254
    v2590 = cast v2589 as u64
    inc_rc v0
    v2591 = lt u64 5, v2590
    constrain v2591 == u1 0
    v2594 = array_get v0, index Field 0
    v2596 = cast v2594 as u4
    v2597 = truncate v2596 to 1 bits, max_bit_size: 4
    v2598 = cast v2597 as u1
    enable_side_effects v2598
    v2599 = and v2594, u8 15
    v2600 = truncate v2599 to 4 bits, max_bit_size: 8
    v2601 = cast v2600 as u4
    inc_rc v0
    v2602 = lt u64 1, v2590
    v2603 = mul v2598, v2602
    enable_side_effects v2603
    v2604 = array_get v0, index Field 1
    v2606 = cast v2604 as u4
    v2607 = and v2604, u8 15
    v2608 = truncate v2607 to 4 bits, max_bit_size: 8
    v2609 = cast v2608 as u4
    v2610 = not v2602
    enable_side_effects v2598
    v2611 = cast v2602 as u4
    v2612 = cast v2610 as u4
    v2613 = mul v2611, v2601
    v2614 = mul v2612, v2601
    v2615 = add v2613, v2614
    v2616 = mul v2611, v2606
    v2617 = mul v2611, v2609
    v2618 = lt u64 2, v2590
    v2619 = mul v2598, v2618
    enable_side_effects v2619
    v2620 = array_get v0, index Field 2
    v2622 = cast v2620 as u4
    v2623 = and v2620, u8 15
    v2624 = truncate v2623 to 4 bits, max_bit_size: 8
    v2625 = cast v2624 as u4
    v2626 = not v2618
    enable_side_effects v2598
    v2627 = cast v2618 as u4
    v2628 = cast v2626 as u4
    v2629 = mul v2627, v2615
    v2630 = mul v2628, v2615
    v2631 = add v2629, v2630
    v2632 = mul v2627, v2616
    v2633 = mul v2628, v2616
    v2634 = add v2632, v2633
    v2635 = mul v2627, v2617
    v2636 = mul v2628, v2617
    v2637 = add v2635, v2636
    v2638 = mul v2627, v2622
    v2639 = mul v2627, v2625
    v2640 = lt u64 3, v2590
    v2641 = mul v2598, v2640
    enable_side_effects v2641
    v2648 = not v2640
    enable_side_effects v2598
    v2649 = cast v2640 as u4
    v2650 = cast v2648 as u4
    v2651 = mul v2649, v2631
    v2652 = mul v2650, v2631
    v2653 = add v2651, v2652
    v2654 = mul v2649, v2634
    v2655 = mul v2650, v2634
    v2656 = add v2654, v2655
    v2657 = mul v2649, v2637
    v2658 = mul v2650, v2637
    v2659 = add v2657, v2658
    v2660 = mul v2649, v2638
    v2661 = mul v2650, v2638
    v2662 = add v2660, v2661
    v2663 = mul v2649, v2639
    v2664 = mul v2650, v2639
    v2665 = add v2663, v2664
    v2668 = lt u64 4, v2590
    v2669 = mul v2598, v2668
    enable_side_effects v2669
    v2676 = not v2668
    enable_side_effects v2598
    v2677 = cast v2668 as u4
    v2678 = cast v2676 as u4
    v2679 = mul v2677, v2653
    v2680 = mul v2678, v2653
    v2681 = add v2679, v2680
    v2682 = mul v2677, v2656
    v2683 = mul v2678, v2656
    v2684 = add v2682, v2683
    v2685 = mul v2677, v2659
    v2686 = mul v2678, v2659
    v2687 = add v2685, v2686
    v2688 = mul v2677, v2662
    v2689 = mul v2678, v2662
    v2690 = add v2688, v2689
    v2691 = mul v2677, v2665
    v2692 = mul v2678, v2665
    v2693 = add v2691, v2692
    v2702 = not v2598
    enable_side_effects v2702
    v2703 = sub v2590, u64 1
    v2704 = cast v2702 as u64
    v2705 = mul v2703, v2704
    range_check v2705 to 64 bits
    v2706 = lt u64 0, v2703
    v2707 = mul v2702, v2706
    enable_side_effects v2707
    v2708 = array_get v0, index u64 1
    v2710 = cast v2708 as u4
    v2711 = and v2708, u8 15
    v2712 = truncate v2711 to 4 bits, max_bit_size: 8
    v2713 = cast v2712 as u4
    enable_side_effects v2702
    v2715 = cast v2706 as u4
    v2717 = mul v2715, v2710
    v2718 = mul v2715, v2713
    range_check v2705 to 64 bits
    v2719 = lt u64 1, v2703
    v2720 = mul v2702, v2719
    enable_side_effects v2720
    v2721 = array_get v0, index u64 2
    v2723 = cast v2721 as u4
    v2724 = and v2721, u8 15
    v2725 = truncate v2724 to 4 bits, max_bit_size: 8
    v2726 = cast v2725 as u4
    v2727 = not v2719
    enable_side_effects v2702
    v2728 = cast v2719 as u4
    v2729 = cast v2727 as u4
    v2730 = mul v2728, v2717
    v2731 = mul v2729, v2717
    v2732 = add v2730, v2731
    v2733 = mul v2728, v2718
    v2734 = mul v2729, v2718
    v2735 = add v2733, v2734
    v2736 = mul v2728, v2723
    v2737 = mul v2728, v2726
    enable_side_effects u1 1
    v2738 = cast v2598 as u4
    v2739 = cast v2702 as u4
    v2740 = mul v2738, v2681
    v2741 = mul v2739, v2732
    v2742 = add v2740, v2741
    v2743 = mul v2738, v2684
    v2744 = mul v2739, v2735
    v2745 = add v2743, v2744
    v2746 = mul v2738, v2687
    v2747 = mul v2739, v2736
    v2748 = add v2746, v2747
    v2749 = mul v2738, v2690
    v2750 = mul v2739, v2737
    v2751 = add v2749, v2750
    v2752 = mul v2738, v2693
    v2757 = mul Field 2, v1
    v2758 = cast v2598 as Field
    v2759 = add v2757, v2758
    v2760 = sub v2759, Field 2
    constrain v2760 == Field 5
    v2763 = eq v2742, u4 15
    v2764 = eq v2745, u4 1
    v2765 = mul v2763, v2764
    v2766 = eq v2748, u4 12
    v2767 = mul v2765, v2766
    v2768 = eq v2751, u4 11
    v2769 = mul v2767, v2768
    v2770 = eq v2752, u4 8
    v2771 = mul v2769, v2770
    constrain v2771 == u1 1
    range_check u8 148 to 8 bits
    return 
}

After Fill Internal Slice Dummy Data:
acir fn main f0 {
  b0(v0: [u8; 5], v1: Field):
    inc_rc v0
    inc_rc v0
    v2778 = truncate v1 to 64 bits, max_bit_size: 254
    v2779 = cast v2778 as u64
    inc_rc v0
    v2780 = lt u64 5, v2779
    constrain v2780 == u1 0
    v2781 = array_get v0, index Field 0
    v2782 = cast v2781 as u4
    v2783 = truncate v2782 to 1 bits, max_bit_size: 4
    v2784 = cast v2783 as u1
    enable_side_effects v2784
    v2785 = and v2781, u8 15
    v2786 = truncate v2785 to 4 bits, max_bit_size: 8
    v2787 = cast v2786 as u4
    inc_rc v0
    v2788 = lt u64 1, v2779
    v2789 = mul v2784, v2788
    enable_side_effects v2789
    v2790 = array_get v0, index Field 1
    v2791 = cast v2790 as u4
    v2792 = and v2790, u8 15
    v2793 = truncate v2792 to 4 bits, max_bit_size: 8
    v2794 = cast v2793 as u4
    v2795 = not v2788
    enable_side_effects v2784
    v2796 = cast v2788 as u4
    v2797 = cast v2795 as u4
    v2798 = mul v2796, v2787
    v2799 = mul v2797, v2787
    v2800 = add v2798, v2799
    v2801 = mul v2796, v2791
    v2802 = mul v2796, v2794
    v2803 = lt u64 2, v2779
    v2804 = mul v2784, v2803
    enable_side_effects v2804
    v2805 = array_get v0, index Field 2
    v2806 = cast v2805 as u4
    v2807 = and v2805, u8 15
    v2808 = truncate v2807 to 4 bits, max_bit_size: 8
    v2809 = cast v2808 as u4
    v2810 = not v2803
    enable_side_effects v2784
    v2811 = cast v2803 as u4
    v2812 = cast v2810 as u4
    v2813 = mul v2811, v2800
    v2814 = mul v2812, v2800
    v2815 = add v2813, v2814
    v2816 = mul v2811, v2801
    v2817 = mul v2812, v2801
    v2818 = add v2816, v2817
    v2819 = mul v2811, v2802
    v2820 = mul v2812, v2802
    v2821 = add v2819, v2820
    v2822 = mul v2811, v2806
    v2823 = mul v2811, v2809
    v2824 = lt u64 3, v2779
    v2825 = mul v2784, v2824
    enable_side_effects v2825
    v2826 = not v2824
    enable_side_effects v2784
    v2827 = cast v2824 as u4
    v2828 = cast v2826 as u4
    v2829 = mul v2827, v2815
    v2830 = mul v2828, v2815
    v2831 = add v2829, v2830
    v2832 = mul v2827, v2818
    v2833 = mul v2828, v2818
    v2834 = add v2832, v2833
    v2835 = mul v2827, v2821
    v2836 = mul v2828, v2821
    v2837 = add v2835, v2836
    v2838 = mul v2827, v2822
    v2839 = mul v2828, v2822
    v2840 = add v2838, v2839
    v2841 = mul v2827, v2823
    v2842 = mul v2828, v2823
    v2843 = add v2841, v2842
    v2844 = lt u64 4, v2779
    v2845 = mul v2784, v2844
    enable_side_effects v2845
    v2846 = not v2844
    enable_side_effects v2784
    v2847 = cast v2844 as u4
    v2848 = cast v2846 as u4
    v2849 = mul v2847, v2831
    v2850 = mul v2848, v2831
    v2851 = add v2849, v2850
    v2852 = mul v2847, v2834
    v2853 = mul v2848, v2834
    v2854 = add v2852, v2853
    v2855 = mul v2847, v2837
    v2856 = mul v2848, v2837
    v2857 = add v2855, v2856
    v2858 = mul v2847, v2840
    v2859 = mul v2848, v2840
    v2860 = add v2858, v2859
    v2861 = mul v2847, v2843
    v2862 = mul v2848, v2843
    v2863 = add v2861, v2862
    v2864 = not v2784
    enable_side_effects v2864
    v2865 = sub v2779, u64 1
    v2866 = cast v2864 as u64
    v2867 = mul v2865, v2866
    range_check v2867 to 64 bits
    v2868 = lt u64 0, v2865
    v2869 = mul v2864, v2868
    enable_side_effects v2869
    v2870 = array_get v0, index u64 1
    v2871 = cast v2870 as u4
    v2872 = and v2870, u8 15
    v2873 = truncate v2872 to 4 bits, max_bit_size: 8
    v2874 = cast v2873 as u4
    enable_side_effects v2864
    v2875 = cast v2868 as u4
    v2876 = mul v2875, v2871
    v2877 = mul v2875, v2874
    range_check v2867 to 64 bits
    v2878 = lt u64 1, v2865
    v2879 = mul v2864, v2878
    enable_side_effects v2879
    v2880 = array_get v0, index u64 2
    v2881 = cast v2880 as u4
    v2882 = and v2880, u8 15
    v2883 = truncate v2882 to 4 bits, max_bit_size: 8
    v2884 = cast v2883 as u4
    v2885 = not v2878
    enable_side_effects v2864
    v2886 = cast v2878 as u4
    v2887 = cast v2885 as u4
    v2888 = mul v2886, v2876
    v2889 = mul v2887, v2876
    v2890 = add v2888, v2889
    v2891 = mul v2886, v2877
    v2892 = mul v2887, v2877
    v2893 = add v2891, v2892
    v2894 = mul v2886, v2881
    v2895 = mul v2886, v2884
    enable_side_effects u1 1
    v2896 = cast v2784 as u4
    v2897 = cast v2864 as u4
    v2898 = mul v2896, v2851
    v2899 = mul v2897, v2890
    v2900 = add v2898, v2899
    v2901 = mul v2896, v2854
    v2902 = mul v2897, v2893
    v2903 = add v2901, v2902
    v2904 = mul v2896, v2857
    v2905 = mul v2897, v2894
    v2906 = add v2904, v2905
    v2907 = mul v2896, v2860
    v2908 = mul v2897, v2895
    v2909 = add v2907, v2908
    v2910 = mul v2896, v2863
    v2911 = mul Field 2, v1
    v2912 = cast v2784 as Field
    v2913 = add v2911, v2912
    v2914 = sub v2913, Field 2
    constrain v2914 == Field 5
    v2915 = eq v2900, u4 15
    v2916 = eq v2903, u4 1
    v2917 = mul v2915, v2916
    v2918 = eq v2906, u4 12
    v2919 = mul v2917, v2918
    v2920 = eq v2909, u4 11
    v2921 = mul v2919, v2920
    v2922 = eq v2910, u4 8
    v2923 = mul v2921, v2922
    constrain v2923 == u1 1
    range_check u8 148 to 8 bits
    return 
}

