name: test-integration

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ./compiler/integration-tests/**
  schedule:
    - cron: "0 2 * * *" # Run nightly at 2 AM UTC
  push:
    branches:
      - kh-recursive-e2e

jobs:
  wasm-packages-build-test:
    runs-on: ubuntu-latest
    env:
      CACHED_PATH: /tmp/nix-cache

    steps:
      - name: Checkout noir sources
        uses: actions/checkout@v4

      - name: Checkout acvm sources
        uses: actions/checkout@v3 # v3 is needed here otherwise this fails in local execution
        with:
          repository: noir-lang/acvm
          path: acvm

      - uses: nixbuild/nix-quick-install-action@v25
        with:
          nix_conf: |
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
            keep-outputs = true
      - name: Restore and cache Nix store - ${{ matrix.id }}
        uses: nix-community/cache-nix-action@v4
        with:
          # save a new cache every time ci file changes
          key: ${{ runner.os }}-flake-wasm-${{ hashFiles('*.lock') }}
          restore-keys: |
            ${{ runner.os }}-flake-wasm
            gc-linux: true
            gc-max-store-size-linux: 1000000000
            
            purge-caches: true
            purge-key: ${{ runner.os }}-flake-wasm
            purge-created: true
            purge-created-max-age: 42

      # - name: Setup Nix
      #   uses: cachix/install-nix-action@v22
      #   with:
      #     nix_path: nixpkgs=channel:nixos-23.05
      #     github_access_token: ${{ secrets.GITHUB_TOKEN }}

      # - uses: cachix/cachix-action@v12
      #   with:
      #     name: barretenberg
      #     authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"


      - name: Build noir_wasm package
        run: |
          nix build -L .#noir_wasm
          echo "UPLOAD_PATH=$(readlink -f ./result/noir_wasm)" >> $GITHUB_ENV
          cp -r ./result/noir_wasm/nodejs ./compiler/wasm
          cp -r ./result/noir_wasm/web ./compiler/wasm

      - name: Upload `noir_wasm` artifact
        uses: actions/upload-artifact@v3
        with:
          name: noir_wasm
          path: ${{ env.UPLOAD_PATH }}
          retention-days: 3

      - name: Build noirc_abi_wasm package
        run: |
          nix build -L .#noirc_abi_wasm
          echo "UPLOAD_PATH=$(readlink -f ./result/noirc_abi_wasm)" >> $GITHUB_ENV
          cp -r ./result/noirc_abi_wasm/nodejs ./tooling/noirc_abi_wasm
          cp -r ./result/noirc_abi_wasm/web ./tooling/noirc_abi_wasm

      - name: Upload `noirc_abi_wasm` artifact
        uses: actions/upload-artifact@v3
        with:
          name: noirc_abi_wasm
          path: ${{ env.UPLOAD_PATH }}
          retention-days: 3

      - name: Install Yarn dependencies
        uses: ./.github/actions/setup

      - name: Setup `integration-tests`
        run: |
          yarn workspace @noir-lang/source-resolver build
          yarn workspace @noir-lang/noir_js build

      - name: Run `integration-tests`
        run: |
          yarn test:integration

      - name: Alert on nightly test failure
        uses: JasonEtco/create-an-issue@v2
        if: ${{ failure() && github.event_name == 'schedule' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_NAME: ${{ github.workflow }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          update_existing: true
          filename: .github/NIGHTLY_TEST_FAILURE.md
