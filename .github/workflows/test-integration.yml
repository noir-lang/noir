name: test-integration

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ./compiler/integration-tests/**
  schedule:
    - cron: "0 2 * * *" # Run nightly at 2 AM UTC

jobs:
  build-nargo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]

    steps:
      - name: Checkout Noir repo
        uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@1.66.0

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true
          save-if: ${{ github.event_name != 'merge_group' }}

      - name: Build Nargo
        run: cargo build --package nargo_cli --release

      - name: Package artifacts
        run: |
          mkdir dist
          cp ./target/release/nargo ./dist/nargo
          7z a -ttar -so -an ./dist/* | 7z a -si ./nargo-x86_64-unknown-linux-gnu.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: nargo
          path: ./dist/*
          retention-days: 3

  build-wasm:
    runs-on: ubuntu-latest
    env:
      CACHED_PATH: /tmp/nix-cache

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-23.05
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: barretenberg
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build wasm package
        run: |
          nix build -L .#noir_wasm

      - name: Export cache from nix store
        if: ${{ steps.cache.outputs.cache-hit != 'true' && github.event_name != 'merge_group' }}
        run: |
          nix copy --to "file://${{ env.CACHED_PATH }}?compression=zstd&parallel-compression=true" .#noir-wasm-cargo-artifacts

      - uses: actions/cache/save@v3
        # Don't create cache entries for the merge queue.
        if: ${{ steps.cache.outputs.cache-hit != 'true' && github.event_name != 'merge_group' }}
        with:
          path: ${{ env.CACHED_PATH }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Dereference symlink
        run: echo "UPLOAD_PATH=$(readlink -f ./result/noir_wasm)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: noir_wasm
          path: ${{ env.UPLOAD_PATH }}
          retention-days: 3

  build-noirc:
    runs-on: ubuntu-latest
    env:
      CACHED_PATH: /tmp/nix-cache

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-23.05
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v12
        with:
          name: barretenberg
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Restore nix store cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ${{ env.CACHED_PATH }}
          key: ${{ runner.os }}-flake-abi-wasm-${{ hashFiles('*.lock') }}

      # Based on https://github.com/marigold-dev/deku/blob/b5016f0cf4bf6ac48db9111b70dd7fb49b969dfd/.github/workflows/build.yml#L26
      - name: Copy cache into nix store
        if: steps.cache.outputs.cache-hit == 'true'
        # We don't check the signature because we're the one that created the cache
        run: |
          for narinfo in ${{ env.CACHED_PATH }}/*.narinfo; do
            path=$(head -n 1 "$narinfo" | awk '{print $2}')
            nix copy --no-check-sigs --from "file://${{ env.CACHED_PATH }}" "$path"
          done

      - name: Build noirc_abi_wasm
        run: |
          nix build -L .#noirc_abi_wasm
          cp -r ./result/noirc_abi_wasm/nodejs ./tooling/noirc_abi_wasm
          cp -r ./result/noirc_abi_wasm/web ./tooling/noirc_abi_wasm

      - name: Export cache from nix store
        if: ${{ steps.cache.outputs.cache-hit != 'true' && github.event_name != 'merge_group' }}
        run: |
          nix copy --to "file://${{ env.CACHED_PATH }}?compression=zstd&parallel-compression=true" .#noirc-abi-wasm-cargo-artifacts

      - uses: actions/cache/save@v3
        # Don't create cache entries for the merge queue.
        if: ${{ steps.cache.outputs.cache-hit != 'true' && github.event_name != 'merge_group' }}
        with:
          path: ${{ env.CACHED_PATH }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Dereference symlink
        run: echo "UPLOAD_PATH=$(readlink -f ./result/noirc_abi_wasm)" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: noirc_abi_wasm
          path: ${{ env.UPLOAD_PATH }}
          retention-days: 10

  test-solidity-verifier:
    runs-on: ubuntu-latest
    needs: [build-wasm, build-nargo, build-noirc]
    env:
      CACHED_PATH: /tmp/nix-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download nargo binary
        uses: actions/download-artifact@v3
        with:
          name: nargo
          path: ./nargo

      - name: Download wasm package artifact
        uses: actions/download-artifact@v3
        with:
          name: noir_wasm
          path: ./compiler/wasm

      - name: Download noirc package artifact
        uses: actions/download-artifact@v3
        with:
          name: noirc_abi_wasm
          path: ./tooling/noirc_abi_wasm

      - name: Set nargo on PATH
        run: |
          nargo_binary="${{ github.workspace }}/nargo/nargo"
          chmod +x $nargo_binary
          echo "$(dirname $nargo_binary)" >> $GITHUB_PATH
          export PATH="$PATH:$(dirname $nargo_binary)"
          nargo -V

      - name: Install Yarn dependencies
        uses: ./.github/actions/setup

      - name: Install jq
        run: sudo apt-get install jq

      - name: Install wasm-bindgen-cli
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-bindgen-cli@0.2.86

      - name: Install toml2json
        uses: taiki-e/install-action@v2
        with:
          tool: toml2json@1.3.1

      - name: Install wasm-opt
        run: |
          npm i wasm-opt -g

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Anvil
        run: |
          anvil > /dev/null 2>&1 &
          sleep 10

      - name: Create new Foundry project
        run: forge init --no-git --no-commit --force foundry-project

      - name: Run codegen-verifier for 1_mul
        working-directory: tooling/nargo_cli/tests/execution_success/1_mul
        run: nargo codegen-verifier

      - name: Run codegen-verifier for main
        working-directory: compiler/integration-tests/test/circuits/main
        run: nargo codegen-verifier

      - name: Copy compiled contracts
        run: |
          cp tooling/nargo_cli/tests/execution_success/1_mul/contract/1_mul/plonk_vk.sol foundry-project/src/1_mul.sol
          cp compiler/integration-tests/test/circuits/main/contract/main/plonk_vk.sol foundry-project/src/main.sol

      - name: Forge build
        working-directory: foundry-project
        run: forge build

      - name: Forge deploy
        working-directory: foundry-project
        run: |
          forge create --rpc-url http://127.0.0.1:8545 --mnemonic "test test test test test test test test test test test junk" src/1_mul.sol:UltraVerifier --json > mul_output.json
          forge create --rpc-url http://127.0.0.1:8545 --mnemonic "test test test test test test test test test test test junk" src/main.sol:UltraVerifier  --json > main_output.json


      - name: Setup `integration-tests`
        run: |
          yarn workspace @noir-lang/source-resolver build
          yarn workspace @noir-lang/acvm_js build
          yarn workspace @noir-lang/noir_js build

      - name: Run `integration-tests`
        run: |
          yarn test:integration

      - name: Alert on nightly test failure
        uses: JasonEtco/create-an-issue@v2
        if: ${{ failure() && github.event_name == 'schedule' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_NAME: ${{ github.workflow }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          update_existing: true
          filename: .github/NIGHTLY_TEST_FAILURE.md
