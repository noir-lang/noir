name: Formatting

on:
  pull_request:
  merge_group:
  push:
    branches:
      - master

# This will cancel previous runs when a branch or PR is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  clippy:
    name: cargo clippy
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    env:
      RUSTFLAGS: -Dwarnings

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@1.74.1
        with:
          targets: ${{ matrix.target }}
          components: clippy, rustfmt

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true
          save-if: ${{ github.event_name != 'merge_group' }}

      - name: Run `cargo clippy`
        run: cargo clippy --all-targets --workspace --locked --release

      - name: Run `cargo fmt`
        run: cargo fmt --all --check

  eslint:
    name: eslint
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Yarn dependencies
        uses: ./.github/actions/setup

      - name: Run `yarn lint`
        run: yarn lint

  build-nargo:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout Noir repo
        uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@1.74.1

      - uses: Swatinem/rust-cache@v2
        with:
          key: x86_64-unknown-linux-gnu
          cache-on-failure: true
          save-if: ${{ github.event_name != 'merge_group' }}

      - name: Build Nargo
        run: cargo build --package nargo_cli --release

      - name: Package artifacts
        run: |
          mkdir dist
          cp ./target/release/nargo ./dist/nargo
          7z a -ttar -so -an ./dist/* | 7z a -si ./nargo-x86_64-unknown-linux-gnu.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nargo
          path: ./dist/*
          retention-days: 3

  nargo_fmt:
    needs: [build-nargo]
    name: Nargo fmt
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download nargo binary
        uses: actions/download-artifact@v4
        with:
          name: nargo
          path: ./nargo
            
      - name: Set nargo on PATH
        run: |
          nargo_binary="${{ github.workspace }}/nargo/nargo"
          chmod +x $nargo_binary
          echo "$(dirname $nargo_binary)" >> $GITHUB_PATH
          export PATH="$PATH:$(dirname $nargo_binary)"
          nargo -V

      - name: Format stdlib
        working-directory: ./noir_stdlib
        run: nargo fmt --check

      - name: Format test suite
        working-directory: ./test_programs
        run: ./format.sh check
