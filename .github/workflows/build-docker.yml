name: Build Docker

on:
  push:
    branches:
      - 'feat-test-release'

jobs:
  build:
    name: Build docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d.%H.%M')"
      - name: prepare docker images tags
        id: prep
        run: |
          REGISTRY="ghcr.io"
          IMG="${REGISTRY}/${{ github.repository }}"
          IMAGE=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')
          TAGS="${IMAGE}:${{ github.sha }}"
          TAGS="${TAGS},${IMAGE}:latest,${IMAGE}:v${{ steps.date.outputs.date }}"
          echo ::set-output name=tags::${TAGS}
      # setup Docker buld action
      - run: sudo chown runner:docker /var/run/docker.sock
        if: ${{ env.ACT }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry        
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          tags: ${{ steps.prep.outputs.tags }}
          # tags: |
          # build on feature branches, push only on master branch
          push: true
          target: production
          build-args: |
            NPMRC=${{ secrets.NPMRC }}
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.date.outputs.date }}
      #     release_name: Release v${{ steps.date.outputs.date }}
      #     body_path: CHANGELOG.md
      #     draft: false
      #     prerelease: ${{ github.ref == 'refs/heads/stage' }}
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}
