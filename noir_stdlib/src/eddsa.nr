use crate::hash::poseidon;
use crate::ec::consts::te::baby_jubjub;
use crate::ec::tecurve::affine::Point as TEPoint;
use crate::field;

fn eddsa_poseidon_verify(
    pub_key_x: Field,
    pub_key_y: Field,
    signature_s: Field,
    signature_r8_x: Field,
    signature_r8_y: Field,
    message: Field,
) -> bool {
    // Verifies by testing:
    // S * B8 = R8 + H(R8, A, m) * A8

    let bjj = baby_jubjub();

    let pub_key = TEPoint::new(pub_key_x, pub_key_y);
    constrain bjj.curve.contains(pub_key);

    let signature_r8 = TEPoint::new(signature_r8_x, signature_r8_y);
    constrain bjj.curve.contains(signature_r8);

    // Ensure S < Subgroup Order
    constrain field::lt_bytes32(signature_s, bjj.suborder);

    // Calculate the h = H(R,A, msg)
    let perm: [Field; 6] = poseidon::bn254::perm::x5_6([
        0,
        signature_r8_x,
        signature_r8_y,
        pub_key_x,
        pub_key_y,
        message,
    ]);
    let hash = perm[0];

    // Calculate second part of the right side:  right2 = h*8*A

    // Multiply by 8 by doubling 3 times. This also ensures that the result is in the subgroup.
    let pub_key_mul_2 = bjj.curve.add(pub_key, pub_key);
    let pub_key_mul_4 = bjj.curve.add(pub_key_mul_2, pub_key_mul_2);
    let pub_key_mul_8 = bjj.curve.add(pub_key_mul_4, pub_key_mul_4);

    // We check that A8 is not zero.
    constrain !pub_key_mul_8.is_zero();

    // Compute the right side: R8 + h * A8
    let right = bjj.curve.add(signature_r8, bjj.curve.mul(hash, pub_key_mul_8));

    // Calculate left side of equation left = S * B8
    let left = bjj.curve.mul(signature_s, bjj.base8);

    left.eq(right)
}
