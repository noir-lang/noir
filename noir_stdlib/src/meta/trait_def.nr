use crate::hash::{Hash, Hasher};
use crate::cmp::Eq;

impl TraitDefinition {
    #[builtin(trait_def_as_trait_constraint)]
    fn as_trait_constraint(_self: Self) -> TraitConstraint {}
}

impl Eq for TraitDefinition {
    fn eq(self, other: Self) -> bool {
        trait_def_eq(self, other)
    }
}

impl Hash for TraitDefinition {
    fn hash<H>(self, state: &mut H) where H: Hasher {
        state.write(trait_def_hash(self));
    }
}

#[builtin(trait_def_eq)]
fn trait_def_eq(_first: TraitDefinition, _second: TraitDefinition) -> bool {}

#[builtin(trait_def_hash)]
fn trait_def_hash(_def: TraitDefinition) -> Field {}
