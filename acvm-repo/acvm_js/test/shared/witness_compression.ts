// Solved witness for noir program (x = 1, y = 2)
//
// fn main(x : Field, y : pub Field) -> pub Field {
//   assert(x != y);
//   x + y
// }
//
// Regenerate this byte array by going to the Noir integration tests and running `/test_programs/execution_success/witness_compression`
// after recompiling Noir to print the witness byte array to be written to file after execution

export const expectedCompressedWitnessMap = Uint8Array.from([
  31, 139, 8, 0, 0, 0, 0, 0, 2, 255, 165, 206, 193, 13, 192, 16, 24, 134, 97, 213, 118, 31, 173, 5, 172, 34, 56, 136,
  196, 229, 151, 112, 229, 224, 110, 8, 49, 147, 109, 12, 241, 189, 3, 60, 121, 121, 157, 148, 180, 9, 163, 77, 31, 173,
  43, 108, 101, 159, 162, 35, 234, 108, 43, 129, 245, 93, 48, 241, 115, 252, 226, 198, 137, 7, 38, 196, 11, 19, 242, 0,
  91, 126, 196, 195, 172, 1, 0, 0,
]);

export const expectedWitnessMap = new Map([
  [0, '0x0000000000000000000000000000000000000000000000000000000000000001'],
  [1, '0x0000000000000000000000000000000000000000000000000000000000000002'],
  [2, '0x0000000000000000000000000000000000000000000000000000000000000001'],
  [3, '0x0000000000000000000000000000000000000000000000000000000000000001'],
  [4, '0x0000000000000000000000000000000000000000000000000000000000000000'],
  [5, '0x0000000000000000000000000000000000000000000000000000000000000003'],
]);
